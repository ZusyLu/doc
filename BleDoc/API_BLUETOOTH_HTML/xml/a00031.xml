<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="a00031" kind="group">
    <compoundname>sl_bt_system</compoundname>
    <title>System</title>
    <innergroup refid="a00032">sl_bt_evt_system_boot</innergroup>
    <innergroup refid="a00033">sl_bt_evt_system_error</innergroup>
    <innergroup refid="a00034">sl_bt_evt_system_hardware_error</innergroup>
    <innergroup refid="a00035">sl_bt_evt_system_external_signal</innergroup>
    <innergroup refid="a00036">sl_bt_evt_system_awake</innergroup>
    <innergroup refid="a00037">sl_bt_evt_system_soft_timer</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="a00031_1ga3ddbb71683836007ff79c6108b60b007" prot="public" static="no">
        <name>sl_bt_system_boot_mode_t</name>
        <enumvalue id="a00031_1gga3ddbb71683836007ff79c6108b60b007a2cce73bb72159724307ac13f6ace8f93" prot="public">
          <name>sl_bt_system_boot_mode_normal</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x0) Boot to normal mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1gga3ddbb71683836007ff79c6108b60b007a605048490cc928420f710e6fadc7fec4" prot="public">
          <name>sl_bt_system_boot_mode_uart_dfu</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x1) Boot to UART DFU mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1gga3ddbb71683836007ff79c6108b60b007a900402465c3be9082747503171271920" prot="public">
          <name>sl_bt_system_boot_mode_ota_dfu</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x2) Boot to OTA DFU mode </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies the mode that the system will boot into. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="251" column="1" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="250" bodyend="255"/>
      </memberdef>
      <memberdef kind="enum" id="a00031_1gabeb0cee19ac79ff0d4789a07e8e185af" prot="public" static="no">
        <name>sl_bt_system_linklayer_config_key_t</name>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa68a0cbc3f93d963b09d64aae568cdc2f" prot="public">
          <name>sl_bt_system_linklayer_config_key_halt</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x1) Same as system_halt command, value-0 Stop Radio 1- Start Radio </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afafab76ca6260813bf33db78930d8a9dd4" prot="public">
          <name>sl_bt_system_linklayer_config_key_priority_range</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x2) Sets the RAIL priority_mapping offset field of the link layer priority configuration structure to the first byte of the value field. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa90620a0dbd60633e8be80f9c63d34622" prot="public">
          <name>sl_bt_system_linklayer_config_key_scan_channels</name>
          <initializer>= 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x3) Sets channels to scan on. The first byte of the value is the channel map. 0x1 = Channel 37, 0x2 = Channel 38, 0x4 = Channel 39 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa926a6bc250ff309ce6600b52150f8a8f" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_flags</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x4) Sets the link layer configuration flags. The value is a little endian 32-bit integer. Flag Values:<itemizedlist>
<listitem><para>0x00000001 - Disable Feature Exchange in peripheral role of the connection</para></listitem><listitem><para>0x00000002 - Disable Feature Exchange in central role of the connection </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa6ec5886d8beb7b13096569d73ea7a355" prot="public">
          <name>sl_bt_system_linklayer_config_key_clr_flags</name>
          <initializer>= 0x5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x5) The value is flags to clear. Flags are the same as in SET_FLAGS command. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa9117d6eba7cdd6ef1ef339cae5821e2e" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_afh_interval</name>
          <initializer>= 0x7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x7) Set afh_scan_interval field of Link Layer priority configuration structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa99c69b22ddee000e771b8f7f64bd095c" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_priority_table</name>
          <initializer>= 0x9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x9) The value contains a priority table to be copied over the existing table. If the value is smaller than the full table, only those values are updated. See sl_bt_bluetooth_ll_priorities struct for the definition of a priority table. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa919037d6e74be8ab9b0e0d30652c1475" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_rx_packet_filtering</name>
          <initializer>= 0xa</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0xa) Configure and enable or disable RX packet filtering feature. Value: &gt;= 5 bytes.<itemizedlist>
<listitem><para>Byte 1 - The filter count</para></listitem><listitem><para>Byte 2 - The filter offset</para></listitem><listitem><para>Byte 3 - The length of the filter list</para></listitem><listitem><para>Byte 4 - The bitmask flags</para></listitem><listitem><para>Rest of the data - The filter list </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa14c5887377146d9fd22a8e0b3af552c5" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_simultaneous_scanning</name>
          <initializer>= 0xb</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0xb) Enable or disable simultaneous scanning on the 1M and Coded PHYs. Value: 1 byte.<itemizedlist>
<listitem><para>0 - Disable simultaneous scanning.</para></listitem><listitem><para>1 - Enable simultaneous scanning. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa3a4a49e958ba48f39575e5c9f22760b5" prot="public">
          <name>sl_bt_system_linklayer_config_key_set_channelmap_flags</name>
          <initializer>= 0xc</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0xc) Configure channelmap adaptivity flags. Value: 4 bytes. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00031_1ggabeb0cee19ac79ff0d4789a07e8e185afa6b178d0975c5d1ad95c4f0d9d19cfe47" prot="public">
          <name>sl_bt_system_linklayer_config_key_power_control_golden_range</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(0x10) Power control golden range configuration. The first byte of the value is the lower boundary and the second byte is the upper boundary. Values are in dBm. Set golden range parameters. Value: 8 bytes.<itemizedlist>
<listitem><para>Byte 1 - Minimal RSSI on 1M PHY</para></listitem><listitem><para>Byte 2 - Maximal RSSI on 1M PHY</para></listitem><listitem><para>Byte 3 - Minimal RSSI on 2M PHY</para></listitem><listitem><para>Byte 4 - Maximal RSSI on 2M PHY</para></listitem><listitem><para>Byte 5 - Minimal RSSI on Coded PHY S=8</para></listitem><listitem><para>Byte 6 - Maximal RSSI on Coded PHY S=8</para></listitem><listitem><para>Byte 7 - Minimal RSSI on Coded PHY S=2</para></listitem><listitem><para>Byte 8 - Maximal RSSI on Coded PHY S=2 </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>These Keys are used to configure Link Layer Operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="261" column="1" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="260" bodyend="635"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00031_1gaf0d6420f7a8ee4ee2875e5db834e4138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_hello</definition>
        <argsstring>()</argsstring>
        <name>sl_bt_system_hello</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify whether the communication between the host and the device is functional.</para><para><bold>NOTE:</bold> This command is available even if the Bluetooth stack has not been started. See <ref refid="a00031_1gad9a6d5812e0c014d0eb4c86f22f216dd" kindref="member">sl_bt_system_start_bluetooth</ref> for description of how the Bluetooth stack is started.</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="789" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gad9a6d5812e0c014d0eb4c86f22f216dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_start_bluetooth</definition>
        <argsstring>()</argsstring>
        <name>sl_bt_system_start_bluetooth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the Bluetooth on-demand start component is not included in the application build, the Bluetooth stack is automatically started at UC initialization time. In this configuration the on-demand start command is not available and the command returns the error SL_STATUS_NOT_AVAILABLE.</para><para>When the Bluetooth on-demand start component is included in the application build, this command is used by the application to request starting the Bluetooth stack when the application needs it. If the command returns a success result, the stack starts to asynchronously allocate the resources and configure the Bluetooth stack based on the configuration passed at UC initialization time.</para><para>Successful start of the stack is indicated by the <ref refid="a00032" kindref="compound">sl_bt_evt_system_boot</ref> event. The configured classes and Bluetooth stack features are available after the application has received the <ref refid="a00032" kindref="compound">sl_bt_evt_system_boot</ref> event. If starting the Bluetooth stack fails, the error is indicated to the application with the <ref refid="a00033" kindref="compound">sl_bt_evt_system_error</ref> event.</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga1e6a08f853b9c1d5cf05ead375589e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_stop_bluetooth</definition>
        <argsstring>()</argsstring>
        <name>sl_bt_system_stop_bluetooth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the Bluetooth on-demand start component is not included in the application build, the Bluetooth stack is automatically started at UC initialization time and never stopped. In this configuration the stop command is not available and the command returns the error SL_STATUS_NOT_AVAILABLE.</para><para>When the Bluetooth on-demand start component is included in the application build, this command is used by the application to stop the Bluetooth stack when the application no longer needs it. This command gracefully restores Bluetooth to an idle state by disconnecting any active connections and stopping any on-going advertising and scanning. Any resources that were allocated when the stack was started are freed when the stack is stopped. After this command the BGAPI classes other than <ref refid="a00031" kindref="compound">System</ref> become unavailable. The application can use the command <ref refid="a00031_1gad9a6d5812e0c014d0eb4c86f22f216dd" kindref="member">sl_bt_system_start_bluetooth</ref> in order to continue using Bluetooth later.</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gabf0e8a67a3f653335cb27920863abfaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_get_version</definition>
        <argsstring>(uint16_t *major, uint16_t *minor, uint16_t *patch, uint16_t *build, uint32_t *bootloader, uint32_t *hash)</argsstring>
        <name>sl_bt_system_get_version</name>
        <param>
          <type>uint16_t *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>minor</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>patch</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>build</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>bootloader</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the firmware version information.</para><para><bold>NOTE:</bold> This command is available even if the Bluetooth stack has not been started. See <ref refid="a00031_1gad9a6d5812e0c014d0eb4c86f22f216dd" kindref="member">sl_bt_system_start_bluetooth</ref> for description of how the Bluetooth stack is started.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major release version </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor release version </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">patch</parametername>
</parameternamelist>
<parameterdescription>
<para>Patch release number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">build</parametername>
</parameternamelist>
<parameterdescription>
<para>Build number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bootloader</parametername>
</parameternamelist>
<parameterdescription>
<para>Bootloader version </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Version hash</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gacb06b823fc16f2630a066c72d96cd158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sl_bt_system_reset</definition>
        <argsstring>(uint8_t dfu)</argsstring>
        <name>sl_bt_system_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>dfu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the system. The command does not have a response but it triggers one of the boot events (normal reset or boot to DFU mode) depending on the selected boot mode.</para><para><bold>NOTE:</bold> This command is available even if the Bluetooth stack has not been started. See <ref refid="a00031_1gad9a6d5812e0c014d0eb4c86f22f216dd" kindref="member">sl_bt_system_start_bluetooth</ref> for description of how the Bluetooth stack is started.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dfu</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum <ref refid="a00031_1ga3ddbb71683836007ff79c6108b60b007" kindref="member">sl_bt_system_boot_mode_t</ref>. Boot mode. Values:<itemizedlist>
<listitem><para><bold>sl_bt_system_boot_mode_normal (0x0):</bold> Boot to normal mode</para></listitem><listitem><para><bold>sl_bt_system_boot_mode_uart_dfu (0x1):</bold> Boot to UART DFU mode</para></listitem><listitem><para><bold>sl_bt_system_boot_mode_ota_dfu (0x2):</bold> Boot to OTA DFU mode</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>Events</bold> <itemizedlist>
<listitem><para><ref refid="a00032" kindref="compound">sl_bt_evt_system_boot</ref> - Sent after the device has booted in normal mode.</para></listitem><listitem><para><ref refid="a00029" kindref="compound">sl_bt_evt_dfu_boot</ref> - Sent after the device has booted in UART DFU mode. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga118a2db70124acb277df27767c656618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_halt</definition>
        <argsstring>(uint8_t halt)</argsstring>
        <name>sl_bt_system_halt</name>
        <param>
          <type>uint8_t</type>
          <declname>halt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Force radio to idle state and allow device to sleep. Advertising, scanning, connections, and software timers are halted by this command. Halted operations resume after calling this command with parameter 0. Connections stay alive if the system is resumed before connection supervision timeout.</para><para>Use this command only for a short time period (a few seconds at maximum). Although it halts Bluetooth activity, all tasks and operations still exist inside the stack with their own concepts of time. Halting the system for a long time period may have negative consequences on stack&apos;s internal states.</para><para><bold>NOTE:</bold> The software timer is also halted. Hardware interrupts are the only way to wake up from energy mode 2 when the system is halted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">halt</parametername>
</parameternamelist>
<parameterdescription>
<para>Values:<itemizedlist>
<listitem><para><bold>1:</bold> halt</para></listitem><listitem><para><bold>0:</bold> resume</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="911" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gab87c80f649dda1bb2d55bd43b3658782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_linklayer_configure</definition>
        <argsstring>(uint8_t key, size_t data_len, const uint8_t *data)</argsstring>
        <name>sl_bt_system_linklayer_configure</name>
        <param>
          <type>uint8_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send configuration data to the link layer. This command fine tunes low-level Bluetooth operations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Enum <ref refid="a00031_1gabeb0cee19ac79ff0d4789a07e8e185af" kindref="member">sl_bt_system_linklayer_config_key_t</ref>. Key to configure. Values:<itemizedlist>
<listitem><para><bold>sl_bt_system_linklayer_config_key_halt (0x1):</bold> Same as system_halt command, value-0 Stop Radio 1- Start Radio</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_priority_range (0x2):</bold> Sets the RAIL priority_mapping offset field of the link layer priority configuration structure to the first byte of the value field.</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_scan_channels (0x3):</bold> Sets channels to scan on. The first byte of the value is the channel map. 0x1 = Channel 37, 0x2 = Channel 38, 0x4 = Channel 39</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_flags (0x4):</bold> Sets the link layer configuration flags. The value is a little endian 32-bit integer. Flag Values:<itemizedlist>
<listitem><para>0x00000001 - Disable Feature Exchange in peripheral role of the connection</para></listitem><listitem><para>0x00000002 - Disable Feature Exchange in central role of the connection</para></listitem></itemizedlist>
</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_clr_flags (0x5):</bold> The value is flags to clear. Flags are the same as in SET_FLAGS command.</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_afh_interval (0x7):</bold> Set afh_scan_interval field of Link Layer priority configuration structure.</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_priority_table (0x9):</bold> The value contains a priority table to be copied over the existing table. If the value is smaller than the full table, only those values are updated. See sl_bt_bluetooth_ll_priorities struct for the definition of a priority table.</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_rx_packet_filtering (0xa):</bold> Configure and enable or disable RX packet filtering feature. Value: &gt;= 5 bytes.<itemizedlist>
<listitem><para>Byte 1 - The filter count</para></listitem><listitem><para>Byte 2 - The filter offset</para></listitem><listitem><para>Byte 3 - The length of the filter list</para></listitem><listitem><para>Byte 4 - The bitmask flags</para></listitem><listitem><para>Rest of the data - The filter list</para></listitem></itemizedlist>
</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_simultaneous_scanning (0xb):</bold> Enable or disable simultaneous scanning on the 1M and Coded PHYs. Value: 1 byte.<itemizedlist>
<listitem><para>0 - Disable simultaneous scanning.</para></listitem><listitem><para>1 - Enable simultaneous scanning.</para></listitem></itemizedlist>
</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_set_channelmap_flags (0xc):</bold> Configure channelmap adaptivity flags. Value: 4 bytes.</para></listitem><listitem><para><bold>sl_bt_system_linklayer_config_key_power_control_golden_range (0x10):</bold> Power control golden range configuration. The first byte of the value is the lower boundary and the second byte is the upper boundary. Values are in dBm. Set golden range parameters. Value: 8 bytes.<itemizedlist>
<listitem><para>Byte 1 - Minimal RSSI on 1M PHY</para></listitem><listitem><para>Byte 2 - Maximal RSSI on 1M PHY</para></listitem><listitem><para>Byte 3 - Minimal RSSI on 2M PHY</para></listitem><listitem><para>Byte 4 - Maximal RSSI on 2M PHY</para></listitem><listitem><para>Byte 5 - Minimal RSSI on Coded PHY S=8</para></listitem><listitem><para>Byte 6 - Maximal RSSI on Coded PHY S=8</para></listitem><listitem><para>Byte 7 - Minimal RSSI on Coded PHY S=2</para></listitem><listitem><para>Byte 8 - Maximal RSSI on Coded PHY S=2 </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></parblock></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration data. Length and contents of the data field depend on the key value used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="983" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gad099d114f8173c76f845098833db204e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SL_BGAPI_DEPRECATED sl_status_t</type>
        <definition>SL_BGAPI_DEPRECATED sl_status_t sl_bt_system_set_max_tx_power</definition>
        <argsstring>(int16_t power, int16_t *set_power)</argsstring>
        <name>sl_bt_system_set_max_tx_power</name>
        <param>
          <type>int16_t</type>
          <declname>power</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>set_power</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Deprecated</bold> and replaced by <ref refid="a00031_1ga19566861d594376a52e2e1e7481bef68" kindref="member">sl_bt_system_set_tx_power</ref>.</para><para>Set the global maximum radiated TX power for Bluetooth. This returns the selected power level that is radiated from the antenna at TX. The transmitter power at antenna pin will apply the RF TX path gain to match this setting. RF TX path gain can be set in the Bluetooth configuration. If the GATT server contains a TX power service, the TX Power Level attribute will be updated with the selected maximum power level.</para><para>The selected power level may be less than the specified value if the device does not meet the power requirements. For Bluetooth connections, the maximum TX power is limited to 10 dBm if Adaptive Frequency Hopping (AFH) is not enabled.</para><para>The maximum TX power level can also be configured in the Bluetooth configuration and passed into the Bluetooth stack initialization. By default, the global maximum TX power is 8 dBm.</para><para><bold>NOTE:</bold> Do not use this command while advertising or scanning. Furthermore, the stack does not allow setting TX powers during connections.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">power</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum radiated TX power in 0.1 dBm steps. For example, value 10 means 1 dBm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected maximum radiated TX power</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga19566861d594376a52e2e1e7481bef68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_set_tx_power</definition>
        <argsstring>(int16_t min_power, int16_t max_power, int16_t *set_min, int16_t *set_max)</argsstring>
        <name>sl_bt_system_set_tx_power</name>
        <param>
          <type>int16_t</type>
          <declname>min_power</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>max_power</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>set_min</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>set_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the global minimum and maximum radiated TX power levels for Bluetooth. This returns selected power levels that are radiated from the antenna at TX. The transmitter power at antenna pin will apply the RF TX path gain to match this setting. RF TX path gain can be set in the Bluetooth configuration. If the GATT server contains a TX power service, the TX Power Level attribute will be updated with the selected maximum power level.</para><para>A selected power level may be different than the requested value if the device cannot meet the requirement. For Bluetooth connections, the maximum radiated TX power is limited to 10 dBm if Adaptive Frequency Hopping (AFH) is not enabled.</para><para>The minimum TX power setting is used by LE power control. It has no effect in Bluetooth stack if the LE power control feature is not enabled. However, the application may still use this setting for other purposes, e.g., setting the minimum TX power for DTM transmitter test.</para><para>The minimum and maximum radiated TX power levels can also be configured in the Bluetooth configuration and passed into the Bluetooth stack initialization. By default, the minimum radiated TX power level is configured to -3 dBm and the maximum radiated TX power level to 8 dBm.</para><para><bold>NOTE:</bold> Do not use this command while advertising or scanning. Furthermore, the stack does not allow setting TX powers during connections.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">min_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum radiated TX power. Unit: 0.1 dBm. For example, the value 10 means 1 dBm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum radiated TX power. Unit: 0.1 dBm. For example, the value 10 means 1 dBm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The selected minimum radiated TX power. Unit: 0.1 dBm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The selected maximum radiated TX power. Unit: 0.1 dBm</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1056" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gae59209b1e00b51c09479b21cfabaeaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_get_tx_power_setting</definition>
        <argsstring>(int16_t *support_min, int16_t *support_max, int16_t *set_min, int16_t *set_max, int16_t *rf_path_gain)</argsstring>
        <name>sl_bt_system_get_tx_power_setting</name>
        <param>
          <type>int16_t *</type>
          <declname>support_min</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>support_max</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>set_min</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>set_max</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>rf_path_gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get TX power settings including the minimum and maximum radiated TX power levels the device supports, the minimum and maximum radiated TX power levels currently set in the stack, and the TX RF path gain configuration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">support_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum radiated TX power the device supports. Unit: 0.1 dBm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">support_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum radiated TX power the device supports. Unit: 0.1 dBm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum radiated TX power currently set in stack. Unit: 0.1 dBm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum radiated TX power currently set in stack. Unit: 0.1 dBm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rf_path_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>TX RF path gain. Unit: 0.1 dBm</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1080" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga37077c3856d5b506b9ce38a94fd59bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_set_identity_address</definition>
        <argsstring>(bd_addr address, uint8_t type)</argsstring>
        <name>sl_bt_system_set_identity_address</name>
        <param>
          <type><ref refid="a00115" kindref="compound">bd_addr</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the device&apos;s Bluetooth identity address. The address can be a public device address or a static device address. A valid address set with this command will be written into persistent storage using NVM keys. The stack returns an error if the static device address does not conform to the Bluetooth specification.</para><para>The new address will be effective in the next system reboot. The stack will use the address in the NVM keys when present. Otherwise, it uses the default Bluetooth public device address which is programmed at production.</para><para>The stack treats 00:00:00:00:00:00 and ff:ff:ff:ff:ff:ff as invalid addresses. Therefore, passing one of them into this command will cause the stack to delete the NVM keys and use the default address in the next system reboot.</para><para><bold>Note:</bold> Because the NVM keys are located in flash and flash wearing can occur, avoid calling this command regularly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth identity address in little endian format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Address type<itemizedlist>
<listitem><para><bold>0:</bold> Public device address</para></listitem><listitem><para><bold>1:</bold> Static device address</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gaba752f4351afdd3134cc66c8bde9e0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_get_identity_address</definition>
        <argsstring>(bd_addr *address, uint8_t *type)</argsstring>
        <name>sl_bt_system_get_identity_address</name>
        <param>
          <type><ref refid="a00115" kindref="compound">bd_addr</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the Bluetooth identity address used by the device, which can be a public or random static device address.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth public address in little endian format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Address type<itemizedlist>
<listitem><para><bold>0:</bold> Public device address</para></listitem><listitem><para><bold>1:</bold> Static random address</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga217ef759b05572071fbf0c2168c1981f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_get_random_data</definition>
        <argsstring>(uint8_t length, size_t max_data_size, size_t *data_len, uint8_t *data)</argsstring>
        <name>sl_bt_system_get_random_data</name>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_data_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get random data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of random data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of output buffer passed in <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>On return, set to the length of output data written to <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Random data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga2e185f6632d32051b0f431ea15abcc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_data_buffer_write</definition>
        <argsstring>(size_t data_len, const uint8_t *data)</argsstring>
        <name>sl_bt_system_data_buffer_write</name>
        <param>
          <type>size_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data into the system data buffer. Data will be appended to the end of existing data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga62f5f20b8f8ab750a75380745faea084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_data_buffer_clear</definition>
        <argsstring>()</argsstring>
        <name>sl_bt_system_data_buffer_clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all data from the system data buffer.</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga6a5b4be087b9cfe14368a848a4414cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_bt_system_get_counters</definition>
        <argsstring>(uint8_t reset, uint16_t *tx_packets, uint16_t *rx_packets, uint16_t *crc_errors, uint16_t *failures)</argsstring>
        <name>sl_bt_system_get_counters</name>
        <param>
          <type>uint8_t</type>
          <declname>reset</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>tx_packets</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>rx_packets</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>crc_errors</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>failures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get packet and error counters. Passing a non-zero value also resets counters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reset</parametername>
</parameternamelist>
<parameterdescription>
<para>Reset counters if the parameter value is not zero. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tx_packets</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of successfully transmitted packets </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rx_packets</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of successfully received packets </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">crc_errors</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of received packets with CRC errors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">failures</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radio failures, such as aborted TX/RX packets, scheduling failures, and so on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1gad567f341a1ffcaecbf54a2f02c5318d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SL_BGAPI_DEPRECATED sl_status_t</type>
        <definition>SL_BGAPI_DEPRECATED sl_status_t sl_bt_system_set_soft_timer</definition>
        <argsstring>(uint32_t time, uint8_t handle, uint8_t single_shot)</argsstring>
        <name>sl_bt_system_set_soft_timer</name>
        <param>
          <type>uint32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>single_shot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Deprecated</bold> . Use the sleeptimer component (in platform services category) for timers.</para><para>Start a software timer. Multiple concurrent timers can be running simultaneously. 256 unique timer handles (IDs) are available. The maximum number of concurrent timers is configurable at device initialization. Up to 16 concurrent timers can be configured. The default configuration is 4. As the RAM for storing timer data is pre-allocated at initialization, an application should not configure the amount more than it needs for minimizing RAM usage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Frequency interval of events, which indicates how often to send events in hardware clock ticks (1 second is equal to 32768 ticks).</para><para>The smallest supported interval value is 328, which is around 10 milliseconds. Any parameters between 0 and 328 will be rounded up to 328. The maximum value is 2147483647, which corresponds to about 18.2 hours.</para><para>If <computeroutput>time</computeroutput> is 0, removes the scheduled timer with the same handle. </para></parblock></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer handle to use, which is returned in timeout event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">single_shot</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer mode. Values:<itemizedlist>
<listitem><para><bold>0:</bold> false (timer is repeating)</para></listitem><listitem><para><bold>1:</bold> true (timer runs only once)</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise.</para></simplesect>
<bold>Events</bold> <itemizedlist>
<listitem><para><ref refid="a00037" kindref="compound">sl_bt_evt_system_soft_timer</ref> - Sent after this timer has lapsed. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00031_1ga1fb1c4dcb7b6fc9de1528eb1139ff505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SL_BGAPI_DEPRECATED sl_status_t</type>
        <definition>SL_BGAPI_DEPRECATED sl_status_t sl_bt_system_set_lazy_soft_timer</definition>
        <argsstring>(uint32_t time, uint32_t slack, uint8_t handle, uint8_t single_shot)</argsstring>
        <name>sl_bt_system_set_lazy_soft_timer</name>
        <param>
          <type>uint32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>slack</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>single_shot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Deprecated</bold> . Use the sleeptimer component (in platform services category) for timers.</para><para>Start a software timer with slack. The slack parameter allows the stack to optimize wakeups and save power. The timer event is triggered between time and time + <computeroutput>slack</computeroutput>. See also description of <ref refid="a00031_1gad567f341a1ffcaecbf54a2f02c5318d0" kindref="member">sl_bt_system_set_soft_timer</ref> command.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>An interval between how often to send events in hardware clock ticks (1 second is equal to 32768 ticks).</para><para>The smallest interval value supported is 328, which is around 10 milliseconds. Any parameters between 0 and 328 will be rounded up to 328. The maximum value is 2147483647, which corresponds to about 18.2 hours.</para><para>If <computeroutput>time</computeroutput> is 0, removes the scheduled timer with the same handle. </para></parblock></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slack</parametername>
</parameternamelist>
<parameterdescription>
<para>Slack time in hardware clock ticks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer handle to use, which is returned in timeout event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">single_shot</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer mode. Values:<itemizedlist>
<listitem><para><bold>0:</bold> false (timer is repeating)</para></listitem><listitem><para><bold>1:</bold> true (timer runs only once)</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise.</para></simplesect>
<bold>Events</bold> <itemizedlist>
<listitem><para><ref refid="a00037" kindref="compound">sl_bt_evt_system_soft_timer</ref> - Sent after this timer has lapsed. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="1263" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="a00031_1gaf0fac57922ed80ad7aae24334822e8d6" prot="public" static="no">
        <name>sl_bt_cmd_system_hello_id</name>
        <initializer>0x00010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="210" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga3a6a5b43846695f0ab4e95faea1133d8" prot="public" static="no">
        <name>sl_bt_cmd_system_start_bluetooth_id</name>
        <initializer>0x1c010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="211" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga87d31aa4ce107926d74b14c0c34f7e70" prot="public" static="no">
        <name>sl_bt_cmd_system_stop_bluetooth_id</name>
        <initializer>0x1d010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="212" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga0855a1954dcc65aa3d5206be8713c1b5" prot="public" static="no">
        <name>sl_bt_cmd_system_get_version_id</name>
        <initializer>0x1b010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="213" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gab86213374a5034e07ae6a2673d8dae41" prot="public" static="no">
        <name>sl_bt_cmd_system_reset_id</name>
        <initializer>0x01010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="214" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga797e5ed9959034b27d9059f72ec84f53" prot="public" static="no">
        <name>sl_bt_cmd_system_halt_id</name>
        <initializer>0x0c010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="215" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga3610b0c9f5988d3a8fdfab48a9153ea6" prot="public" static="no">
        <name>sl_bt_cmd_system_linklayer_configure_id</name>
        <initializer>0x0e010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="216" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga518a9d929408c553e71e615da84ef44a" prot="public" static="no">
        <name>sl_bt_cmd_system_set_max_tx_power_id</name>
        <initializer>0x16010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="217" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gae748d0c7017ca269a69c7d439ac5e199" prot="public" static="no">
        <name>sl_bt_cmd_system_set_tx_power_id</name>
        <initializer>0x17010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="218" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gaa5637cb923e5cbbd0124959c60a6f399" prot="public" static="no">
        <name>sl_bt_cmd_system_get_tx_power_setting_id</name>
        <initializer>0x18010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="219" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gaeb483529180081076b201a47377090d8" prot="public" static="no">
        <name>sl_bt_cmd_system_set_identity_address_id</name>
        <initializer>0x13010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="220" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gac78dc11ddda74d30f8a6db70ecc4446f" prot="public" static="no">
        <name>sl_bt_cmd_system_get_identity_address_id</name>
        <initializer>0x15010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="221" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga3898b6186aeebe891b38ad0256301658" prot="public" static="no">
        <name>sl_bt_cmd_system_get_random_data_id</name>
        <initializer>0x0b010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="222" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga3c78562d3605858d814cd434553051de" prot="public" static="no">
        <name>sl_bt_cmd_system_data_buffer_write_id</name>
        <initializer>0x12010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="223" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gadb91ab528137e9a3b276b112a8dbf6d6" prot="public" static="no">
        <name>sl_bt_cmd_system_data_buffer_clear_id</name>
        <initializer>0x14010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="224" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga063ddbc8c7563e2fe68461d82ec41554" prot="public" static="no">
        <name>sl_bt_cmd_system_get_counters_id</name>
        <initializer>0x0f010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="225" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga4f82e4c3b8694302baa02d40a1a47cdb" prot="public" static="no">
        <name>sl_bt_cmd_system_set_soft_timer_id</name>
        <initializer>0x19010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="226" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gaa9519c393a28a5953ed3f130366960e7" prot="public" static="no">
        <name>sl_bt_cmd_system_set_lazy_soft_timer_id</name>
        <initializer>0x1a010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="227" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga63d87679f260751f47d0a58b93d94606" prot="public" static="no">
        <name>sl_bt_rsp_system_hello_id</name>
        <initializer>0x00010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="228" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gac4f4410194a39416c858da84759af7a2" prot="public" static="no">
        <name>sl_bt_rsp_system_start_bluetooth_id</name>
        <initializer>0x1c010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="229" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga1ff9cb22e58eaf315352ce7a90c2b669" prot="public" static="no">
        <name>sl_bt_rsp_system_stop_bluetooth_id</name>
        <initializer>0x1d010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="230" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gad4a18ed56952fe7858d5307b12005452" prot="public" static="no">
        <name>sl_bt_rsp_system_get_version_id</name>
        <initializer>0x1b010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="231" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gad6573ccea79c54c9726d0cb54f820b70" prot="public" static="no">
        <name>sl_bt_rsp_system_reset_id</name>
        <initializer>0x01010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="232" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga11e6c988c281df997561f7e15160edcd" prot="public" static="no">
        <name>sl_bt_rsp_system_halt_id</name>
        <initializer>0x0c010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="233" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga7d4ea019f60ce0b59fad11d796980309" prot="public" static="no">
        <name>sl_bt_rsp_system_linklayer_configure_id</name>
        <initializer>0x0e010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="234" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga77ee4b856644e1344d9bc506f5700e5c" prot="public" static="no">
        <name>sl_bt_rsp_system_set_max_tx_power_id</name>
        <initializer>0x16010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="235" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gacfdb5067225035fd48595274bfca8dce" prot="public" static="no">
        <name>sl_bt_rsp_system_set_tx_power_id</name>
        <initializer>0x17010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="236" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gab0ff849fc05456c4c6907075cc7ce4e8" prot="public" static="no">
        <name>sl_bt_rsp_system_get_tx_power_setting_id</name>
        <initializer>0x18010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="237" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga04b7319cabe44b9ab0bbb19afe3e81e3" prot="public" static="no">
        <name>sl_bt_rsp_system_set_identity_address_id</name>
        <initializer>0x13010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="238" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gad1fa49a8ef270e938e83d944de76c765" prot="public" static="no">
        <name>sl_bt_rsp_system_get_identity_address_id</name>
        <initializer>0x15010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="239" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gacadccdb6a78f5d401a0b04c27feeed49" prot="public" static="no">
        <name>sl_bt_rsp_system_get_random_data_id</name>
        <initializer>0x0b010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="240" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga692219ee909846274e297429c1bf577d" prot="public" static="no">
        <name>sl_bt_rsp_system_data_buffer_write_id</name>
        <initializer>0x12010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="241" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga62740e140ccfbe89f61c663a65144933" prot="public" static="no">
        <name>sl_bt_rsp_system_data_buffer_clear_id</name>
        <initializer>0x14010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="242" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gac30d6bd90cfd5db9e55782313f4111a1" prot="public" static="no">
        <name>sl_bt_rsp_system_get_counters_id</name>
        <initializer>0x0f010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="243" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1gaeb39d75bb0543d6a0d240285de6b032c" prot="public" static="no">
        <name>sl_bt_rsp_system_set_soft_timer_id</name>
        <initializer>0x19010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="244" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00031_1ga3576fddddfdddac38931f91d95687055" prot="public" static="no">
        <name>sl_bt_rsp_system_set_lazy_soft_timer_id</name>
        <initializer>0x1a010020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" line="245" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/btapi/inc/sl_bt_api.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>System. </para>    </briefdescription>
    <detaileddescription>
<para>Commands and events in this class can be used to access and query the local device. </para>    </detaileddescription>
  </compounddef>
</doxygen>
