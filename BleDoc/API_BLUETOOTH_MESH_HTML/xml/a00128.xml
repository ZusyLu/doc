<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="a00128" kind="group">
    <compoundname>sl_btmesh_sensor_server</compoundname>
    <title>Bluetooth Mesh Sensor Server Model</title>
    <innergroup refid="a00129">sl_btmesh_evt_sensor_server_get_request</innergroup>
    <innergroup refid="a00130">sl_btmesh_evt_sensor_server_get_column_request</innergroup>
    <innergroup refid="a00131">sl_btmesh_evt_sensor_server_get_series_request</innergroup>
    <innergroup refid="a00132">sl_btmesh_evt_sensor_server_publish</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00128_1gaf2da67022eb108d7cf6b421d629c7d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_init</definition>
        <argsstring>(uint16_t elem_index, size_t descriptors_len, const uint8_t *descriptors)</argsstring>
        <name>sl_btmesh_sensor_server_init</name>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descriptors_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>descriptors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the Sensor Server model with Sensor Descriptors present at the element. The descriptors are cached and Descriptor Get queries are served without propagating it to the application. All incoming client queries are checked against the cached data. However, only valid requests related to existing sensors are propagated to the the application.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Server model element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptors_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>descriptors</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptors</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Sensor Descriptor State structures submitted as a byte array</para><para>A sensor descriptor represents the attributes describing the sensor data. It does not change throughout the lifetime of the element.</para><para>The following fields are required:<itemizedlist>
<listitem><para>Sensor Property ID: 16 bits</para></listitem><listitem><para>Sensor Positive Tolerance: 12 bits</para></listitem><listitem><para>Sensor Negative Tolerance: 12 bits</para></listitem><listitem><para>Sensor Sampling Function: 8 bits</para></listitem><listitem><para>Sensor Measurement Period: 8 bits</para></listitem><listitem><para>Sensor Update Interval: 8 bits</para></listitem></itemizedlist>
</para><para>Sensor Property ID is a 2-octet value referencing a device property that describes the meaning and the format of data reported by the sensor. The value 0x0000 is prohibited. Valid range is 0x0001 to 0xFFFF. </para></parblock></para></parameterdescription>
</parameteritem>
</parameterlist>
</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00128_1ga7a121e72b9c294bada6b8a759829fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_deinit</definition>
        <argsstring>(uint16_t elem_index)</argsstring>
        <name>sl_btmesh_sensor_server_deinit</name>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deinitialize the Sensor Server functionality. Note that the heap reserved space cannot be freed or reallocated. Reinitializing with greater number of sensors than before will eventually return an out of memory error until the device is reset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Server model element index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00128_1ga3dfce522ea4d9514f48d6b12d2641ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_send_descriptor_status</definition>
        <argsstring>(uint16_t client_address, uint16_t elem_index, uint16_t appkey_index, uint8_t flags, size_t descriptors_len, const uint8_t *descriptors)</argsstring>
        <name>sl_btmesh_sensor_server_send_descriptor_status</name>
        <param>
          <type>uint16_t</type>
          <declname>client_address</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>appkey_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descriptors_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>descriptors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a Descriptor Status message either as a reply to a Get Descriptor client request.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination client address. The address 0x0000 can be used to publish the message according to model configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Server model element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appkey_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The application key index to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>No flags defined currently </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptors_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>descriptors</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptors</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialized Sensor Descriptor states for all sensors within the element consisting one or more 8 bytes structures as follows:<itemizedlist>
<listitem><para>Sensor Property ID: 16 bits</para></listitem><listitem><para>Sensor Positive Tolerance: 12 bits</para></listitem><listitem><para>Sensor Negative Tolerance: 12 bits</para></listitem><listitem><para>Sensor Sampling Function: 8 bits</para></listitem><listitem><para>Sensor Measurement Period: 8 bits</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00128_1gaf102ebbe73110b9ec7992af1a7b7d1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_send_status</definition>
        <argsstring>(uint16_t client_address, uint16_t elem_index, uint16_t appkey_index, uint8_t flags, size_t sensor_data_len, const uint8_t *sensor_data)</argsstring>
        <name>sl_btmesh_sensor_server_send_status</name>
        <param>
          <type>uint16_t</type>
          <declname>client_address</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>appkey_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sensor_data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>sensor_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send Sensor Status message as a reply to a Get client request or as an unsolicited message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination client address. The address 0x0000 can be used to publish the message according to model configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Setup Server model element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appkey_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The application key index to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>No flags defined currently </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>sensor_data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Serialized Sensor Data consisting of one or more Sensor state for each sensor within the element. To simplify processing, the byte array is in TLV format:<itemizedlist>
<listitem><para>1st Property ID: 16 bits</para></listitem><listitem><para>Value Length: 8 bits</para></listitem><listitem><para>Value: variable</para></listitem><listitem><para>2nd Property ID: 16 bits</para></listitem><listitem><para>Value Length: 8 bits</para></listitem><listitem><para>Value: variable</para></listitem><listitem><para>...</para></listitem></itemizedlist>
</para><para>If sensor data was requested for a Property ID that does not exist within the element, the reply must contain the given Property ID with zero length. </para></parblock></para></parameterdescription>
</parameteritem>
</parameterlist>
</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00128_1ga4ef4e4c0a427091020a06e0ecf4152f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_send_column_status</definition>
        <argsstring>(uint16_t client_address, uint16_t elem_index, uint16_t appkey_index, uint8_t flags, uint16_t property_id, size_t sensor_data_len, const uint8_t *sensor_data)</argsstring>
        <name>sl_btmesh_sensor_server_send_column_status</name>
        <param>
          <type>uint16_t</type>
          <declname>client_address</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>appkey_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>property_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sensor_data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>sensor_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send Column Status message as a response to a Column Get client request or as an unsolicited message</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination client address. The address 0x0000 can be used to publish the message according to model configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Client model element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appkey_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The application key index to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>No flags defined currently </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property ID for the sensor. Range: 0x0001 - 0x0ffff for a specific device property, the value 0x0000 is prohibited. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>sensor_data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Byte array containing the serialized Sensor Series Column state in the following format:<itemizedlist>
<listitem><para>Sensor Raw Value X, variable length raw value representing the left corner of a column</para></listitem><listitem><para>Sensor Column Width, variable length raw value representing the width of the column</para></listitem><listitem><para>Sensor Raw Value Y, variable length raw value representing the height of the column</para></listitem></itemizedlist>
</para><para>If the Property ID or the column ID (Raw value X) does not exist, the reply must contain only these two fields, omitting the optional Column Width and Raw Value Y fields. </para></parblock></para></parameterdescription>
</parameteritem>
</parameterlist>
</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="a00128_1gaaff0ed019457e1f487891776f807fff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sl_status_t</type>
        <definition>sl_status_t sl_btmesh_sensor_server_send_series_status</definition>
        <argsstring>(uint16_t client_address, uint16_t elem_index, uint16_t appkey_index, uint8_t flags, uint16_t property_id, size_t sensor_data_len, const uint8_t *sensor_data)</argsstring>
        <name>sl_btmesh_sensor_server_send_series_status</name>
        <param>
          <type>uint16_t</type>
          <declname>client_address</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>elem_index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>appkey_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>property_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sensor_data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>sensor_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send Series Status message as a response to a Series Get client request or as an unsolicited message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination client address. The address 0x0000 can be used to publish the message according to model configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elem_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Client model element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appkey_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The application key index to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>No flags defined currently </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Property ID for the sensor. Range: 0x0001 - 0x0ffff for a specific device property, the value 0x0000 is prohibited. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data in <computeroutput>sensor_data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_data</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>Byte array containing the serialized sequence of Sensor Series Column states in the following format:<itemizedlist>
<listitem><para>1st Sensor Raw Value X, variable length raw value representing the left corner of a column</para></listitem><listitem><para>1st Sensor Column Width, variable length raw value representing the width of the column</para></listitem><listitem><para>1st Sensor Raw Value Y, variable length raw value representing the height of the column</para></listitem><listitem><para>...</para></listitem><listitem><para>Nth Sensor Raw Value X, variable length raw value representing the left corner of a column</para></listitem><listitem><para>Nth Sensor Column Width, variable length raw value representing the width of the column</para></listitem><listitem><para>Nth Sensor Raw Value Y, variable length raw value representing the height of the column</para></listitem></itemizedlist>
</para><para>If Property ID does not exist in the element, the reply must contain only the given Property ID, omitting the other optional fields to column identifiers and column values. </para></parblock></para></parameterdescription>
</parameteritem>
</parameterlist>
</para><para><simplesect kind="return"><para>SL_STATUS_OK if successful. Error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8779" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="a00128_1ga96a7b36bd44e2bf600978ed1c4007f96" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_init_id</name>
        <initializer>0x00470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8452" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga9ab52d5f98f525c4a97cffa85da396dc" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_deinit_id</name>
        <initializer>0x01470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8453" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga1da819c1614405137dac15c37f207ada" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_send_descriptor_status_id</name>
        <initializer>0x02470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8454" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1gabb44e5d724c064cf6b614567fd0fd593" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_send_status_id</name>
        <initializer>0x03470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8455" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1gaf80c368fe6d7331ffecc73c02153e40e" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_send_column_status_id</name>
        <initializer>0x04470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8456" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga04f1f72884d43f21cd3238a825299d33" prot="public" static="no">
        <name>sl_btmesh_cmd_sensor_server_send_series_status_id</name>
        <initializer>0x05470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8457" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga86cdb1cb4fb56d61b6bc54f72c6f0ca1" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_init_id</name>
        <initializer>0x00470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8458" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga5208a469848a10c8d0a944e35c5ad217" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_deinit_id</name>
        <initializer>0x01470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8459" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga932ab09f77d8aa232249b1fac07163cd" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_send_descriptor_status_id</name>
        <initializer>0x02470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8460" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga6e27e9ea477d73385eb53cefec91fbd3" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_send_status_id</name>
        <initializer>0x03470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8461" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga0b3d2d1d530f2961ce77a06a480e694a" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_send_column_status_id</name>
        <initializer>0x04470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8462" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00128_1ga2994c1b69344b47e4a097e4fc60a7a25" prot="public" static="no">
        <name>sl_btmesh_rsp_sensor_server_send_series_status_id</name>
        <initializer>0x05470028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" line="8463" column="9" bodyfile="/mnt/raid/workspaces/ws.zxHljLWxg/overlay/super/protocol/bluetooth/build_release/btmesh_api/mesh_hal_gecko/inc/sl_btmesh_api.h" bodystart="8463" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth Mesh Sensor Server Model. </para>    </briefdescription>
    <detaileddescription>
<para>This class provides the commands and messages to interface with the Sensor Server model.</para><para>A Sensor State consists of four states:<itemizedlist>
<listitem><para>Sensor Descriptor</para></listitem><listitem><para>Sensor Setting</para></listitem><listitem><para>Sensor Cadence</para></listitem><listitem><para>Measurement value</para></listitem></itemizedlist>
</para><para>A multisensor setup is possible by having multiple sensor states within the same model, provided that each sensor has a unique Sensor Property ID.</para><para>Sensor Descriptor states are constant. Therefore, the stack can cache them and enumerate the present sensors to clients when requested.</para><para>Currently, the Sensor Server model does not cache the measurement data, sensor settings, or cadence. When a client is querying sensor data, the requests will be propagated to the application. </para>    </detaileddescription>
  </compounddef>
</doxygen>
