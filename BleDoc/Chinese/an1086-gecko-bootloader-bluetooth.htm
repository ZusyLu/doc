<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>an1086-gecko-bootloader-bluetooth</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s4 { color: #049; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s5 { color: #049; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s6 { color: #007694; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s12 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s14 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; vertical-align: 3pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s15 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s16 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s17 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s18 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s19 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s20 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s23 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s24 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h3 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d3 1; }
 #l4> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt;counter-reset: d2 1; }
 #l7> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10 {padding-left: 0pt;counter-reset: i1 1; }
 #l10> li>*:first-child:before {counter-increment: i1; content: "("counter(i1, decimal)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12 {padding-left: 0pt;counter-reset: i2 1; }
 #l12> li>*:first-child:before {counter-increment: i2; content: counter(i2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l13 {padding-left: 0pt;counter-reset: k1 1; }
 #l13> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l14 {padding-left: 0pt;counter-reset: l1 3; }
 #l14> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l14> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l15 {padding-left: 0pt;counter-reset: l2 3; }
 #l15> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l15> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l16 {padding-left: 0pt;counter-reset: l3 1; }
 #l16> li>*:first-child:before {counter-increment: l3; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: l3 0;  }
 #l17 {padding-left: 0pt;counter-reset: l4 1; }
 #l17> li>*:first-child:before {counter-increment: l4; content: counter(l4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 #l18 {padding-left: 0pt; }
 #l18> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt; }
 #l20> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21 {padding-left: 0pt; }
 #l21> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22 {padding-left: 0pt; }
 #l22> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23 {padding-left: 0pt; }
 #l23> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24 {padding-left: 0pt;counter-reset: m1 1; }
 #l24> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l25 {padding-left: 0pt; }
 #l25> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt; }
 #l28> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt;counter-reset: n1 1; }
 #l30> li>*:first-child:before {counter-increment: n1; content: "("counter(n1, decimal)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 li {display: block; }
 #l31 {padding-left: 0pt; }
 #l31> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l32 {padding-left: 0pt;counter-reset: p1 3; }
 #l32> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l32> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 #l33 {padding-left: 0pt;counter-reset: p2 6; }
 #l33> li>*:first-child:before {counter-increment: p2; content: counter(p1, decimal)"."counter(p2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: p2 0;  }
 #l34 {padding-left: 0pt;counter-reset: p3 1; }
 #l34> li>*:first-child:before {counter-increment: p3; content: counter(p1, decimal)"."counter(p2, decimal)"."counter(p3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l34> li:first-child>*:first-child:before {counter-increment: p3 0;  }
 #l35 {padding-left: 0pt; }
 #l35> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l36 {padding-left: 0pt; }
 #l36> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l37 {padding-left: 0pt;counter-reset: p3 1; }
 #l37> li>*:first-child:before {counter-increment: p3; content: counter(p1, decimal)"."counter(p2, decimal)"."counter(p3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l37> li:first-child>*:first-child:before {counter-increment: p3 0;  }
 #l38 {padding-left: 0pt; }
 #l38> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l39 {padding-left: 0pt; }
 #l39> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40 {padding-left: 0pt;counter-reset: p3 1; }
 #l40> li>*:first-child:before {counter-increment: p3; content: counter(p1, decimal)"."counter(p2, decimal)"."counter(p3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l40> li:first-child>*:first-child:before {counter-increment: p3 0;  }
 #l41 {padding-left: 0pt; }
 #l41> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l42 {padding-left: 0pt; }
 #l42> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l43 {padding-left: 0pt;counter-reset: w1 1; }
 #l43> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l43> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 li {display: block; }
 #l44 {padding-left: 0pt;counter-reset: x1 4; }
 #l44> li>*:first-child:before {counter-increment: x1; content: counter(x1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l44> li:first-child>*:first-child:before {counter-increment: x1 0;  }
 #l45 {padding-left: 0pt;counter-reset: x2 1; }
 #l45> li>*:first-child:before {counter-increment: x2; content: counter(x1, decimal)"."counter(x2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: x2 0;  }
 #l46 {padding-left: 0pt;counter-reset: x3 1; }
 #l46> li>*:first-child:before {counter-increment: x3; content: counter(x3, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l46> li:first-child>*:first-child:before {counter-increment: x3 0;  }
 #l47 {padding-left: 0pt;counter-reset: x3 1; }
 #l47> li>*:first-child:before {counter-increment: x3; content: counter(x3, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l47> li:first-child>*:first-child:before {counter-increment: x3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_002.png"/></span></p><h1 style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">AN1086: Using the Gecko Bootloader with the Silicon Labs <i>Bluetooth® </i>Applications</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="210" height="1" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Gecko Bootloader overview</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Using Gecko Bootloader for BGAPI UART DFU</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Using Gecko Bootloader for Bluetooth OTA upgrade</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Using Gecko Bootloader to update firmware from the user application</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="http://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">This application note includes detailed information on using the Silicon Labs Gecko Bootloader with Silicon Labs Bluetooth applications. It supplements the general Gecko Bootloader implementation information provided in </a><a href="http://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="s4" target="_blank">UG266: Silicon Labs Gecko Boot- </a>loader User’s Guide<a href="http://www.silabs.com/documents/public/user-guides/UG103-06-AppDevFundamentals-Bootloading.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">. If you are not familiar with the basic principles of performing a firmware upgrade or want more information about upgrade image files, refer to </a>UG103.6: Bootloader Fundamentals<span class="p">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In Gecko SDK Suite v3.0, the Bluetooth API structure was completely updated. Among other changes, all function calls were renamed. This document covers both the v2.x and the v3.x variants.</p><p class="s6" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Overview</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_006.png"/></span></p><ol id="l2"><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Overview</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Silicon Labs Gecko Bootloader is a common bootloader for all the newer MCUs and wireless MCUs from Silicon Labs. The Gecko Bootloader can be configured to perform a variety of bootload functions, from device initialization to firmware upgrades. The Gecko Bootloader uses a proprietary format for its upgrade images, called GBL (Gecko Bootloader). These images are produced with the file extension “.gbl”. Additional information on the GBL file format is provided in <i>UG103.6: Bootloader Fundamentals</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader has a two-stage design, where a minimal first stage bootloader is used to upgrade the main bootloader. The first stage bootloader only contains functionality to read from and write to fixed addresses in internal flash. To perform a main bootloader upgrade, the running main bootloader verifies the integrity and authenticity of the bootloader upgrade image file. The running main bootloader then writes the upgrade image to a fixed location in flash and issues a reboot into the first stage bootloader. The first stage bootloader verifies the integrity of the main bootloader firmware upgrade image, by computing a CRC32 checksum before copying the upgrade image to the main bootloader location.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader can be configured to perform firmware upgrades in standalone mode (also called a standalone bootloader) or in application mode (also called an application bootloader), depending on the plugin configuration. Plugins can be enabled and configured through the Simplicity Studio IDE.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document describes how to configure and use the Gecko Bootloader for BGAPI UART device firmware upgrades and for Bluetooth OTA (over-the-air) upgrades.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Unlike the legacy Bluetooth bootloaders, the Gecko Bootloader does not come bundled into the application download image. Therefore, you must compile and load the bootloader separately from the application image.</p></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">BGAPI UART Device Firmware Upgrade (DFU)</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This is the firmware upgrade used in NCP-mode Bluetooth applications. A GBL image containing the new firmware is written to target device using UART as the physical interface and BGAPI protocol. The BGAPI UART DFU bootloader is a standalone bootloader, so no storage area needs to be configured. During UART DFU upgrade the bootloader writes the new firmware image directly on top of the old firmware image and therefore no temporary download area is needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">UART DFU Options</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The target device must be programmed with the Gecko Bootloader configured as <b>BGAPI UART DFU Bootloader</b>. Gecko Bootloader is configured automatically for the selected radio board, and the UART pin configuration can be found in the project configuration under Plugins &gt; Drivers &gt; UART.</p><p class="s8" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">GPIO Activation</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">GPIO activation is enabled and mapped to button PB0 (active low).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The default settings are suitable for testing with a WSTK (Wireless Starter Kit). These settings can be easily changed by editing the Plugin parameters. This is done by going to the Plugins tab of the AppBuilder project and selecting the UART driver plugin. Here, Hard- ware Flow Control can be enabled or disabled, and the baud rate and pinout can be configured.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The GPIO activation plugin is enabled by default, allowing bootloader entry by activating a GPIO through reset. This plugin can be disa- bled if this functionality is not desired, or the GPIO pin used for this can be configured under the GPIO Activation plugin on the Plugins tab.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">UART DFU Process</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The basic steps involved in the UART DFU are as follows:</p><ol id="l4"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Boot the target device into DFU mode (by sending <span class="s9">dfu_reset(1)</span>).</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Wait for the <span class="s9">DFU boot </span>event.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Send the command <span class="s9">DFU Flash Set Address </span>to start the firmware upgrade.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Send the entire contents of the GBL upgrade image (using the command <span class="s9">DFU flash upload</span>).</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">After sending all data, the host sends the command <span class="s9">DFU flash upload finish</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">To finalize the upgrade, the host resets the target device into normal mode (by sending <span class="s9">dfu_reset(0)</span>).</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">A detailed description of the DFU-related BGAPI commands is found in the Bluetooth Software API Reference Manual.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">At the beginning of the upgrade, the NCP host uses the command <span class="s9">Flash Set Address </span>to define the start address. The start address shall be always set as zero. During the data upload (step 4 above) the target device calculates the flash offset automatically.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The host does not need to explicitly set any write offset.</p></li></ol></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: justify;"><a name="bookmark4">Creating Upgrade Images for the Bluetooth NCP Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Building a C-based NCP project in Simplicity Studio does not generate the UART DFU upgrade images (GBL files) automatically. The GBL files need to be created separately by running a script located in the project&#39;s root folder. Two scripts are provided in the SDK examples:</p><ul id="l5"><li><p class="s8" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">create_bl_files.bat <span class="p">(for Windows)</span></p></li><li><p class="s8" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">create_bl_files.sh <span class="p">(for Linux / Mac)</span></p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The GBL files can be generated by invoking the script from the project directory.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you are using Gecko SDK Suite v3.x, you need to define two environmental variables, <span class="s9">PATH_SCMD </span>and <span class="s9">PATH_GCCARM </span>before running the script, as shown in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Variable Name</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Variable Value</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PATH_SCMD</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v5\developer\adapter_packs</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\commander</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PATH_GCCARM</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\gnu_arm</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\7.2_2017q4</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Running the <b>create_bl_files </b>script creates multiple GBL files in a subfolder named output_gbl. The file named <b>full.gbl </b>is the upgrade image used for UART DFU. The other files are related to OTA upgrades and they can be ignored.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If signing and/or encryption keys (named <b>app-sign-key.pem</b>, <b>app-encrypt-key.txt</b>) are present in the same directory, then the script also creates secure variants of the GBL files.</p><p class="s8" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Depending on the SDK version, the script may also generate EBL files. EBL is the file format that is used in Bluetooth SDK ver- sions 2.1.1 and earlier. The generated EBL files are stored in the subfolder output_ebl. These files can be ignored when working with Gecko Bootloader.</span></p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">UART DFU Host Example</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The UART DFU host example is a C program that is located under the SDK examples in the following directory (the exact path depends on the installed SDK version):</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">v3.x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D8D8D8;"> C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_host\uart_dfu</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">v2.x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_ncp_host</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\uart_dfu</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In Windows this program can be built using, for example, MinGW or Cygwin. In Linux or Mac the program can be built using the GCC toolchain.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The project is built by running make (or mingw32-make) in the project root directory. After a successful build, an executable is created in the subfolder named <b>exe</b>. The executable filename is:</p><ul id="l6"><li><p class="s8" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">uart_dfu.exe <span class="p">in v3.x</span></p></li><li><p class="s8" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">uart-dfu.exe <span class="p">in v2.x</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Before running the example you need to check the COM port number associated with your NCP target. For more details, see <i>AN1259: Using the v3.x Silicon Labs Bluetooth® Stack in Network Co-Processor Mode </i>or <i>AN1042: Using the v2.x Silicon Labs Bluetooth® Stack in Network Co-Processor Mode</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The uart_dfu.exe program requires three command line arguments:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">COM port number</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Baud rate</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Name of the (full) GBL file</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Example usage and expected output in v3.x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">./uart_dfu.exe COM42 115200 full.gbl Syncing..DFU OK</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Bootloader version: ***</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">........</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">........</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">finish</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The procedure is the same in v2.x, except the executable filename is <b>uart-dfu.exe</b>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The number of bytes uploaded in one DFU flash upload command is configurable. The UART DFU host example included in the SDK uses a 48-byte payload. The maximum usable payload length is 128 bytes. The maximum number of bytes sent in one command is specified using a C preprocessor directive named MAX_DFU_PACKET. The value of MAX_DFU_PACKET must be divisible by four.</p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">Bluetooth OTA Upgrade</a><a name="bookmark29">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">To enable Bluetooth OTA upgrade, the target device must be programmed with Gecko Bootloader that is configured as <b>Internal Stor- age Bootloader</b>. This is an application bootloader and it requires that the new firmware image acquisition is managed by application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">AppLoader</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A Bluetooth application developed with Silicon Labs Bluetooth SDK comprises two parts: AppLoader and the user application. Ap- pLoader is a small standalone application that is required to support in-place OTA updates. AppLoader can run independently of the user application. It contains a minimal version of the Bluetooth stack, including only those features that are necessary to perform the OTA update. Any Bluetooth features that are not necessary to support OTA updates are disabled in AppLoader to minimize the flash footprint.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The AppLoader features and limitations are summarized below:</p><ul id="l8"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Enables OTA updating of user application.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The AppLoader itself can also be updated.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Only one Bluetooth connection is supported, GATT server role only.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Encryption and other security features such as bonding are not supported.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">PTI is not enabled so it is not possible to use the Network Analyzer with the AppLoader</p></li></ul><p class="s8" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">AppLoader in SDK v3.x requires that the Gecko Bootloader version must be v1.11 or later to support OTA.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark38" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The user application is placed in code flash after AppLoader. The default linker script provided in the SDK places the user application so that it starts at the next flash sector following AppLoader. The user application contains a full-featured version of the Bluetooth stack and it can run independently of the AppLoader. If in-place OTA update does not need to be supported then the AppLoader can be removed completely to free up flash for other use (code space or data storage). Section </a><a href="#bookmark38" class="a">4. Implementing Device Firmware Update in </a>the User Application <span style=" color: #000;">describes how OTA can be implemented in application code, without any involvement of AppLoader.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For more details on AppLoader and the overall structure of a Bluetooth application see <i>UG434: Silicon Labs Bluetooth® C Application Developers Guide for SDK v3.x </i>or <i>UG136: Silicon Labs Bluetooth® C Application Developers Guide for SDK v2.x</i>.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Gecko Bootloader Configuration</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader must be configured as an application bootloader. The OTA functionality is implemented almost entirely in the AppLoader, or alternatively in the user application. The Gecko Bootloader takes care of copying data from the download area to the final destination in flash. Additionally, AppLoader takes advantage of some features supported by Gecko Bootloader, for example, pars- ing the incoming GBL image.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>Gecko Bootloader has <i>Application upgrade version </i>check feature that can be included in <i>Plugin </i>configuration of the Bootloader project. This feature is used to check the version number and product ID of the application upgrade before applying it. However, this should not be used with Apploader because the version comparison is done to Apploader instead of the application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For EFR32xG1, the <b>Bluetooth in-place OTA DFU Bootloader </b>configuration is used as a default. In this configuration, the upper half of the main flash, normally used to hold the Bluetooth application, is re-purposed as a storage area while a Bluetooth stack upgrade is downloaded.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For EFR32xG12 and later, any application bootloader configuration may be used that uses internal storage. The default example appli- cation configurations are suitable for Bluetooth OTA upgrades, and may be modified to fit the needs of the application. The following figure shows an example flash layout for EFR32xG1 and EFR32xG12 devices. For more information on flash organization, see <i>UG434: Silicon Labs Bluetooth® C Application Developers Guide for SDK v3.x </i>or <i>UG136: Silicon Labs Bluetooth® C Application Developers Guide for SDK v2.x</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="553" height="300" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_007.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 4pt;padding-left: 79pt;text-indent: 0pt;text-align: center;"><a name="bookmark30">Figure 3.1.  Examples of Main Flash Layout when Using Gecko Bootloader with Bluetooth OTA DFU</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that on series 2 devices (EFR32xG2x) the default NVM solution is NVM3, and NVM3 might also be used instead of PSStore on series 1 devices. In this case the NVM area is larger than 4 kB, and therefore the slot size in the bootloader configuration must be reduced accordingly to avoid overwriting the NVM area.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">In-Place OTA Process</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Most of the OTA functionality is handled autonomously by the AppLoader, which greatly simplifies application development. The mini- mum requirement for the user application is for a way to trigger a reboot into DFU mode. Rebooting into DFU mode in this context means that after the device is reset, the AppLoader is run instead of the user application. After the upload is complete, AppLoader will reboot the device back into normal mode.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Reboot into DFU mode can be triggered in a variety of ways. It is up to the application developer to decide which is most applicable. Most of the example applications provided in the Bluetooth SDK already have OTA support built into the code. In these examples, the DFU mode is triggered through the Silicon Labs OTA service that is included as part of the application’s GATT database. The following sections explain in detail how this is done in the user application.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">AppLoader supports two types of update:</p><ul id="l9"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Full update: both AppLoader and the user application are updated</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Partial update: only the user application is updated</p></li></ul><p class="s8" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">In earlier stack versions (SDK v2.6.x and earlier), the meaning of partial and full update is different compared to the current OTA implementation. To avoid confusion, the main differences between the old and new OTA are summarized below.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:197pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SDK v2.6.x and older</p></td><td style="width:196pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SDK v2.7.x and later</p></td></tr><tr style="height:30pt"><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA update files generated</p></td><td style="width:197pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">stack.gbl: Bluetooth stack and OTA update part (supervisor)</p></td><td style="width:196pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">apploader.gbl: AppLoader (including minimal Bluetooth stack)</p></td></tr><tr style="height:30pt"><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">&quot;</p></td><td style="width:197pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">app.gbl: User application</p></td><td style="width:196pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">application.gbl: user application (including full Bluetooth stack)</p></td></tr><tr style="height:62pt"><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Partial update</p></td><td style="width:197pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Only user application is updated. Bluetooth stack remains the same. Application must be built with same SDK version that is currently in- stalled in the target device.</p></td><td style="width:196pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">User application is updated. The Bluetooth stack is part of the user application, therefore the stack is also updated. The user application and AppLoader do not need to be built from the same SDK. (1)</p></td></tr><tr style="height:40pt"><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Full update</p></td><td style="width:197pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Both the Bluetooth stack and the user applica- tion are updated in two phases (first stack, then application)</p></td><td style="width:196pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Both the AppLoader and user application (in- cluding Bluetooth stack) are updated in two phases (first AppLoader, then user application)</p></td></tr></table><ol id="l10"><li><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A full update is always recommended when moving from one SDK version to another. The size of AppLoader can vary depending on the SDK version. This may prevent a partial OTA update if the new application image overlaps with the old AppLoader version.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">From the OTA client viewpoint, the overall OTA process is the same in both old and new versions. Full update is performed by upload- ing two GBL files into the target device. Partial update requires only one file. Because the mechanism of uploading GBL files over the air is identical, the OTA solution introduced in SDK 2.7.0 is backwards-compatible:</p><ul id="l11"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Device running an application from SDK v2.6.x (or older, down to 2.0.x) can be upgraded to 2.7.x using OTA</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Device running v2.7.x firmware can be downgraded to 2.6.x or older using OTA</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Device running an application from SDK v2.7.x firmware and Gecko Bootloader v1.11 or later can be upgraded to SDK v3.x using OTA</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The partial update process using AppLoader consists of following steps:</p><ol id="l12"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">OTA client connects to target device.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Client requests target device to reboot into DFU mode.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">After reboot, client connects again.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">During the 2<span class="s14">nd </span>connection, target device is running AppLoader (not the user application).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">New firmware image (application.gbl) is uploaded to the target.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">AppLoader copies the new application on top of the existing application.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">When upload is finished and connection closed, AppLoader reboots back to normal mode.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Update complete.</p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">With partial update, it is possible to update the Bluetooth stack and user application. AppLoader is not modified during partial update.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Full update enables updating both the AppLoader and the user application. Full update is done in two steps. Updating the AppLoader always erases the user application and therefore AppLoader update must always be followed by application update.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The first phase of full update updates the AppLoader and it consists of following steps:</p><ol id="l13"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">OTA client connects to target device.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Client requests target device to reboot into DFU mode.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">After reboot, client connects again.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">During the 2<span class="s14">nd </span>connection, target device is running AppLoader (not the user application).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">New AppLoader image (apploader.gbl) is uploaded to the target.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">AppLoader copies the image into the download area (specified in Gecko bootloader configuration).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">When upload is finished and connection closed, AppLoader reboots and requests Gecko Bootloader to install the downloaded im- age.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Gecko Bootloader updates AppLoader using the downloaded image and reboots.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">After reboot, the new AppLoader is started.</p></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">At the end of the AppLoader update, the device does not contain a valid user application and therefore AppLoader will remain in DFU mode. To complete the update, a new user application is uploaded following the same sequence of operations that were described for the partial update.</p><p class="s13" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The SDK includes an example OTA client implementation that can be used to perform both full and partial updates. This example app is described in section </a>3.11 OTA DFU Host Example<span style=" color: #000;">. Full and partial OTA can also be performed using the EFR Connect smartphone app.</span></p><ol id="l14"><ol id="l15"><ol id="l16"><li><p class="s8" style="padding-top: 8pt;padding-left: 48pt;text-indent: -48pt;text-align: right;"><a name="bookmark10">Firmware Upgrade from PS Store to NVM3</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If an application is already in the field using PS Store and should be upgraded to use NVM3, it can be upgraded using OTA DFU (over- the-air device firmware upgrade) with new firmware that already uses NVM3.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">However, in this case the data stored in the PS Store cannot be preserved. All bonding information and stored user data will be lost. Nevertheless, the new application can reinitialize the NVM area (at the end of the main flash) to use NVM3 instead of PS Store, and after the upgrade NVM3 will work perfectly.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Upgrading software from PS Store to NVM3 is challenging, mostly due to the fact that the application provides information to the Ap- pLoader through non-volatile memory (PS Store / NVM3), which gets upgraded as well. The following are the detailed steps to perform an OTA upgrade from PS Store to NVM3, where the device doing the upgrade is bonded with the device to be upgraded.</p><p class="s8" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The procedure illustrates the situation where the upgrader and the device to be upgraded are bonded to showcase all the chal- lenges. Bonding is not a condition for upgrading from PS Store to NVM3.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l17"><li><p style="padding-left: 40pt;text-indent: -41pt;text-align: right;">The device uses an application with PS Store.</p><ul id="l18"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application sets <span class="s9">random address OTA flag </span>and <span class="s9">OTA device name </span>in PS Store.</p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone opens a connection to this device and gets bonded (if not bonded already).</p><ul id="l19"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application stores bonding information in PS Store.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone resets the device into OTA mode by writing 0x00 into the OTA control characteristic.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">AppLoader (with PS Store support) starts.</p><ul id="l20"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">AppLoader advertises with a random address and the OTA device name.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone connects and uploads a new AppLoader (with NVM3 support).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The device resets and applies the new AppLoader image.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The new AppLoader (with NVM3 support) starts.</p><ul id="l21"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The AppLoader advertises with the public address and with the default name (&quot;Apploader&quot;), because it cannot read the random address flag and the OTA device name from PS Store.</p></li><li><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The Smartphone sees the device as bonded because bonding information is associated with the public address, but AppLoader does not support bonding.</p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone removes bonding information for the device before re-connecting.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone connects and uploads a new application (with NVM3 support).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -13pt;text-align: left;">The new application starts.</p><ul id="l22"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application initializes NVM3 by reformatting the NVM area.</p></li><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application sets <span class="s9">random address OTA flag </span>and <span class="s9">OTA device name </span>in NVM3.</p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -13pt;text-align: left;">The Smartphone opens a connection and gets bonded (again).</p><ul id="l23"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application stores bonding information in NVM3.</p></li></ul></li></ol></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">After this, NVM3 to NVM3 update will work normally.</p><ol id="l24"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The device uses an application with NVM3.</p><ul id="l25"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application sets <span class="s9">random address OTA flag </span>and <span class="s9">OTA device name </span>in NVM3.</p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone opens a connection to this device and gets bonded (if not bonded already).</p><ul id="l26"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">The application stores bonding information in NVM3.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone resets the device into OTA mode by writing 0x00 into the OTA control characteristic.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">AppLoader (with NVM3 support) starts.</p><ul id="l27"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">AppLoader advertises with a random address and the OTA device name.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone connects and uploads a new AppLoader (with NVM3 support).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The device resets and applies the new AppLoader image.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The new AppLoader (with NVM3 support) starts.</p><ul id="l28"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">AppLoader advertises with a random address and the OTA device name.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The Smartphone connects and uploads a new application (with NVM3 support).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The new application starts.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -13pt;text-align: left;">The Smartphone opens a connection and encrypts the connection with existing bonding information.</p><ul id="l29"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">Bonding information is still stored in NVM3.</p></li></ul></li></ol></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Silicon Labs OTA GATT service</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following XML representation defines the Silicon Labs OTA service. It is a custom service using 128-bit UUID values. The service content and the UUID values are fixed and must not be changed.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The OTA service characteristics are described in the following table. The UUID value of the service itself is <span class="s9">1d14d6eefd63-4fa1- bfa4-8f47b42119f0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 79pt;text-indent: 0pt;text-align: center;"><a name="bookmark31">Table 3.1.  Silicon Labs OTA Service Characteristics</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Characteristic</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">UUID</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Type</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Length</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Support</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Properties</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA Control Attribute</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 13pt;padding-right: 8pt;text-indent: -4pt;text-align: left;">F7BF3564-FB6D-4E53- 88A4-5E37E0326063</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">1 byte</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Mandatory</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Write</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA Data Attribute (1)</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 10pt;text-indent: -1pt;text-align: left;">984227F3-34FC-4045- A5D0-2C581F81A153</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 14pt;padding-right: 5pt;text-indent: -8pt;text-align: left;">Variable; max 244 bytes</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Mandatory</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 45pt;padding-right: 8pt;text-indent: -36pt;text-align: left;">Write without response; Write</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">AppLoader version (2) (Blue- tooth stack version) (2,3)</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 8pt;text-indent: -1pt;text-align: left;">4F4A2368-8CCA-451E- BFFF-CF0E2EE23E9F</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">8</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Optional</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Read</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA version (2)</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">4CC07BCF-0868-4B32-</p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">9DAD-BA4CC41E5316</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Optional</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Read</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Gecko Bootloader version (2)</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 8pt;text-indent: -1pt;text-align: left;">25F05C0A-E917-46E9- B2A5-AA2BE1245AFE</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Optional</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Read</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Application version</p></td><td style="width:113pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 9pt;padding-right: 7pt;text-indent: -2pt;text-align: left;">0D77CC11-4AC1-49F2- BFA9-CD96AC7A92F8</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 10pt;padding-right: 10pt;text-indent: 0pt;text-align: center;">Hex</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">Optional</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 32pt;padding-right: 32pt;text-indent: 0pt;text-align: center;">Read</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Notes:</p><ol id="l30"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -13pt;text-align: left;">This characteristic is excluded from the user application GATT database.</p></li><li><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Version information is automatically added by AppLoader when running in DFU mode. These are optional in the application GATT database.</p></li><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -13pt;text-align: left;">This characteristic exposes AppLoader version starting from SDK 2.7.0; was stack version in earlier versions.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 8pt;padding-left: 79pt;text-indent: 0pt;text-align: center;">Table 3.2.  Possible Control Words Written to the OTA Control Characteristic</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:70pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 8pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">Hex value</p></td><td style="width:481pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:70pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 8pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">0x00</p></td><td style="width:481pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA client initiates the upgrade procedure by writing value 0.</p></td></tr><tr style="height:19pt"><td style="width:70pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 8pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">0x03</p></td><td style="width:481pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">After the entire GBL file has been uploaded the client writes this value to indicate that upload is finished.</p></td></tr><tr style="height:30pt"><td style="width:70pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 8pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">0x04</p></td><td style="width:481pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Request the target device to close connection. Typically the connection is closed by OTA client but using this control value it is possible to request that disconnection is initiated by the OTA target device.</p></td></tr><tr style="height:19pt"><td style="width:70pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 8pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">Other values</p></td><td style="width:481pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Other values are reserved for future use and must not be used by application.</p></td></tr></table><p class="s13" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark38" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">In DFU mode, AppLoader uses the full OTA service described above. This allows a remote Bluetooth device to upload a new firmware image, as described later in this chapter. The GATT database of the user application includes only a subset of the full OTA service. The minimum application requirement is to include the OTA control characteristic. The application must not include the OTA data character- istic in its GATT database (unless the OTA update is implemented fully in application code, as described in section </a><a href="#bookmark38" class="a">4. Implementing </a>Device Firmware Update in the User Application<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">From the user application viewpoint, only the OTA control attribute is relevant. In the OTA host example reference implementation that is included in the SDK, the OTA procedure is triggered when the client writes value 0 to the OTA control attribute. The user application does not handle any data transfers related to OTA upgrades and therefore the OTA Data Attribute is excluded from the user applica- tion’s GATT.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">It is also possible to use an application-specific trigger to enter OTA mode, and therefore it is not absolutely necessary to include the OTA control attribute in the application’s GATT database. If reboot into DFU mode is handled using some other mechanism, then it is possible to exclude the whole OTA service from the application GATT. However, it should be noted that to be compatible with the OTA host example from the SDK or the EFR Connect smartphone app the OTA trigger must be implemented as described above.</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">AppLoader has its own GATT database that is independent of the user application’s GATT database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The presence of the OTA Data Attribute in the GATT database is used by the OTA host example application to check whether the target device is running in normal mode (user application) or DFU mode (AppLoader). Therefore, the OTA Data Attribute must not be included in the user application’s GATT. The OTA-enabled examples in the Bluetooth SDK only expose the OTA Control Attribute.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The four characteristics after the OTA data attribute are automatically added in the GATT database that is used by AppLoader. These include version information that can be read by the OTA client before starting the firmware update. For example, by checking the Ap- pLoader version, the OTA client may check if a full or partial update is needed.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The AppLoader version is a 8-byte value that consists of four two-byte fields, indicating the AppLoader version in the form &lt;major&gt;.&lt;mi- nor&gt;.&lt;patch&gt;-&lt;build&gt;. For example, value 010000000000170b can be interpreted as version “1.0.0-2839”.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The OTA version is a 1-byte value that indicates the OTA protocol version for compatibility checking. The OTA version number in SDK</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">2.7.0 is 3. This version number is incremented only when needed, if there are some changes in the OTA implementation that may cause backward compatibility issues.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader version is a 4-byte value that is configured in a Gecko Bootloader project (file btl_config.h). The two most signifi- cant bytes are the major and minor numbers. The other two bytes are customer-specific and they can be set to indicate certain Gecko Bootloader configuration options (for example, whether secure boot is required or not). As an example, value 00000401 indicates that the Gecko Bootloader version is “1.4” and the customer-specific part is 0x0000 (this is the default if no customer-specific version info has been configured in the Gecko Bootloader project).</p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark32" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The application version is a 4-byte value and it is initialized to the same value that is defined in the file application_properties.c. The encoding of this value is application-specific. In the SDK example projects, the application_properties.c source is included but the appli- cation version is set to zero. In real applications it is highly recommended to use some meaningful application version so that it can be read over-the-air when the device is in OTA mode. The application properties file is discussed in more detail in section </a><a href="#bookmark32" class="a">3.7 OTA-Related </a>Configurations in the v3.x Bluetooth Stack<span style=" color: #000;">.</span></p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">AppLoader does not include support for encryption or bonding and therefore there are no access restrictions on any of the characteris- tics listed in </a>Table 3.1 Silicon Labs OTA Service Characteristics on page 11<span style=" color: #000;">. Because the user application has its own GATT database it is possible to include additional security requirements there as needed. For example, the user application can require that the OTA control attribute is writable only by a bonded client so that only bonded client can trigger reboot into DFU mode.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For additional security, it is recommended to configure the Gecko Bootloader to use secure boot and signed GBL images.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">OTA GATT Database and Generic Attribute Service</a></p></li></ol></li></ol><p style="padding-left: 23pt;text-indent: 0pt;line-height: 19pt;text-align: left;">When booted into DFU mode, the AppLoader uses a GATT database that is different than the normal GATT used by the application. The OTA DFU GATT database used by AppLoader contains following services:</p><ul id="l31"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Generic Attribute (UUID 0x1801)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Generic Access (UUID 0x1800)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Silicon Labs OTA service (UUID 0x1d14d6ee-fd63-4fa1-bfa4-8f47b42119f0)</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth specification requires that, if GATT-based services can change in the lifetime of the device, then the <b>Generic Attribute Service </b>(UUID 0x1801) and the <b>Service Changed </b><a href="https://www.bluetooth.com/specifications/adopted-specifications" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">characteristic (UUID 0x2A05) shall exist in the GATT database. For details, please see </a><span style=" color: #049;">Bluetooth Core specification</span>, Version 5.2, Vol. 3, Part G, 7 DEFINED GENERIC ATTRIBUTE PROFILE SERVICE.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Generic Attribute service is automatically included in the AppLoader GATT database used during OTA. To avoid any interoperabili- ty issues due to GATT caching, it is strongly recommended that the application GATT database used in normal mode also enables this service. Generic Attribute service is enabled by default in the SDK example applications.</p><p class="s8" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">AppLoader does not generate a service changed indication when rebooting to DFU mode or rebooting back to normal mode.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Automatic service changed indication requires that the client is bonded and has enabled the indication for this characteristic. AppLoader does not support bonding and therefore the service changed indication is not generated.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Generic Attribute Service can also be explicitly defined in the application’s GATT database using the same XML notation that is used for other services. The Generic Attribute service must be the first service in the list, to ensure it is aligned with the Generic Attrib- ute Service that is used during OTA. The Bluetooth specification requires that the attribute handle of the Service Changed characteristic shall not change and therefore this service must be first on the list (the same as in the OTA GATT database).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a href="https://www.bluetooth.com/specifications/gatt/services" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">More details on the Generic Attribute Service can be found on the Bluetooth SIG website: </a><a href="https://www.bluetooth.com/specifications/gatt/services" target="_blank">https://www.bluetooth.com/specifications/gatt/services</a></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Note also that AppLoader does not support the GATT caching enhancements that were introduced in the Bluetooth Core Specification</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">5.1 and Silicon Labs Bluetooth SDK 2.11.1.</p><ol id="l32"><ol id="l33"><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Triggering Reboot into DFU Mode from the User Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The minimum functional requirement to enable OTA in the user application is to implement a ‘hook’ that allows the device to be reboo- ted into DFU mode. By default, this is done through the Silicon Labs OTA service.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The following code snippet is from the SoC Thermometer example supplied with the SDK. The code to enter DFU mode is similar in the other examples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 105pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="443" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.2.  Handling Write to OTA Control Characteristic in C Code in SDK v3.x</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="590" height="349" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_009.jpg"/></span></p><p class="s8" style="padding-top: 6pt;padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.3.  Handling Write to OTA Control Characteristic in C Code in SDK v2.x</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>In v3.x</b>: The event with ID <span class="s9">sl_bt_evt_gatt_server_user_write_request_id </span>indicates that one of the characteristics (of type user) has been written by the remote Bluetooth client. This event handler is found in the <b>ota_dfu.c </b>file, which is part of the OTA DFU compo- nent.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><b>In v2.x</b>: The event with ID <span class="s9">gecko_evt_gatt_server_user_write_request_id </span>indicates that one of the characteristics (of type user) has been written by the remote Bluetooth client. This event handler is normally included in the <b>app.c </b>file of the sample projects.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this example, the code simply checks if the OTA control characteristic was written and, if so, triggers a reboot into DFU mode. Before rebooting, the application closes the Bluetooth connection. The variable <span class="s9">boot_to_dfu </span>is set so indicate that DFU reboot has been re- quested. When the connection closed event is raised by the stack, the application checks the variable <span class="s9">boot_to_dfu </span>and if set, performs the DFU reboot by calling <span class="s9">sl_bt_system_reset(2) </span>in v3.x and <span class="s9">gecko_cmd_system_reset(2) </span>in v2.x. Parameter value 2 indicates that the device is to be rebooted into OTA DFU mode. The rest of the OTA upgrade is managed by AppLoader and no further actions are needed from the user application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 6pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">OTA-Related Configurations in the v3.x Bluetooth Stack</a><a name="bookmark32">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Besides implementing the hook to enter DFU mode, the user application must implement some additional OTA-related configurations. These include the OTA-flag, OTA-device name and the OTA-advertising data. For these configurations have an effect, the OTA Soft- ware component must be installed. This can be done in Simplicity Studio 5&#39;s Project Configurator.</p><ol id="l34"><li><p class="s8" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark15">Setting OTA Flag in v3.x</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">You can use the run-time command <span class="s9">sl_bt_ota_set_configuration(flags) </span>to set OTA flags. The setting is stored in the persistent store.</p><p class="s9" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">flags <span class="p">is a 32-bit unsigned integer variable. Flags are defined as follows.</span></p><ul id="l35"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;line-height: 182%;text-align: left;">Bit 0: Advertising address 0: use public address.</p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">1: use static random address.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;line-height: 182%;text-align: left;">Bit 1: Application update version check 0: disable application version check.</p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">1: enable application version check.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bits 2-31: reserved.</p><p class="s9" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">flags <span class="p">value is given as a bitmask. Flag values are defined as follows.</span></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">0: use public device address and disable application version check.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">1: use static random address and disable application version check.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">2: use public device address and enable application update version check.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">3: use static random address and enable application update version check.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Default value 0 is used if the user application does not set the flags, in which case the public device address is used and AppLoader does not perform any application version checking during OTA mode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark16">Setting OTA Device Name in v3.x</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">You can use the run-time command <span class="s9">sl_bt_ota_set_device_name(name_len, name) </span>to set the device name to be used during OTA update. The name is stored in the persistent store. The parameter <span class="s9">name </span>specifies the Bluetooth device name that is used when the device has been rebooted into DFU mode. Note that, in addition to specifying the name string, the application must also specify the exact number of characters in that string in the <span class="s9">name_len </span>parameter. Maximum name length is 17 bytes.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The device name used during OTA does not have to be static. The string can be dynamically generated, for example, based on the serial number of the device or some other value that uniquely identifies the device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Default OTA device name &quot;OTA&quot; is used if it is not set in the user application.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark17">Setting OTA Advertising Data in v3.x</a></p><p style="padding-top: 1pt;padding-left: 22pt;text-indent: 0pt;line-height: 18pt;text-align: left;">Use the command <span class="s9">sl_bt_ota_set_advertising_data(packet_type, adv_data_len, adv_data) </span>to set the OTA advertising data. The packet type identifies whether data is intended for advertising packets or to scan response packets.</p><ul id="l36"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">2: OTA advertising packets</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">4: OTA scan response packets</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">You can set a maximum of 31 bytes of data.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><b>Note: </b>The OTA configuration commands must be called after NVM3 (PS) initialization has been done—that is, after <span class="s9">sl_bt_init()</span>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that, if OTA advertising data is not set in the user application, a default OTA advertising data that includes the device name, TX power, advertising flags, and Bluetooth device address is used during OTA mode. The following text snippet illustrates typical default raw OTA advertising data and how it is dissected into different advertising data elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="215" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_010.png"/></span></p><p class="s9" style="text-indent: 0pt;line-height: 107%;text-align: left;">length = 2 bytes type = Tx Power value = 0dBm</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">02:</p><p class="s9" style="text-indent: 0pt;text-align: left;">0A:</p><p class="s9" style="text-indent: 0pt;text-align: left;">00:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">length = 8bytes</p><p class="s9" style="text-indent: 0pt;text-align: left;">type = BL device address</p><p class="s9" style="text-indent: 0pt;text-align: left;">value = 00(public) 5B:77:28:E2:0A:68</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">08:</p><p class="s9" style="text-indent: 0pt;text-align: left;">1B:</p><p class="s9" style="text-indent: 0pt;text-align: left;">005B7728E20A68:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">length = 4 bytes</p><p class="s9" style="text-indent: 0pt;line-height: 107%;text-align: left;">type = complete local name value = OTA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">04:</p><p class="s9" style="text-indent: 0pt;text-align: left;">09:</p><p class="s9" style="text-indent: 0pt;text-align: left;">4F5441:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">0x02010604094F5441081B005B7728E20A68020A00: raw OTA advertising data</p><p class="s9" style="text-indent: 0pt;text-align: left;">02: length = 2bytes</p><p class="s9" style="text-indent: 0pt;text-align: left;">01: type = flags</p><p class="s9" style="text-indent: 0pt;text-align: left;">06: value = 6 (General Discoverable Mode, BR/EDR Not Supported)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The Bluetooth device address that is used in OTA mode is determined as follows:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Use a static random address if it has been enabled in the OTA configuration flags.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">If the user application has overridden the default Bluetooth address (using command <span class="s9">sl_bt_system_set_identity_address()</span>), then this address is also used during OTA (starting with SDKv2.8.0).</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The default Bluetooth address (programmed into the device in production) is used if neither a static random address nor custom address has been defined.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In OTA mode, the TX power is hardcoded to 0 dBm.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s8" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">OTA-Related Configurations in the v2.x Bluetooth Stack</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Besides implementing the hook to enter DFU mode, the user application must implement some additional OTA-related configurations. These include the OTA-flag, OTA-device name and the OTA-advertising data.</p><ol id="l37"><li><p class="s8" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark19">Setting OTA Flag and OTA Device Name in v2.x</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The user application initializes the Bluetooth stack by calling <i>gecko_init()</i>. This function takes one parameter, a pointer to a struct (of type <i>gecko_configuration_t</i>) containing various configuration parameters. The code snippet shown below is taken from the SoC Ther- mometer example from the Bluetooth C SDK. The three OTA-related configuration parameters are highlighted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="365" height="220" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_011.jpg"/></span></p><p class="s8" style="padding-top: 6pt;padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.4.  OTA Configuration Parameters Passed to the v2.x Stack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The OTA parameters are collected in a smaller struct named <i>gecko_ota_config_t </i>that is part of <i>gecko_configuration_t</i>. The definition of</p><p class="s7" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">gecko_ota_config_t <span class="p">is shown below.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="212" height="112" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_012.jpg"/></span></p><p class="s8" style="padding-top: 6pt;padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.5.  OTA Configuration Struct in SDK v2.x</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s9">flags </span>is a set of configuration flags. The following flag values, defined in <b>gecko_configuration.h</b>, are possible:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flag</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">GECKO_OTA_FLAGS_RANDOM_ADDRESS</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">If set, AppLoader will use the static random address during OTA mode.</p></td></tr></table><p class="s9" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">device_name_len <span class="p">and </span>device_name_ptr <span class="p">specify the Bluetooth device name that is used when the device has been rebooted into DFU mode. Note that, in addition to specifying the name string, the application must also specify the exact number of characters in that string in the device_name_lenparameter.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The device name used during OTA does not have to be static. The string can be dynamically generated, for example based on the serial number of the device or some other value that uniquely identifies the device. However, the name must be set when the stack is initialized (by calling <span class="s9">gecko_init()</span>).</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">An alternative way to define the OTA device name is to use the API call <b>cmd_system_set_device_name</b>. This method allows the name to be changed after the stack has been initialized.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark20">Setting OTA Advertising Data in v2.x</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">OTA advertising data can be set using the command <span class="s9">gecko_cmd_le_gap_bt5_set_adv_data</span>. The same command is used to set user- defined data in advertising packets, scan response packets, or periodic advertising packets.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that, if OTA advertising data is not set in the user application, a default OTA advertising data that includes the device name, TX power, advertising flags, and Bluetooth device address is used during OTA mode. The following text snippet illustrates typical default raw OTA advertising data and how it is dissected into different advertising data elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="215" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_013.png"/></span></p><p class="s9" style="text-indent: 0pt;line-height: 107%;text-align: left;">length = 2 bytes type = Tx Power value = 0dBm</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">02:</p><p class="s9" style="text-indent: 0pt;text-align: left;">0A:</p><p class="s9" style="text-indent: 0pt;text-align: left;">00:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">length = 8bytes</p><p class="s9" style="text-indent: 0pt;text-align: left;">type = BL device address</p><p class="s9" style="text-indent: 0pt;text-align: left;">value = 00(public) 5B:77:28:E2:0A:68</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">08:</p><p class="s9" style="text-indent: 0pt;text-align: left;">1B:</p><p class="s9" style="text-indent: 0pt;text-align: left;">005B7728E20A68:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">length = 4 bytes</p><p class="s9" style="text-indent: 0pt;line-height: 107%;text-align: left;">type = complete local name value = OTA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">04:</p><p class="s9" style="text-indent: 0pt;text-align: left;">09:</p><p class="s9" style="text-indent: 0pt;text-align: left;">4F5441:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">0x02010604094F5441081B005B7728E20A68020A00: raw OTA advertising data</p><p class="s9" style="text-indent: 0pt;text-align: left;">02: length = 2bytes</p><p class="s9" style="text-indent: 0pt;text-align: left;">01: type = flags</p><p class="s9" style="text-indent: 0pt;text-align: left;">06: value = 6 (General Discoverable Mode, BR/EDR Not Supported)</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Bluetooth device address that is used in OTA mode is determined as follows:</p><ul id="l38"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Use a static random address if it has been enabled in the OTA configuration flags.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">If the user application has overridden the default Bluetooth address (using command <span class="s9">cmd_system_set_identity_address()</span>), then this address is also used during OTA (starting with SDK v2.8.0).</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The default Bluetooth address (programmed into the device in production) is used if neither a static random address nor custom address has been defined.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Application Properties in OTA Mode</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The source file <b>application_properties.c </b>needs to be included in projects that use OTA and the Gecko Bootloader. This file is included in the SDK examples by default. Application properties are stored in a fixed location in code flash so that AppLoader can access the data when the device is running in OTA mode. The properties include a 32-bit version number that is application-specific. It is up to the application designer to decide how this value is encoded. This value is exposed in the GATT database used by AppLoader so that the OTA client can read it over the Bluetooth connection after the device has been rebooted into OTA mode.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The version information is set using following #define in <b>application_properties.c</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s12" style=" background-color: #D8D8D8;"> /// Version number for this application (uint32_t) #define APP_PROPERTIES_VERSION 1                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The default value is set to 1, but it is strongly recommended that meaningful version number information is added here so that the OTA client can check the exact version that is installed on the target device. This allows better management of OTA updates of units that are deployed in the field, especially in cases where units are running different versions of the application. If AppLoader does not detect any valid application at all, then the application version in the GATT database is initialized to value zero.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>Earlier SDK versions required that header file <span class="s9">aat.h </span>must be included by the user application. Beginning with SDK v2.7.0, this file is no longer needed and it <b>must not beincluded</b>.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: justify;"><a name="bookmark22">Creating OTA Upgrade Images</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Building a C-based Bluetooth application in Simplicity Studio does not generate the OTA DFU upgrade images (GBL files) automatical- ly. The GBL files need to be created separately by running a script located in the project&#39;s root folder. Two scripts are provided in the SDK examples:</p><ul id="l39"><li><p class="s8" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">create_bl_files.bat <span class="p">(for Windows)</span></p></li><li><p class="s8" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">create_bl_files.sh <span class="p">(for Linux / Mac)</span></p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The GBL files can be generated by invoking the script from the project directory.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you are using Gecko SDK Suite v3.x you need to define two environmental variables, PATH_SCMD and PATH_GCCARM, before running the script as shown in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Variable Name</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Variable Value</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PATH_SCMD</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v5\developer\adapter_packs</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\commander</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PATH_GCCARM</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\gnu_arm</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\7.2_2017q4</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Running the <b>create_bl_files </b>script creates six GBL files in a subfolder named <span class="s9">output_gbl</span>. The files named <b>application.gbl </b>and <b>ap- ploader.gbl </b>are used for OTA DFU. The file <b>full.gbl </b>is related to UART DFU upgrade and can be ignored.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If signing and/or encryption keys (named <b>app-sign-key.pem</b>, <b>app-encrypt-key.txt</b>) are present in the same directory then the script also creates secure variants of the GBL files.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If a bootloader image (named <b>bootloader-second-stage.s37</b>) is present in the same directory then the script also creates a GBL file containing bootloader+apploader images. This GBL file can be used to upgrade the bootloader.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 45pt;text-indent: -22pt;text-align: justify;"><a name="bookmark23">OTA DFU Host Example</a><a name="bookmark33">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth SDK includes an OTA host reference implementation. The example is written in C language and uses a Bluetooth devel- opment kit as modem in Network Co-Processor (NCP) mode. The OTA host application itself runs on the host computer. For more in- formation on the NCP mode of operation, see <i>QSG169: Bluetooth® v3.x Quick Start Guide </i>or <i>QSG139: Bluetooth® v2.x Quick Start Guide</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following figure shows an overview of an OTA test setup. The OTA host application is running on a laptop that is connected to one Bluetooth development kit. These two together form the <b>OTA client</b>. The host program uses the development kit in NCP mode and communicates with it via a virtual serial port connection using the BGAPI protocol.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The target device to be upgraded over-the-air is shown on the right-hand side. It is identified by its Bluetooth address.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="608" height="282" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.6.  OTA test setup</p><ol id="l40"><li><p class="s8" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark24">Preparing the Development Kit for NCP Mode</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The development kit that is used on the host side should be programmed with firmware that is suitable for NCP mode. The Bluetooth SDK includes an example project named <b>NCP – Empty Target </b>that can be used for this purpose.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The development kit main board features an on-board USB-to-UART converter. The board will be seen as a virtual COM port by the host computer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark25">Building the OTA Host Example Application</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The OTA host example is found in the following directory under the Bluetooth SDK installation tree (the exact path depends on the installed SDK version):</p><p class="s8" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">v3.x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D8D8D8;"> C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_host\ota_dfu  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">v2.x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_ncp_host</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">\ota_dfu</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The project folder contains a makefile that allows the program to be built using for example MinGW (by running <span class="s9">mingw32-make</span>) or Cyg- win (by running <span class="s9">make</span>). an executable file is created in subfolder named <b>exe</b>. The executable filename is:</p><ul id="l41"><li><p class="s8" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ota_dfu.exe <span class="p">in v3.x</span></p></li><li><p class="s8" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ota-dfu.exe <span class="p">in v2.x</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark26">Running OTA with the NCP Host Example</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The OTA host program expects the following command-line arguments:</p><ul id="l42"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">COM port number associated with the development kit used in NCP mode</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Baud rate (use fixed value 115200)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Name of the GBL file to be uploaded into target device</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth address of the target device</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">(optional) force write without response (possible values 0 / 1, default is 0)</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A full OTA upgrade is done in two parts, and it requires two separate GBL files, one for the AppLoader and another for the user applica- tion. Full OTA requires the host example program to be invoked twice. An example usage in v3.x is shown below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">./ota_dfu.exe COM49 115200 apploader.gbl 00:0B:57:0B:49:23</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">./ota_dfu.exe COM49 115200 application.gbl 00:0B:57:0B:49:23</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The procedure is the same in v2.x, except the executable filename is <b>ota-dfu.exe</b>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If the application alone is going to be upgraded, then the host program is run once, with the <b>application.gbl </b>file passed as parameter. In other words, only the second of the two commands listed above is run.</p><p class="s8" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Starting from SDK 2.7.0, the user application also includes the Bluetooth stack and therefore the Bluetooth stack can be updated without full update. Full update is needed only if the AppLoader needs to be updated.</span></p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark27">OTA Host Example Internal Operation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The OTA host example is implemented as a state machine. The key steps in the OTA sequence are summarized below. Note that the program execution is independent of the type of upgrade image that is used. The program simply uploads one GBL file into the target device. It is up to the user to invoke the program either once or twice, depending on the upgrade type (partial OTA or full OTA).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following diagram illustrates the state transitions in the OTA host example program in a slightly simplified form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="706" height="161" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_015.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 4pt;padding-left: 79pt;text-indent: 0pt;text-align: center;">Figure 3.7.  OTA Host Example State Transitions</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In <b>INIT </b>state, the program checks the total size of the GBL file that is passed as a command-line parameter. The GBL file content is not parsed. It is enough to know the file size so that the entire content can be uploaded to target device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In <b>CONNECT </b>state, the program tries to open a connection to the target device whose Bluetooth address is given as a command line parameter. The host program does not scan for devices. If the target device is not advertising, then the connection open attempt cau- ses the program to be blocked.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">After a connection has been established, the program moves to state <b>FIND SERVICES</b>, where it performs service discovery. In this case only the OTA service is of interest, and therefore the program performs discovery of services with that specific UUID (using the API call <span class="s9">sl_bat_gatt_discover_primary_services_by_uuid </span>in v3.x or <span class="s9">cmd_gatt_discover_primary_services_by_uuid </span>in v2.x).</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">After the service has been found the next state is <b>FIND CHARACTERISTICS</b>, where the characteristic of the OTA service are queried using API call <span class="s9">sl_bat_gatt_discover_characteristics </span>in v3.x or <span class="s9">gecko_cmd_gatt_discover_characteristics </span>in v2.x. The han- dle value for the <b>ota_control </b>needs to be discovered in order to proceed with the OTA procedure.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <b>ota_data </b>characteristic may or may not be present, depending whether the target device is already in DFU mode or not. If the ota_data handle is not found, then the next state is <b>RESET TO DFU</b>. In this state the host program requests reboot into DFU mode by writing value 0x00 to the ota_control characteristic. The execution then jumps back to the <b>CONNECT </b>state.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If both ota_data and ota_control characteristic handles have been detected, the next state is <b>OTA BEGIN</b>. The host program initiates OTA by writing value 0x00 to the ota_control characteristic. This does not cause reboot or any other side effects because the target device is already in DFU mode.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The state following OTA_BEGIN is <b>OTA UPLOAD</b>. This is where the GBL file is uploaded to target device. The whole content of the GBL file is uploaded into the target device, by performing a number of write operations into the ota_data characteristic. The host pro- gram uses the write-without-response transfer type to optimize throughput. Note that even if the write-without-response operations are not acknowledged at the application level, error checking (and retransmission when needed) at the lower protocol layers ensures that all packets are delivered reliably to the target device.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the whole GBL file has been uploaded, the next state is <b>OTA END</b>. In this state the host program ends the OTA procedure by writing value 0x03 to the ota_control characteristic. Finally, the program terminates.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Some error cases have been omitted from the state diagram for simplicity. For example, the program exits with an error code if the OTA service is not found when performing service discovery or if the ota_control characteristic is not discovered in <b>FIND CHARACTERIS- TICS </b>state.</p><p class="s8" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">When the target device reboots into DFU mode, the host program must perform full service and characteristic discovery again. It is not possible to store the ota_control and ota_data characteristic handles in memory and use those cached values during the second connection. This is because the target device has two GATT databases that are independent of each other: one that is used by the application in normal mode and the other that is used by AppLoader in OTA DFU mode. While both of these GATT databases might include the Silicon Labs OTA service, the characteristic handles are likely to have different values. Therefore any kind of GATT caching cannot be used.</span></p></li></ol></li><li><p class="s8" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark28">OTA Error Codes</a></p></li></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When a new GBL file is being uploaded, the AppLoader performs various checks on it. AppLoader can signal possible errors to the OTA client in two ways:</p><ol id="l43"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Response to the OTA termination code (0x03) that is written to the OTA control characteristic.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Response to writes to the OTA_data characteristic.</p></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Option 2) is not available if the client uses unacknowledged writes. In that case, the possible error code is not available until the entire file has been uploaded and client finishes the upload by writing to the OTA control characteristic.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The OTA client must always check the response value to the last write to the OTA control characteristic. Any non-zero value indicates that the update was not successful. In that case, the device is not able to boot into the main program but rather stays in OTA mode. This makes it possible to try the update again.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following table summarizes the possible result codes returned by AppLoader.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 79pt;text-indent: 0pt;text-align: center;">Table 3.3.  AppLoader Result Codes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Result Code</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0000</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OK</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Success / No errors found.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0480</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CRC_ERROR</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">CRC check failed, or signature failure (if enabled).</p></td></tr><tr style="height:51pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0481</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">WRONG_STATE</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">This error is returned if the OTA has not been started (by writing value 0x0 to the control endpoint) and the client tries to send data or terminate the update.</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0482</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BUFFERS_FULL</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">AppLoader has run out of buffer space.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0483</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">IMAGE_TOO_BIG</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">New firmware image is too large to fit into flash, or it overlaps with AppLoader.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0484</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NOT_SUPPORTED</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">GBL file parsing failed. Potential causes are for example:</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-right: 88pt;text-indent: 0pt;text-align: right;">&quot;</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">&quot;</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">1) Attempting a partial update from one SDK version to another (such as 2.3.0 to 2.4.0)</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-right: 88pt;text-indent: 0pt;text-align: right;">&quot;</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">&quot;</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">2) The file is not a valid GBL file (for exam- ple, client is sending an EBL file)</p></td></tr><tr style="height:51pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0485</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BOOTLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">The Gecko bootloader cannot erase or write flash as requested by AppLoader, for example if the download area is too small to fit the entire GBL image.</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0486</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">INCORRECT_BOOTLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Wrong type of bootloader. For example, target device has UART DFU bootloader in- stead of OTA bootloader installed.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0487</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">APPLICATION_OVERLAP_APPLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">New application image is rejected because it would overlap with the AppLoader.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0488</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">INCOMPATIBLE_BOOTLOADER_VER- SION</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">AppLoader in Bluetooth SDK v3.0 requires Gecko Bootloader v1.11.</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0489 (1)</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 30pt;text-indent: 0pt;text-align: left;">ATT_ERROR_APPLICATION_VER- SION_CHECK_FAIL</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">AppLoader fails checking application ver- sion.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">(1) Only in SDK v3.x or later.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that the error codes listed above are applicable only when testing with the NCP host example. The upper half of the result code (0x04**) is generated by the BLE stack running on the NCP host device. The size of the ATT error code that is transmitted over the air is one octet. Values in the range 0x80-0x9F are reserved for application-specific errors in the Bluetooth specification.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The error messages reported by the EFR Connect mobile application do not match the naming used here. The following table shows the list of messages used in the EFR Connect Android application (v2.0.3).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 79pt;text-indent: 0pt;text-align: center;">Table 3.4.  EFR32 Connect Android Application Errors</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Result Code</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA-Specific Meaning</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Error Message Shown in the Android App</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x80</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CRC_ERROR</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT_NO_RESOURCES”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x81</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">WRONG_STATE</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT_INTERNAL_ERROR”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x82</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BUFFERS_FULL</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT_WRONG_STATE”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x83</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">IMAGE_TOO_BIG</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT_DB_FULL”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x84</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NOT_SUPPORTED</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT: BUSY”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x85</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BOOTLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT ERROR”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x86</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">INCORRECT_BOOTLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">“GATT CMD STARTED”</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x87</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">APPLICATION_OVERLAP_APPLOADER</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;GATT ILLEGAL PARAMETER&quot;</p></td></tr></table><ol id="l44"><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark34">Implementing Device Firmware Update in the User Application</a><a name="bookmark38">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">In addition to the basic UART and OTA DFU solutions discussed in previous chapters, it is possible to implement the firmware update functionality completely in the user application. This makes it possible to use a custom GATT service instead of the Silicon Labs OTA service. In case of UART DFU updates, the application can be designed to support some other protocol than BGAPI. The user applica- tion can be designed to support both OTA and UART DFU updates if needed and it is possible to support other interfaces such as SPI.</p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark30" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">To use this update mechanism, any application bootloader configuration may be used, using internal or external storage. At least one download area must be defined and the area must be large enough to fit the full GBL file. Partial update is not supported. The download area must not overlap with the user application and therefore this DFU solution is not applicable to devices or modules based on the EFR32xG1 (see </a>Figure 3.1 Examples of Main Flash Layout when Using Gecko Bootloader with Bluetooth OTA DFU on page 7<span style=" color: #000;">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l45"><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark35">Basic Steps to Update Firmware from the User Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The general firmware upgrade sequence is explained in <i>UG266: Silicon Labs Gecko Bootloader User’s Guide</i>. The basic steps are summarized below.</p><ol id="l46"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Application initializes the Gecko bootloader by calling <span class="s9">bootloader_init()</span>;</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The download area is erased by calling <span class="s9">bootloader_eraseStorageSlot(0)</span>;</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The update image (full GBL file) is received either over-the-air or through some physical interface like UART, application writes the received bytes to the download area by calling <span class="s9">bootloader_writeStorage()</span></p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">(optional) Application can verify the integrity of the received GBL file by calling <span class="s9">bootloader_verifyImage()</span></p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Before rebooting, call <span class="s9">bootloader_setAppImageToBootload(0) </span>to specify the slot ID where new image is stored</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Reboot and instruct Gecko bootloader to perform the update by calling <span class="s9">bootloader_rebootAndInstall()</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">It is assumed here that only one download area is configured and therefore the slot index in the above function calls is set to 0.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note that the erase procedure in step 2) above takes several seconds to complete. If the new image is downloaded over a Bluetooth connection then the supervision timeout must be set long enough to avoid connection drops. Alternatively, the download area can be erased in advance, before the Bluetooth connection is opened. A third alternative is to erase the download area one flash page at a time while the writing progresses. This can be done using <span class="s9">bootloader_eraseRawStorage()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s8" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark36">Enabling Gecko Bootloader API</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Gecko bootloader has an application interface exposed through a function table in the bootloader. To be able to call Gecko bootloader functions from your Bluetooth application, the following source files must be added into the project:</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">btl_interface.c <span class="p">(common interface)</span></p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">btl_interface_storage.c <span class="p">(interface to storage functionality)</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">These files are found in the Gecko SDK suite in the following directory (exact path depends on installed SDK version):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D8D8D8;"> \gecko_sdk_suite\v3.x\platform\bootloader\api\                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Starting with SDK v3.0, these files are copied to the sample projects by default but the corresponding include files must be added to the source file(s) that call any Gecko bootloader functions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;btl_interface.h&quot; #include &quot;btl_interface_storage.h&quot;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In addition, if you are using v2.x, make sure that the following \platform\bootloader\ directory is added in the include paths. Using a symbolic path to the SDK installation, this can be configured by adding following strings to the include paths:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;${StudioSdkPath}/platform/bootloader&quot; &quot;${StudioSdkPath}/platform/bootloader/api&quot;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s8" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark37">Example Implementation of Bluetooth OTA Update under Application Control</a></p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark29" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Silicon Labs OTA service is used here as a practical example on how to perform firmware update from user application code. The code sample included in the appendix implements OTA update using the same service definition that was discussed in section </a><a href="#bookmark29" class="a">3. Bluetooth </a>OTA Upgrade<span style=" color: #000;">. The main differences are:</span></p><ol id="l47"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The OTA is performed fully under application control and device is not rebooted into DFU mode (AppLoader is not involved in the update).</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Only full update is supported and the update is performed using one single GBL file (<span class="s9">full.gbl</span>).</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In-place OTA is not supported and the download area must not overlap with the user application.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">The OTA_data characteristic must be added to the user application’s GATT database. In SDK v2.x add the Silicon Labs OTA data characteristic to the OTA service from the list of predefined characteristics. In SDK v3.x uninstall the OTA DFU software compo- nent. This removes the whole OTA service. Add a new Silicon Labs OTA service (including OTA_control and OTA_data character- itics) to your GATT database from the list of predefined services.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Because AppLoader is not involved in this type of DFU implementation, it can be completely removed from the project to minimize flash usage.</p><p class="s8" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In v3.x: <span class="p">AppLoader can be removed from the SDK examples by uninstalling OTA-DFU using the Project Configurator in Simplicity Stu- dio 5.</span></p><p class="s8" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;">In v2.x<span class="p">: AppLoader can be removed from the SDK examples by deleting </span>binapploader.o <span class="p">from the project linker settings. Note that the code in the appendix is a simplified version. A more complete code example is included with this article:</span></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="https://docs.silabs.com/bluetooth/latest/code-examples/stack-features/firmware-upgrade/implementing-ota-firmware-update-in-user-application" class="a" target="_blank">https://docs.silabs.com/bluetooth/latest/code-examples/stack-features/firmware-upgrade/implementing-ota-firmware-update-in-user-ap- </a><a href="https://docs.silabs.com/bluetooth/latest/code-examples/stack-features/firmware-upgrade/implementing-ota-firmware-update-in-user-application" target="_blank">plication</a></p><p class="s6" style="padding-bottom: 3pt;padding-left: 300pt;text-indent: 0pt;text-align: left;">Appendix: Bluetooth OTA Update under Application Control</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_016.png"/></span></p></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark39">Appendix: Bluetooth OTA Update under Application Control</a></h4></li></ol></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="711" height="870" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_017.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s15" style="padding-top: 14pt;padding-left: 36pt;text-indent: 0pt;line-height: 122%;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="432" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;"><a href="http://www.silabs.com/IoT" class="s17">www.silabs.com/IoT</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_020.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">SW/HW</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/simplicity" class="s17">www.silabs.com/simplicity</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_022.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s17">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 5pt;padding-left: 205pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 205pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s17">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s19" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s20">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s20">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s20">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s23" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s22" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s24" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s19">Silicon Laboratories Inc.</span>®<span class="s19">, Silicon Laboratories</span>®<span class="s19">, Silicon Labs</span>®<span class="s19">, SiLabs</span>® <span class="s19">and the Silicon Labs logo</span>®<span class="s19">, Bluegiga</span>®<span class="s19">, Bluegiga Logo</span>®<span class="s19">, Clockbuilder</span>®<span class="s19">, CMEMS</span>®<span class="s19">, DSPLL</span>®<span class="s19">, EFM</span>®<span class="s19">, EFM32</span>®<span class="s19">, EFR, Ember</span>®<span class="s20">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s19">, EZLink</span>®<span class="s19">, EZRadio</span>®<span class="s19">, EZRadioPRO</span>®<span class="s19">, Gecko</span>®<span class="s19">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s19">, Precision32</span>®<span class="s19">, ProSLIC</span>®<span class="s19">, Simplicity Studio</span>®<span class="s19">, SiPHY</span>®<span class="s19">, Telegesis, the Telegesis Logo</span>®<span class="s19">, USBXpress</span>® <span class="s19">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s19">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1086-gecko-bootloader-bluetooth/Image_023.png"/></span></p><p class="s22" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s22" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">www.silabs.com</h3></p></body></html>
