<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s4 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s7 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s11 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s14 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s15 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt;counter-reset: d3 1; }
 #l9> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l10 {padding-left: 0pt;counter-reset: d4 1; }
 #l10> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l11 {padding-left: 0pt;counter-reset: d3 1; }
 #l11> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13 {padding-left: 0pt;counter-reset: d4 1; }
 #l13> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l14 {padding-left: 0pt;counter-reset: i1 1; }
 #l14> li>*:first-child:before {counter-increment: i1; content: counter(i1, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l15 {padding-left: 0pt;counter-reset: d3 1; }
 #l15> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l16 {padding-left: 0pt;counter-reset: d4 1; }
 #l16> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l17 {padding-left: 0pt;counter-reset: j1 1; }
 #l17> li>*:first-child:before {counter-increment: j1; content: counter(j1, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l18 {padding-left: 0pt;counter-reset: d2 1; }
 #l18> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt; }
 #l20> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21 {padding-left: 0pt;counter-reset: d2 1; }
 #l21> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l22 {padding-left: 0pt;counter-reset: m1 9; }
 #l22> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l22> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l23 {padding-left: 0pt;counter-reset: m2 1; }
 #l23> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l23> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l24 {padding-left: 0pt;counter-reset: m3 1; }
 #l24> li>*:first-child:before {counter-increment: m3; content: counter(m1, decimal)"."counter(m2, decimal)"."counter(m3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: m3 0;  }
 #l25 {padding-left: 0pt;counter-reset: n1 16; }
 #l25> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)"- "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l26 {padding-left: 0pt;counter-reset: n2 1; }
 #l26> li>*:first-child:before {counter-increment: n2; content: counter(n2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1135: Using Third Generation Non- Volatile Memory (NVM3) Data Storage</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="1" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="213" height="1" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Key/value pair data object storage in flash</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Wear-leveling to maximize flash lifetime</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Resilient to power and reset events</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Shared by Zigbee, Connect, OpenThread, Z-Wave, and Bluetooth stacks</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Compatible with PS Store and Token APIs through wrappers</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Data upgradable from Simulated EEPROM version 2 to NVM3</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The NVM3 driver provides a means to write and read data ob- jects (key/value pairs) stored in flash. Wear-leveling is applied to reduce erase and write cycles and maximize flash lifetime. The driver is resilient to power loss and reset events, ensuring that objects retrieved from the driver are always in a valid state. A sin- gle NVM3 instance can be shared among several wireless stacks and application code, making it well-suited for multiprotocol appli- cations. This application note explains how NVM3 can be used as non-volatile data storage in Zigbee (EmberZNet), Open Thread, Z-Wave, Bluetooth, and Connect applications.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Version 3.x of the Gecko SDK Suite, used with Simplicity Studio 5, introduced a new component-based project architecture that replaced AppBuilder. Eventually all wireless protocols will move to the component-based architecture. This document addresses both this new approach to NVM3 configuration as well as the AppBuilder configuration still in use.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The third generation Non-Volatile Memory (NVM3) data storage driver is for storing persistent data in flash.</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 19pt;text-align: left;">NVM3 is designed to work on all Silicon Labs wireless stacks running on EFR32 as well as MCU applications running on EFM32. Some of the main features of NVM3 are:</p><ul id="l3"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Key/value pair data storage in flash</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Runtime object creation and deletion</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Persistence across power loss and reset events</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Wear-leveling to maximize flash lifetime</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Object sizes configurable up to 4096 bytes</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Configurable flash storage size (minimum 3 flash pages)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Cache with configurable size for fast object access</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Data and counter object types</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Compatibility layers included for several Silicon Labs persistent storage APIs</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Single shared storage instance in multiprotocol applications</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Repack API to allow application to run clean-up page erases during periods with low CPU load</p><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="https://docs.silabs.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">NVM3 is described in detail in the NVM3 Documentation on </a>https://docs.silabs.com/<span style=" color: #000;">. The rest of this document assumes you are famili- ar with that content.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">While the NVM3 API can be used directly, NVM3 is also used as the underlying storage mechanism for several other persistent storage APIs provided by Silicon Labs:</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Token API used in EmberZnet and Connect applications</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Persistent Storage API used Silicon Labs Bluetooth applications</p></li></ul><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">NVM3 Default Instance</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_006.png"/></span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">NVM3 Default Instance</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Several NVM3 instances can be created on a device and live independently of each other, but to save memory it is usually desirable to use only one NVM3 instance as each instance adds some overhead. For applications based on Silicon Labs wireless stacks, a com- mon default instance is used. This allows Dynamic Multiprotocol (DMP) applications that combine several wireless stacks to share the same NVM3 instance.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The number of flash pages used for the NVM3 default instance is configurable, but this setting must match if an application includes several stacks that all use the default instance.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">IMPORTANT: <span class="p">When creating an application that includes an NVM3 instance for a device that already contains an NVM3 instance in flash, the number of flash pages configured for the NVM3 instance must match the number of flash pages for the NVM3 instance al- ready found on the device. Therefore it is not possible to change the size of an NVM3 instance once it has been installed on a device, without first erasing the flash pages holding the NVM3 instance and the NVM3 objects stored there.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">NVM3 has a cache to speed up access to NVM3 objects. The cache size must be set to a value greater than or equal to the number of objects found in NVM3. This includes the number of NVM3 objects created through the native NVM3 API and any objects created through higher level APIs such as the Token API. The cache must also be large enough to hold any deleted NVM3 objects. The <span class="s6">nvm3_countObjects() </span>and functions can be used to find the number of live and deleted objects in NVM3 at any given point. Silicon Labs recommends checking these functions after initialization of all NVM3 objects, both through the native NVM3 API and higher level APIs such as the token API, to figure out the correct size of the NVM3 default cache size.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s5" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">NVM3 Default Instance Key Space</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">NVM3 uses a 20-bit key to identify each object. To avoid using the same key for more than one object, the NVM3 key space for the default NVM3 instance has been divided into several domains as outlined in the following table. For example, NVM3 objects defined in the EmberZNet stack should use NVM3 keys in the range 0x10000 to 0x1FFFF, while user application tokens should use keys below 0x10000. Note that any user defined NVM3 objects should be placed below 0x10000.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 124pt;text-indent: 0pt;text-align: center;"><a name="bookmark3">Table 2.1.  NVM3 Default Instance Key Space</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Domain</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3 Key</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">User</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x00000 - 0x0FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EmberZNet stack</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x10000 - 0x1FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OpenThread stack</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x20000 - 0x2FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connect stack</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x30000 - 0x3FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth stack</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x40000 - 0x4FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Z-Wave stack</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x50000 - 0x5FFFF</p></td></tr><tr style="height:19pt"><td style="width:325pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x60000 - 0xFFFFF</p></td></tr></table><p class="s4" style="padding-bottom: 3pt;padding-left: 332pt;text-indent: 0pt;text-align: left;">NVM3 in the Simplicity Studio 5 Project Configurator</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_007.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark4">NVM3 in the Simplicity Studio 5 Project Configurator</a><a name="bookmark5">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">The Simplicity Studio 5 Project Configurator, used with Silicon Labs Bluetooth v3.x, Connect v3.x and OpenThread SDK applications, includes an <b>NVM3 Driver </b>component, found under Platform-&gt;Driver in the Software Components view. A separate component is also provided for the NVM3 default instance, which will initialize this instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="670" height="377" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The <b>NVM3 Default Instance </b>component provides the following configurations:</p><ul id="l5"><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Size<span class="p">: Number of bytes pages to use for NVM3 data storage. This must be set to match an integer number of flash pages, 3 pages at minimum.</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Cache Size: <span class="p">Number of objects to cache. To reduce access times, this number should be equal to or higher than the number of live and deleted objects stored in NVM3 at any time.</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Max Object Size: <span class="p">Size of largest allowed NVM3 object in bytes. Must be between 208 and 4096 bytes.</span></p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">User Repack Headroom: <span class="p">Headroom determining how many bytes below the forced repack limit the user repack limit is placed. The default value is 0, which means that the forced and the user repack limits are the same.</span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If the <b>NVM3 Default Instance </b>component is included in a project, the default instance will be initialized automatically during <i>sl_sys- tem_init() </i>if the <b>System Init </b>component found under Platform-&gt;Service-&gt;System is included in the project.</p><p class="s4" style="padding-bottom: 3pt;padding-left: 390pt;text-indent: 0pt;text-align: left;">Using NVM3 with Silicon Labs Connect</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_009.png"/></span></p></li></ul></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">Using NVM3 with Silicon Labs Connect</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark16" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This chapter applies to Connect in the Proprietary Flex SDK v3.x used with the Project Configurator in Simplicity Studio 5. Connect in Proprietary Flex SDK v2.x uses AppBuilder in Simplicity Studio 4. AppBuilder use is described in </a><a href="#bookmark16" class="a">7. Using NVM3 in AppBuilder-Based </a>Applications<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For Silicon Labs Connect v3.x applications, a <b>Token Manager </b><a href="#bookmark25" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">component is available under Platform-&gt;Driver in the Simplicity Studio Project Configurator Software Component view. While the token manager provides the </a><span style=" color: #049;">9.1 Token API</span>, an additional component must be selected for the token storage backend, either <b>Token Manager using Sim EEPROM 1, Token Manager using Sim EEPROM 2</b>, or <b>Token Manager using NVM3. </b>If NVM3 is chosen as the storage backend, <b>NVM3 </b>and the <b>NVM3 Default Instance </b>components are included in the project.</p><p class="s4" style="padding-bottom: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;">Using NVM3 with Silicon Labs OpenThread Applications</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_010.png"/></span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark7">Using NVM3 with Silicon Labs OpenThread Applications</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">This section applies to the Silicon Labs OpenThread SDK v1.x used with the Simplicity Project Configurator in Simplicity Studio 5. All OpenThread sample applications in the GSDK by default are configured to use NVM3 to store data in non-volatile memory. When doing so, these applications:</p><ul id="l6"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Utilize the common default NVM3 instance.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Include the NVM3 Driver and the NVM3 Default Instance components in the project.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Use the native NVM3 API to access the NVM3 object</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The NVM3 key space used by the OpenThread stack is 0x20000 to 0x2FFFF.</p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark8">Using NVM3 with Silicon Labs Bluetooth Applications</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Traditionally the Bluetooth stack uses its own proprietary solution to store data in non-volatile memory, called <b>Persistent Store (PS Store)</b><a href="https://www.silabs.com/documents/login/reference-manuals/bluetooth-api-reference.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">. PS Store stores both data handled by the stack (such as temporary Bluetooth address, bonding keys, and so on) and user data (such as the device state) that has to be preserved on resetting the device. To learn more about PS Store, read the related section of the </a><span style=" color: #049;">Bluetooth API Reference Guide</span>.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Some of the sample applications in the Bluetooth SDK are still configured to use PS Store, while others are already configured to use NVM3. This means that:</p><ul id="l7"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">On Series 1 devices sample apps are configured to use PS Store, except Bluetooth Mesh NCP sample projects, where NVM3 is used by default.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">On Series 2 devices all sample apps are configured to use NVM3.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">While Series 2 devices support NVM3 only, on Series 1 devices both PS Store and NVM3 can be used. This section describes how to configure NVM3 in the Bluetooth SDK, and how to switch between PS Store and NVM3 if needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s5" style="padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark9">Configuring NVM3 in the Bluetooth SDK With Simplicity Studio 5 and Bluetooth SDK v3.x</a><a name="bookmark12">&zwnj;</a></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark5" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">NVM3 can be configured with the Project Configurator as described in section </a>3. NVM3 in the Simplicity Studio 5 Project Configurator<span style=" color: #000;">.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">With Simplicity Studio 4 and Bluetooth SDK v2.x</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Project Configurator is not available to configure NVM3 parameters. Therefore, the parameters have to be defined manually. To overwrite the default parameters:</p><ol id="l9"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Open the project settings.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Find the defined symbols:</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">If you use GCC as your compiler, go to C/C++ Build&gt;Settings&gt;GNU ARM C Compiler&gt;Symbols&gt;Defined Symbols</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">If you use IAR as your compiler, go to C/C++ Build&gt;Settings&gt;IAR C/C++ compiler for ARM&gt;Preprocessor&gt;Defined Symbols</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Add any of the following defines to overwrite the default parameters:</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 182%;text-align: left;">NVM3_DEFAULT_NVM_SIZE NVM3_DEFAULT_CACHE_SIZE NVM3_DEFAULT_MAX_OBJECT_SIZE NVM3_DEFAULT_REPACK_HEADROOM</p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">You can find the description of each parameter in section </a>3. NVM3 in the Simplicity Studio 5 Project Configurator <span style=" color: #000;">Be careful when pro- viding the size of NVM3, as it must be a multiple of the flash page size. Note: On Series 1 devices the flash page size is typically 2 kB, while on Series 2 devices the flash page size is typically 8 kB. Check the data sheet for your device. The NVM size must be at least 3 flash pages.</span></p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Switching from PS Store to NVM3</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Beginning with Bluetooth SDK v2.13.0, both PS Store and NVM3 are supported as non-volatile memory solutions on Series 1 devices. Most sample applications are configured to use PS Store by default, but for some applications (where larger non-volatile memory is needed) NVM3 may be a better solution.</p><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>PS Store and NVM3 are not compatible with each other, therefore upgrading an already existing application from PS Store to NVM3 will result in losing all data stored on the device. If you have an application running in the field, it may be wiser to stay with PS Store. If you still want to upgrade, see <i>AN1086: Using the Gecko Bootloader with the Silicon Labs Bluetooth® Application </i>for details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">PS Store uses only 2 flash pages (=4 kB on an EFR32BG1/12/13 device). Therefore, changing to NVM3 will affect the available space in flash. You must be particularly careful when you upgrade the firmware not to overwrite the NVM3 area with the application.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">With Simplicity Studio 5 and Bluetooth SDK v3.x</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To change your project configuration from PS Store to NVM3, simply install the <b>NVM3 Default Instance </b><a href="#bookmark5" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">component in the Project Con- figurator as discussed in section </a><span style=" color: #049;">3. NVM3 in the Simplicity Studio 5 Project Configurator</span>. This will automatically uninstall the (otherwise hidden) PS Store component.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">With Simplicity Studio 4 and Bluetooth SDK v2.x</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To change your project configuration from PS Store to NVM3, use the following procedure.</p><ol id="l11"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Copy the following folder with all of its content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\platform\emdrv\nvm3</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">under the <span class="s6">/platform/emdrv </span>folder of your project.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Remove the following files from the project:</p><ul id="l12"><li><p class="s6" style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">/platform/emdrv/nvm3/src/nvm3_hal_extflash.c</p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">/platform/emdrv/nvm3/src/nvm3_default_extflash.c <span class="p">(NVM3 use with external flash is deprecated)</span></p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">If you use Apploader in your project, also copy the NVM3 version of Apploader from</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\lib\&lt;device&gt;</p><p class="s6" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">\&lt;compiler&gt;\binapploader_nvm3.o</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">into the <span class="s6">/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt; </span>folder of your project.</p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">If you use GCC as a compiler:</p><ol id="l13"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; GNU ARM C Compiler &gt; Includes</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Add <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/inc} </span>to the include directory.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; GNU ARM C Linker &gt; Miscellaneous</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/libpsstore.a}</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: left;">add <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/lib/libnvm3_CM4_gcc.a}</span></p><p class="s5" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">If you use IAR as a compiler:</p><ol id="l14"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -9pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; IAR C/C++ Compiler for ARM &gt; Preprocessor</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Add <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/inc} </span>to the include directory.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; IAR Linker for ARM &gt; Library</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/libpsstore.a}</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: left;">Add <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/lib/libnvm3_CM4_iar.a}</span>.</p></li></ol></li></ol></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">If you use Apploader, also modify</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/binapploader.o}</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">to <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/binapploader_nvm3.o}</span>.</p></li><li><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark12" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Configure NVM3 as described in section </a><a href="#bookmark12" class="a">6.1 Configuring NVM3 in the Bluetooth </a>SDK<span style=" color: #000;">.</span></p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Switching from NVM3 to PS Store</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">It may happen that, for a reason such as backward compatibility, you have to change the configuration from NVM3 to PS Store.</p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">With Simplicity Studio 5 and Bluetooth SDK v3.x</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To change your project configuration from NVM3 to PS Store, simply uninstall the NVM3 Default Instance component. This will auto- matically install the (otherwise hidden) PS Store component. Note, that this can only be done on series 1 devices, as series 2 devices do not support PS Store</p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">With Simplicity Studio 4 and Bluetooth SDK v2.x</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To change your project configuration from NVM3 to PS Store, use the following procedure:</p><ol id="l15"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Remove the <span class="s6">/platform/emdrv/nvm3 </span>folder from your project.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Copy the PS Store library from</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\lib\&lt;device&gt;</p><p class="s6" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">\&lt;compiler&gt;\libpsstore.a</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">into the <span class="s6">/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt; </span>folder of your project.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">If you use Apploader in your project, also copy the PS Store version of Apploader from</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\lib\&lt;device&gt;</p><p class="s6" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">\&lt;compiler&gt;\binapploader.o</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">into the <span class="s6">/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt; </span>folder of your project.</p><p class="s5" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Note: <span class="p">PS Store is not supported on Series 2 devices (EFR32xG2x), therefore there is only an NVM3 version of the Apploader for these devices.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: left;">If you use GCC as your compiler</p><ol id="l16"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; GNU ARM C Compiler &gt; Includes</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/inc} </span>from the include directory.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; GNU ARM C Linker &gt; Miscellaneous</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Add <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/libpsstore.a}</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/lib/libnvm3_CM4_gcc.a}</span>.</p><p class="s5" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">If you use IAR as your compiler</p><ol id="l17"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; IAR C/C++ Compiler for ARM &gt; Preprocessor</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/inc} </span>from the include directories.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Go to <span class="s6">Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; IAR Linker for ARM &gt; Library</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Add <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/libpsstore.a}</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Remove <span class="s6">${workspace_loc:/${ProjName}/platform/emdrv/nvm3/lib/libnvm3_CM4_iar.a}</span>.</p></li></ol></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">If you use Apploader, also change</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/binapploader_nvm3.o}</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">to <span class="s6">${workspace_loc:/${ProjName}/protocol/bluetooth/lib/&lt;device&gt;/&lt;compiler&gt;/binapploader.o}</span>.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark13">Using NVM3 in AppBuilder-Based Applications</a><a name="bookmark16">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">This chapter explains how NVM3 can be used for non-volatile storage in Appbuilder-based applications like EmberZNet 6.7.n and 6.8.n, EmberZNet-based DMP applications, and Connect applications in Gecko SDK Suite 2.7 and earlier.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l18"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">NVM3 Library Plugin</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To use NVM3 with an AppBuilder-based example application, the <b>NVM3 Library </b>plugin should be included in the project. All PS Store and SimEE plugins should be deselected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;"><span><img width="746" height="327" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_011.jpg"/></span></p><p class="s5" style="padding-top: 4pt;padding-left: 124pt;text-indent: 0pt;text-align: center;">Figure 7.1.  NVM3 Library Plugin in AppBuilder</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The <b>NVM3 Library </b>plugin offers four plugin options:</p><ul id="l19"><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Flash Pages<span class="p">: Number of flash pages to use for NVM3 data storage. Must be 3 or higher. Default is 18 (36KB) for EFR32 Series-1 devices and 4 (32KB) for EFR32 Series-2 devices</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Cache Size: <span class="p">Number of objects to cache. To reduce access times, this number should be equal to or higher than the number of objects, including tokens and deleted objects, stored in NVM3 at any time.</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Max Object Size: <span class="p">Size of largest allowed NVM3 object in bytes. Must be between 208 and 4096 bytes. Note that the token API can only be used to access objects of 254 bytes or smaller. When accessing larger objects, the native NVM3 API must be used.</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">User Repack Headroom: <span class="p">Headroom determining how many bytes below the forced repack limit the user repack limit is placed. The default value is 0, which means that the forced and the user repack limits are the same.</span></p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">When the NVM3 Library plugin is used the <b>Simulated EEPROM version 2 to NVM3 Upgrade Library </b>or <b>Simulated EEPROM ver- sion 2 to NVM3 Upgrade Stub Library </b><a href="#bookmark17" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">must be included, as described in section </a><span style=" color: #049;">7.2 SimEEv2 to NVM3 Upgrade Plugin</span>.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark15">SimEEv2 to NVM3 Upgrade Plugin</a><a name="bookmark17">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">An AppBuilder plugin (<b>Simulated EEPROM version 2 to NVM3 Upgrade Library</b><a href="#bookmark25" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">) is provided for EmberZNet applications that up- grade tokens stored in SimEEv2 to NVM3. For tokens to be successfully upgraded to NVM3, CREATOR_* and NVM3KEY_* defines must be added for all tokens as described in section </a><span style=" color: #049;">9.1 Token API</span>. The upgrade plugin will replace the SimEEv2 storage in-place with an NVM3 storage instance. The plugin does this by compacting the SimEEv2 storage down to 12 kB, and then creates an NVM3 in- stance in the remaining 24 kB of the original 36 kB SimEEv2 storage space. After the token data has been copied over from SimEEv2 to NVM3, the SimEEv2 storage is erased and the NVM3 instance is resized to use the entire 36 kB storage space. Apart from the code space needed for the upgrade library code, the upgrade does not require any additional flash space to the 36 kB storage area. The upgrade plugin requires that the existing SimEEv2 storage space and new NVM3 storage space are located at the same address and have the same size.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <b>Simulated EEPROM version 2 to NVM3 Upgrade Library </b>plugin should be included to enable the upgrade as shown in the figure below. If no SimEEv2 token data is found, the upgrade plugin will look for NVM3 data, and if neither is found it will create a new NVM3 instance with tokens set to their default values. For applications that do not need to upgrade any SimEEv2 tokens, the <b>Simulated EE- PROM version 2 to NVM3 Upgrade Stub </b>plugin should be included instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 17pt;text-indent: 0pt;text-align: left;"><span><img width="731" height="322" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_012.jpg"/></span></p><p class="s5" style="padding-top: 8pt;padding-left: 124pt;text-indent: 0pt;text-align: center;">Figure 7.2.  SimEEv2 to NVM3 Upgrade Library and Stub Plugins in AppBuilder</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Using NVM3 with Z-Wave Applications</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_013.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark18">Using NVM3 with Z-Wave Applications</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/documents/login/reference-manuals/INS14259.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">For details on using NVM3 with Z-Wave applications, see </a>INS14250-10: Z-Wave Plus V2 Application Framework SDK7<span style=" color: #000;">, section 6.4.</span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark19">NVM3 API Options</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter describes the three different APIs available to access NVM3 objects.</p><ul id="l20"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Token API</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Persistent Store API</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Native NVM3 API</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l21"><li><p class="s5" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Token API</a><a name="bookmark25">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The token API is used to access data stored in SimEEv1 and SimEEv2 with the EmberZNet and Connect stacks, as well as multiproto- col applications. Information on how to define and access tokens can be found in <i>AN1154: Using Tokens for Non-Volatile Data Storage</i>, and users should read this document before using the token API. When selecting the NVM3 Library plugin instead of one the SimEE plugins, the NVM3 default instance is used to store the token data instead of SimEE. The same token API can still be used to access tokens stored in NVM3, but the token definition needs some modifications to work with NVM3, as described below.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When defining a token to be used with SimEE, a creator code must be defined as an identifier for the token. Similarly, when defining a token to be used with NVM3, an NVM3 key must be defined for the token. A token definition that is compatible with both NVM3 and SimEE would include both an NVM3 key and a creator code and look like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">#define CREATOR_name 16bit_value #define NVM3KEY_name 20bit_value #ifdef DEFINETYPES</p><p class="s6" style="padding-left: 2pt;text-indent: 9pt;line-height: 107%;text-align: left;">typedef data_type type #endif</p><p class="s6" style="padding-left: 2pt;text-indent: 0pt;text-align: justify;">#ifdef DEFINETOKENS</p><p class="s6" style="padding-left: 2pt;text-indent: 9pt;line-height: 107%;text-align: left;">DEFINE_*_TOKEN(name, type, ... ,defaults) #endif</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p class="s10" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Select a 20-bit NVM3 key for the token, according to the domains in </a>Table 2.1 NVM3 Default Instance Key Space on page 3<span style=" color: #000;">. Each token must have a unique NVM3 key, except for indexed tokens, where more NVM3 keys must be reserved as outlined in section</span></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">9.1.2 Special Considerations for Indexed Tokens<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><ol id="l23"><ol id="l24"><li><p class="s5" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark21">Deleting Tokens</a></p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark27" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">As tokens are created at compile time, they cannot be created or deleted at run time. NVM3 objects are, however, created and deleted at run time, and the token initialization function creates NVM3 objects for each defined token if they do not already exist. The token initialization generally does not delete NVM3 objects found that do not have a corresponding token associated with them. Therefore, if a token is no longer included in an application, the application should manually delete the associated NVM3 object by using the NVM3 Native API described in section </a>9.3 Native NVM3 API<span style=" color: #000;">. For indexed tokens, however, the token initialization checks if indexed tokens have more or less indexes than the number of NVM3 objects found in the indexed token&#39;s NVK3KEY range. If there are fewer indexes, the token initialization deletes the extra NVM3 objects. If the number of indexes has been increased, new NVM3 objects will be created to hold these indexes.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When NVM3 objects are deleted, the actual object data remains in NVM3 but is marked as deleted. The deleted object data remains in NVM3 and consumes cache space until NVM3 repacks have erased the page(s) holding all versions of these objects.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark22">Special Considerations for Indexed Tokens</a><a name="bookmark26">&zwnj;</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">NVM3 does not have native support for indexed tokens. Therefore an extra requirement is imposed on the NVM3 key selection for in- dexed tokens. With NVM3, indexed tokens are implemented by storing each index in a separate object, starting with index 0 stored at the defined NVM3KEY_name key value and the last index (127) stored with key NVM3KEY_name + 127. Because of this implementa- tion, 128 NVM3 keys must be reserved for each indexed token. The user still only defines one NVM3KEY_name key value, but no other tokens should be defined with key values in the 127 values following this defined key. Even if the token is defined with fewer than 128 indices, all 128 indices should be reserved as the token might be expanded with more indices later on.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The example below shows two indexed tokens defined in the user key domain:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// This key is used for an indexed token and the subsequent 0x7F keys are also reserved #define NVM3KEY_MY_INDEXED_TOKEN_A 0x00000</p><p class="s6" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// This key is used for an indexed token and the subsequent 0x7F keys are also reserved #define NVM3KEY_MY_INDEXED_TOKEN_B 0x00080</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 124pt;text-indent: 0pt;text-align: center;">Table 9.1.  Indexed Token NVM3 Key Selection Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">NVM3KEY</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3 Objects Contents</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x00000</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_A index 0</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x00001</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_A index 1</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x00002</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_A index 2</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">…</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x0007F</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_A index 127</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x00080</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_B index 0</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x00081</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_B index 1</p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">…</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:97pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 25pt;padding-right: 25pt;text-indent: 0pt;text-align: center;">0x000FF</p></td><td style="width:443pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved for TOKEN_MY_INDEXED_TOKEN_B index 127</p></td></tr></table></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark23">Bluetooth NVM API</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth NVM API that was originally designed for PS Store can be used in the same way when using NVM3 as when using PS Store. The Bluetooth stack will automatically translate its NVM API calls to PS Store API calls or to NVM3 API calls in the background, depending on what components the project uses. The same applies for Zigbee + Bluetooth DMP projects, where NVM3 is applied as the storage mechanism, but the Bluetooth NVM API can still be used. The Bluetooth API is documented in the Bluetooth API Reference Manual. In Bluetooth SDK v2.x it can be found under the <i>Flash </i>class (commands starting with gecko_cmd_flash_), while in Bluetooth SDK v3.x it can be found under the <i>NVM </i>class (commands starting with sl_bt_nvm).</p><ol id="l25"><li><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">bit keys are used with the Bluetooth NVM API, which are then mapped to a 20-bit NVM3 key when NVM3 is used as storage mecha- nism. The four most significant bits are set to 0x4 to place these objects in the Bluetooth domain of the NVM3 default instance key space. As the Bluetooth NVM API is fixed to use only the Bluetooth domain, any objects to be placed in other domains, for example the User domain, must be created and accessed using the native NVM3 API.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If you want to use the Bluetooth NVM API and the native NVM3 API in the same app, then:</p><ol id="l26"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Call <span class="s6">gecko_init(pconfig) </span>to initialize the Bluetooth stack and open its own NVM3 instance. This is done in all Bluetooth sample apps.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Open NVM3 by calling the <span class="s6">nvm3_open() </span>function with the default (!) parameters to open your NVM3 instance:</p></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">nvm3_open(nvm3_defaultHandle, nvm3_defaultInit);</p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">User data can now be saved to:</p><ul id="l27"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">PS key range 0x4000 - 0x407F. All other PS keys (0x0000-0xFFFF) are reserved for the stack (for example for storing bonding da- ta).</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">NVM3 key range 0x00000-0x0FFFF (NVM3 user data area), and 0x44000-0x4407F (PS Store user data area).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For example, the following API calls will have the same effect (writing to the same area)::</p></li><li><p class="s6" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">nvm3_writeData(nvm3_defaultHandle,0x44000,(void*)data,len);</p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">gecko_cmd_flash_ps_save(0x4000,len,data); //in Bluetooth SDK v2.x</p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">sl_bt_nvm_save(0x4000,len,data); //in Bluetooth SDK v3.x</p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Similarly, you can read the same data with the following API calls:</p></li><li><p class="s6" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">nvm3_readData(nvm3_defaultHandle,0x44000,(void*)read_buffer,maxlen);</p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">gecko_cmd_flash_ps_load(0x4000); //in Bluetooth SDK v2.x</p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">sl_bt_nvm_load(0x4000,maxlen,&amp;read_len,(uint8_t*)read_buffer); //in Bluetooth SDK v3.x</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark24">Native NVM3 API</a><a name="bookmark27">&zwnj;</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For code accessing NVM3 objects that does not need to be compatible with the token or PS Store APIs, using the native NVM3 API to access NVM3 data is recommended to reduce code size and allow using the full feature set of NVM3. Any PS Store object or token can also be accessed through the native NVM3 API using the same NVM3 key. Complete documentation of this API is found in the EMDRV</p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="http://devtools.silabs.com/dl/documentation/doxygen/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">-&gt;NVM3 section of </a>Gecko HAL &amp; Driver API Reference Guide<span style=" color: #000;">.</span></p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Simplicity Commander and NVM3</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_014.png"/></span></p><h3 style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">10. Simplicity Commander and NVM3</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Simplicity Commander is a single, all-purpose tool to be used in a production environment. It is invoked using a simple CLI (Command Line Interface) that is also scriptable. Simplicity Commander supports reading out the NVM3 data area from a device and parsing the NVM3 data to extract stored values. This can be useful in a debugging scenario where you may need to find out the stored state of an application that has been running for some time.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">More information on how to use the Simplicity Commander with NVM3 can be found in <i>UG162: Simplicity Commander Reference Guide</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s12">www.silabs.com/products</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s12">www.silabs.com/quality</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s13" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_015.png"/></span></p><p class="s14" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1135-using-third-generation-nonvolatile-memory/Image_016.png"/></span></p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
