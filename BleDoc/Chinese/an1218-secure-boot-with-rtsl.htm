<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>an1218-secure-boot-with-rtsl</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s10 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .p, p { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; margin:0pt; }
 .s11 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s14 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s16 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s17 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 10pt; }
 .s18 { color: #F00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s19 { color: #70309F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s20 { color: #70309F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s21 { color: #70309F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s22 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13pt; }
 .s23 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9.5pt; }
 .s24 { color: #F00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s25 { color: #FFBF00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s26 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s27 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s28 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9.5pt; }
 .s29 { color: #FFBF00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s30 { color: #0070BF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s31 { color: #0070BF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s32 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s33 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; vertical-align: 3pt; }
 .s34 { color: #FFBF00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s35 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 6pt; }
 .s36 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s37 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s38 { color: #0070BF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s39 { color: #70309F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s40 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s41 { color: #00B050; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s42 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 6pt; }
 .s43 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s44 { color: #FFBF00; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s45 { color: #00B050; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s46 { color: #0070BF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5pt; }
 .s47 { color: #049; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s48 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s49 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s50 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s51 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s52 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s53 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s54 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5 {padding-left: 0pt;counter-reset: d3 1; }
 #l5> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l6 {padding-left: 0pt;counter-reset: f1 1; }
 #l6> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l6> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l7 {padding-left: 0pt;counter-reset: f2 4; }
 #l7> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt;counter-reset: d3 1; }
 #l9> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l10 {padding-left: 0pt;counter-reset: d4 1; }
 #l10> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l11 {padding-left: 0pt;counter-reset: d3 1; }
 #l11> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l12 {padding-left: 0pt;counter-reset: d4 1; }
 #l12> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l13 {padding-left: 0pt;counter-reset: g1 4; }
 #l13> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l14 {padding-left: 0pt;counter-reset: d4 1; }
 #l14> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l15 {padding-left: 0pt;counter-reset: d3 1; }
 #l15> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l16 {padding-left: 0pt;counter-reset: d4 1; }
 #l16> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l17 {padding-left: 0pt;counter-reset: d4 1; }
 #l17> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l18 {padding-left: 0pt;counter-reset: h1 1; }
 #l18> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l19 {padding-left: 0pt;counter-reset: i1 1; }
 #l19> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l20 {padding-left: 0pt;counter-reset: j1 2; }
 #l20> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l20> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l21 {padding-left: 0pt;counter-reset: j2 1; }
 #l21> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l21> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l22 {padding-left: 0pt;counter-reset: j3 1; }
 #l22> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l23 {padding-left: 0pt;counter-reset: k1 1; }
 #l23> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l24 {padding-left: 0pt;counter-reset: j4 1; }
 #l24> li>*:first-child:before {counter-increment: j4; content: counter(j4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: j4 0;  }
 #l25 {padding-left: 0pt;counter-reset: l1 1; }
 #l25> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l26 {padding-left: 0pt;counter-reset: m1 1; }
 #l26> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l27 {padding-left: 0pt;counter-reset: n1 1; }
 #l27> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l28 {padding-left: 0pt;counter-reset: o1 1; }
 #l28> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 #l29 {padding-left: 0pt;counter-reset: d3 1; }
 #l29> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l29> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l30 {padding-left: 0pt;counter-reset: d4 1; }
 #l30> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 li {display: block; }
 #l31 {padding-left: 0pt;counter-reset: p1 1; }
 #l31> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 li {display: block; }
 #l32 {padding-left: 0pt; }
 #l32> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1218-secure-boot-with-rtsl/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1218: Series 2 Secure Boot with RTSL</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1218-secure-boot-with-rtsl/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="1" alt="image" src="an1218-secure-boot-with-rtsl/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="213" height="1" alt="image" src="an1218-secure-boot-with-rtsl/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Compares the Secure Boot process in Series 1 and Series 2 devices</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Describes the Series 2 Secure Boot with RTSL components and process</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Provides examples of configuring a Series 2 device for the Secure Boot process</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Describes two methods to recover devices</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note describes the design of Secure Boot with RTSL (Root of Trust and Secure Loader), which was introduced with Wireless SoC Series 2. It also provides examples of how to implement the Secure Boot process.</p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Secure Boot Process</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">Introduction</a><a name="bookmark9">&zwnj;</a></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of Secure Boot is to protect the integrity of the behavior of the system. Because the behavior of the system is defined by the firmware running on it, Secure Boot acts to ensure the authenticity and integrity of the firmware. Secure Boot is a foundational com- ponent of platform security, and without it other security aspects such as secure storage, secure transport, secure identity, and data confidentiality can often be subverted through the injection of malicious code.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Secure Boot works as a process by which each piece of firmware is validated for authenticity and integrity before it is allowed to run. Each authenticated module can also validate additional modules before executing them, forming a chain of trust. If any module fails its security check, it is not allowed to run, and program control will typically stall in the validating module. In most lightweight IoT systems, the behavior of a Secure Boot failure is to cause the device to stop working until an authentically signed image can be loaded onto it. Whereas this may seem extreme, it is a better outcome than a smart light bulb being repurposed to mine crypto-currency, or a smart speaker being repurposed as a surveillance device on the end user’s private conversations.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The first link in the chain of trust is the root of trust. This is often the weakest link in the Secure Boot chain because the root of trust itself is not checked for authenticity or integrity. The security strength of the root of trust lies in its immutability. The strongest roots of trust have their firmware origin in ROM and use a Sign Key that is also located in ROM.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Wireless SoC Series 1 and Series 2 devices both use a two-stage boot design consisting of a non-upgradable first stage root of trust followed by an upgradable second stage. In Series 1 devices, the root of trust (also called the first-stage bootloader) is in flash rather than ROM, and the upgradable portion (the main bootloader) is checked for integrity using a CRC32 checksum, but is not checked for authenticity using a sign key. In Series 2 devices, the root of trust is in ROM, and the upgradable portion is checked both for integrity and authenticity.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">On Series 2 devices, the Secure Boot is implemented by the Secure Element. The Secure Element may be hardware-based, or virtual (software). If hardware-based, the implementation may be either with or without Secure Vault. Throughout this document, the following conventions will be used.</p><ul id="l4"><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">SE - Hardware Secure Element, either with or without Secure Vault if not specified</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">VSE - Virtual Secure Element</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure Element - Either SE or VSE</p></li></ul><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Secure Boot with RTSL is implemented by Root code executed by the SE Core or by the Cortex-M33 operating in VSE (Root mode). </a>Table 1.1 Minimum Secure Element Firmware Version for Secure Boot with RTSL on page 2 <span style=" color: #000;">indicates the minimum required Secure Element Root code versions that support Secure Boot with RTSL.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For more information about Secure Element, see section &quot;<i>Secure Element Subsystem</i><a href="https://www.silabs.com/documents/public/application-notes/an1190-efr32-secure-debug.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><span style=" color: #049;">AN1190: Series 2 Secure Debug</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark10">Table 1.1.  Minimum Secure Element Firmware Version for Secure Boot with RTSL</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device</p></td><td style="width:162pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure Element</p></td><td style="width:288pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Minimum Firmware Version for Secure Boot with RTSL</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32xG21A</p></td><td style="width:162pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SE without Secure Vault</p></td><td style="width:288pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32xG22</p></td><td style="width:162pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">VSE</p></td><td style="width:288pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td></tr><tr style="height:30pt"><td style="width:540pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="3"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Note: <span class="s8">Silicon Labs strongly recommends installing the latest Secure Element firmware on Series 2 devices.</span></p></td></tr></table></li><li><p class="s4" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Secure Boot (ECDSA-P256-SHA256) in Series 1 Devices</a></p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Secure Boot process for Series 1 devices originates in flash, typically with the execution of the first stage of Gecko Bootloader. The first stage of Gecko Bootloader checks to see if an upgrade is pending for the second stage of Gecko Bootloader. If so, it processes the upgrade of the second stage and then executes it. Otherwise, it just executes the second stage. If Secure Boot is enabled, the second stage of Gecko Bootloader checks the integrity and authenticity of the application image before executing it. If the integrity check fails, program control remains in the second stage bootloader. </a><a href="#bookmark11" class="a">Figure 1.1 Series 1 Secure Boot (ECDSA-P256-SHA256) Process on page </a>3 <span style=" color: #000;">illustrates the Secure Boot process on Series 1 devices.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="356" alt="image" src="an1218-secure-boot-with-rtsl/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark11">Figure 1.1.  Series 1 Secure Boot (ECDSA-P256-SHA256) Process</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">UG266: Silicon Labs Gecko Bootloader User&#39;s Guide <span style=" color: #000;">details the procedure for generating and downloading signed firmware images using Simplicity Commander.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Secure Boot (ECDSA-P256-SHA256) in Series 2 Devices</a></p><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><span style=" color: #000;">Details can be found in section &quot;</span><span class="s6">Gecko Bootloader Security Features</span><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide <a href="#bookmark40" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and the section </a>2.3.2 ECDSA-P256-SHA256 Secure Boot <span style=" color: #000;">example.</span></p><ol id="l5"><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark4">SE</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">In Series 2 devices with SE Core, the Secure Boot process originates in ROM contained in the SE security co-processor. </a><a href="#bookmark12">Figure</a></p><p class="s10" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">1.2 Series 2 SE Secure Boot (ECDSA-P256-SHA256) Process on page 4 <a href="#bookmark13" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a><a href="#bookmark13" class="a">Figure 1.3 Series 2 SE Secure Boot (ECDSA-P256-</a> SHA256) Flow on page 4 <span style=" color: #000;">illustrate the Secure Boot process and flow on Series 2 SE devices.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="378" alt="image" src="an1218-secure-boot-with-rtsl/Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark12">Figure 1.2.  Series 2 SE Secure Boot (ECDSA-P256-SHA256) Process</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="354" alt="image" src="an1218-secure-boot-with-rtsl/Image_007.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark13">Figure 1.3.  Series 2 SE Secure Boot (ECDSA-P256-SHA256) Flow</a></p></li><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark5">VSE</a></p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark14" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">In Series 2 devices with VSE, the host MCU assumes an elevated security state out of reset and securely boots itself from code that originates in ROM. </a>Figure 1.4 Series 2 VSE Secure Boot (ECDSA-P256-SHA256) Process on page 5 <a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a><a href="#bookmark15" class="a">Figure 1.5 Series 2 VSE </a>Secure Boot (ECDSA-P256-SHA256) Flow on page 5 <span style=" color: #000;">illustrate the Secure Boot process and flow on Series 2 VSE devices.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="354" alt="image" src="an1218-secure-boot-with-rtsl/Image_008.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark14">Figure 1.4.  Series 2 VSE Secure Boot (ECDSA-P256-SHA256) Process</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="354" alt="image" src="an1218-secure-boot-with-rtsl/Image_009.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark15">Figure 1.5.  Series 2 VSE Secure Boot (ECDSA-P256-SHA256) Flow</a></p><ol id="l6"><ol id="l7"><li><p class="s4" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Secure Boot (Certificate) in Series 2 Devices</a><a name="bookmark16">&zwnj;</a></p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><span style=" color: #000;">On Series 2 devices, a certificate-based Secure Boot operation is supported. Details can be found in section &quot;</span><span class="s6">Gecko Bootloader Securi- ty Features</span><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide <a href="#bookmark42" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and the section </a>2.3.3 Certificate-Based Secure Boot <span style=" color: #000;">example.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The certificate-based Secure Boot uses key delegation to minimize the exposure of the Private Sign Key, reducing the need to revoke the Public Sign Key.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If the certificate’s private key is leaked, all devices that have been programmed with that certificate can be updated with an image con- taining a certificate with a higher version (key revocation).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Sign Key and Secure Boot Enable Flag</a></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In Series 2 devices, the Sign Key and the Secure Boot Enable flag are both located in immutable one-time programmable memory (OTP). This means that once either is programmed, its respective value cannot be changed. Once the Sign Key is provisioned, it re- mains provisioned to that key value for the life of the device. Once Secure Boot is enabled, it remains enabled for the life of the device. Both of these assignment operations are irrevocable.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Sign Key used for Series 2 devices is the public portion of an ECDSA key pair over the NIST prime curve P-256. The Sign Key is a customer key and is typically provisioned during the initial product manufacturing and device programming phase. It is common for all products that share a common firmware image to be loaded with the same Public Sign Key. The key loaded into the device is a public key and has no confidentiality requirements. The private key associated with that public key, which will be used to sign firmware images or certificate, should be tightly held, ideally secured in a hardware security module (HSM).</p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">AN1222: Production Programming of Series 2 Devices <span style=" color: #000;">details the procedure for Sign Key provisioning during production.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s4" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Secure Loader</a></p></li></ol></ol><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">In Series 2 devices, the Secure Loader is firmware pre-loaded into the devices. It is maintained by Silicon Labs, and is deployed through secure upgrade packages. It is the functional equivalent of the first-stage Gecko Bootloader on Series 1 devices (see </a><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank">UG266: </a><span style=" color: #049;">Silicon Labs Gecko Bootloader User&#39;s Guide </span>for more information). The Secure Loader validates the authenticity and integrity of a stag- ed image before performing an upgrade operation. The Secure Loader requires the staged image to reside on-chip and the staged im- age must not overlap with the target destination address range. Firmware images that originate from off-chip, either off-chip storage, external NCP host interface, or through an OTA update procedure are expected to be staged either by the application or by Gecko Bootloader before calling the Secure Loader&#39;s <span class="p">Upgrade </span>command.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark17">Examples</a><a name="bookmark31">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Overview</a></p><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark32" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The examples for Series 2 Secure Boot are described in </a>Table 2.1 Secure Boot Examples on page 7<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark32">Table 2.1.  Secure Boot Examples</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Example</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio Board</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SE or VSE Firmware</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Tool</p></td></tr><tr style="height:19pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="2"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: justify;">Provision Public Sign Key and Secure Boot Enabling</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG21A010F1024IM32</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4181A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark35" class="s11">Simplicity Studio</a></p></td></tr><tr style="height:22pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG22C224F512IM40</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4182A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.2</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark39" class="s11">Simplicity Commander</a></p></td></tr><tr style="height:30pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark40" class="s11">ECDSA-P256-SHA256</a></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark40" class="s11">Secure Boot</a></p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG21A010F1024IM32</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4181A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Simplicity Commander</p></td></tr><tr style="height:30pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;"><a href="#bookmark42" class="s11">Certificate-Based Se- cure Boot</a></p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG21A010F1024IM32</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4181A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Simplicity Commander</p></td></tr><tr style="height:19pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="2"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Recover devices when Secure Boot fails</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG21A010F1024IM32</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4181A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark48" class="s11">Simplicity Commander (GUI)</a></p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG22C224F512IM40</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4182A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.2</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark49" class="s11">Simplicity Commander (CLI)</a></p></td></tr><tr style="height:30pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;"><a href="#bookmark50" class="s11">Upgrade to Secure Boot with RTSL</a></p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32MG21A010F1024IM32</p></td><td style="width:73pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BRD4181A</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Version 1.2.1</p></td><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure Element Manager</p></td></tr></table><ol id="l9"><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark19">Using Simplicity Commander</a><a name="bookmark33">&zwnj;</a></p><ol id="l10"><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Command Line Interface (CLI) of Simplicity Commander is invoked by <span class="p">commander.exe </span>in the Simplicity Commander folder. The location in Windows is <span class="p">C:\SiliconLabs\SimplicityStudio\&lt;version&gt;\developer\adapter_packs\commander</span>.</p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Simplicity Commander Version 1.9.2 is used in this application note.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander --version                                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Simplicity Commander 1v9p2b791</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">JLink DLL version: 6.70a</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Qt 5.5.1 Copyright (C) 2017 The Qt Company Ltd.</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">EMDLL Version: 0v17p12b535 mbed TLS version: 2.6.1</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 19pt;text-align: left;">Emulator found with SN=440068705 USBAddr=0 DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The target Wireless Starter Kit (WSTK) must be specified using the <span class="p">--serialno &lt;J-Link serial number&gt; </span>option if more than one WSTK is connected via USB.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The target device must be specified using the <span class="p">--device &lt;device name&gt; </span>option if the WSTK is in debug mode OUT.</p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">security genkey </span>command to generate the Sign Key pair (<span class="p">sign_key.pem </span>and <span class="p">sign_pubkey.pem</span>) for Secure Boot exam- ples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander security genkey --type ecc-p256 --privkey </span><span class="s15" style=" background-color: #D8D8D8;">sign_key.pem </span><span class="s13" style=" background-color: #D8D8D8;">--pubkey </span><span class="s15" style=" background-color: #D8D8D8;">sign_pubkey.pem                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Generating ECC P256 key pair...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing private key file in PEM format to sign_key.pem Writing public key file in PEM format to sign_pubkey.pem DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">gbl keyconvert </span>command to generate the Public Sign Key text file (<span class="p">sign_pubkey.txt</span>) for Public Sign Key provisioning example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander gbl keyconvert sign_pubkey.pem -o </span><span class="s15" style=" background-color: #D8D8D8;">sign_pubkey.txt                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing EC tokens to sign_pubkey.txt... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s10" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="https://www.silabs.com/documents/public/user-guides/ug162-simplicity-commander-reference-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">For more information about Simplicity Commander, see </a><a href="https://www.silabs.com/documents/public/user-guides/ug162-simplicity-commander-reference-guide.pdf" class="a" target="_blank">UG162: Simplicity Commander Reference </a>Guide<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li><li><p class="s4" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Provision Public Sign Key and Secure Boot Enabling</a><a name="bookmark34">&zwnj;</a></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In order to enable Secure Boot, a Sign Key pair must be generated. The public portion of the Sign Key pair is used to verify the image or certificate during Secure Boot and must then be written to the Secure Element OTP. The private portion of the Sign Key pair is used to sign the application image or certificate for Secure Boot, and this private key must be protected, ideally stored in a Hardware Security Module (HSM) or equivalent key storage instrument.</p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For SE with Secure Vault devices, the tamper settings must be written together with secure boot settings, and are immutable after they are written.</p><p class="s4" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <a href="#bookmark35" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Simplicity Studio does currently not support tamper provisioning on SE with Secure Vault devices. The procedures in </a><a href="#bookmark35" class="a">2.2.1 Sim- </a><span class="s10">plicity Studio </span><span class="s5">are only for SE without Secure Vault and VSE devices.</span></p><ol id="l11"><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark21">Simplicity Studio</a><a name="bookmark35">&zwnj;</a></p><ol id="l12"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Right-click the selected debug adapter <b>Radio Board (ID:J-Link serial number) </b>to display the context menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 111pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="324" alt="image" src="an1218-secure-boot-with-rtsl/Image_010.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark36">Figure 2.1.  Debug Adapter Context Menu</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: left;">Click <b>Device configuration... </b>to open the <b>Configuration of device: J-Link Silicon Labs (serial number) </b>dialog box. Click the</p><p class="s4" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Security Settings <span class="s5">tab to get the selected device configuration.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="601" height="451" alt="image" src="an1218-secure-boot-with-rtsl/Image_011.jpg"/></span></p><p class="s4" style="padding-top: 6pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark37">Figure 2.2.  Configuration on Selected Device</a></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Click [<b>Start Provisioning Wizard…</b>] in the upper right corner to display the <b>Secure Initialization </b>dialog box. Checking the <b>Enable Version Rollback Prevention of Host Image </b>option is recommended.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="481" height="225" alt="image" src="an1218-secure-boot-with-rtsl/Image_012.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark38">Figure 2.3.  Secure Initialization Dialog Box</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">Note: <span class="s5">The </span>Verify intermediate certificate before secure boot <span class="s5">option is for certificate-based Secure Boot as described in</span></p><p class="s10" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">1.4 Secure Boot (Certificate) in Series 2 Devices<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l13"><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Next &gt;</b>]. The <b>Security Keys </b>dialog box is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="325" alt="image" src="an1218-secure-boot-with-rtsl/Image_013.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.4.  Security Keys Dialog Box</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Checking <b>Enable Writing Sign Key </b>automatically enables Secure Boot. The following <b>Secure Boot Warning </b>is displayed. Click [<b>Yes</b>] to confirm.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="480" height="323" alt="image" src="an1218-secure-boot-with-rtsl/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.5.  Secure Boot Warning</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Open <span class="p">sign_pubkey.txt </span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">file generated in </a><span style=" color: #049;">2.1.1 Using Simplicity Commander </span>step 6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">MFG_SIGNED_BOOTLOADER_KEY_X : 997011ED1708580BD4A6B7F8AD6EE19B0B8722611FB76A3A5702D5141180E101 MFG_SIGNED_BOOTLOADER_KEY_Y : 0AC8673C8ACC26EE2B534C004F4A4B7EBBC23D04506DD66E3EF0DDC81E3CA55E</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Copy Public Sign Key (<span class="p">9970... </span>first, then <span class="p">0AC8...</span>) to <b>Key: </b>box under <b>Sign Key:</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="481" height="324" alt="image" src="an1218-secure-boot-with-rtsl/Image_015.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.6.  Enter Public Sign Key</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Next &gt;</b>]. The <b>Secure Locks </b>dialog box is displayed. When Secure Boot is enabled, the <b>Debug locks </b>are not set by default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 132pt;text-indent: 0pt;text-align: left;"><span><img width="481" height="226" alt="image" src="an1218-secure-boot-with-rtsl/Image_016.jpg"/></span></p><p class="s4" style="padding-top: 7pt;padding-left: 42pt;text-indent: 188pt;line-height: 220%;text-align: left;">Figure 2.7. Security Locks Dialog Box Note: <a href="https://www.silabs.com/documents/public/application-notes/an1190-efr32-secure-debug.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">See </a><span class="s10">AN1190: Series 2 Secure Debug </span><span class="s5">for more information about these locks</span></p></li><li><p class="s5" style="padding-top: 1pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Next &gt;</b>] to display the <b>Summary </b>dialog box.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="671" height="193" alt="image" src="an1218-secure-boot-with-rtsl/Image_017.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.8.  Summary Dialog Box</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -13pt;text-align: left;">If the information displayed is correct, click [<b>Provision</b>]. Click [<b>Yes</b>] to confirm.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="675" height="194" alt="image" src="an1218-secure-boot-with-rtsl/Image_018.jpg"/></span></p><p class="s4" style="padding-top: 7pt;padding-left: 42pt;text-indent: 161pt;line-height: 220%;text-align: left;">Figure 2.9. One Time Device Provisioning Window Note: <span class="s5">The Public Sign Key and Secure Boot enable cannot be changed once written.</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">The <b>Provisioning Status </b>is displayed in the <b>Summary </b>dialog box.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="676" height="262" alt="image" src="an1218-secure-boot-with-rtsl/Image_019.jpg"/></span></p><p class="s4" style="padding-top: 7pt;padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.10.  Provisioning Status</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -13pt;text-align: left;">Click [<b>Done</b>] to exit the provisioning process. The device configuration is updated, click [<b>OK</b>] to exit.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="664" height="350" alt="image" src="an1218-secure-boot-with-rtsl/Image_020.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.11.  Device Configuration after Provisioning</p></li></ol></li><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark22">Simplicity Commander</a><a name="bookmark39">&zwnj;</a></p><ol id="l14"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">security status </span>command to get the selected device configuration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander security status --device EFR32MG22C224F512 --serialno 440068705                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="704" height="112" alt="image" src="an1218-secure-boot-with-rtsl/Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;">Secure debug unlock : Disabled</p><p class="s14" style="text-indent: 0pt;text-align: left;">Secure boot : Disabled</p><p style="text-indent: 0pt;line-height: 107%;text-align: left;">Boot status     : 0x20 - OK DONE</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">: 000000000000000014b457fffed50d1e</p><p style="text-indent: 0pt;text-align: left;">: Disabled</p><p style="text-indent: 0pt;text-align: left;">: Enabled</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 107%;text-align: left;">Serial number Debug lock Device erase</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">SE Firmware version : 1.2.1</p><p style="text-indent: 0pt;text-align: left;"/></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">security writekey </span>command to provision the Public Sign Key with <span class="p">sign_pubkey.pem </span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">file generated in </a><a href="#bookmark33" class="a">2.1.1 Using Sim-</a><span style=" color: #049;"> plicity Commander </span>step 5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander security writekey --sign </span><span class="s15" style=" background-color: #D8D8D8;">sign_pubkey.pem </span><span class="s13" style=" background-color: #D8D8D8;">--device EFR32MG22C224F512 --serialno 440068705          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device has serial number 000000000000000014b457fffed50d1e</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Please look through any warnings before proceeding.</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">THIS IS A ONE-TIME command, all code to be run on the device must be signed by this key. Type &#39;continue&#39; and hit enter to proceed or Ctrl-C to abort:</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">continue DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Note: <span class="s5">The Public Sign Key cannot be changed once written.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">security readkey </span>command to verify the Public Sign Key with <span class="p">sign_pubkey.txt </span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">generated in </a><a href="#bookmark33" class="a">2.1.1 Using Simplicity</a><span style=" color: #049;"> Commander </span>step 6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander security readkey </span><span class="s15" style=" background-color: #D8D8D8;">--sign </span><span class="s13" style=" background-color: #D8D8D8;">--device EFR32MG22C224F512 --serialno 440068705                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">997011ED1708580BD4A6B7F8AD6EE19B0B8722611FB76A3A5702D5141180E101</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">0AC8673C8ACC26EE2B534C004F4A4B7EBBC23D04506DD66E3EF0DDC81E3CA55E DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Instructions on how to enable the Secure Boot and tamper provisioning (SE with Secure Vault devices only) can be found in sec- tion &quot;<i>Secure Boot Enabling</i><a href="https://www.silabs.com/documents/public/application-notes/an1222-efr32xg2x-production-programming.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/application-notes/an1222-efr32xg2x-production-programming.pdf" class="a" target="_blank">AN1222: Production Programming of Series 2 </a><span style=" color: #049;">Devices</span>.</p></li></ol></li></ol></li><li><p class="s4" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark23">Secure Boot</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><li><p class="s4" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark24">Overview</a></p><ol id="l16"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The Sign Key pair (<span class="p">sign_key.pem </span>and <span class="p">sign_pubkey.pem</span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">) in </a><a href="#bookmark33" class="a">2.1.1 Using Simplicity Commander</a> step 5 is used to sign and verify the image file or certificate in the following examples.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">A Gecko Bootloader called <span class="p">bootloader-uart-xmodem </span>(v1.10.3) is used in the following examples. It can be built using the Applica- tion Builder in Simplicity Studio. For Series 2 devices, only the main bootloader hex file <span class="p">bootloader-uart-xmodem.s37 </span>is gener- ated. This file should be copied to the Simplicity Commander folder.</p><p class="s5" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><b>Note: </b>For more information on how to build a Gecko Bootloader example, see section &quot;<i>Getting Started with the Gecko Bootloader</i><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><span style=" color: #049;">UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: justify;">For Series 2 devices, the bootloader is placed at address <span class="p">0x00000000</span>. Therefore the start address of the application image should be set to the next main flash page after the bootloader.</p><p class="s5" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><b>Note: </b>For more information on how to set up the start address of the application image, see section &quot;<i>Creating Applications for Use with the Bootloader</i><a href="https://www.silabs.com/documents/public/application-notes/an0042-efm32-usb-uart-bootloader.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><span style=" color: #049;">AN0042: USB/UART Bootloader</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: justify;">Assume an unsigned application image file <span class="p">blink.s37 </span>at <span class="p">0x00004000 </span>(SE devices) or <span class="p">0x00006000 </span>(VSE devices) was generated and copied to the Simplicity Commander folder.</p><p class="s5" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><b>Note: </b>For more information about application start address, see section &quot;<i>Memory Space For Bootloading</i><a href="https://www.silabs.com/documents/public/user-guides/ug103-06-fundamentals-bootloading.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/user-guides/ug103-06-fundamentals-bootloading.pdf" class="a" target="_blank">UG103.6: Bootloader </a><span style=" color: #049;">Fundamentals</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: justify;">The application image should contain an <span class="p">ApplicationProperties_t </span>structure declaring the application version, capabilities, and other metadata. The definition of <span class="p">ApplicationProperties_t </span>can be found in <span class="p">application_properties.h </span>(the location in Win- dows is <span class="p">C:\SiliconLabs\SimplicityStudio\&lt;version&gt;\developer\sdks\gecko_sdk_suite\&lt;version&gt;\platform\bootload er\api</span>).</p><p class="s5" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><b>Note: </b>In protocol stacks from Silicon Labs, the <span class="p">ApplicationProperties_t </span>structure is already present in an <span class="p">application_proper ties.c </span>file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: justify;">Run the <span class="p">util appinfo </span>command to get all available information about <span class="p">ApplicationProperties_t </span>structure in an application im- age. If <b>Enable Version Rollback Prevention of Host Image </b><a href="#bookmark38" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">in </a><span style=" color: #049;">Figure 2.3 Secure Initialization Dialog Box on page 10 </span>is checked, application images with a lower <span class="p">App version </span>than the image currently stored in flash will not run on the device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander util appinfo blink.s37                                                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Found application properties in image. Application properties info:</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Application properties location : 0x0000109c</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Signature location : Not set (0x00000000)</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Signature type : No signature</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Long token section address : Not set (0x00000000)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Application data info:</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If rollback prevention is enabled, the device will not boot if the device has seen an application with a higher version number.</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">App type : MCU application (APPLICATION_TYPE_MCU)</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">App version : 0x00000000</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Product ID : Not set (0x00000000000000000000000000000000)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">No certificate found in image.</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If the configuration flag SECURE_BOOT_VERIFY_CERTIFICATE is set or a device has previously seen certificate based signing, it will not accept direct signing.</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><b>Note: </b>For more information about the <span class="p">ApplicationProperties_t </span>structure, see section &quot;<i>Application Properties</i><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank">UG266: Silicon </a><span style=" color: #049;">Labs Gecko Bootloader User&#39;s Guide</span>.</p></li></ol></li><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark25">ECDSA-P256-SHA256 Secure Boot</a><a name="bookmark40">&zwnj;</a></p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark41" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Signing and verification for ECDSA-P256-SHA256 Secure Boot are described in </a><a href="#bookmark41" class="a">Figure 2.12 ECDSA-P256-SHA256 Sign and Verify on </a>page 16<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 222pt;text-indent: 0pt;text-align: left;"><span><img width="7" height="7" alt="image" src="an1218-secure-boot-with-rtsl/Image_022.png"/></span>	</p><p style="text-indent: 0pt;text-align: left;"><span><img width="88" height="50" alt="image" src="an1218-secure-boot-with-rtsl/Image_023.png"/></span></p><p class="s17" style="padding-left: 9pt;text-indent: 0pt;line-height: 11pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private Sign Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="88" height="50" alt="image" src="an1218-secure-boot-with-rtsl/Image_024.png"/></span></p><p class="s17" style="padding-left: 9pt;text-indent: 0pt;line-height: 11pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private Sign Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="15" height="31" alt="image" src="an1218-secure-boot-with-rtsl/Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="16" alt="image" src="an1218-secure-boot-with-rtsl/Image_026.png"/></span></p><p class="s17" style="text-indent: 0pt;line-height: 11pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s18" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL image</p><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL image</p><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 7pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Public Sign Key</p><p class="s16" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">in SE/VSE OTP</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="16" height="31" alt="image" src="an1218-secure-boot-with-rtsl/Image_027.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="94" height="15" alt="image" src="an1218-secure-boot-with-rtsl/Image_028.png"/></span></p><p class="s17" style="text-indent: 0pt;line-height: 11pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s18" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">App image</p><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">App image</p><p class="s16" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public Sign Key</p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: center;">in SE OTP1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-left: 140pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><a name="bookmark41">Bootloader (BL)</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="422" height="1" alt="image" src="an1218-secure-boot-with-rtsl/Image_029.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 222pt;text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="an1218-secure-boot-with-rtsl/Image_030.png"/></span>	</p><p class="s19" style="padding-left: 140pt;text-indent: 0pt;text-align: left;">Application (APP)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.12.  ECDSA-P256-SHA256 Sign and Verify</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 24pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>The bootloader cannot access the Public Sign Key in VSE OTP to verify the application image. Therefore VSE devices need to store a Public Sign Key copy in the top page of the main flash (see section &quot;<i>Key Storage</i><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank">UG266: Silicon Labs Gecko Bootloader </a><span style=" color: #049;">User&#39;s Guide</span>).</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Run the <span class="p">flash </span>command to write the file (<span class="p">sign_pubkey.txt </span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">generated in </a><span style=" color: #049;">2.1.1 Using Simplicity Commander </span>step 6) containing the Public Sign Key as a manufacturing token to the VSE device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander flash --tokengroup znet --tokenfile </span><span class="s15" style=" background-color: #D8D8D8;">sign_pubkey.txt                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Secure Boot settings:</p><p class="s10" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark38" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Use the Secure Boot settings in </a>Figure 2.3 Secure Initialization Dialog Box on page 10 <span style=" color: #000;">to provision the Public Sign Key for ECDSA- P256-SHA256 Secure Boot.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;"><span><img width="481" height="225" alt="image" src="an1218-secure-boot-with-rtsl/Image_031.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Bootloader image file:</p><ol id="l17"><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">Open the <span class="p">bootloader-uart-xmodem.isc </span>file, and check the <b>Enable secure boot </b>option in AppBuilder&#39;s <b>Core </b>Plugin to enable Secure Boot in the application image. Click [<b>Generate</b>] to save the change, then build the project to generate the <span class="p">bootloader-uar t-xmodem.s37 </span>file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="689" height="250" alt="image" src="an1218-secure-boot-with-rtsl/Image_032.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: justify;">Run the <span class="p">convert </span>command with <b>Private Sign Key </b>to generate the signed bootloader image file (<span class="p">bootloader-uart-xmodem-signe d.s37</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">commander convert bootloader-uart-xmodem.s37 --secureboot --keyfile <b>sign_key.pem </b>--outfile bootloader-uart- xmodem-signed.s37</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file bootloader-uart-xmodem.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: c4edf30cd3fef23790141720402e9b0bf670ed06901b10bf16ff4764a2bb738b R = 4885A746098A895849238D80C5FF0B5EDCA2C74B0D781B44198D549A5C831AD8</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 2D2524721147F0FA7464EA6E62858C4733295C4913889581FDDEE066D6395E17</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to bootloader-uart-xmodem-signed.s37... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util verifysign </span>command with <b>Public Sign Key </b>to verify that the file was correctly signed (optional).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander util verifysign bootloader-uart-xmodem-signed.s37 --verify <b>sign_pubkey.pem</b></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file bootloader-uart-xmodem-signed.s37... Found application properties at 0x00002960</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Did not find application certificate in file</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If the configuration flag SECURE_BOOT_VERIFY_CERTIFICATE is set or a device has previously seen certificate based signing, it will not accept direct signing.</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found signature at 0x00002b88</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified application signature. DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">flash </span>command to program the <span class="p">bootloader-uart-xmodem-signed.s37 </span>file to the device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander flash bootloader-uart-xmodem-signed.s37 --device EFR32MG21A010F1024 --serialno 440068705</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ERROR: DCI command failed due to: Internal error</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">WARNING: DCI communication failed, trying again after reset...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">WARNING: Failed secure boot detected. Issuing a mass erase before flashing to recover the device... Parsing file bootloader-uart-xmodem-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing 16384 bytes starting at address 0x00000000 Comparing range 0x00000000 - 0x00003FFF (16 KB) Programming range 0x00000000 - 0x00001FFF (8 KB) Programming range 0x00002000 - 0x00003FFF (8 KB) Verifying range 0x00000000 - 0x00003FFF (16 KB) DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Application image file:</p><ol id="l18"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The application image should contain an <span class="p">application_properties.c </span>file as shown below for ECDSA-P256-SHA256 Secure Boot. The <span class="p">cert </span>is set to <span class="p">NULL </span>to disable the application certificate option. The <span class="p">signatureType </span>and <span class="p">signatureLocation </span>are filled by Simplicity Commander when signing the application image using the <span class="p">convert </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &lt;stddef.h&gt;</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &quot;application_properties.h&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Application version number (uint32_t) for anti-rollback #define APP_PROPERTIES_VERSION (0UL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">// Application properties for secure boot</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">const ApplicationProperties_t sl_app_properties = {</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.magic = APPLICATION_PROPERTIES_MAGIC,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_PROPERTIES_VERSION,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureType = APPLICATION_SIGNATURE_NONE,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureLocation = 0,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.app = {</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.type = APPLICATION_TYPE_MCU,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.version = APP_PROPERTIES_VERSION,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.capabilities = 0UL,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.productId = { 0U },</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">},</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.cert = NULL,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.longTokenSectionAddress = NULL,</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">convert </span>command with <b>Private Sign Key </b>to generate the signed application image file (<span class="p">blink-signed.s37</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander convert blink.s37 --secureboot --keyfile </span><span class="s15" style=" background-color: #D8D8D8;">sign_key.pem </span><span class="s13" style=" background-color: #D8D8D8;">--outfile blink-signed.s37                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: a2d5af113a6b65c7d815e68b518335b17e9cc4196b7e4b294cb7e2f4531ea926 R = B79D7AD20629F617E32F08C207867541965945181FD282F0AFE2F98EAFDECE94</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 3A0E0CDEF3F48D24D8161E4FF5AEC7C685EF871B62B38F8532329323290215AE</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to blink-signed.s37... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util verifysign </span>command with <b>Public Sign Key </b>to verify that the file was correctly signed (optional).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander util verifysign blink-signed.s37 --verify </span><span class="s15" style=" background-color: #D8D8D8;">sign_pubkey.pem                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Found application properties at 0x0000109c Did not find application certificate in file</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If the configuration flag SECURE_BOOT_VERIFY_CERTIFICATE is set or a device has previously seen certificate based signing, it will not accept direct signing.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">GBL upgrade file:</p><ol id="l19"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">gbl create </span>command to generate the bootloader GBL upgrade file (<span class="p">bootloader-uart-xmodem.gbl</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander gbl create bootloader-uart-xmodem.gbl --bootloader bootloader-uart-xmodem-signed.s37              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file bootloader-uart-xmodem-signed.s37... Initializing GBL file...</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Adding bootloader to GBL...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file bootloader-uart-xmodem.gbl... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">gbl create </span>command to generate the application GBL upgrade file (<span class="p">blink.gbl</span>).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander gbl create blink.gbl --app blink-signed.s37                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file blink-signed.s37... Initializing GBL file...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Writing GBL file blink.gbl... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark26">Certificate-Based Secure Boot</a><a name="bookmark42">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="691" height="318" alt="image" src="an1218-secure-boot-with-rtsl/Image_033.png"/></span></p><p class="s20" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Bootloader (BL)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s21" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">Bootloader (BL) Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="text-indent: 0pt;line-height: 15pt;text-align: left;">Standard</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Application (App)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 7pt;text-indent: -7pt;text-align: left;">Public BL Key in BL certificate</p><p class="s25" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 9pt;text-align: center;">BL image</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL image</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">(variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL certificate</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL certificate</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">version (4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public BL Key</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Reserved flags</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Certificate structure</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public BL Key in</p><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Private Sign Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Public Sign Key</p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">in SE/VSE OTP</p><p style="text-indent: 0pt;text-align: left;"/><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark43" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Signing and verification for certificate-based Secure Boot are described in </a>Figure 2.13 Certificate-Based Sign and Verify on page 20<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:183.663pt" cellspacing="0"><tr style="height:21pt"><td style="width:62pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#FFBF00;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:93pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:1pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" bgcolor="#BFBFBF"><p class="s27" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;"><a name="bookmark43">App image</a></p><p class="s27" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">(variable size)</p></td></tr><tr style="height:9pt"><td style="width:93pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:1pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" rowspan="2" bgcolor="#FFBF00"><p class="s27" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">App image</p><p class="s27" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">signature (64 bytes)</p></td></tr><tr style="height:10pt"><td style="width:62pt;border-top-style:solid;border-top-width:2pt;border-top-color:#FFBF00;border-right-style:solid;border-right-width:1pt;border-right-color:#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:346.386pt" cellspacing="0"><tr style="height:21pt"><td style="width:117pt;border-right-style:solid;border-right-width:1pt;border-right-color:#797777"><p class="s28" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">     </p></td><td style="width:77pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:1pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" bgcolor="#0070BF"><p class="s27" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Private App Key</p></td></tr><tr style="height:66pt"><td style="width:158pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-right: 12pt;text-indent: 0pt;line-height: 9pt;text-align: right;">Sign</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="691" height="453" alt="image" src="an1218-secure-boot-with-rtsl/Image_034.png"/></span></p><p class="s20" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Bootloader (BL)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s21" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">Bootloader (BL) Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="text-indent: 0pt;line-height: 15pt;text-align: left;">Advanced</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">                                          </p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Application (App)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s21" style="padding-left: 11pt;text-indent: -11pt;text-align: left;">Application (App) Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="text-indent: 0pt;line-height: 10pt;text-align: left;">                                          </p><p style="text-indent: 0pt;text-align: left;"/><p class="s31" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">App image</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">App image</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">(variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">App certificate</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 17pt;text-indent: 0pt;line-height: 10pt;text-align: left;">App certificate</p><p class="s26" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">version (4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public App Key</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Reserved flags</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Certificate structure</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">BL image</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL image</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">(variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL certificate</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">BL certificate version</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public BL Key</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Reserved flags</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Certificate structure</p><p class="s26" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: center;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public App Key in</p><p class="s26" style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">App Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public BL Key in</p><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Public BL Key in</p><p class="s26" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private Sign Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Public Sign Key</p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">in SE/VSE OTP</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 117pt;text-indent: 0pt;text-align: center;">Figure 2.13.  Certificate-Based Sign and Verify</p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Certificate:</p><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark44" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The elements of a certificate are described in </a>Table 2.2 Certificate Structure on page 21<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark44">Table 2.2.  Certificate Structure</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Element</p></td><td style="width:396pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate structure version</p></td><td style="width:396pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">The version of the certificate structure.</p></td></tr><tr style="height:19pt"><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate public key</p></td><td style="width:396pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ECDSA-P256 public key, X and Y coordinates concatenated, used to validate the image.</p></td></tr><tr style="height:19pt"><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate version</p></td><td style="width:396pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">The version of the running certificate.</p></td></tr><tr style="height:19pt"><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate signature</p></td><td style="width:396pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ECDSA-P256 signature, used for the authentication of the public key and the certificate version.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Private/Public Key pair:</p><p class="s10" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark45" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">For certificate-based Secure Boot, three Private/Public Key pairs are used in different certificates (</a><a href="#bookmark45" class="a">Table 2.3 Certificates and Key Pairs </a>for Certificate-Based Secure Boot Examples on page 21<span style=" color: #000;">). These key pairs can be generated by Simplicity Commander as in</span></p><ol id="l20"><ol id="l21"><ol id="l22"><li><p class="s10" style="padding-left: 46pt;text-indent: -22pt;text-align: left;">Using Simplicity Commander <span style=" color: #000;">step 5.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 117pt;text-indent: 0pt;text-align: center;"><a name="bookmark45">Table 2.3.  Certificates and Key Pairs for Certificate-Based Secure Boot Examples</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:145pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate</p></td><td style="width:92pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Private Key</p></td><td style="width:105pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Public Key</p></td><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:40pt"><td style="width:145pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bootloader (<span class="s32">bloader_cert.bin</span>)<span class="s33">1</span></p></td><td style="width:92pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bloadercert_key.pem</p></td><td style="width:105pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bloadercert_pubkey.pem</p></td><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;text-align: left;">The bootloader certificate is signed by the <b>Pri- vate Sign Key </b>corresponding to the Public Sign Key in Secure Element OTP.</p></td></tr><tr style="height:40pt"><td style="width:145pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Application (<span class="s32">app_cert.bin)</span><span class="s33">2</span></p></td><td style="width:92pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">appcert_key.pem</p></td><td style="width:105pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">appcert_pubkey.pem</p></td><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">The application certificate is signed by the <b>Pri- vate Bootloader Key </b>in the bootloader certifi- cate.</p></td></tr><tr style="height:30pt"><td style="width:145pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">GBL (<span class="s32">gbl_cert.bin</span>)<span class="s33">2</span></p></td><td style="width:92pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gblcert_key.pem</p></td><td style="width:105pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gblcert_pubkey.pem</p></td><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">The GBL certificate is signed by the <b>Private Bootloader Key </b>in the bootloader certificate.</p></td></tr><tr style="height:116pt"><td style="width:540pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="4"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Note:</p><p class="s8" style="padding-top: 3pt;padding-right: 49pt;text-indent: 0pt;text-align: right;">b. Certificate version in the bootloader certificate = certificate version in Secure Element - the certificate is accepted.</p><p class="s8" style="padding-top: 3pt;padding-left: 38pt;text-indent: -8pt;text-align: left;">c. Certificate version in the bootloader certificate &gt; certificate version in Secure Element - the certificate is accepted and the certificate version in Secure Element is updated to match (revocation mechanism).</p></td></tr></table><ol id="l23"><li><p class="s8" style="padding-top: 3pt;padding-left: 30pt;padding-right: 54pt;text-indent: -30pt;text-align: right;">a. Certificate version in the bootloader certificate &lt; certificate version in Secure Element - the certificate is rejected.</p></li><li><p class="s8" style="padding-top: 2pt;padding-left: 20pt;padding-right: 4pt;text-indent: -8pt;text-align: left;">The certificate version in both the Application and the GBL certificate is compared with the certificate version in the bootloader certificate. The Application or GBL certificate is accepted if its version is equal to or higher than certificate version in the bootload- er certificate.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Secure Boot settings:</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Check the <b>Verify intermediate certificate before secure boot </b><a href="#bookmark38" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">option in the </a><span style=" color: #049;">Figure 2.3 Secure Initialization Dialog Box on page 10 </span>to provision the Public Sign Key to enable certificate-based Secure Boot.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 175pt;text-indent: 0pt;text-align: left;"><span><img width="318" height="147" alt="image" src="an1218-secure-boot-with-rtsl/Image_035.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">Bootloader image file:</a></p><ol id="l24"><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">Open the <span class="p">bootloader-uart-xmodem.isc </span>file, and check the <b>Enable secure boot </b>and <b>Enable certificate support </b>options in App- Builder&#39;s <b>Core </b>Plugin to enable certificate-based Secure Boot in the application image. Click [<b>Generate</b>] to save the changes, then build the project to generate the <span class="p">bootloader-uart-xmodem.s37 </span>file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="691" height="250" alt="image" src="an1218-secure-boot-with-rtsl/Image_036.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: justify;">Run the <span class="p">util gencert </span>command with <b>Public Bootloader Key </b>and <b>Private Sign Key </b>to generate the bootloader certificate (<span class="p">bload er_cert.bin</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander util gencert --cert-type secureboot --cert-version 0 --cert-pubkey <b>bloadercert_pubkey.pem </b>--sign</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sign_key.pem <span class="p">--outfile bloader_cert.bin</span></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully signed certificate DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">convert </span>command with <b>Bootloader Certificate </b>and <b>Private Bootloader Key </b>to generate the signed bootloader image file (<span class="p">bootloader-uart-xmodem-signed.s37</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander convert bootloader-uart-xmodem.s37 --secureboot --certificate <b>bloader_cert.bin </b>--keyfile</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">bloadercert_key.pem <span class="p">--outfile bootloader-uart-xmodem-signed.s37</span></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file bootloader-uart-xmodem.s37... Writing certificate to location 0x00002960 Private key matches public key in certificate.</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: 0d007d1c53a0c89da83f8c9dbf91a96f3a80e5a98b1edd4d2fa4e694f86488c5 R = 979E36B083C61180DBF9BB60AC6C418D3D49B0582E96796515410EA7EDBB1F85</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 0948149CB0C22B100BAA4CFBEF4D6FD5A50626BA2DF0ED183A432D8201EC3570</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying signed image...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to bootloader-uart-xmodem-signed.s37... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util verifysign </span>command with <b>Public Sign Key </b>to verify that the <b>Bootloader Certificate </b>was correctly signed (option- al).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander util verifysign bootloader-uart-xmodem-signed.s37 --verify <b>sign_pubkey.pem</b></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file bootloader-uart-xmodem-signed.s37... Found application properties at 0x000029e8</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found certificate at 0x00002960</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified certificate signature with verification key. Using certificate key to verify application signature.</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found signature at 0x00002c10</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified application signature. DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">flash </span>command to program the <span class="p">bootloader-uart-xmodem-signed.s37 </span>file to the device.</p></li></ol></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander flash bootloader-uart-xmodem-signed.s37 --device EFR32MG21A010F1024 --serialno 440068705          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ERROR: DCI command failed due to: Internal error</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">WARNING: DCI communication failed, trying again after reset...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">WARNING: Failed secure boot detected. Issuing a mass erase before flashing to recover the device... Parsing file bootloader-uart-xmodem-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing 16384 bytes starting at address 0x00000000 Comparing range 0x00000000 - 0x00003FFF (16 KB) Programming range 0x00000000 - 0x00001FFF (8 KB) Programming range 0x00002000 - 0x00003FFF (8 KB) Verifying range 0x00000000 - 0x00003FFF (16 KB) DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Application image file (standard certificate-based):</p><ol id="l25"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The application image should contain an <span class="p">application_properties.c </span>file, as shown below, for standard certificate-based Secure Boot. The <span class="p">cert </span>is set to <span class="p">NULL </span><a href="#bookmark46" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">to disable the application certificate option and the </a><a href="#bookmark46" class="a">● Reject direct signed images</a> option in AppBuild- er&#39;s <b>Core </b>plugin should be unchecked. The <span class="p">signatureType </span>and <span class="p">signatureLocation </span>are filled by Simplicity Commander when signing the application image using the <span class="p">convert </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &lt;stddef.h&gt;</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &quot;application_properties.h&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Application version number (uint32_t) for anti-rollback #define APP_PROPERTIES_VERSION (0UL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">// Application properties for secure boot</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">const ApplicationProperties_t sl_app_properties = {</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.magic = APPLICATION_PROPERTIES_MAGIC,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_PROPERTIES_VERSION,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureType = APPLICATION_SIGNATURE_NONE,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureLocation = 0,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.app = {</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.type = APPLICATION_TYPE_MCU,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.version = APP_PROPERTIES_VERSION,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.capabilities = 0UL,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.productId = { 0U },</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">},</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.cert = NULL,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.longTokenSectionAddress = NULL,</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">convert </span>command with <b>Private Bootloader Key </b>to generate the signed application image file (<span class="p">blink-signed.s37</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander convert blink.s37 --secureboot --keyfile </span><span class="s15" style=" background-color: #D8D8D8;">bloadercert_key.pem </span><span class="s13" style=" background-color: #D8D8D8;">--outfile blink-signed.s37           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: a2d5af113a6b65c7d815e68b518335b17e9cc4196b7e4b294cb7e2f4531ea926 R = 3646A44F91DF15B440C59051AD458BEA4F0E9209A364397467EFEA408A7D1458</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 2F049F04ACCCD94F32DDBAE9FFB57A5B93B6127A8F2D4825B86F5213285F399A</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to blink-signed.s37... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util verifysign </span>command with <b>Public Bootloader Key </b>to verify that the application image file was correctly signed (optional).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander util verifysign blink-signed.s37 --verify </span><span class="s15" style=" background-color: #D8D8D8;">bloadercert_pubkey.pem                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Found application properties at 0x0000109c Did not find application certificate in file</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If the configuration flag SECURE_BOOT_VERIFY_CERTIFICATE is set or a device has previously seen certificate based signing, it will not accept direct signing.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Application image file (advanced certificate-based):</p><ol id="l26"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The application image should contain an <span class="p">application_properties.c </span>file, as shown below, for advanced certificate-based Secure Boot. The <span class="p">cert </span>is pointed to a valid <span class="p">ApplicationCertificate_t </span>structure to enable the application certificate option. The <span class="p">key</span>, <span class="p">version </span>and <span class="p">signature </span>in <span class="p">sl_app_certificate </span>are filled by Simplicity Commander when signing the application certificate using <span class="p">util gencert </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &lt;stddef.h&gt;</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">#include &quot;application_properties.h&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Application version number (uint32_t) for anti-rollback #define APP_PROPERTIES_VERSION (0UL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">// Application properties for secure boot</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">const <b>ApplicationCertificate_t sl_app_certificate </b>= {</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_CERTIFICATE_VERSION,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.flags = { 0U },</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.key = { 0U },</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.version = 0,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signature = { 0U },</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">const ApplicationProperties_t sl_app_properties = {</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.magic = APPLICATION_PROPERTIES_MAGIC,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_PROPERTIES_VERSION,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureType = APPLICATION_SIGNATURE_NONE,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.signatureLocation = 0,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.app = {</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.type = APPLICATION_TYPE_MCU,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.version = APP_PROPERTIES_VERSION,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.capabilities = 0UL,</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.productId = { 0U },</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">},</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.cert = (ApplicationCertificate_t *)&amp;sl_app_certificate,</p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.longTokenSectionAddress = NULL,</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util gencert </span>command with <b>Public Application Key </b>and <b>Private Bootloader Key </b>to generate the application certificate (<span class="p">app_cert.bin</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander util gencert --cert-type secureboot --cert-version 0 --cert-pubkey <b>appcert_pubkey.pem </b>--sign</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">bloadercert_key.pem <span class="p">--outfile app_cert.bin</span></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully signed certificate DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">convert </span>command with <b>Application Certificate </b>and <b>Private Application Key </b>to generate the signed application image file (<span class="p">blink-signed.s37</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">commander convert blink.s37 --secureboot --certificate <b>app_cert.bin </b>--keyfile <b>appcert_key.pem </b>--outfile blink-signed.s37</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing certificate to location 0x00004f70 Private key matches public key in certificate.</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: cde34993c86d642fe1a5d3ea2c77c6ca0ddad5d8882c765ec6fe68cbdb8904a0 R = 3B843DE62958D785A27B900500E9BDEA7D2A9A78B2719540D01E48B4E1CF8956</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 16D73AD5A2F4E9C7AE9BD5BE4D9F52CCCCBE489C8F9CEFCF7B29CC988F740EBB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Verifying signed image... Writing to blink-signed.s37... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util verifysign </span>command with <b>Public Bootloader Key </b>to verify that the <b>Application Certificate </b>was correctly signed (optional).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander util verifysign blink-signed.s37 --verify </span><span class="s15" style=" background-color: #D8D8D8;">bloadercert_pubkey.pem                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Found application properties at 0x00001124 Found certificate at 0x00004f70</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified certificate signature with verification key. Using certificate key to verify application signature.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">GBL upgrade file using a bootloader certificate:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="641" height="85" alt="image" src="an1218-secure-boot-with-rtsl/Image_037.png"/></span></p><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">                                             <span class="s36">   </span><span class="s37">signature (64 bytes)</span></p><p class="s37" style="padding-top: 2pt;padding-left: 71pt;text-indent: 16pt;line-height: 111%;text-align: left;">GBL file signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Standard</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;text-align: center;">App image (variable size) App image</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Public BL Key in    <span class="s35">     </span></p><p class="s35" style="text-indent: 0pt;text-align: left;">     <span class="s36">        </span><span class="s37">BL certificate</span></p><p class="s34" style="padding-top: 1pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><ol id="l27"><li><p class="s10" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark47" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The application GBL upgrade file can be signed by the Private Bootloader Key as in </a><a href="#bookmark47" class="a">Figure 2.14 Application GBL Upgrade File Using a Bootloader Certificate on page </a>25<span style=" color: #000;">. A similar operation can apply to bootloader and secure element GBL upgrade files.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="641" height="185" alt="image" src="an1218-secure-boot-with-rtsl/Image_038.png"/></span></p><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">                                                                                            <span class="s36">   </span><span class="s37">signature (64 bytes)</span></p><p class="s37" style="padding-top: 2pt;padding-left: 141pt;text-indent: 16pt;line-height: 111%;text-align: left;">GBL file signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">                                             </p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 6pt;text-align: left;">     </p><p class="s37" style="padding-left: 12pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Private App Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">     </p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">     </p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">     </p><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Advanced</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 111%;text-align: center;">Certificate structure version (1 bytes)</p><p class="s37" style="text-indent: 0pt;line-height: 6pt;text-align: center;">Reserved flags</p><p class="s37" style="padding-left: 6pt;text-indent: 0pt;text-align: center;">(3 bytes)  Public App Key (64 bytes)</p><p class="s37" style="text-indent: 0pt;line-height: 6pt;text-align: center;">App certificate</p><p class="s37" style="text-indent: 0pt;text-align: center;">version (4 bytes) App certificate signature (64 bytes)</p><p class="s37" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;text-align: center;">App image (variable size) App image</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">     </p><p style="text-indent: 0pt;text-align: left;"/><p class="s39" style="padding-left: 7pt;text-indent: -8pt;line-height: 107%;text-align: left;">Application (App) Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public App Key in</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">App Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 154pt;text-indent: 0pt;text-align: left;"><a name="bookmark47">Figure 2.14. Application GBL Upgrade File Using a Bootloader Certificate</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Run the <span class="p">gbl create </span>command with <b>Private Bootloader Key </b>to generate the application GBL upgrade file (<span class="p">blink-sgined.gbl</span>).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander gbl create blink-signed.gbl --app blink-signed.s37 --sign </span><span class="s15" style=" background-color: #D8D8D8;">bloadercert_key.pem                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file blink-signed.s37... Initializing GBL file...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Signing GBL...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: 08d541cf7b7f3b43a5c0dd637593071da731867b5da641b72188536314ce3889 R = C816EA97714654D86B91F64B85616CAC8DDCF12B885FAA7847D2CEA38940CA88</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 32EDB05CDBCCDE6C1D3A7B2973B7F9F10D487CA00F15414684AE8E1758F5394D</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file blink-signed.gbl... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">GBL upgrade file using a GBL certificate:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="642" height="182" alt="image" src="an1218-secure-boot-with-rtsl/Image_039.png"/></span></p><p class="s40" style="text-indent: 0pt;text-align: left;">Standard</p><p style="text-indent: 0pt;text-align: left;"/><p class="s39" style="text-indent: 0pt;line-height: 6pt;text-align: left;">GBL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 16pt;line-height: 109%;text-align: left;">GBL file signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">App image</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 11pt;text-indent: 4pt;line-height: 109%;text-align: left;">App image (variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">GBL certificate</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 10pt;text-indent: 0pt;line-height: 6pt;text-align: left;">GBL certificate</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Public GBL Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Reserved flags</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Certificate structure</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 4pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public GBL Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">in GBL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 8pt;text-indent: 0pt;line-height: 7pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 8pt;text-indent: 0pt;line-height: 7pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><ol id="l28"><li><p class="s10" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark47" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The application GBL upgrade file can also be signed by the Private GBL key as in </a><a href="#bookmark47" class="a">Figure 2.14 Application GBL Upgrade File Using</a> a Bootloader Certificate on page 25<span style=" color: #000;">. A similar operation can apply to bootloader and secure element GBL upgrade files.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:346.362pt" cellspacing="0"><tr style="height:14pt"><td style="width:79pt;border-right-style:solid;border-right-width:1pt;border-right-color:#797777"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 5pt;text-align: right;">    </p></td><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:1pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" bgcolor="#00B050"><p class="s43" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Private GBL Key</p></td></tr><tr style="height:53pt"><td style="width:106pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050;border-right-style:solid;border-right-width:2pt;border-right-color:#00B050" colspan="2"><p class="s44" style="padding-left: 6pt;text-indent: 0pt;line-height: 5pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p class="s44" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s45" style="padding-right: 7pt;text-indent: 0pt;line-height: 5pt;text-align: right;">Sign</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#00B050"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:346.206pt" cellspacing="0"><tr style="height:14pt"><td style="width:146pt;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" colspan="4"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:24pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:1pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777" bgcolor="#00B050"><p class="s43" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Private</p></td><td style="width:30pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:1pt;border-right-color:#797777" bgcolor="#00B050"><p class="s43" style="padding-top: 3pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">GBL Key</p></td></tr><tr style="height:90pt"><td style="width:16pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s44" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Sign</p></td><td style="width:48pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050"><p class="s43" style="padding-top: 3pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Private BL Key</p></td><td style="width:15pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">    </p></td><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s43" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">Private App Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Sign</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#00B050;border-right-style:solid;border-right-width:2pt;border-right-color:#00B050"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s45" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;line-height: 5pt;text-align: left;">Sign</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#00B050"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="642" height="280" alt="image" src="an1218-secure-boot-with-rtsl/Image_040.png"/></span></p><p class="s40" style="text-indent: 0pt;text-align: left;">Advanced</p><p style="text-indent: 0pt;text-align: left;"/><p class="s39" style="text-indent: 0pt;line-height: 6pt;text-align: left;">GBL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">    </p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Sign</p><p style="text-indent: 0pt;text-align: left;"/><p class="s39" style="text-indent: 0pt;line-height: 6pt;text-align: right;">Application (App)</p><p class="s35" style="text-indent: 0pt;text-align: left;">    <span class="s36">                                                                    </span><span class="s39">Certificate</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: right;">    </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: center;">    </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">Verify</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: right;">                                             </p><p class="s38" style="padding-left: 48pt;text-indent: 0pt;text-align: left;">Verify</p><p class="s35" style="text-indent: 0pt;text-align: right;">                                                                                           </p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Verify</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-top: 2pt;padding-left: 3pt;text-indent: 16pt;line-height: 109%;text-align: left;">GBL file signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">App image</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 11pt;text-indent: 4pt;line-height: 109%;text-align: left;">App image (variable size)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">App certificate</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 11pt;text-indent: 0pt;line-height: 6pt;text-align: left;">App certificate</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Public App Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Reserved flags</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Certificate structure</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">GBL certificate</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">signature (64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 10pt;text-indent: 0pt;line-height: 6pt;text-align: left;">GBL certificate</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (4 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Public GBL Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(64 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: center;">Reserved flags</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(3 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Certificate structure</p><p class="s37" style="padding-left: 7pt;text-indent: 0pt;line-height: 7pt;text-align: left;">version (1 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 4pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public GBL Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">in GBL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public App Key</p><p class="s37" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">in App Certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 8pt;text-indent: 0pt;line-height: 7pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Private BL Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: left;">Public BL Key in</p><p class="s37" style="padding-left: 8pt;text-indent: 0pt;line-height: 7pt;text-align: left;">BL certificate</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-left: 169pt;text-indent: 0pt;text-align: left;">Figure 2.15. Application GBL Upgrade File Using a GBL Certificate</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">util gencert </span>command with <b>Public GBL Key </b>and <b>Private Bootloader Key </b>to generate the GBL certificate (<span class="p">gbl_cert.b in</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander util gencert --cert-type <b>gbl </b>--cert-version 0 --cert-pubkey <b>gblcert_pubkey.pem </b>--sign</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">bloadercert_key.pem <span class="p">--outfile gbl_cert.bin</span></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully signed certificate DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><b>Note: </b>The <span class="p">--cert-type </span>is <span class="p">gbl </span>instead of <span class="p">secureboot</span>.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the <span class="p">gbl create </span>command with <b>GBL Certificate </b>and <b>Private GBL key </b>to generate the application GBL upgrade file (<span class="p">blink-s igned-cert.gbl</span>).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">commander gbl create blink-signed-cert.gbl --app blink-signed.s37 --certificate <b>gbl_cert.bin </b>--sign</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">gblcert_key.pem</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Parsing file blink-signed.s37... Initializing GBL file...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Adding application to GBL... Adding certificate to GBL... Signing GBL...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: f034b5eea97a4f726e5aea97eacde8103f7d48575f1bb6e889487c8c72accd5d R = 550AE0537EC7240D2A1566AA23808C355A0A01ECFF6621D6676DFD9EB4DCB4DB</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 548AF527B1DC961E0600038646D660E2AF3955EBB79EEE535B5C839AD60AA1B5</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file blink-signed-cert.gbl... DONE</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark27">Recover Devices when Secure Boot Fails</a></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If a Secure Boot process fails (meaning firmware image validation fails), the only way to recover is to flash a correctly-signed image. This section describes two methods by which to flash a correctly-signed image.</p><ol id="l29"><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark28">Simplicity Commander (GUI)</a><a name="bookmark48">&zwnj;</a></p><ol id="l30"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run <span class="p">commander </span>to open the Simplicity Commander GUI.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander                                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Connect Simplicity Commander to a Wireless Starter Kit (WSTK) and click [<b>Flash</b>].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 117pt;text-indent: 0pt;text-align: left;"><span><img width="518" height="462" alt="image" src="an1218-secure-boot-with-rtsl/Image_041.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">Figure 2.16. Connect Simplicity Commander to a WSTK</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 42pt;text-indent: -8pt;text-align: left;">Click [<b>Browse…</b>] to select the correctly-signed image (for example <span class="p">bootloader-uart-xmodem-signed.s37</span>) from the file system. Click [<b>Connect</b>] next to <b>Target</b>, then click [<b>OK</b>] to exit.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Flash</b>] to flash the correctly-signed image to the device. If a failed Secure Boot is detected, the device will be erased and unlocked before flashing the new image.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="415" height="369" alt="image" src="an1218-secure-boot-with-rtsl/Image_042.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 220pt;text-indent: 0pt;text-align: left;">Figure 2.17. Flash Correctly-Signed Image</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Connect</b>] next to <b>Target</b>, then click [<b>Device Info</b>] to verify the device is recovered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="414" height="378" alt="image" src="an1218-secure-boot-with-rtsl/Image_043.jpg"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 42pt;text-indent: 155pt;line-height: 220%;text-align: left;">Figure 2.18. Device Information on Recovered Device Note: <span class="s5">The device cannot recover if </span>Device Erase <span class="s5">has been disabled.</span></p></li></ol></li><li><p class="s4" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark29">Simplicity Commander (CLI)</a><a name="bookmark49">&zwnj;</a></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Use the <span class="p">flash </span>command to flash the correctly-signed image (for example <span class="p">bootloader-uart-xmodem-signed.s37</span>) to the device. If a failed Secure Boot is detected, the device will be erased and unlocked before flashing the new image.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> commander flash bootloader-uart-xmodem-signed.s37 --device EFR32MG22C224F512 --serialno 440068705               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">WARNING: Failed secure boot detected. Issuing a mass erase before flashing to recover the device... Parsing file bootloader-uart-xmodem-signed.s37...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 16384 bytes to address 0x00000000 Uploading flash loader...</p><p style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting...</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Note: <span class="s5">The device cannot recover if </span>Device Erase <span class="s5">has been disabled.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s4" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark30">Upgrade to Secure Boot with RTSL</a><a name="bookmark50">&zwnj;</a></p></li></ol></li></ol><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This section describes how to upgrade Series 2 devices already deployed in the field to Secure Boot with RTSL. The Public Sign Key here is copied from <span class="p">sign_pubkey.txt </span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">generated in </a><span style=" color: #049;">2.1.1 Using Simplicity Commander </span>step 6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">General:</p><ol id="l31"><li><p class="s5" style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">Upgrade Secure Element firmware to the latest version. See section &quot;<i>Gecko Bootloader Operation - Secure Element Upgrade</i>&quot; in<a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank"> UG266: Silicon Labs Gecko Bootloader User&#39;s </a><span style=" color: #049;">Guide</span>.</p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Follow the procedure in section &quot;<i>Enabling Secure Boot RTSL on Series 2 Devices</i><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank">UG266: Silicon Labs Gecko Bootloader Us- er&#39;s </a><span style=" color: #049;">Guide</span>. The applications mentioned in procedure 3 (install Public Sign Key) and 5 (enable Secure Boot) are described in the following sections.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: justify;">emlib <span class="s5">provides an abstraction of the mailbox interface, allowing the application to construct messages and set up DMA transfers.</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">On top of <span class="p">emlib</span>, Secure Element Manager provides an abstraction of the Secure Element&#39;s command set. The Secure Element Manager also provides APIs for cryptographic operations and thread synchronization. The Secure Element Manager is available in <b>GSDK v3.0 </b>or later.</p></li><li><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;"><a href="#bookmark51" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The code in </a><a href="#bookmark51" class="a">● Application to enable Secure Boot using </a><a href="#bookmark51" class="s47">emlib </a><a href="#bookmark51" class="a">(SE without Secure Vault only): on page 32</a> <a href="#bookmark52" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a><a href="#bookmark52" class="a">● Application to enable Secure Boot using Secure Element Manager: on page </a>34 <span style=" color: #000;">is based on ECDSA-P256-SHA256 Secure Boot. The </span><span class="p">otpConfig </span><span style=" color: #000;">structure contains the desired Secure Boot settings described in section &quot;</span><span class="s6">Secure Boot Enabling</span><a href="https://www.silabs.com/documents/public/application-notes/an1222-efr32xg2x-production-programming.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">&quot; in </a><a href="https://www.silabs.com/documents/public/application-notes/an1222-efr32xg2x-production-programming.pdf" class="a" target="_blank">AN1222: Production Programming of Series 2 </a>Devices<span style=" color: #000;">.</span></p></li></ol><p class="s5" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><b>Note: </b>The <span class="p">emlib </span>functions used here are deprecated in <b>GSDK v3.0 </b>and will be removed in a future version of <span class="p">emlib</span>. All high-level functionality has been moved to the Secure Element Manager.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="539" alt="image" src="an1218-secure-boot-with-rtsl/Image_044.png"/></span></p><p style="text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">// Public Sign Key provisioning done</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">while (1) ;</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x99, 0x70, 0x11, 0xED, 0x17, 0x08, 0x58, 0x0B,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0xD4, 0xA6, 0xB7, 0xF8, 0xAD, 0x6E, 0xE1, 0x9B,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x0B, 0x87, 0x22, 0x61, 0x1F, 0xB7, 0x6A, 0x3A,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x57, 0x02, 0xD5, 0x14, 0x11, 0x80, 0xE1, 0x01,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x0A, 0xC8, 0x67, 0x3C, 0x8A, 0xCC, 0x26, 0xEE,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x2B, 0x53, 0x4C, 0x00, 0x4F, 0x4A, 0x4B, 0x7E,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0xBB, 0xC2, 0x3D, 0x04, 0x50, 0x6D, 0xD6, 0x6E,</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x3E, 0xF0, 0xDD, 0xC8, 0x1E, 0x3C, 0xA5, 0x5E</p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;">SL_ALIGN(4) static uint8_t memBuffer[64]; // Buffer for key verification</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;">/***************************************************************************//**</p><p style="padding-left: 4pt;text-indent: 0pt;text-align: left;">* @brief Main function</p><p style="text-indent: 4pt;line-height: 107%;text-align: left;">******************************************************************************/ int main(void)</p><p style="text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Chip errata CHIP_Init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;">// Main loop</p><p style="padding-left: 19pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (SE_initPubkey(SE_KEY_TYPE_BOOT, keyBuffer, 64, false) != SE_RESPONSE_OK) { while (1) ; // Public Sign Key write error</p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 29pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (SE_readPubkey(SE_KEY_TYPE_BOOT, memBuffer, 64, false) == SE_RESPONSE_OK) { if (memcmp(memBuffer, keyBuffer, 64) != 0) {</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">while (1) ; // Public Sign Key verification fail</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;">while (1) ; // Public Sign Key read error</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">// Public Sign Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;em_chip.h&quot; #include &quot;em_common.h&quot; #include &quot;em_se.h&quot; #include &lt;string.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;">SL_ALIGN(4) static uint8_t keyBuffer[64] =</p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Application to install Public Sign Key using <span class="s14">emlib </span>(SE only):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark51">Application to enable Secure Boot using </a><span class="s14">emlib </span>(SE without Secure Vault only):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="734" alt="image" src="an1218-secure-boot-with-rtsl/Image_045.png"/></span></p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;em_chip.h&quot; #include &quot;em_se.h&quot;</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;application_properties.h&quot; #include &lt;stddef.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Application version number (uint32_t) for anti-rollback #define APP_PROPERTIES_VERSION (0UL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">// Application properties for secure boot</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">const ApplicationProperties_t sl_app_properties = {</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.magic = APPLICATION_PROPERTIES_MAGIC,</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_PROPERTIES_VERSION,</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.signatureType = APPLICATION_SIGNATURE_NONE,</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.signatureLocation = 0,</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.app = {</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.type = APPLICATION_TYPE_MCU,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.version = APP_PROPERTIES_VERSION,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.capabilities = 0UL,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.productId = { 0U },</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">},</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.cert = NULL,</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">.longTokenSectionAddress = NULL,</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">static SE_OTPInit_t otpConfig =</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.enableSecureBoot = true, // Enable secure boot</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.verifySecureBootCertificate = false, // No certificate</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.enableAntiRollback = true, // Enable anti-rollback</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.secureBootPageLockNarrow = false, // No lock</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">.secureBootPageLockFull = false // No lock</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">static SE_Status_t status;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">/***************************************************************************//**</p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;">* @brief Main function</p><p style="padding-left: 24pt;text-indent: 4pt;line-height: 107%;text-align: left;">******************************************************************************/ int main(void)</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Chip errata CHIP_Init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">if (SE_initOTP(&amp;otpConfig) != SE_RESPONSE_OK) {</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">while (1) ; // Secure boot enable write error</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 53pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (SE_getStatus(&amp;status) == SE_RESPONSE_OK) { if (status.secureBootEnabled == false) {</p><p style="padding-left: 62pt;text-indent: 0pt;text-align: left;">while (1) ; // Secure boot enable verification fail</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">while (1); // Secure boot enable read error</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">while (1) ; // Secure boot enable done</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">}</p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Application to install Public Sign Key using Secure Element Manager:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="656" alt="image" src="an1218-secure-boot-with-rtsl/Image_046.png"/></span></p><p style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;em_chip.h&quot; #include &quot;em_common.h&quot; #include &quot;sl_se_manager.h&quot;</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;sl_se_manager_util.h&quot; #include &lt;string.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SL_ALIGN(4) static uint8_t keyBuffer[64] = // Public Sign Key</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x99, 0x70, 0x11, 0xED, 0x17, 0x08, 0x58, 0x0B,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0xD4, 0xA6, 0xB7, 0xF8, 0xAD, 0x6E, 0xE1, 0x9B,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x0B, 0x87, 0x22, 0x61, 0x1F, 0xB7, 0x6A, 0x3A,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x57, 0x02, 0xD5, 0x14, 0x11, 0x80, 0xE1, 0x01,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x0A, 0xC8, 0x67, 0x3C, 0x8A, 0xCC, 0x26, 0xEE,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x2B, 0x53, 0x4C, 0x00, 0x4F, 0x4A, 0x4B, 0x7E,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0xBB, 0xC2, 0x3D, 0x04, 0x50, 0x6D, 0xD6, 0x6E,</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">0x3E, 0xF0, 0xDD, 0xC8, 0x1E, 0x3C, 0xA5, 0x5E</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SL_ALIGN(4) static uint8_t memBuffer[64]; // Buffer for key verification</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">/***************************************************************************//**</p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;">* @brief Main function</p><p style="padding-left: 23pt;text-indent: 4pt;line-height: 107%;text-align: left;">******************************************************************************/ int main(void)</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">sl_se_command_context_t cmdCtx;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Chip errata CHIP_Init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Initialize the SE manager sl_se_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">// Main loop</p><p style="padding-left: 43pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (sl_se_init_otp_key(&amp;cmdCtx, SL_SE_KEY_TYPE_IMMUTABLE_BOOT, keyBuffer, 64) != SL_STATUS_OK) { while (1) ; // Public Sign Key write error</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 53pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (sl_se_read_pubkey(&amp;cmdCtx, SL_SE_KEY_TYPE_IMMUTABLE_BOOT, memBuffer, 64) == SL_STATUS_OK) { if (memcmp(memBuffer, keyBuffer, 64) != 0) {</p><p style="padding-left: 62pt;text-indent: 0pt;text-align: left;">while (1) ; // Public Sign Key verification fail</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">} else {</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">while (1) ; // Public Sign Key read error</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 33pt;text-indent: 0pt;line-height: 107%;text-align: left;">// De-initialize the SE manager sl_se_deinit_command_context(&amp;cmdCtx); sl_se_deinit();</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;">while (1) ; // Public Sign Key provisioning done</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="883" alt="image" src="an1218-secure-boot-with-rtsl/Image_047.png"/></span></p><p class="s4" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark52">Application to enable Secure Boot using Secure Element Manager:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 110%;text-align: left;">#include &quot;em_chip.h&quot; #include &quot;sl_se_manager.h&quot;</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;line-height: 110%;text-align: left;">#include &quot;sl_se_manager_util.h&quot; #include &quot;application_properties.h&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;line-height: 110%;text-align: left;">// Application version number (uint32_t) for anti-rollback #define APP_PROPERTIES_VERSION (0UL)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">// Application properties for secure boot</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">const ApplicationProperties_t sl_app_properties = {</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.magic = APPLICATION_PROPERTIES_MAGIC,</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.structVersion = APPLICATION_PROPERTIES_VERSION,</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.signatureType = APPLICATION_SIGNATURE_NONE,</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.signatureLocation = 0,</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.app = {</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.type = APPLICATION_TYPE_MCU,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.version = APP_PROPERTIES_VERSION,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.capabilities = 0UL,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.productId = { 0U },</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">},</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.cert = NULL,</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.longTokenSectionAddress = NULL,</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">static sl_se_otp_init_t otpConfig =</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">{</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.enable_secure_boot = true, // Enable secure boot</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.verify_secure_boot_certificate = false, // No certificate</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.enable_anti_rollback = true, // Enable anti-rollback</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.secure_boot_page_lock_narrow = false, // No lock</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.secure_boot_page_lock_full = false, // No lock</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">#if defined(SEMAILBOX_PRESENT) &amp;&amp; (_SILICON_LABS_SECURITY_FEATURE == _SILICON_LABS_SECURITY_FEATURE_VAULT)</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Tamper settings for SE with Secure Vault</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.tamper_levels = { 0, 1, 4, 0, 4, 4, 0, 4, 4, 0, 1, 0, 4, 0, 4, 1,</p><p class="s48" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">1, 1, 2, 2, 4, 4, 7, 7, 4, 2, 2, 2, 4, 0, 2, 4 },</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.tamper_filter_period = SL_SE_TAMPER_FILTER_PERIOD_2MIN,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.tamper_filter_threshold = SL_SE_TAMPER_FILTER_THRESHOLD_4,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.tamper_flags = 0,</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;line-height: 110%;text-align: left;">.tamper_reset_threshold = 5 #endif</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">};</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">static sl_se_otp_init_t status;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">/***************************************************************************//**</p><p class="s48" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">* @brief Main function</p><p class="s48" style="padding-left: 24pt;text-indent: 4pt;line-height: 110%;text-align: left;">******************************************************************************/ int main(void)</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">{</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">sl_se_command_context_t cmdCtx;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;line-height: 110%;text-align: left;">// Chip errata CHIP_Init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;line-height: 110%;text-align: left;">// Initialize the SE manager sl_se_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">// Main loop</p><p class="s48" style="padding-left: 41pt;text-indent: -8pt;line-height: 110%;text-align: left;">if (sl_se_init_otp(&amp;cmdCtx, &amp;otpConfig) != SL_STATUS_OK) { while (1) ; // Secure boot enable write error</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s48" style="padding-left: 50pt;text-indent: -8pt;line-height: 110%;text-align: left;">if (sl_se_read_otp(&amp;cmdCtx, &amp;status) == SL_STATUS_OK) { if (status.enable_secure_boot == false) {</p><p class="s48" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">while (1) ; // Secure boot enable verification fail</p><p class="s48" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">}</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s48" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">while (1); // Secure boot enable read error</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;line-height: 110%;text-align: left;">// De-initialize the SE manager sl_se_deinit_command_context(&amp;cmdCtx); sl_se_deinit();</p><p class="s48" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">while (1) ; // Secure boot enable done</p><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Revision History</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1218-secure-boot-with-rtsl/Image_048.png"/></span></p><h3 style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark53">3. Revision History</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Revision 0.3</p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">July 2020</p><ul id="l32"><li><p class="s10" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark9" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Added Secure Element conventions to </a><a href="#bookmark9" class="a">1.1 </a>Introduction<span style=" color: #000;">.</span></p></li><li><p class="s10" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark36" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Updated </a>Figure 2.1 Debug Adapter Context Menu on page 9 <a href="#bookmark37" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a>Figure 2.2 Configuration on Selected Device on page 9 <span style=" color: #000;">to Simplici- ty Studio v5.</span></p></li><li><p class="s10" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Updated Simplicity Commander version to 1.9.2 in </a><a href="#bookmark33" class="a">2.1.1 Using Simplicity </a>Commander<span style=" color: #000;">.</span></p></li><li><p class="s10" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark34" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Renamed Provision Public Sign Key to </a><a href="#bookmark34" class="a">2.2 Provision Public Sign Key and Secure Boot </a>Enabling<span style=" color: #000;">, added note for SE with Secure Vault devices.</span></p></li><li><p class="s10" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark40" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Added </a>2.3.2 ECDSA-P256-SHA256 Secure Boot <a href="#bookmark42" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a>2.3.3 Certificate-Based Secure Boot <a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">to </a><a href="#bookmark31" class="a">2. </a>Examples<span style=" color: #000;">.</span></p></li><li><p class="s10" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark50" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Added Secure Element Manager examples to </a><a href="#bookmark50" class="a">2.5 Upgrade to Secure Boot with </a>RTSL<span style=" color: #000;">.</span></p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Removed the Related Documents section in favor of web links in the text.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.2</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">March 2020</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added figure to Secure Boot (ECDSA) in Series 1 Devices section.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added SE and VSE to Secure Boot (ECDSA) in Series 2 Devices section.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added figures to Secure Boot (ECDSA) in Series 2 Devices section.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added Secure Boot (Certificate) in Series 2 Devices section.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added Upgrade to Secure Boot with RTSL example.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Combined all examples into one section and updated the content.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Added Related Documents section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.1</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">August 2019</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Initial Revision.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s51">www.silabs.com/products</a></p><p class="s50" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s51">www.silabs.com/quality</a></p><p class="s50" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s52" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p class="s16" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">		</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1218-secure-boot-with-rtsl/Image_049.png"/></span></p><p class="s53" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s54" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s53" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s54" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1218-secure-boot-with-rtsl/Image_050.png"/></span></p><p class="s53" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s53" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
