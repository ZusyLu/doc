<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1259: Using the v3.x Silicon Labs Bluetooth® Stack in Network Co-Processor Mode</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 19pt; vertical-align: 8pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: #007694; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s10 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s11 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s14 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s15 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s16 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s17 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s18 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s19 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s20 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s23 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s24 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h4 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l5 {padding-left: 0pt;counter-reset: f1 1; }
 #l5> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: g1 3; }
 #l6> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l7 {padding-left: 0pt;counter-reset: g2 1; }
 #l7> li>*:first-child:before {counter-increment: g2; content: counter(g1, decimal)"."counter(g2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 #l8 {padding-left: 0pt;counter-reset: g3 1; }
 #l8> li>*:first-child:before {counter-increment: g3; content: counter(g3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: g3 0;  }
 #l9 {padding-left: 0pt;counter-reset: g3 1; }
 #l9> li>*:first-child:before {counter-increment: g3; content: counter(g3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: g3 0;  }
 #l10 {padding-left: 0pt;counter-reset: g2 1; }
 #l10> li>*:first-child:before {counter-increment: g2; content: counter(g1, decimal)"."counter(g2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 #l11 {padding-left: 0pt;counter-reset: h1 4; }
 #l11> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l11> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l12 {padding-left: 0pt;counter-reset: h2 1; }
 #l12> li>*:first-child:before {counter-increment: h2; content: counter(h1, decimal)"."counter(h2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l12> li:first-child>*:first-child:before {counter-increment: h2 0;  }
 #l13 {padding-left: 0pt;counter-reset: h3 1; }
 #l13> li>*:first-child:before {counter-increment: h3; content: counter(h1, decimal)"."counter(h2, decimal)"."counter(h3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: h3 0;  }
 #l14 {padding-left: 0pt; }
 #l14> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15 {padding-left: 0pt;counter-reset: h4 1; }
 #l15> li>*:first-child:before {counter-increment: h4; content: counter(h4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: h4 0;  }
 #l16 {padding-left: 0pt;counter-reset: h4 1; }
 #l16> li>*:first-child:before {counter-increment: h4; content: counter(h4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: h4 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l18 {padding-left: 0pt;counter-reset: k1 4; }
 #l18> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l18> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l19 {padding-left: 0pt;counter-reset: k2 2; }
 #l19> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l19> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l20 {padding-left: 0pt;counter-reset: k3 1; }
 #l20> li>*:first-child:before {counter-increment: k3; content: counter(k1, decimal)"."counter(k2, decimal)"."counter(k3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: k3 0;  }
 #l21 {padding-left: 0pt; }
 #l21> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22 {padding-left: 0pt;counter-reset: k4 1; }
 #l22> li>*:first-child:before {counter-increment: k4; content: counter(k4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: k4 0;  }
 li {display: block; }
 #l23 {padding-left: 0pt;counter-reset: m1 5; }
 #l23> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l24 {padding-left: 0pt; }
 #l24> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25 {padding-left: 0pt;counter-reset: m2 1; }
 #l25> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt; }
 #l28> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt;counter-reset: m2 1; }
 #l30> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l31 {padding-left: 0pt;counter-reset: m3 1; }
 #l31> li>*:first-child:before {counter-increment: m3; content: counter(m3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: m3 0;  }
 #l32 {padding-left: 0pt; }
 #l32> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33 {padding-left: 0pt;counter-reset: m2 1; }
 #l33> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35 {padding-left: 0pt;counter-reset: m3 1; }
 #l35> li>*:first-child:before {counter-increment: m3; content: counter(m3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: m3 0;  }
 #l36 {padding-left: 0pt;counter-reset: m3 1; }
 #l36> li>*:first-child:before {counter-increment: m3; content: counter(m3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l36> li:first-child>*:first-child:before {counter-increment: m3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_002.png"/></span></p><h1 style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">AN1259: Using the v3.x Silicon Labs Bluetooth<span class="h3">® </span>Stack in Network Co- Processor Mode</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="197" height="1" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="195" height="1" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Introduces the available tools for NCP system development.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Walks through the NCP host and target examples.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document is an essential reference for anyone developing a system for the Silicon Labs Wireless Gecko products using the Silicon Labs v3.x Bluetooth Stack in Network Co-Processor (NCP) mode. The document covers the C language application development flow, walks through the examples included in the stack, and shows how to customize them.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_006.png"/></span></p><ol id="l2"><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Silicon Labs Bluetooth SDK allows you to develop System-On-Chip (SoC) firmware in C on a single microcontroller. The SDK also supports the Network Co-Processor (NCP) system model.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document gives you a guide on how to get started with software development of an NCP system. It describes the development tools and example projects, then highlights the most important steps you need to follow when writing your own application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">SoC vs NCP System Models</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On an SoC system, the Application code, the Bluetooth Host, and Controller code run on the same Wireless MCU.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On an NCP system, the Application runs on a Host MCU, and the Host and Controller code run on a Target MCU. The Host and Target MCUs communicate on a serial interface. The communication between the Host and Target is defined in the Silicon Labs Proprietary Protocol called BGAPI. The physical interface is UART. BGLib v3.x is an ANSI C reference implementation of the BGAPI protocol, which can be used in the NCP Host Application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="558" height="304" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_007.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 207pt;text-indent: 0pt;text-align: center;">Figure 1.1.  SoC vs NCP System Models</p></li></ol></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark2">NCP Target Development</a></p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter describes the available tools for compiling and flashing the NCP target firmware.</p><p class="s13" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="http://www.silabs.com/simplicity" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Before proceeding with compiling and flashing C-based firmware, you need to install Simplicity Studio 5 (SSv5). You can download it from the Silicon Labs website: </a>http://www.silabs.com/simplicity<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Before installing Simplicity Studio, connect the WSTK and your PC with a USB cable. The white switch located on the left side of the WSTK must be in the AEM position. See <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide </i>for details on installing Studio and the Blue- tooth SDK.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <i>AN1042: Using the v2.x Silicon Labs Bluetooth® Stack in Network Co-Processor Mode </i><span class="p">describes in detail how the NCP is imple- mented in the Gecko SDK v2. This application note explains extensively the code and tools on both the target and host side.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you have already installed SSv5, you can download the Bluetooth SDK through the Simplicity Studio Package Manager. To open it, click the <b>Install </b>control on the SSv5 toolbar, and then click <b>Manage Installed Packages</b>. Go to the Stacks tab, and click [<b>Install</b>] next to the Bluetooth SDK.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;"><span><img width="450" height="248" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">To develop in C, you not only need Simplicity Studio 5 but also a supported compiler. <i>UG434: Silicon Labs Bluetooth® C Application Developers Guide for SDK v3.x </i>lists the supported compilers.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The NCP target firmware comes with the Bluetooth SDK. It is available in a precompiled binary format and as a project file you can build. The following procedures describe how to install the precompiled binary image and how to build and install the example project. Note that Simplicity Studio only shows the relevant examples for the preferred SDK, so you have to select <b>Gecko SDK Suite: Blue- tooth </b>first, as shown in the following figure. (Note: Your SDK version may be different from the one shown in the figure.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 73pt;text-indent: 0pt;text-align: left;"><span><img width="589" height="352" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following procedure describes how to build and load the example code. This procedure assumes you have already loaded a Gecko Bootloader in one of the following ways:</p><ul id="l4"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Loading the Gecko Bootloader precompiled binary from the list of Demos. For an NCP application, you should load the BGAPI UART DFU bootloader.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Building and loading your own Gecko Bootloader as described in chapter 6 of <i>UG266: Silicon Labs Gecko Bootloader User’s Guide</i>.</p></li></ul><ol id="l5"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Example Projects &amp; Demos</b>, select <b>Bluetooth - NCP Empty</b>, and click <b>[Create]</b>.</p><p class="s6" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Note: Bluetooth – NCP Empty <span class="p">has a minimal GATT database and is useful to test Bluetooth features without having to use the GATT database, or if you want to build a static GATT database on the target side, and you need a starting point. For any other cases, use </span>Bluetooth – NCP<span class="p">, in which the host software builds the GATT database dynamically. Host software examples in the Bluetooth SDK build their GATT database dynamically, by default.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="585" height="350" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Name your project and make sure to select <b>Copy contents</b>. Click <b>[Finish]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><span><img width="449" height="300" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Now your project is ready to build and flash. Click <b>Debug </b>(bug icon) in the top left menu to do it in one step. Once the flashing is completed press F8 to start the firmware.</p></li></ol><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>If you get an error when you click <b>Debug</b>, click the project <i>.isc </i>file in the Project Explorer view. It may not be fully selected.</p><ol id="l6"><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark3">NCP Host Development</a><a name="bookmark7">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This chapter introduces the Bluetooth NCP Commander tool, which can be used to send BGAPI commands from a graphical user inter- face. It then walks through the process of building the PC Host examples provided in the Bluetooth SDK. And finally, it describes using Python for host side development.</p><ol id="l7"><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Bluetooth NCP Commander</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth NCP Commander is an easy-to-use tool that can be used for testing different stack features, by sending BGAPI commands to the target device. The tool has two versions: a version built into Simplicity Studio, which makes it easy to connect to your development kit and start testing, and a standalone version to test a board in an environment where Simplicity Studio cannot be installed, or if you want to test a custom board that can be accessed on UART interface, but not through a Simplicity Studio supported debug adapter using VCOM.</p><ol id="l8"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">To open the built-in Bluetooth NCP Commander, select the target board in the <b>Debug Adapters </b>view, and check that the preferred SDK is set to <b>Gecko SDK Suite: Bluetooth</b>. Select the <b>Compatible Tools </b>tab, and click <b>[Launch] </b>next to Bluetooth NCP Commander.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="581" height="352" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Alternatively, you can open Bluetooth NCP Commander from the <b>Tools </b>menu.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 190pt;text-indent: 0pt;text-align: left;"><span><img width="321" height="321" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_013.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: justify;">To open the standalone tool, navigate to C:\SiliconLabs\SimplicityStudio\v5\developer\adapter_packs\ncp_commander, and start NcpCommander.exe.</p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">If you use the built-in version, select the target device, and click <b>[Connect]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 98pt;text-indent: 0pt;text-align: left;"><span><img width="563" height="273" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">In the standalone tool, provide the UART interface settings, and then select the COM port on which the device can be accessed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="562" height="255" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_015.png"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">After the UART connection to the WSTK is established, an Interactive view opens, which you can use to issue BGAPI commands. Check the log for the NCP target response and status messages. To start advertising, click the &quot;+&quot; button under the &quot;Advertise – Peripheral&quot; view to create an advertiser set:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="669" height="324" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Select the desired advertising mode, and click <b>[Start]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="670" height="324" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_017.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">When advertising, the NCP target example accepts Bluetooth connections. If you connect to your WSTK or with another central device (for example with your phone), you can see the events and commands on the log.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;text-align: left;"><span><img width="596" height="345" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_018.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">You can also issue commands manually. For example, you can issue the &#39;system hello&#39; command at any time to verify that commu- nication between the host and the device is working. The Smart Console provides auto completion and documentation for the pos- sible commands. To open/close the documentation, click the arrows at the right side of the input field.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: left;"><span><img width="609" height="353" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;"><span><img width="614" height="148" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_020.jpg"/></span></p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Building the NCP Host Example on Windows</a><a name="bookmark8">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Silicon Labs v3.x Bluetooth SDK contains a generic NCP Host example project for the PC. This example can be compiled on Win- dows or any POSIX OS. This section goes through the build process on Windows.</p><p class="s6" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">The host example projects in the SDK use the dynamic GATT database feature. Therefore, they are to be used together with the Bluetooth – NCP target application not with Bluetooth – NCP Empty.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l9"><li><p class="s13" style="padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="https://www.msys2.org/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">To build the examples properly, you need the MSYS2 development toolchain installed on your PC. Download MSYS2 at </a><a href="https://www.msys2.org/" class="a" target="_blank">https:// </a>www.msys2.org/<span style=" color: #000;">.</span></p></li><li><p class="s13" style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;"><a href="https://www.msys2.org/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">After MSYS2 is installed, update the package database as described at </a>https://www.msys2.org/<span style=" color: #000;">.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Start MSYS2 bash and install mingw-64 with the following command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> pacman -S make mingw-w64-x86_64-gcc                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Close MSYS2 and start MSYS2 MinGW 64-bit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 225pt;text-indent: 0pt;text-align: left;"><span><img width="227" height="137" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_021.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Change to the NCP Host example folder, where &lt;version&gt; varies by SDK version:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s9" style=" background-color: #D8D8D8;"> cd c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\v3.x\app\bluetooth\example_host\empty\              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: justify;">Build the project with the command: <span class="s10">make</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">The build output is created in a new <i>exe </i>folder. Go to this folder with <span class="s10">cd exe</span>, and then run the <i>empty.exe</i><a href="#bookmark7" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">. The COM port and the baud rate are passed as command line parameters. The COM port should be the same as the one used by the JLink CDC UART Port, as shown in section </a><a href="#bookmark7" class="a">3. NCP Host </a><span style=" color: #049;">Development</span>. To see how to pass the different parameters, first run the exe with the -h (help) switch.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;">  .\empty.exe -h                                                                                              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Once the UART connection with the WSTK is established, you should see the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="629" height="88" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Now you can connect to the WSTK over Bluetooth.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 6pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Using Python for Host Side Development</a></p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="https://pypi.org/project/pybgapi/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">You can also implement a host application using Python. A Python package is available at </a>https://pypi.org/project/pybgapi/<span style=" color: #000;">. This pack- age parses the API description file of the Bluetooth SDK and makes it possible to issue BGAPI commands and get BGAPI events in the Python environment. See the referred website for further documentation.</span></p></li></ol></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark9">Example Project Walkthrough</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter describes the structure of the example NCP Host and Target projects, and highlights the parts that can be important if you create your own project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l10"><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">NCP Target</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This section focuses on the NCP-specific part of the ncp / ncp-empty SSv5 projects. You can find a general project description in <i>UG434: Silicon Labs Bluetooth® C Application Developers Guide for SDK v3.x</i>. There are two sample projects for Target development: “Bluetooth - NCP” and “Bluetooth – NCP Empty”.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The “Bluetooth – NCP Empty” example contains a minimal GATT database. Use this with NCP Commander, or for any other use cases when building a database with the APIs is not a viable option.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The “Bluetooth - NCP” example does not contain a GATT database. The dynamic GATT API can be used for building it. This is recom- mended for most of the use cases because the target code does not need to be modified and synchronized with the Host code when the GATT database is updated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><ol id="l12"><ol id="l13"><li><p class="s6" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark11">Project File Structure</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">A common directory and file structure are used across all examples in the Bluetooth SDK v3.x. The following figure shows this layout.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 168pt;text-indent: 0pt;text-align: left;"><span><img width="333" height="342" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_023.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">These files and directories are present in the root directory of the project:</p><ul id="l14"><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">main.c <span class="p">and </span>app.c/h <span class="p">– the C application code</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ncp_empty.pintool <span class="p">– the hardware configuration file and user interface</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ncp_empty.slcp <span class="p">– the component configuration and user interface</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ncp_empty.slps <span class="p">– the project properties XML file</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">GNU ARM v&lt;X.Y.Z&gt; <span class="p">– the build directory</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gecko.sdk_3.&lt;X.Y&gt; <span class="p">– the Bluetooth SDK source code</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">config <span class="p">– the C configuration files of the hardware and Bluetooth stack. This directory contains the output files of the Pintool and Component Manager. For an “NCP – empty” example, it also contains the Bluetooth GATT configuration </span>tool/user <span class="p">interface file.</span></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">autogen – the C configuration code of the application. This directory typically contains the stack definition and initialization C files, as well as the generated GATT database C declaration files (<i>gatt_db.c/h</i>).</p></li></ul></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark12">Pin Tool</a></p><ol id="l15"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the pin configuration tool (Pin Tool) on the project Configuration Tools tab.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 93pt;text-indent: 0pt;text-align: left;"><span><img width="580" height="350" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_024.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">You can also double-click the &lt;projectname&gt;.pintool file in the Project Explorer view, shown highlighted in the figure above.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">Use this tool to modify the pin configuration of the device, for example, you can reassign the pins used for USART communication to the appropriate layout for a custom board design. You do this by selecting the desired pin in the list and then selecting its func- tionality from the drop-down list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="601" height="308" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_025.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">After clicking the selected item, the layout is updated. After saving the file, the configuration source codes are automatically gener- ated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 117pt;text-indent: 0pt;text-align: left;"><span><img width="517" height="324" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_026.jpg"/></span></p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark13">Project Configurator / Component Editor</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">You can install or uninstall components using the Project Configurator&#39;s Software Components tab. You can also configure installed components using the Component Editor. The following figures show how to change the NCP interface buffer sizes.</p><ol id="l16"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select the component from the list and click <b>[Configure]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 93pt;text-indent: 0pt;text-align: left;"><span><img width="580" height="350" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_027.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">The Component Editor opens in a new tab with the possible configuration options. You can view the corresponding source code by clicking <b>[Open Source]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="474" height="124" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_028.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">Apart from the application-specific NCP options, you can use the Project Configurator to configure the Bluetooth stack features that will be included in your project. Some advanced features are excluded from the stack by default, to save flash and memory. You can add the needed features, for example, the Adaptive Frequency Hopping (AFH) component, by clicking <b>[Install]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="588" height="353" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_029.jpg"/></span></p></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">In many cases, you also need to change the default Bluetooth Core configuration, for example to enable more than four connec- tions. To do so, browse for the Bluetooth Core component, and click <b>[Configure]</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="578" height="264" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_030.jpg"/></span></p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark14">Main Walkthrough</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This is a code snippet that corresponds to the <span class="s10">main </span>function. Because the Bluetooth stack and subsequent hardware are considered to be components, they are separated from the application processing that is entirely managed in <i>app.c/h</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="694" height="401" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_031.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Once the USART and Bluetooth stack are initialized, the main loop continuously calls the component as well as the application state machine. The corresponding functions are <span class="s10">sl_system_process_action() </span>and <span class="s10">app_process_action() </span>respectively.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s10">sl_system_process_action() </span>handles Silicon Labs tasks and routines. It must <i>not be removed </i>from the loop.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The default USART settings are mentioned in the Host example section. Make sure that the target and the host use the same configu- ration. The configuration can be adapted with the help of the Pin Tool and the Project Configurator.</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark15">Application Callback and Actions</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Use the <span class="s10">app_init() </span>function to call application-related initializations.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Use the <span class="s10">app_process_action() </span>function to call application-specific tasks and routines.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="697" height="332" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_032.jpg"/></span></p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark16">NCP Code Walkthrough</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The USART communication handling is implemented in <i>ncp_usart.c</i>. Receiving any command from the Host generates an interrupt, and it will queue the received data in the command queue. Similarly, when a stack generates an event, it will be put into an event queue, which will be forwarded to the Host. These two queues will be processed in <i>ncp.c</i>, as described on the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="417" height="517" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_033.jpg"/></span></p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark17">Sleep Modes</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The NCP Empty example project does not enable deep sleep mode (EM2) by default, because UART needs EM1 or EM0 to be able to receive commands at any time. Deep sleep mode can be enabled, but in this case, it is essential to configure a wakeup pin so that the NCP Host can wake up the target before sending any BGAPI commands to it. Any available GPIO pin can be configured as a wakeup pin and the polarity is configurable. The following example shows how to configure pin PF6 as the wakeup pin using active-high polari- ty.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To enable deep sleep mode, the UARTDRV Core component&#39;s <b>Enable reception when sleeping </b>parameter must be disabled. Other- wise the UART driver will prevent the device from going into EM2 (deep sleep) and it will stay in EM1 (sleep):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="716" height="251" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_034.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">To define a wakeup pin, the Bluetooth &gt; Utility &gt; Wake Lock component must be added to the project:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 73pt;text-indent: 0pt;text-align: left;"><span><img width="581" height="348" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_035.jpg"/></span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Configure the Wake-Lock component as follows:</p><ul id="l17"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Enable the wake-lock (direction in) functionality</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Set the polarity (active high in this case)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Assign the GPIO pin (PF6 in this example)</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="639" height="352" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_036.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">When the Host sets the wakeup pin to the configured active value, the NCP device will wake up from deep sleep and send out the event <span class="s10">sl_bt_evt_system_awake </span>to indicate to the host that it has woken up. The host must wait for this event before sending any BGAPI commands, otherwise they might be partially or completely missed.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The remote wake-lock (direction: out) functionality can be used to wake up the host before the NCP target sends out an event. This way the host is also able to go into sleep mode, and it will be notified when it should wake up.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">PC Host</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The PC host application project that comes with the SDK is written in C. The host-side source files for this project are found in folders, where &lt;version&gt; varies by Gecko SDK Suite version:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_host\empty\ c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_host\common\</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The projects comprise only a few source and header files. Note, however, that many other files are referenced from the SDK in the makefile.</p><ol id="l18"><ol id="l19"><ol id="l20"><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark19">BGAPI Support Files</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">While the files in the previous section contain all of the application logic, the actual BGLib implementation code containing the BGAPI parser and packet generation functions is found elsewhere, in other subfolders. &lt;version&gt; will vary by SDK version.</p><ul id="l21"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\inc\sl_bt_ncp_host.h</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\src\sl_bt_ncp_host.c</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">c:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\protocol\bluetooth\src\sl_bt_ncp_host_api.c</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The SDK’s specific arrangement of files is one possible way the BGAPI protocol can be used, but it is also possible to create your own library code that implements the protocol correctly with a different code architecture. The only requirement here is that the chosen im- plementation must be able to create BGAPI command packets correctly and send them to the module over UART. Similarly, it must be able to receive BGAPI response and event packets over UART and process them into whatever function calls are needed to trigger the desired application behavior.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The header files contain primarily #define’d compiler macros and named constants that correspond to all of the various API methods and enumerations you may need to use. The <i>sl_bt_ncp_host.h </i>file also contains function declarations for the basic packet reception, processing, and transmission functions.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <i>sl_bt_ncp_host.c </i>file contains the implementation of the packet management functions. All functions defined here use only ANSI C code, to help ensure maximum cross-compatibility on different platforms.</p><p class="s6" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">With structure packing, the SDK’s BGLib implementation makes heavy use of direct mapping of packet payload structures onto contiguous blocks of memory, to avoid additional parsing and RAM usage. This is accomplished with the PACKSTRUCT macro used extensively in the BGLib header files. It is important to ensure than any ported version of BGLib also correctly packs structures together (no padding on multi-byte struct member variables) in order to achieve the correct operation.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">With byte order, the BGAPI protocol uses little-endian byte ordering for all multi-byte integer values, which means directly-mapped structures will only work if the host platform also uses little-endian byte ordering. This covers most common platforms today, but some big-endian platforms exist and are actively used today (Motorola 6800, 68k, and so on).</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark20">Host Application Logic</a></p><ol id="l22"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Initialize BGLIB.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;">  SL_BT_API_INITIALIZE_NONBLOCK(uart_tx_wrapper, uartRx, uartRxPeek);                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -9pt;text-align: left;">Initialize UART.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 12pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (serial_port_init(argc, argv, 100) &lt; 0) { app_log(&quot;Non-blocking serial port init failure\n&quot;); exit(EXIT_FAILURE);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Flush std output fflush(stdout);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Reset NCP Target to ensure it gets into a defined state. Once the chip successfully boots, the <span class="s10">gecko_evt_system_boot_id </span>event should be received.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> Sl_bt_system_reset(0);                                                                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">The <span class="s10">sl_bt_step </span>function will be called from the main loop. It checks for any NCP Target events and forwards them to the handler function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Poll Bluetooth stack for an event and call event handler static void sl_bt_step(void)</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">sl_bt_msg_t evt;</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Pop (non-blocking) a Bluetooth stack event from event queue. sl_status_t status = sl_bt_pop_event(&amp;evt);</p><p class="s10" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (status != SL_STATUS_OK) { return;</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">sl_bt_on_event(&amp;evt);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">} }</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/></li><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;line-height: 11pt;text-align: left;">Process the incoming NCP target events. The example only handles the <span class="s10">gecko_evt_system_boot_id </span>and the</p></li></ol></li></ol></ol></ol><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">gecko_evt_le_connection_closed_id <span class="p">events.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">/* Handle events */</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">switch (SL_BT_MSG_ID(evt-&gt;header)) { case sl_bt_evt_system_boot_id:</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">// Print boot message.</p><p class="s10" style="padding-left: 70pt;text-indent: -38pt;line-height: 107%;text-align: left;">app_log(&quot;Bluetooth stack booted: v%d.%d.%d-b%d\n&quot;, evt-&gt;data.evt_system_boot.major,</p><p class="s10" style="padding-left: 70pt;text-indent: 0pt;line-height: 107%;text-align: left;">evt-&gt;data.evt_system_boot.minor, evt-&gt;data.evt_system_boot.patch, evt-&gt;data.evt_system_boot.build);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">sc = sl_bt_system_get_identity_address(&amp;address, &amp;address_type); app_assert(sc == SL_STATUS_OK,</p><p class="s10" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to get Bluetooth address\n&quot;, (int)sc);</p><p class="s10" style="padding-left: 70pt;text-indent: -38pt;line-height: 107%;text-align: left;">app_log(&quot;Bluetooth %s address: %02X:%02X:%02X:%02X:%02X:%02X\n&quot;, address_type ? &quot;static random&quot; : &quot;public device&quot;, address.addr[5],</p><p class="s10" style="padding-left: 70pt;text-indent: 0pt;line-height: 107%;text-align: left;">address.addr[4], address.addr[3], address.addr[2], address.addr[1], address.addr[0]);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">// Create an advertising set.</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">sc = sl_bt_advertiser_create_set(&amp;advertising_set_handle); app_assert(sc == SL_STATUS_OK,</p><p class="s10" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to create advertising set\n&quot;, (int)sc);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: justify;">// Set advertising interval to 100ms. sc = sl_bt_advertiser_set_timing(</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: justify;">advertising_set_handle, // advertising set handle</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">160, // min. adv. interval (milliseconds * 1.6) 160, // max. adv. interval (milliseconds * 1.6) 0, // adv. duration</p><p class="s10" style="padding-left: 31pt;text-indent: 9pt;line-height: 107%;text-align: justify;">0); // max. num. adv. events app_assert(sc == SL_STATUS_OK,</p><p class="s10" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to set advertising timing\n&quot;, (int)sc);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Start general advertising and enable connections. sc = sl_bt_advertiser_start(</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">advertising_set_handle, // advertising set handle advertiser_general_discoverable, // discoverable mode advertiser_connectable_scannable); // connectable mode</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">app_assert(sc == SL_STATUS_OK,</p><p class="s10" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to start advertising\n&quot;, (int)sc);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">app_log(&quot;Started advertising\n&quot;); break;</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 31pt;text-indent: -29pt;line-height: 107%;text-align: left;">case sl_bt_evt_connection_closed_id: app_log(&quot;Connection closed\n&quot;);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Check if need to boot to OTA DFU mode. if (boot_to_dfu) {</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Enter to OTA DFU mode. sl_bt_system_reset(2);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Restart advertising after client has disconnected. sc = sl_bt_advertiser_start(</p><p class="s10" style="padding-left: 51pt;text-indent: 0pt;line-height: 107%;text-align: left;">advertising_set_handle, // advertising set handle advertiser_general_discoverable, // discoverable mode advertiser_connectable_scannable); // connectable mode</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">app_assert(sc == SL_STATUS_OK,</p><p class="s10" style="padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to start advertising\n&quot;, (int)sc);</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">app_log(&quot;Started advertising\n&quot;);</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">break;}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><ol id="l23"><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark21">Custom API Support</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter introduces how to implement a custom binary protocol between an NCP target and host using specific features of the BGAPI. The Silicon Labs Bluetooth SDK provides the following commands and events for that purpose:</p><ul id="l24"><li><p class="s10" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">cmd_user_message_to_target</p></li><li><p class="s10" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">evt_user_message_to_host</p></li></ul><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The command and event details are documented in the API reference manual.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s10">cmd_user_message_to_target </span>command can be used by an NCP host to send a message to the target application on a device. To send a custom message with this API command, the host must send the byte sequence specified below to the target. Byte 4..255 can be the custom message itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 207pt;text-indent: 0pt;text-align: center;">Table 5.1.  Command Byte Sequence</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">Byte Number</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 36pt;text-indent: 0pt;text-align: center;">Value/Type</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">0</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0x20</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message type: Command</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">payload length</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">The size of the uint8array struct including its length and payload members.</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">2</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0xFF</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message class: User messaging</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">3</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0x00</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message ID</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">4..255</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">uint8array</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">The user message. The first byte is the length of the message. The next bytes are the message bytes</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Once the target receives this byte sequence, it must response with the byte sequence specified below. Byte 6 to 255 can be used for the custom response.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 207pt;text-indent: 0pt;text-align: center;">Table 5.2.  Response Byte Sequence</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">Byte Number</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 36pt;text-indent: 0pt;text-align: center;">Value/Type</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">0</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0x20</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message type: Command</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">payload length</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">The size of the uint8array struct including its length and payload members.</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">2</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0xFF</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message class: User messaging</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">3</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0x00</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message ID</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">4-5</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">uint16</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Result code: 0: Success / Non-0: An error occurred</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">6..255</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">uint8array</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">The user message. The first byte is the length of the message. The next bytes are the response message bytes.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Additionally, the <span class="s10">evt_user_message_to_host event </span>can be used by the target to send a message to NCP host. The target must send the byte sequence specified below. Byte 4..255 can be the custom message itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 207pt;text-indent: 0pt;text-align: center;">Table 5.3.  Event Byte Sequence</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">Byte Number</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 36pt;text-indent: 0pt;text-align: center;">Value/Type</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">0</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0xA0</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message type: Event</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">payload length</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">The size of the uint8array struct including its length and payload members.</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">2</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0xFF</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message class: User messaging</p></td></tr><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">3</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">0x00</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Message ID</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">Byte Number</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 37pt;padding-right: 36pt;text-indent: 0pt;text-align: center;">Value/Type</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:30pt"><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">4..255</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 37pt;padding-right: 37pt;text-indent: 0pt;text-align: center;">uint8array</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">The user message. The first byte is the length of the message. The next bytes are the message bytes.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l25"><li><p class="s6" style="padding-top: 4pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark22">ncp_user_command_cb</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 173%;text-align: left;">The NCP Target calls <span class="s10">ncp_user_command_cb </span>if a command ID equals to <span class="s10">sl_bt_cmd_user_message_to_target_id</span>. You can find the default implementation of <span class="s10">ncp_user_command_cb </span>in the <i>app.c </i>file and the declaration it in the <i>ncp.h </i>file.</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">In the first case, the Target echoes back the command to the Host, as a reply for the <span class="s10">USER_CMD_1 </span>command. Also, it sends back the same as an event, to demonstrate how events can be sent to the Host.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">It is also possible to initiate the communication from the Target. For the second user command, <span class="s10">USER_CMD_2 </span>starts a timer, and when it expires, it will send a user event to the Host, using the function <span class="s10">sl_bt_send_evt_user_message_to_host</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="515" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_037.jpg"/></span></p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Firmware Update</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_038.png"/></span></p></li></ol></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark23">Firmware Update</a><a name="bookmark24">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The ability to update the firmware of units already deployed in the field is a common requirement for many products. For example, it may be necessary to add new features to products after the first version has been launched. If a software bug or some unanticipated compatibility issue is identified after the product has been shipped, it is essential to provide a firmware update that fixes the problem, without the need to recall units or for the customer to take them to service for reprogramming.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Before Bluetooth SDK version 2.7.0, legacy OTA and Legacy UART DFU bootloader methods were supported for some devices. These legacy methods were deprecated in version 2.6.0, and the software was removed in version 2.7.0. Only the Gecko Bootloader is sup- ported by Wireless Gecko devices using Network Co-Processor Mode.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Gecko Bootloader was developed to unify the firmware update methods across different Silicon Labs SDKs, stacks, MCUs, and WMCUs. Key features of the Gecko Bootloader are:</p><ul id="l26"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Useable across families (MCU and WMCU)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Supports image verification and encryption for:</p><ul id="l27"><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Integrity</p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Authenticity</p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Confidentiality</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">In-field updateable</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configurable</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader has a two-stage design, where a minimal first stage bootloader is used to update the main bootloader. This al- lows for in-field updates of the main bootloader, including adding new capabilities, changing communication protocols, adding new se- curity features and fixes, and so on.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Gecko Bootloader can be configured to function as a standalone bootloader or an application bootloader, depending on the plugin configuration. To function as a standalone bootloader, a plugin providing a communication interface such as UART has to be config- ured. To function as an application bootloader, a plugin providing a bootloader storage implementation must be configured. Plugins can be enabled and configured through the Simplicity Studio IDE.</p><p class="s13" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">For more information about the Gecko Bootloader and its use with the Bluetooth SDK, see </a><a href="https://www.silabs.com/documents/public/user-guides/ug266-gecko-bootloader-user-guide.pdf" class="a" target="_blank">UG266: Silicon Labs Gecko Bootloader </a>User’s Guide <a href="https://www.silabs.com/documents/public/application-notes/an1086-gecko-bootloader-bluetooth.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">and </a>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth® Applications<span style=" color: #000;">.</span></p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Application Loader</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_039.png"/></span></p></li></ul></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark25">Application Loader</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">A Bluetooth application developed with the Silicon Labs Bluetooth SDK comprises two parts: an application loader called AppLoader and the user application. AppLoader is a small standalone application that is required to support in-place OTA updates. AppLoader can run independently of the user application. It contains a minimal version of Bluetooth stack, including only those features that are neces- sary to perform the OTA update. Any Bluetooth features that are not necessary to support OTA updates are disabled in AppLoader to minimize the flash footprint.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The AppLoader features and limitations are summarized below:</p><ul id="l28"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Enables OTA updating of the user application.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The AppLoader itself can also be updated.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Only one Bluetooth connection is supported, GATT server role only.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Encryption and other security features (bonding and so on) are not supported.</p><p class="s13" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/documents/public/application-notes/an1086-gecko-bootloader-bluetooth.pdf" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">For more information, see </a>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth® Applications<span style=" color: #000;">.</span></p></li></ul></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark26">Adding a New Service to the NCP Empty Example</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This chapter describes how to add a custom Bluetooth service to the <b>NCP empty </b>example. The service will have a characteristic to receive data. When the central device (tablet/phone) writes this characteristic, the peripheral (WSTK – NCP Target) will forward this data to the NCP Host. The NCP Host will print out the actual data to the PC console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="641" height="201" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_040.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">To implement this application, you need to make these changes:</p><ul id="l29"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Add the new service and characteristics to the (static) GATT database.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Add the new GATT both to the Host and Target project.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Handle GATT change event (sl_bt_gatt_server_attribute_value) in the Host project.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If you want to build the GATT database dynamically from the host software (preferred method), see the next section.</p><ol id="l30"><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark27">Update the Target Project</a><a name="bookmark29">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The GATT database can be modified using the visual GATT editor in Simplicity Studio. For more details, refer to <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Add a new service definition after the last service as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><span><img width="570" height="402" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_041.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Once the GATT is configured, save the file, and check the folder named <b>autogen</b>. You should see a new handle for the <span class="s10">my_data</span></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">characteristic in the newly generated <i>gatt_db.h</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 193pt;text-indent: 0pt;text-align: left;"><span><img width="264" height="209" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_042.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Once generation is completed you can rebuild the project. Click the debug button to flash the WSTK with the new firmware.</p><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><b>Note: </b>After saving any changes to the GATT content, the <i>gatt_db.c </i>and <i>gatt_db.h </i>files will be automatically re-generated Then you have to re-compile the project.</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark28">Update the Host Project</a></p><ol id="l31"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In order to use the GATT handles on the NCP Host side, you need to add <i>gatt_db.h </i>to the Host project. <i>gatt_db.h </i><a href="#bookmark29" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">is already gener- ated to your workspace in the procedure in section </a><a href="#bookmark29" class="a">8.1 Update the Target </a><span style=" color: #049;">Project</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Copy <i>gatt_db.h </i>to the host project folder:</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">..\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\examples_ncp_host\empty\</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Optional: If you want to be sure that the Host and Target GATT are always in sync, you can modify the makefile to include the</p><p class="s7" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">gatt_db.h <span class="p">from the folder of your Target project. Add the path to your project workspace.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">INCLUDEPATHS += \</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">-I../../../../&lt;your project path&gt;/autogen \</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">-I../../../../protocol/bluetooth/ble_stack/inc/common \</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">-I../../../../protocol/bluetooth/ble_stack/inc/host</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In the following step, you have to modify the file <i>app.c </i><a href="#bookmark24" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">(shown in section </a><span style=" color: #049;">6. Firmware Update</span>). First include <i>gatt_db.h </i>to <i>app.c</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/* include GATT handles*/ #include &quot;gatt_db.h&quot;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Then add the callback function that reacts to the GATT change. In this case, it will print out the content of the characteristic.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">void AttrValueChanged_my_data(uint8array *value)</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">uint8_t i;</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">for (i = 0; i &lt; value-&gt;len; i++){</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">app_log(&quot;my_data[%d] = 0x%x \r\n&quot;,i,value-&gt;data[i]);</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">app_log(&quot;\r\n&quot;);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Now add the <span class="s10">sl_bt_evt_gatt_server_attribute_value_id </span>event to the switch case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_gatt_server_attribute_value_id:</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Check if the event is because of the my_data changed by the remote GATT client if ( gattdb_my_data == evt-&gt;data.evt_gatt_server_attribute_value.attribute ){</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">// Call my handler</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">AttrValueChanged_my_data(&amp;(evt-&gt;data.evt_gatt_server_attribute_value.value));</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">break;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s13" style="padding-top: 4pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark8" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Now you can rebuild the host application. See the build process with MinGW in section </a><a href="#bookmark8" class="a">3.2 Building the NCP Host Example on </a>Windows<a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">. The test setup is described in section </a><a href="#bookmark33" class="a">9.2 </a>Testing<span style=" color: #000;">.</span></p></li></ol></li></ol></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark30">Adding a New Service to the NCP Example with the Dynamic GATT API</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This chapter describes how to add a custom Bluetooth service to the <b>NCP </b>example using the dynamic GATT API. The service has a characteristic to receive data. When the central device (tablet/phone) writes this characteristic, the peripheral (WSTK – NCP Target) forwards this data to the NCP Host. The NCP Host prints out the actual data to the PC console. With this method, the Target project does not need to be modified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="641" height="201" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">To implement this application, you need to make these changes:</p><ul id="l32"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Create a GATT database from the Host project</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Handle the GATT change event (sl_bt_evt_gatt_server_attribute_value) in the Host project</p></li></ul><ol id="l33"><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark31">Update the Host Project</a></p><p class="s13" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="https://docs.silabs.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">The GATT database will be built with the APIs provided by the Dynamic GATT Configurator component. See the Bluetooth API refer- ence manual on </a>docs.silabs.com<span style=" color: #000;">, section &quot;GATT Database&quot;, for more details.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In the code snippet below, the custom service and characteristic is added to the database. The service will be a primary service, de- fined with a 16-byte long UUID, and it will be advertised.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The characteristic has the following properties:</p><ul id="l34"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Read, Write, Indicate</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Value length: 20 bytes</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Value max length: 20 bytes</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">16-byte long UUID</p></li></ul><ol id="l35"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Add this to the boot event.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">uint8_t uuid_service[16] = {…} //define your 128bit service UUID, you can use a random number uint8_t uuid_characteristic[16] = {…} //define your 128bit characteristic UUID</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//create a session for the database update sl_bt_gattdb_new_session(&amp;session);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//add our service to the database, as an advertised primary service  sl_bt_gattdb_add_service(session, sl_bt_gattdb_primary_service, SL_BT_GATTDB_ADVERTISED_SERVICE, 16,</p><p class="s10" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">uuid_service, &amp;service);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">//define the following properties: read, write, indicate</p><p class="s10" style="padding-left: 61pt;text-indent: -58pt;line-height: 107%;text-align: left;">property = (SL_BT_GATTDB_CHARACTERISTIC_READ | SL_BT_GATTDB_CHARACTERISTIC_INDICATE | SL_BT_GATTDB_CHARACTERISTIC_WRITE);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">//add our characteristic to the service</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_bt_gattdb_add_uuid128_characteristic(session, service, property, 0, 0, uuid_characteristic,</p><p class="s10" style="padding-left: 172pt;text-indent: 0pt;text-align: left;">sl_bt_gattdb_fixed_length_value, 20, 20, &amp;value, &amp;characteristic);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//activate the new service sl_bt_gattdb_start_service(session, service);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//activate the new characteristic sl_bt_gattdb_start_characteristic(session, characteristic);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//store the handle of the characteristic for future reference gattdb_my_data = characteristic;</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//save changes and close the database editing session sl_bt_gattdb_commit(session);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Add the callback function that reacts to the GATT change. In this case, it prints out the content of the characteristic.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">void AttrValueChanged_my_data(uint8array *value)</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">uint8_t i;</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">for (i = 0; i &lt; value-&gt;len; i++){</p><p class="s10" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">app_log(&quot;my_data[%d] = 0x%x \r\n&quot;,i,value-&gt;data[i]);</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">app_log(&quot;\r\n&quot;);</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Add the <span class="s10">sl_bt_evt_gatt_server_attribute_value_id </span>event to the switch case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_gatt_server_attribute_value_id:</p><p class="s10" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Check if the event is because of the my_data changed by the remote GATT client if ( gattdb_my_data == evt-&gt;data.evt_gatt_server_attribute_value.attribute ){</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">// Call my handler</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">AttrValueChanged_my_data(&amp;(evt-&gt;data.evt_gatt_server_attribute_value.value));</p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">}</p><p class="s10" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">break;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Now you can rebuild the host application. See the build process with MinGW in </a>3.2 Building the NCP Host Example on Windows<span style=" color: #000;">.</span></p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark32">Testing</a><a name="bookmark33">&zwnj;</a></p><ol id="l36"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Start the host application from the <i>\exe </i>folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Once the PC is connected to WSTK (via UART), the WSTK starts advertising on Bluetooth.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">If you connect via tablet/phone you can write the newly created <span class="s10">my_data </span>characteristic in the GATT. For this, you can use the EFR Connect app provided by Silicon Labs.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Browse to the <span class="s10">my_data </span>characteristic and write something to it. The data will be printed by the host application.</p></li></ol></li></ol></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><span><img width="604" height="344" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_044.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Smart. Connected. <span class="s15">Energy-Friendly.</span></h2><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="769" height="433" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_045.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_046.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s17">www.silabs.com/products</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_047.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s17">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 5pt;padding-left: 207pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 207pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s17">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s19" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s20">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s20">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s20">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s23" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s22" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s24" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s19">Silicon Laboratories Inc.</span>®<span class="s19">, Silicon Laboratories</span>®<span class="s19">, Silicon Labs</span>®<span class="s19">, SiLabs</span>® <span class="s19">and the Silicon Labs logo</span>®<span class="s19">, Bluegiga</span>®<span class="s19">, Bluegiga Logo</span>®<span class="s19">, Clockbuilder</span>®<span class="s19">, CMEMS</span>®<span class="s19">, DSPLL</span>®<span class="s19">, EFM</span>®<span class="s19">, EFM32</span>®<span class="s19">, EFR, Ember</span>®<span class="s20">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s19">, EZLink</span>®<span class="s19">, EZRadio</span>®<span class="s19">, EZRadioPRO</span>®<span class="s19">, Gecko</span>®<span class="s19">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s19">, Precision32</span>®<span class="s19">, ProSLIC</span>®<span class="s19">, Simplicity Studio</span>®<span class="s19">, SiPHY</span>®<span class="s19">, Telegesis, the Telegesis Logo</span>®<span class="s19">, USBXpress</span>® <span class="s19">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s19">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1259-bt-ncp-mode-sdk-v3x/Image_049.png"/></span></p><p class="s22" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s22" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h4 href="http://www.silabs.com/">www.silabs.com</h4></p></body></html>
