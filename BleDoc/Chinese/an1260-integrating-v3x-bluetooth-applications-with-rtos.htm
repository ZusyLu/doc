<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>an1260-integrating-v3x-bluetooth-applications-with-rtos</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .h3 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 19pt; vertical-align: 8pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: #007694; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s12 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s14 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s15 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s16 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s17 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s18 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s19 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s21 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s22 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s23 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h4 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: g1 1; }
 #l8> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l10 {padding-left: 0pt;counter-reset: i1 1; }
 #l10> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 li {display: block; }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12 {padding-left: 0pt;counter-reset: k1 2; }
 #l12> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 li {display: block; }
 #l13 {padding-left: 0pt;counter-reset: k1 2; }
 #l13> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l14 {padding-left: 0pt;counter-reset: k2 1; }
 #l14> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l15 {padding-left: 0pt;counter-reset: k3 1; }
 #l15> li>*:first-child:before {counter-increment: k3; content: counter(k1, decimal)"."counter(k2, decimal)"."counter(k3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: k3 0;  }
 #l16 {padding-left: 0pt;counter-reset: k4 1; }
 #l16> li>*:first-child:before {counter-increment: k4; content: counter(k4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: k4 0;  }
 li {display: block; }
 #l17 {padding-left: 0pt;counter-reset: l1 3; }
 #l17> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l18 {padding-left: 0pt;counter-reset: l2 1; }
 #l18> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt;counter-reset: l3 1; }
 #l20> li>*:first-child:before {counter-increment: l3; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: l3 0;  }
 #l21 {padding-left: 0pt;counter-reset: l4 1; }
 #l21> li>*:first-child:before {counter-increment: l4; content: counter(l4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 #l22 {padding-left: 0pt; }
 #l22> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23 {padding-left: 0pt; }
 #l23> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24 {padding-left: 0pt;counter-reset: l4 1; }
 #l24> li>*:first-child:before {counter-increment: l4; content: counter(l4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 #l25 {padding-left: 0pt;counter-reset: l3 1; }
 #l25> li>*:first-child:before {counter-increment: l3; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: l3 0;  }
 #l26 {padding-left: 0pt;counter-reset: l4 1; }
 #l26> li>*:first-child:before {counter-increment: l4; content: counter(l4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 #l27 {padding-left: 0pt;counter-reset: o1 1; }
 #l27> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 #l28 {padding-left: 0pt;counter-reset: l4 1; }
 #l28> li>*:first-child:before {counter-increment: l4; content: counter(l4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 li {display: block; }
 #l29 {padding-left: 0pt;counter-reset: p1 1; }
 #l29> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l29> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 li {display: block; }
 #l30 {padding-left: 0pt; }
 #l30> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_002.png"/></span></p><h1 style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">AN1260: Integrating v3.x Silicon Labs <i>Bluetooth</i><span class="h3">® </span>Applications with Real-Time Operating Systems</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="186" height="1" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="184" height="1" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Prerequisites</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">System architecture, Inter-task communication and task descriptions</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Application integration using specific example tasks</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Customization the application</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Additional resources</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This application note provides background information on the system architecture and event-based communication between a real-time operating system (RTOS) and the Bluetooth application. It then discusses user-defined tasks and describes how to cus- tomize an application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l2"><li><p class="s5" style="padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This application note describes how to integrate a v3.x Silicon Labs Bluetooth application with an RTOS (real-time operating system), using the <b>SOC-Empty </b>example in Simplicity Studio 5 as an illustration. As of Silicon Labs Bluetooth SDK version 3.1.0, the adaptation layer has been designed to work with Micrium OS RTOS and FreeRTOS, both using the CMSIS-RTOS2 API. To work with any other RTOS, the OS should have the following features:</p><ul id="l3"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Tasks with priorities</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Flags for triggering task execution from interrupt context</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Mutexes</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The solution places the handling of Bluetooth stack events into its own task, allowing the application to run other tasks when no Blue- tooth events are pending. When no tasks are ready to run, the application will sleep.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">Prerequisites</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">You should have:</p><ul id="l5"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">A general understanding of RTOS concepts such as tasks, semaphores and mutexes.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">A working knowledge of Bluetooth Low Energy communications.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">A Wireless starter kit with an EFR32BG or EFR32MG radio board</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Installed and be familiar with using the following:</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: justify;">Simplicity Studio 5</p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: justify;">IAR Embedded Workbench for ARM (IAR-EWARM) (optional - only use the version that is compatible with the SDK version, as listed in the SDK release notes). May be used as a compiler in the Simplicity Studio development environment as an alternative to GCC (The GNU Compiler Collection), which is provided with Simplicity Studio. Again, use only the GCC version that is compat- ible with the SDK version, as listed in the SDK release notes.</p></li><li><p style="padding-top: 2pt;padding-left: 47pt;text-indent: -9pt;text-align: justify;">Bluetooth SDK v3.1.0 or above</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If you need to familiarize yourself with any of these concepts, the following may be useful:</p></li></ul></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">UG103.14: Bluetooth® LE Fundamentals</p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">QSG169: Bluetooth® SDK v3.x Quick Start Guide</p></li><li><p class="s12" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">µC/OS-III User Manual <span style=" color: #000;">for an overview of RTOS fundamentals</span></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">FreeRTOS</p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: justify;"><a href="https://www.freertos.org/implementation/a00002.html" class="a" target="_blank">RTOS </a><a href="https://www.freertos.org/implementation/a00002.html" target="_blank">Fundamentals</a></p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;"><a href="https://freertos.org/features.html" class="a" target="_blank">FreeRTOS Kernel Developer </a><a href="https://freertos.org/features.html" target="_blank">Docs</a></p></li></ul></li></ul></li><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Micrium OS Configuration</a><a name="bookmark4">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To have Micrium RTOS run in your application, the <b>Micrium OS Kernel </b>component needs to be added to your application project. The following procedure illustrates this using the <b>SOC-Empty </b>example project.</p><ol id="l8"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;line-height: 11pt;text-align: left;">Double-click the <span class="s8">soc_empty.slcp </span>file in the Simplicity Studio Project Explorer to open the Project Configurator, and click the</p><p class="s6" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SOFTWARE COMPONENTS <span class="p">tab.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Enter <b>micrium </b>in the search field in the top right corner. Optionally, select the <b>Configurable Components </b>checkbox to shorten the component list.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select <b>Micrium OS Kernel </b>in the left pane and click <b>Install </b>.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="646" height="350" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The <b>Micrium OS Kernel </b>component adds Micrium RTOS support to the <b>SOC-Empty </b><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">example project and configures the project to run the Bluetooth stack in multiple tasks. These tasks are discussed in section </a><span style=" color: #049;">2. System Architecture</span>.</p><p style="padding-top: 1pt;padding-left: 22pt;text-indent: 0pt;line-height: 19pt;text-align: left;">The following components are added automatically when adding the <b>Micrium OS Kernel </b>component: Generic RTOS related:</p><ul id="l9"><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - CMSIS - CMSIS-RTOS2</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - CMSIS - CMSIS-RTOS2 Headers</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - Common - Common APIs for CMSIS-Compliant Kernels</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Micrium OS related:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - Micrium OS - Common - CPU - Micrium OS CPU Module</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - Micrium OS - Common - Micrium OS Common Module Core</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - Micrium OS - Common - RTOS Description</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - Micrium OS - Kernel - Micrium OS Kernel</p></li></ul><p class="s6" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">If the component </span>Simple timer service <span class="p">is used in the application, a separate version for the Micrium OS called </span>Simple timer service for Micrium RTOS <span class="p">should be used instead.</span></p><p class="s9" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_007.png"/></span></p></li><li><p class="s6" style="padding-top: 7pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">FreeRTOS Configuration</a><a name="bookmark5">&zwnj;</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To have FreeRTOS run in your application, add the <b>FreeRTOS </b>component and the preferred <b>FreeRTOS Heap </b>component (Heap 3 is used in the examples) to your application project.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To add the <b>FreeRTOS </b>component to the <b>SOC-Empty </b>example project:</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;line-height: 11pt;text-align: left;">Double-click the <span class="s8">soc_empty.slcp </span>file in the Simplicity Studio Project Explorer to open the Project Configurator, and click the</p><p class="s6" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SOFTWARE COMPONENTS <span class="p">tab.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Enter <b>freertos </b>in the search field in the top right corner.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select <b>FreeRTOS Heap 3 </b>in the left pane and click <b>Install</b>.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="590" height="377" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The <b>FreeRTOS Heap 3 </b>component adds FreeRTOS support to the <b>SOC-Empty </b><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">example project and configures the project to run the Bluetooth stack in multiple tasks. These tasks are discussed in section </a><span style=" color: #049;">2. System Architecture</span>.</p><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">If the </span>FreeRTOS <span class="p">component is added instead of the </span>FreeRTOS Heap 3 <a href="https://www.freertos.org/a00111.html" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">component, it will default to FreeRTOS Heap 4. To see more information about the FreeRTOS heap implementations, see the </a><span class="s12">FreeRTOS documentation</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 19pt;text-align: left;">The following components are added automatically when adding the <b>FreeRTOS Heap 3 </b>component: Generic RTOS related:</p><ul id="l11"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - CMSIS - CMSIS-RTOS2</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - CMSIS - CMSIS-RTOS2 Headers</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Platform - Common - Common APIs for CMSIS-Compliant Kernels</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">FreeRTOS related:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - FreeRTOS - FreeRTOS</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RTOS - FreeRTOS - FreeRTOS Heap 3</p><p class="s6" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">If the component </span>Simple timer service <span class="p">is used in the application, there are special versions for the FreeRTOS called </span>Simple timer service for FreeRTOS <span class="p">and </span>Simple timer service for FreeRTOS with static memory allocation<span class="p">.</span></p><ol id="l12"><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">System Architecture</a><a name="bookmark15">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The <b>SOC-Empty </b>example application with Micrium RTOS or FreeRTOS support requires several tasks in order to operate</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Link Layer Task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth Host Task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Event Handler Task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Idle Task</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Silicon Labs has implemented these tasks for the Micrium RTOS and FreeRTOS.</p><ol id="l13"><ol id="l14"><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Inter-Task Communication</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Before describing the tasks, it is important to understand how the tasks communicate with each other. The tasks in this application syn- chronize with each other through the use of a number of flags. The flags are internal of the sl_bt_rtos_adaptation layer. These flags are summarized in the following table:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:30pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_STACK</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Host Task</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 56pt;text-indent: 0pt;text-align: left;">Bluetooth stack needs an update, call sl_bt_pop_event()</p></td></tr><tr style="height:30pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_LL</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Radio Inter- rupt</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 27pt;text-indent: 0pt;text-align: left;">Link Layer needs an update, call sl_bt_priori- ty_handle()</p></td></tr><tr style="height:40pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Event Handler and Applica- tion Tasks</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Host Task</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;padding-right: 37pt;text-indent: 0pt;text-align: left;">Command is ready in shared memory, call sli_bt_cmd_handler_delegate()</p></td></tr><tr style="height:40pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_RSP_WAITING</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Host Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Event Handler and Applica- tion Tasks</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Response is ready in shared memory.</p></td></tr><tr style="height:30pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Host Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Event Handler Task</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event is ready in shared memory.</p></td></tr><tr style="height:30pt"><td style="width:203pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Event Handler Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Host Task</p></td><td style="width:211pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Event is handled and shared memory is free to use for next event.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following diagram illustrates how these flags are used in synchronizing the tasks.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In addition to these flags, a mutex is used by the gecko command handler to make it thread-safe. This makes it possible to call BGAPI commands from multiple tasks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="712" height="376" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Link Layer Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The purpose of this task is to update the upper link layer. The link layer task waits for the <span class="s8">SL_BT_RTOS_EVENT_FLAG_LL </span>flag to be set before running. The upper link layer is updated by calling <span class="s8">sl_bt_priority_handle()</span>. The <span class="s8">SL_BT_RTOS_EVENT_FLAG_LL </span>flag is set by <span class="s8">sli_bt_rtos_ll_callback()</span>, which is a callback function specified to <span class="s8">scheduler_callback </span>in the stack configuration. The callback is called from a kernel-aware interrupt handler (lower link layer). This task is given the highest priority.</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">Bluetooth Host Task</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of this task is to update the Bluetooth stack, issue events, and handle commands. This task waits for any of the</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">SL_BT_RTOS_EVENT_FLAG_STACK<span class="p">, </span>SL_BT_RTOS_EVENT_FLAG_CMD_WAITING <span class="p">and </span>SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED <span class="p">flags to be set</span></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">before running. The <span class="s8">SL_BT_RTOS_EVENT_FLAG_STACK </span>flag is set by <span class="s8">sli_bt_rtos_stack_callback()</span>, which is a callback function specified to <span class="s8">stack_schedule_callback </span>in the stack configuration. This task has higher priority than the Event Handler Task and any of the Application Tasks, but lower than the Link Layer Task.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Before this task starts running, it prepares the application to run the Bluetooth stack. This task calls <span class="s8">sl_bt_init() </span>to initialize and con- figure the Bluetooth stack, and then calls <span class="s8">sl_bt_rtos_create_tasks() </span>to create the Link Layer Task and Event Handler Task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><li><p class="s6" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark10">Updating the Stack</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack must be updated periodically. The Bluetooth Host Task updates the stack by calling <span class="s8">sl_bt_event_pending() </span>and reads the next stack event from the stack by calling <span class="s8">sl_bt_pop_event()</span>. This allows the stack to process messages from the link layer as well as its own internal messages for timed actions that it needs to perform.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark11">Issuing Events</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth Host Task sets the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING </span>flag to indicate to the event handler task that an event is ready to be retrieved. Only one event can be retrieved at a time. The <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING </span>flag is cleared by the Event Handler Task when it has retrieved the event. The <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED </span>flag is set by the Event Handler Task to indicate that event handling is complete.</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark12">Command Handling</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Commands can be sent to the stack from multiple tasks. Responses to these commands are forwarded to the calling task. Commands and responses are synchronized with the <span class="s8">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING </span>and <span class="s8">SL_BT_RTOS_EVENT_FLAG_RSP_WAITING </span>flags and the BluetoothMutex mutex.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Commands are prepared and sent to the stack by a helper function called <span class="s8">sli_bt_cmd_handler_rtos_delegate()</span>. This function is called by any of the BGAPI functions and is made re-entrant through the use of a mutex. The function starts by pending on the mutex. When it gains control of the mutex the command is prepared and placed into shared memory, then the <span class="s8">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING </span>flag is set to indicate to the stack that a command is waiting to be handled. This flag is cleared by the Bluetooth Host Task to indicate that the command has been sent to the stack and that it is now safe to send another command.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Then execution pends on the <span class="s8">SL_BT_RTOS_EVENT_FLAG_RSP_WAITING </span>flag, which is set by the Bluetooth Host Task when the command has been executed. This indicates that a response to the command is waiting. Finally, the mutex is released.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following diagram illustrates how the Bluetooth Host Task operates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><span><img width="556" height="636" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l16"><li><p style="padding-left: 41pt;text-indent: -8pt;line-height: 11pt;text-align: left;">On task startup, the <span class="s8">SL_BT_RTOS_EVENT_FLAG_STACK </span>is set to indicate that the stack needs updating and the</p><p class="s8" style="padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED <span class="p">flag is set to indicate that no event is currently being handled.</span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">If the <span class="s8">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING </span>flag is set, <span class="s8">sli_bt_cmd_handler_rtos_delegate() </span>is called to handle the com- mand.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">If the <span class="s8">SL_BT_RTOS_EVENT_FLAG_STACK </span>and the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED </span>flags are set, <span class="s8">sl_bt_pop_event() </span>is called to get an event from the stack. If an event is found waiting, the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING </span>flag is set and the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED </span>flag is cleared to indicate to the Event Handler Task that an event is ready to be handled and to the Bluetooth Host Task that an event is currently in the process of being handled. Otherwise, the <span class="s8">SL_BT_RTOS_EVENT_FLAG_STACK </span>flag is cleared to indicate that the stack does not require updating.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">At this point, the task checks to see if the stack requires updating and whether any events are waiting to be handled. If no events are waiting to be handled and the stack does not need updating then it is safe to sleep and the Bluetooth Host Task does a pend on the <span class="s8">SL_BT_RTOS_EVENT_FLAG_STACK</span>, <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED </span>and <span class="s8">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING </span>flags.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: justify;">Steps 2 – 4 are repeated indefinitely.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li><li><p class="s6" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Event Handler Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The purpose of this task is to handle events sent by the Bluetooth stack. This task waits for the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING </span>flag to be set. This flag is set by the Bluetooth Host Task to indicate that there is an event waiting to be handled. Once this flag has been set, sl_bt_process_event() is called to handle the event. Finally, the <span class="s8">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED </span>flag is set to indicate to the Bluetooth Host Task that the event has been handled and the Event Handler Task is ready to handle another event. This task has a lower priority than the Bluetooth Host Task and Link Layer Task.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This task handles the <span class="s8">gatt_server_user_write_request </span>event for the user-type OTA control characteristic and boot the device to OTA DFU mode. This task then dispatches events to <span class="s8">sl_bt_on_event()</span>, which needs to be integrated in the application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Idle Task</a></p></li></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When no tasks are ready to run, the OS calls the Idle Task. The Idle Task puts the MCU into lowest available sleep mode, EM2, by default.</p><ol id="l17"><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark16">Application Integration</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section describes the Bluetooth event handler and application tasks, and how they are used to implement a sample Bluetooth de- vice.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l18"><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark17">Bluetooth Event Handler</a><a name="bookmark28">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth Event Handler implemented in <span class="s8">sl_bt_on_event()</span><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">—part of the event handler task—takes a pointer to an event and han- dles it accordingly. A full list of events can be found in the Silicon Labs Bluetooth API Documentation (see section </a><a href="#bookmark33" class="a">4. Additional Resour- </a><span style=" color: #049;">ces</span>). Some events triggered by the stack are mainly informative and do not require the application to do anything. Because this is a simple application, it handles only a small set of events as follows:</p><ul id="l19"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">system_boot: This event indicates that the Bluetooth stack is initialized and ready to receive commands. This is where you set the discoverability and connectability modes.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">connection_closed: This event is triggered when a connection is closed. Advertising is restarted in this event to allow future connec- tions.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Customizing the Application</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This section describes some common tasks such as customizing GATT attributes, adding event handlers, and adding support for other peripherals.</p><ol id="l20"><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark19">GATT Services and Characteristics</a><a name="bookmark29">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This section describes how to add a service and characteristic to control an LED on the Wireless Starter Kit. One of the tools provided with Simplicity Studio is the Bluetooth GATT Configurator. This tool provides a graphical interface for creating and editing the GATT database.</p><ol id="l21"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">Open the Bluetooth GATT Configurator on the CONFIGURATION TOOLS tab in an open project or by double-clicking the file</p><p class="s8" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">config/btconf/gatt_configuration.btconf <span class="p">in the Simplicity Studio Project Explorer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="627" height="262" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: justify;">Create a new service. Select <b>Custom BLE GATT </b>in the left pane. Click the Add New Item control in the top left corner and select</p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">New Service<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 217pt;text-indent: 0pt;text-align: left;"><span><img width="248" height="231" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_012.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select the created Custom Service and name the service <b>Lighting Control</b>, as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="627" height="262" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_013.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Add a characteristic.</p><ul id="l22"><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">Select the <b>Lighting Control </b>service. Click the Add New Item control in the top left corner and select <b>New Characteristic</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">Select the created Custom Characteristic and name the characteristic <b>LED0 </b>at the right.</p></li><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">Check the <b>id </b>checkbox and enter <b>LED0 </b>for the ID.</p></li><li><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -9pt;text-align: left;">Set <b>Value Settings </b>to User.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 3pt;line-height: 182%;text-align: left;">Set the Properties <b>Read </b>and <b>Write </b>toggle switches. The characteristic should now look like the following figure.</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="698" height="372" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Save </b>and Simplicity Studio will automatically update the generated source code.</p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: justify;"><a name="bookmark20">Event Handlers</a><a name="bookmark30">&zwnj;</a></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark29" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This section discusses how to add event handlers for reading from and writing to the GATT characteristic added in section </a><a href="#bookmark29" class="a">3.2.1 GATT </a>Services and Characteristics<span style=" color: #000;">. The characteristic has write and read permissions. It is a user type so the application needs to handle the following events:</span></p><ul id="l23"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">gatt_server_user_write_request</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">gatt_server_user_read_request</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Simple LED Driver component is required to access the LEDs on the Wireless Starter Kit. Simplicity Studio provides the Software Components Configuration tool to manage driver and API components.</p><ol id="l24"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Open the Project Configurator by double-clicking the <span class="s8">soc_empty.slcp </span>file in the Simplicity Studio Project Explorer. Click the <b>SOFT- WARE COMPONENTS </b>tab on the top.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Enter <b>led </b>in the search field in the top right corner. Select <b>Simple LED </b>in the left pane and click <b>Install</b>, as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><span><img width="711" height="378" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_015.jpg"/></span></p></li><li><p style="padding-top: 6pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">A pop-up Create A Component Instance window appears. Leave the default instance name <b>led0 </b>as is and click <b>Done</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Add New Instances</b>. A pop-up Create A Component Instance window appears.</p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Leave the default instance name as <b>led1 </b>and click <b>Done</b>. It should now look like the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="650" height="375" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">After you have created the <b>led0 </b>and <b>led1 </b>instances of the Simple LED Driver component, the LED driver is automatically installed and turned on. The application can access directly the LED0 and LED1 by calling LED APIs.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app.c </span>to include the header file that has declarations of functions to set and clear the LEDs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> #include &quot;sl_simple_led_instances.h&quot;                                                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark28" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">As described in section </a><span style=" color: #049;">3.1 Bluetooth Event Handler</span>, Bluetooth events for the application should be handled in <span class="s8">sl_bt_on_event()</span>. Add the following code to implement the user write request handler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_gatt_server_user_write_request_id:</p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (evt-&gt;data.evt_gatt_server_user_write_request.characteristic == gattdb_LED0) { if (evt-&gt;data.evt_gatt_server_user_write_request.value.data[0]) {</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">sl_led_turn_on(&amp;sl_led_led0);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">else {</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">sl_led_turn_off(&amp;sl_led_led0);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_bt_gatt_server_send_user_write_response(</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">evt-&gt;data.evt_gatt_server_user_write_request.connection,</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">evt-&gt;data.evt_gatt_server_user_write_request.characteristic, 0);</p><p class="s8" style="text-indent: 0pt;text-align: center;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">break;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This event handler verifies that the characteristic to be written is the LED0 characteristic, and then turns the LED0 either on or off de- pending on the data written. Finally, it sends a response to the remote GATT client to indicate that the write has been performed.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Add the following code to implement the user read request handler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_gatt_server_user_read_request_id:</p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">if(evt-&gt;data.evt_gatt_server_user_read_request.characteristic == gattdb_LED0) { led0_state = sl_led_get_state(&amp;sl_led_led0); sl_bt_gatt_server_send_user_read_response(</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">evt-&gt;data.evt_gatt_server_user_read_request.connection,</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">evt-&gt;data.evt_gatt_server_user_read_request.characteristic, 0,</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">1, &amp;led0_state, &amp;sent_len);</p><p class="s8" style="text-indent: 0pt;text-align: center;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">break;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">This event handler sends the state of the LED0 to the client. The event handling requires the two variables <span class="s8">led0_state </span>and <span class="s8">sent_len</span></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">declared in <span class="s8">sl_bt_on_event() </span>as in the following code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">uint8_t led0_state = 0; uint16_t sent_len = 0;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As your application requires, you can add similar handlers for other events in this way, as your application requires them. The event handlers implemented in <span class="s8">sl_bt_on_event() </span><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">should complete their work quickly. If your application needs to perform heavy or asyn- chronous work, you may need to creating create additional application tasks may be needed. This is discussed in section </a><a href="#bookmark31" class="a">3.3 Adding </a><span style=" color: #049;">Application Tasks</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark21">Adding Support for Other Peripherals</a></p><p class="s12" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark33" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The easiest way to add support for other peripherals is through the use of Silicon Labs’ emlib/emdrv peripheral libraries. These libraries contain APIs for initializing and controlling the EFR32 family’s peripherals. A link to the documentation for these libraries is found in section </a>4. Additional Resources<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">These libraries are packaged as software components and are included in the Silicon Labs Gecko Platform SDK. By using the Software Components Configuration tool, you can easily add the peripheral drivers and libraries to your projects. The tool also resolves depend- encies and automatically installs the components that the peripheral component requires.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark22">Adding Application Tasks</a><a name="bookmark31">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">You may need to add application tasks in your Bluetooth application to simplify the application implementation. It is especially useful when your application needs to execute a procedure that requires significant computation, is not promptly responsive, or is independent of Bluetooth events. This section demonstrates LED blinking on the Wireless Starter Kit where you will learn how to create an Applica- tion Task in your application.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To create application tasks, Micrium RTOS or FreeRTOS support needs to be added to the <b>SOC-Empty </b><a href="#bookmark4" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">example project. Follow the steps in section </a><span style=" color: #049;">1.2 Micrium OS Configuration </span>to install the <b>Micrium OS Kernel </b><a href="#bookmark5" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">component or in section </a><span style=" color: #049;">1.3 FreeRTOS Configuration </span>to install the <b>FreeRTOS Heap 3 </b>component.</p><p class="s6" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Even though the Bluetooth RTOS application example uses the CMSIS-RTOS2 API functions for the Bluetooth features, it is highly recommended that the user application code should not use CMSIS-RTOS2 API but instead use the native Micrium OS RTOS or FreeRTOS API to get the most out of the system. The CMSIS-RTOS2 API implementation does not support all the RTOS features, and is more suited to support easier Bluetooth stack porting to different RTOSes.</span></p><ol id="l25"><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark23">Adding an Application Task with the Micrium OS RTOS</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Include the header file in <span class="s8">app.c</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s13" style=" background-color: #D8D8D8;"> #include &quot;os.h&quot;                                                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">To create a Micrium RTOS task, you need to declare a Task Control Block (TCB), allocate a memory space as the stack of the task, write the task&#39;s code, and set the task name, priority, and other parameters required by the <span class="s8">OSTaskCreate() </span>API. The task&#39;s priority must be unique in the application and needs to be lower than the priorities of the Link Layer, Bluetooth Host Task, and Event Handler Task. The lower the number, the higher the priority. Therefore, Silicon Labs recommends that you specify priority numbers greater than or equal to <b>10 </b>to your application tasks. Bluetooth stack task priorities can be found in the “sl_bt_rtos_config.h” and can be configured in the <b>Bluetooth Core</b>-component under Bluetooth – RTOS.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Add the following code at the global level in <span class="s8">app.c</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="125" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_017.png"/></span></p><p class="s8" style="text-indent: 0pt;text-align: left;">#ifndef APPLICATION_STACK_SIZE</p><p class="s8" style="text-indent: 0pt;line-height: 107%;text-align: left;">#define APPLICATION_STACK_SIZE (1000 / sizeof(CPU_STK)) #endif</p><p class="s8" style="text-indent: 0pt;line-height: 107%;text-align: left;">static void ApplicationTask (void *p_arg); static OS_TCB ApplicationTaskTCB;</p><p class="s8" style="text-indent: 0pt;text-align: left;">static CPU_STK ApplicationTaskStk[APPLICATION_STACK_SIZE];</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">10u</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="text-indent: 0pt;text-align: left;">#define SL_BT_RTOS_APPLICATION_PRIORITY</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app_init() </span>to create the task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RTOS_ERR os_err;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">//Application task OSTaskCreate(&amp;ApplicationTaskTCB,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;Application Task&quot;, ApplicationTask, 0u,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_APPLICATION_PRIORITY,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;line-height: 107%;text-align: left;">&amp;ApplicationTaskStk[0u], APPLICATION_STACK_SIZE / 10u, APPLICATION_STACK_SIZE,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">0u,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">0u,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">0u,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">&amp;os_err);</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Then, write the task&#39;s code in <span class="s8">ApplicationTask()</span>. A task usually runs infinitely and needs to yield execution to other tasks when it has completed. An execution yield means freeing up CPU time for other tasks. This is usually achieved by calling a time or event API. The following code is the task implementation that turns the LED1 on or off every 1 second.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void ApplicationTask (void *p_arg)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">RTOS_ERR os_err; (void)p_arg;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">while (DEF_TRUE) {</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your application code here! OSTimeDlyHMSM(0, 0, 1, 0,</p><p class="s8" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">OS_OPT_TIME_DLY | OS_OPT_TIME_HMSM_NON_STRICT,</p><p class="s8" style="padding-left: 22pt;text-indent: 68pt;line-height: 107%;text-align: left;">&amp;os_err); sl_led_toggle(&amp;sl_led_led1);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark24">Implementing a Time- and Event-Driven Task with the Micrium OS RTOS</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A task can be time-driven, event-driven, or both time- and event-driven. The model determines when the procedure is executed:</p><ol id="l26"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">A timer expires.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">An event occurs.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Either 1 or 2.</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Link Layer Task, Bluetooth Host Task, and Event Handler Task are event-driven and the LED toggling task demonstrated in sec- tion </a>3.3 Adding Application Tasks <span style=" color: #000;">is time-driven.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The LED toggling task demonstrated in section </a>3.3 Adding Application Tasks <span style=" color: #000;">is a good example to be changed to a time- and event- driven task. This task calls a time API to suspend itself for a period of specific time. A time- and event- driven task requires an event API that supports timeout so the task suspends its execution until either an event occurs or a timeout expires. This section demon- strates how an LED blinks at different frequencies based on whether or not a button on the Wireless Starter Kit is pushed.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark30" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Simple Button component is required to access the buttons on the Wireless Starter Kit. Follow the steps in section </a><a href="#bookmark30" class="a">3.2.2 Event </a><span style=" color: #049;">Handlers </span>to install the component and create the <b>btn0 </b>and <b>btn1 </b>instances in the Software Components Configuration tool as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="626" height="372" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app.c </span>to include the header file that has the declaration of the button state changed callback function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> #include &quot;sl_simple_button_instances.h&quot;                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The demonstration uses Micrium Event Flag Management APIs for inter-task communication. The principle of the Event Flag Manage- ment is a task waits for a flag or some flags in an event flag group to be set and another task sets a flag in the same event flag group when a corresponding event occurs. A flag is a bit of a 32-bit variable. Therefore, flags are a bit pattern, which is a combination of bits of a 32-bit variable.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The easiest way for tasks using an event flag group is to declare it as a global variable. Add the following code at the global level in</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">app.c<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OS_FLAG_GRP application_event_flags;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">#define APPLICATION_EVENT_FLAG_BTN_ON ((OS_FLAGS)1) #define APPLICATION_EVENT_FLAG_BTN_OFF ((OS_FLAGS)2)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app_init() </span>to create the event flag group before creating the Application Task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OSFlagCreate(&amp;application_event_flags,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">&quot;Application Flags&quot;,</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">(OS_FLAGS)0,</p><p class="s8" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">&amp;os_err);</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Next, modify the task&#39;s code in <span class="s8">ApplicationTask() </span>as follows. The task calls <span class="s8">OSFlagPend() </span>to suspend its execution and waits for any of the <span class="s8">APPLICATION_EVENT_FLAG_BTN_ON </span>and <span class="s8">APPLICATION_EVENT_FLAG_BTN_OFF </span>flags to be set. The task resumes to execute if any of the flags is set or when the timeout interval_ms expires. Therefore, the task toggles the LED1 at periodic intervals when no flag is set and changes the interval when a flag is set.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If you want to implement an event-driven task in this example, call <span class="s8">OSFlagPend() </span>with 0 as the third parameter and the task will wait forever until any of the flags is set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void ApplicationTask (void *p_arg)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: justify;">RTOS_ERR os_err; (void)p_arg;</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: justify;">uint32_t interval_ms; OS_RATE_HZ tick_rate; OS_FLAGS flags;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">tick_rate = OSTimeTickRateHzGet(&amp;os_err); interval_ms = 1 * tick_rate;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: justify;">while (DEF_TRUE) {</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">// Put your application code here!</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">flags = OSFlagPend(&amp;application_event_flags,</p><p class="s8" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">(OS_FLAGS)APPLICATION_EVENT_FLAG_BTN_ON + APPLICATION_EVENT_FLAG_BTN_OFF,</p><p class="s8" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">interval_ms,</p><p class="s8" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">OS_OPT_PEND_BLOCKING + OS_OPT_PEND_FLAG_SET_ANY + OS_OPT_PEND_FLAG_CONSUME, NULL,</p><p class="s8" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">&amp;os_err);</p><p class="s8" style="padding-left: 31pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (flags &amp; APPLICATION_EVENT_FLAG_BTN_ON) { interval_ms = tick_rate / 5;  //200ms flags &amp;= ~APPLICATION_EVENT_FLAG_BTN_ON;</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">if (flags &amp; APPLICATION_EVENT_FLAG_BTN_OFF) {</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">interval_ms = 1 * tick_rate; //1s</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">flags &amp;= ~APPLICATION_EVENT_FLAG_BTN_OFF;</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_led_toggle(&amp;sl_led_led1);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Finally, write the code in the callback function <span class="s8">sl_button_on_change() </span>to set the flags. The button driver calls this function when the state of the Button0 or Button1 has changed. The function sets the <span class="s8">APPLICATION_EVENT_FLAG_BTN_ON </span>flag when a button is pushed and sets the <span class="s8">APPLICATION_EVENT_FLAG_BTN_OFF </span>flag when a button is released. The code should like the following.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">void sl_button_on_change(const sl_button_t *handle)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">RTOS_ERR os_err;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (sl_button_get_state(handle) == SL_SIMPLE_BUTTON_PRESSED) { OSFlagPost(&amp;application_event_flags,(OS_FLAGS)APPLICATION_EVENT_FLAG_BTN_ON,OS_OPT_POST_FLAG_SET,&amp;os_err);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">else if (sl_button_get_state(handle) == SL_SIMPLE_BUTTON_RELEASED) { OSFlagPost(&amp;application_event_flags,(OS_FLAGS)APPLICATION_EVENT_FLAG_BTN_OFF,OS_OPT_POST_FLAG_SET,&amp;os_err);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The LED toggling task now is event-driven when a button is pushed or released. It is also time-driven when no button is pushed or released. This will demonstrate:</p><ol id="l27"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The LED1 blinks every 1 second.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">When a button is pushed and remains pushed, the LED1 blinks every 0.2 seconds.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">When the button is released, the LED1 resumes blinking every 1 second.</p></li></ol></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark25">Adding an Application Task with the FreeRTOS</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Include the header file in app.c.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include&quot;FreeRTOS.h&quot; #include &quot;task.h&quot;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To create a FreeRTOS task, you must declare a task data structure (TCB), allocate a memory space as the stack of the task, write the task&#39;s code, and set the task name, priority, and other parameters required by the xTaskCreateStatic() API. The task&#39;s priority must be unique in the application and must be lower than the priorities of the Link Layer, Bluetooth Host Task, and Event Handler Task. The lower the number, the higher the priority. Therefore, Silicon Labs recommends that you specify priority numbers greater than or equal to <b>10 </b>for your application tasks. Bluetooth stack task priorities can be found in the “sl_bt_rtos_config.h” and can be configured in the <b>Blue- tooth Core</b>-component under Bluetooth – RTOS.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Add the following code at the global level in <span class="s8">app.c</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="85" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_019.png"/></span></p><p class="s8" style="text-indent: 0pt;text-align: left;">static void vTaskApplication(void * pvParameters);</p><p class="s8" style="text-indent: 0pt;text-align: left;">_ALIGNED(8) static StackType_t thread_application_stk[250 &amp; 0xFFFFFFF8u];</p><p class="s8" style="text-indent: 0pt;text-align: left;">_ALIGNED(4) static StaticTask_t thread_application_cb;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">10u</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="text-indent: 0pt;text-align: left;">#define SL_BT_RTOS_APPLICATION_PRIORITY</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app_init() </span>to create the task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 12pt;text-indent: -9pt;line-height: 107%;text-align: left;">//Application task xTaskCreateStatic((TaskFunction_t)vTaskApplication,</p><p class="s8" style="padding-left: 100pt;text-indent: 0pt;text-align: left;">&quot;Application Task&quot;,</p><p class="s8" style="padding-left: 100pt;text-indent: 0pt;line-height: 107%;text-align: left;">sizeof(thread_application_stk) / sizeof(StackType_t), NULL,</p><p class="s8" style="padding-left: 100pt;text-indent: 0pt;text-align: left;">(UBaseType_t)SL_BT_RTOS_APPLICATION_PRIORITY,</p><p class="s8" style="padding-left: 100pt;text-indent: 0pt;line-height: 107%;text-align: left;">thread_application_stk, &amp;thread_application_cb);</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Then, write the task&#39;s code in <span class="s8">vTaskApplication()</span>. A task usually runs infinitely and needs to yield execution to other tasks when it has completed. An execution yield means freeing up CPU time for other tasks. This is usually achieved by calling a time or event API. The following code is the task implementation that turns the LED1 on or off every 1 second.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void vTaskApplication(void * pvParameters)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">(void)pvParameters;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your application code here! vTaskDelay(1000); sl_led_toggle(&amp;sl_led_led1);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark26">Adding Initialization with the FreeRTOS</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Initializing peripherals may require enabling interrupts. FreeRTOS disables interrupts until the scheduler is started, therefore these op- erations should be initiated in a separate task. The following code is the task implementation that initializes the relative humidity and temperature (RHT) sensor and logs the current temperature every 1 second.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">// Sensor task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void vTaskSensor(void * pvParameters)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">(void)pvParameters;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_status_t sc;</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">int32_t temperature = 0; uint32_t humidity = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your initialization code here! sl_sensor_rht_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s8" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your application code here! vTaskDelay(1000);</p><p class="s8" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">sc = sl_sensor_rht_get(&amp;humidity,</p><p class="s8" style="padding-left: 41pt;text-indent: 111pt;line-height: 107%;text-align: left;">&amp;temperature); sl_app_assert(sc == SL_STATUS_OK,</p><p class="s8" style="padding-left: 41pt;text-indent: 72pt;line-height: 107%;text-align: left;">&quot;Error reading temperature&quot;); sl_app_log(&quot;Temperature: %5.2f C\n&quot;,</p><p class="s8" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">(float)temperature / 1000);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Beginning with SDK v3.1.2, logging and assertion are enhanced. Therefore, the code above can be rewritten as:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">// Sensor task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void vTaskSensor(void * pvParameters)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">(void)pvParameters;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">sl_status_t sc;</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">int32_t temperature = 0; uint32_t humidity = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your initialization code here! sl_sensor_rht_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Put your application code here! vTaskDelay(1000);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sc = sl_sensor_rht_get(&amp;humidity,</p><p class="s8" style="padding-left: 22pt;text-indent: 111pt;line-height: 107%;text-align: left;">&amp;temperature); app_assert_status(sc); app_log(&quot;Temperature: %5.2f C\n&quot;,</p><p class="s8" style="padding-left: 61pt;text-indent: 0pt;text-align: left;">(float)temperature / 1000);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s6" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark27">Implementing a Time- and Event-Driven Task with the FreeRTOS</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A task can be time-driven, event-driven, or both time- and event-driven. The model determines when the procedure is executed:</p><ol id="l28"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">A timer expires.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">An event occurs.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Either 1 or 2.</p></li></ol></li></ol></li></ol></li></ol><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Link Layer Task, Bluetooth Host Task, and Event Handler Task are event-driven and the LED toggling task demonstrated in sec- tion </a>3.3 Adding Application Tasks <span style=" color: #000;">is time-driven.</span></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The LED toggling task demonstrated in section </a>3.3 Adding Application Tasks <span style=" color: #000;">is a good example to be changed to a time- and event- driven task. This task calls a time API to suspend itself for a period of specific time. A time- and event- driven task requires an event API that supports timeout so the task suspends its execution until either an event occurs or a timeout expires. This section demon- strates how an LED blinks at different frequencies based on whether or not a button on the Wireless Starter Kit is pushed.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark30" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Simple Button component is required to access the buttons on the Wireless Starter Kit. Follow the steps in section </a><a href="#bookmark30" class="a">3.2.2 Event </a><span style=" color: #049;">Handlers </span>to install the component and create the <b>btn0 </b>and <b>btn1 </b>instances in the Software Components Configuration tool as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="626" height="372" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_020.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app.c </span>to include the header file that has the declaration of the button state changed callback function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &quot;sl_simple_button_instances.h&quot; #include “event_groups.h“</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The demonstration uses FreeRTOS Event Groups (or “flags”) APIs for inter-task communication. The principle of the Event Group is a task waits for a bit (or a flag) or some bits (flags) in an Event Group to be set and another task sets a bit in the same Event Group when a corresponding event occurs. An Event Group has 24-bits implemented in the default configuration. Therefore, it is a bit pattern which is a combination of bits of a 24-bit variable.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The easiest way for tasks using an event flag group is to declare it as a global variable. Add the following code at the global level in</p><p class="s8" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">app.c<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Declare a variable to hold the handle of the created Event Group. EventGroupHandle_t xEventGroupApplicationHandle;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Declare a variable to hold the data associated with the created Event Group. StaticEventGroup_t xEventGroupApplicationData;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">#define APPL_EVENT_GROUP_BIT_BTN_ON ((EventBits_t)1) #define APPL_EVENT_GROUP_BIT_BTN_OFF ((EventBits_t)2)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Add the following code in <span class="s8">app_init() </span>to create the Event Group before creating the Application Task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s13" style=" background-color: #D8D8D8;"> xEventGroupApplicationHandle = xEventGroupCreateStatic( &amp;xEventGroupApplicationData );                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Next, modify the task&#39;s code in <span class="s8">vTaskApplication() </span>as follows. The task calls <span class="s8">xEventGroupWaitBits() </span>to suspend its execution and waits for any of the APPL_EVENT_GROUP_BIT_BTN_ON and APPL_EVENT_GROUP_BIT_BTN_OFF bits to be set. The task re- sumes to execute if any of the bits is set or when the timeout xTicksToWait expires. Therefore, the task toggles the LED1 at periodic intervals when no bit is set and changes the interval when a bit isset.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you want to implement an event-driven operation in this example, comment out the <span class="s8">sl_led_toggle() </span>from the TimeOut part. The task then toggles LED1 only after any of the bits are set. It will naturally still time out, but in practice it is event-driven as it immediately starts waiting for events again. Also the timeout could be set as long as possible to get fewer timeouts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">//Application task</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static void vTaskApplication(void * pvParameters)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">(void)pvParameters; EventBits_t uxBits;</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">TickType_t xTicksToWait = 1000 / portTICK_PERIOD_MS; // Wait maximum of 1000 ms</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">// Put your application code here!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">uxBits = xEventGroupWaitBits(</p><p class="s8" style="padding-left: 75pt;text-indent: 0pt;line-height: 107%;text-align: left;">xEventGroupApplicationHandle, // The Event Group being tested. APPL_EVENT_GROUP_BIT_BTN_ON | APPL_EVENT_GROUP_BIT_BTN_OFF, // The bits to wait for pdTRUE, // bits should be cleared before returning.</p><p class="s8" style="padding-left: 75pt;text-indent: 0pt;text-align: left;">pdFALSE, // Don&#39;t wait for both bits, either bit will do.</p><p class="s8" style="padding-left: 75pt;text-indent: 0pt;text-align: left;">xTicksToWait );// Wait a maximum of 1000 ms (or 200 ms) for either bit to be set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">if (uxBits &amp; APPL_EVENT_GROUP_BIT_BTN_ON) {</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">xTicksToWait = 200 / portTICK_PERIOD_MS; // Set timeout into 200 ms sl_led_toggle(&amp;sl_led_led1);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">else if (uxBits &amp; APPL_EVENT_GROUP_BIT_BTN_OFF) {</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">xTicksToWait = 1000 / portTICK_PERIOD_MS; // Set timeout into 1000 ms sl_led_toggle(&amp;sl_led_led1);</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">else { // TimeOut</p><p class="s8" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">sl_led_toggle(&amp;sl_led_led1); // Comment out for an event-driven operation</p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Finally, write the code in the callback function <span class="s8">sl_button_on_change() </span>to set the bits. The button driver calls this function when the state of the Button0 or Button1 has changed. The function sets the APPL_EVENT_GROUP_BIT_BTN_ON bit when a button is pushed and sets the APPL_EVENT_GROUP_BIT_BTN_OFF bit when a button is released. The code should like the following.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">void sl_button_on_change(const sl_button_t *handle)</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">if (sl_button_get_state(handle) == SL_SIMPLE_BUTTON_PRESSED) { xEventGroupSetBits(xEventGroupApplicationHandle, APPL_EVENT_GROUP_BIT_BTN_ON);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">else if (sl_button_get_state(handle) == SL_SIMPLE_BUTTON_RELEASED) { xEventGroupSetBits(xEventGroupApplicationHandle, APPL_EVENT_GROUP_BIT_BTN_OFF);</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The LED toggling task now is event-driven when a button is pushed or released. It is also time-driven when no button is pushed or released. This will demonstrate:</p><ol id="l29"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The LED1 blinks every 1 second.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">When a button is pushed and remains pushed, the LED1 blinks every 0.2 seconds.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">When the button is released, the LED1 resumes blinking every 1 second.</p><p class="s9" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Additional Resources</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_021.png"/></span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark32">Additional Resources</a><a name="bookmark33">&zwnj;</a></p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Consult the following resources for additional information.</p><ul id="l30"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="https://docs.silabs.com/bluetooth/latest/" class="a" target="_blank">Silicon Labs Bluetooth API </a><a href="https://docs.silabs.com/bluetooth/latest/" target="_blank">Documentation</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="https://docs.silabs.com/bluetooth/latest/general/c-developer39s-guide" class="a" target="_blank">Silicon Labs Bluetooth C Developer&#39;s </a><a href="https://docs.silabs.com/bluetooth/latest/general/c-developer39s-guide" target="_blank">Guide</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="https://docs.silabs.com/" class="a" target="_blank">Silicon Labs Platform </a><a href="https://docs.silabs.com/" target="_blank">Documentation</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="https://docs.silabs.com/micrium/latest">Micriµm OS Documentation</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="https://freertos.org/RTOS.html">The FreeRTOS Kernel</a></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s14" style="padding-top: 14pt;padding-left: 36pt;text-indent: 0pt;line-height: 122%;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="432" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;"><a href="http://www.silabs.com/IoT" class="s16">www.silabs.com/IoT</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_024.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">SW/HW</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/simplicity" class="s16">www.silabs.com/simplicity</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_026.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s16">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="padding-top: 5pt;padding-left: 311pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 311pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s16">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s18" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s19">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s19">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s19">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s22" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s21" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s23" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s18">Silicon Laboratories Inc.</span>®<span class="s18">, Silicon Laboratories</span>®<span class="s18">, Silicon Labs</span>®<span class="s18">, SiLabs</span>® <span class="s18">and the Silicon Labs logo</span>®<span class="s18">, Bluegiga</span>®<span class="s18">, Bluegiga Logo</span>®<span class="s18">, Clockbuilder</span>®<span class="s18">, CMEMS</span>®<span class="s18">, DSPLL</span>®<span class="s18">, EFM</span>®<span class="s18">, EFM32</span>®<span class="s18">, EFR, Ember</span>®<span class="s19">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s18">, EZLink</span>®<span class="s18">, EZRadio</span>®<span class="s18">, EZRadioPRO</span>®<span class="s18">, Gecko</span>®<span class="s18">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s18">, Precision32</span>®<span class="s18">, ProSLIC</span>®<span class="s18">, Simplicity Studio</span>®<span class="s18">, SiPHY</span>®<span class="s18">, Telegesis, the Telegesis Logo</span>®<span class="s18">, USBXpress</span>® <span class="s18">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s18">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1260-integrating-v3x-bluetooth-applications-with-rtos/Image_027.png"/></span></p><p class="s21" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s21" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h4 href="http://www.silabs.com/">www.silabs.com</h4></p></body></html>
