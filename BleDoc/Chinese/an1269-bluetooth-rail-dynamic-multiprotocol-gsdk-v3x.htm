<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1269: Dynamic Multiprotocol Development with Bluetooth® and Proprietary Protocols on RAIL in GSDK v3.x</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .h3 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 19pt; vertical-align: 8pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s6 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s12 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s14 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s15 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 a { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s16 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s17 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s18 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s20 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s21 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h4 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt;counter-reset: g1 1; }
 #l6> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l7 {padding-left: 0pt;counter-reset: d2 1; }
 #l7> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt;counter-reset: d3 1; }
 #l9> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11 {padding-left: 0pt;counter-reset: d3 1; }
 #l11> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l12 {padding-left: 0pt;counter-reset: j1 1; }
 #l12> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l13 {padding-left: 0pt;counter-reset: k1 4; }
 #l13> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l13> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l14 {padding-left: 0pt;counter-reset: k2 3; }
 #l14> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l14> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l15 {padding-left: 0pt;counter-reset: k3 1; }
 #l15> li>*:first-child:before {counter-increment: k3; content: counter(k1, decimal)"."counter(k2, decimal)"."counter(k3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: k3 0;  }
 #l16 {padding-left: 0pt; }
 #l16> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17 {padding-left: 0pt;counter-reset: k4 1; }
 #l17> li>*:first-child:before {counter-increment: k4; content: counter(k4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: k4 0;  }
 #l18 {padding-left: 0pt;counter-reset: m1 1; }
 #l18> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt; }
 #l20> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21 {padding-left: 0pt;counter-reset: d2 1; }
 #l21> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l22 {padding-left: 0pt;counter-reset: d3 1; }
 #l22> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l23 {padding-left: 0pt;counter-reset: d4 1; }
 #l23> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l24 {padding-left: 0pt;counter-reset: d4 1; }
 #l24> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l25 {padding-left: 0pt;counter-reset: d4 1; }
 #l25> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l26 {padding-left: 0pt;counter-reset: d4 1; }
 #l26> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l27 {padding-left: 0pt;counter-reset: d4 1; }
 #l27> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l28 {padding-left: 0pt;counter-reset: d3 1; }
 #l28> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l29 {padding-left: 0pt;counter-reset: d4 1; }
 #l29> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l29> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l30 {padding-left: 0pt;counter-reset: d4 1; }
 #l30> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l31 {padding-left: 0pt;counter-reset: d4 1; }
 #l31> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l32 {padding-left: 0pt;counter-reset: d4 1; }
 #l32> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l33 {padding-left: 0pt;counter-reset: d2 1; }
 #l33> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l35 {padding-left: 0pt;counter-reset: q1 6; }
 #l35> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l35> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 #l36 {padding-left: 0pt;counter-reset: q2 1; }
 #l36> li>*:first-child:before {counter-increment: q2; content: counter(q1, decimal)"."counter(q2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l36> li:first-child>*:first-child:before {counter-increment: q2 0;  }
 #l37 {padding-left: 0pt;counter-reset: q3 1; }
 #l37> li>*:first-child:before {counter-increment: q3; content: counter(q1, decimal)"."counter(q2, decimal)"."counter(q3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l37> li:first-child>*:first-child:before {counter-increment: q3 0;  }
 #l38 {padding-left: 0pt;counter-reset: q4 1; }
 #l38> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l38> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l39 {padding-left: 0pt;counter-reset: q4 1; }
 #l39> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l39> li:first-child>*:first-child:before {counter-increment: q4 0;  }
 #l40 {padding-left: 0pt;counter-reset: q4 1; }
 #l40> li>*:first-child:before {counter-increment: q4; content: counter(q4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40> li:first-child>*:first-child:before {counter-increment: q4 0;  }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">AN1269: Dynamic Multiprotocol Development with <i>Bluetooth</i><span class="h3">® </span>and Proprietary Protocols on RAIL in GSDK v3.x</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="211" height="1" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="208" height="1" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Generic guidelines for protocol coexistence</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Generating and configuring a new Bluetooth/Proprietary DMP project</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Sending and receiving proprietary packets</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Using RAIL priorities</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Building and understanding the Light/ Switch DMP example</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This application note provides details on how to develop a multi- protocol application running Bluetooth and a proprietary protocol at the same time, using SDKs from Gecko SDK Suite v3.x. First, the criteria for the coexistence of Bluetooth and a proprietary pro- tocol are discussed. Then the application note guides you through how to create a new DMP application, how to configure Bluetooth and your proprietary protocol, and how to transmit and receive proprietary packets while Bluetooth is running. Finally, a Light/Switch  DMP  example  is  introduced  in  more  details.  For background on Dynamic Multiprotocol Application development in general and about Bluetooth task priorities and scheduling, see <i>UG305: Dynamic Multiprotocol User’s Guide</i>.</p><p class="s6" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_005.png"/></span></p><ol id="l2"><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">UG305: Dynamic Multiprotocol User’s Guide <span class="p">provides information about the Dynamic Multiprotocol solution, where two protocols are running on the same device in parallel, and includes general background as well as information on Bluetooth task priorities and sched- uling. This application note introduces the Bluetooth / Proprietary multiprotocol solution. It assumes that the reader is familiar with the principles of Dynamic Multiprotocol and with all the terms related to it. The Dynamic Multiprotocol projects require an RTOS for schedul- ing. Currently, the Micrium RTOS and the FreeRTOS are supported. The FreeRTOS is included in the SDK.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s9" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">Requirements</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To be able to use all the features discussed in this document, you will need the followings installed on your computer:</p><ul id="l4"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth SDK version 3.0.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">(optional*) Micrium OS-5 kernel</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To be able to run the Light/Switch example, you will need the following installed on your computer:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth SDK version 3.0.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Flex SDK version 3.0.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">(optional*) Micrium OS-5 kernel</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">(optional*) IAR Embedded Workbench for ARM (IAR-EWARM) (required for the Flex (RAIL) - Switch application). See the release notes for the Bluetooth SDK for the required IAR-EWARM version.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">*Required only when the Micrium RTOS is used.</p><p class="s6" style="padding-bottom: 3pt;padding-left: 327pt;text-indent: 0pt;text-align: left;">Guidelines for Bluetooth and Proprietary Coexistence</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_006.png"/></span></p></li></ol></li><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark2">Guidelines for Bluetooth and Proprietary Coexistence</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">When you start implementing a Bluetooth / Proprietary DMP application, the first thing to consider is if your proprietary protocol is com- patible with Bluetooth. Here are some guidelines that you should always consider:</p><ul id="l5"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth is deterministic</b>. The huge advantage of the Bluetooth protocol in a DMP scenario is that it does not send and receive packets at random times, but at predefined time instances – always at the start of a connection interval. This means, among other things, that Bluetooth does not need a background receive, and <i><b>your proprietary protocol can receive in the background</b></i>, of course with some interruptions.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth needs accuracy</b>. The consequence of predefined time instances is that <i><b>Bluetooth packets cannot be late </b></i>– their timing needs 500 ppm accuracy. If you delay a Bluetooth packet, it will not be received on the other side. So in case of collision with a proprietary packet, either the <i><b>proprietary packet has to be delayed</b></i>, or one of the packets has to be dropped.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth connection is active</b>. Once a Bluetooth connection is established, the connection is kept alive by sending and receiving at least an empty packet every connection interval. Consequently, your proprietary protocol needs to be prepared to be <i><b>interrupted every connection interval</b></i>. You can, however, set the connection interval to a long period if you do not need low Bluetooth latency. You can also use the peripheral latency parameter to make Bluetooth communication less frequent on the peripheral side.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth uses short packets</b>. If there is no data to be sent, the Bluetooth connection is kept alive by empty packets. An empty packet takes 80 µs to be sent out on 1M PHY, and 40 µs on 2M PHY. Empty packets sending + inter frame space + empty packet receiving takes 80 + 150 + 80 = 310 µs or 40 + 150 + 40 = <i><b>230 µs</b></i>. This is the usual time needed by Bluetooth in every connection interval. The largest Bluetooth packet has a 257 byte payload which takes 2120 µs to be sent on 1M PHY and 1060 µs on 2M PHY. Along with receiving an empty response packet, this takes 2120 + 150 + 80 = <i><b>2350 µs </b></i>on 1M PHY and 1060 + 150 + 40 = <i><b>1250 µs </b></i>on 2M PHY.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth uses packet chains</b>. If the data to be sent does not fit into one packet, Bluetooth communication can be extended within a connection interval; that is, you can <i><b>expect that more than one packet is sent and received </b></i>in an interval, but this is rare.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bluetooth is robust</b>. If a Bluetooth packet cannot be sent, then it will be <i><b>retransmitted in the next connection interval</b></i>. If a Blue- tooth packet is received with a <i><b>CRC error, it is always signaled by the other side </b></i>by not sending a response packet. Again, the packet will be retransmitted in the next connection interval. The only limit is the supervision timeout. If there is no successful trans- mission within the supervision timeout, then the connection is dropped. In other words, Bluetooth communication <i><b>can be subdued by higher priority radio tasks for a time interval shorter that the supervision timeout</b></i>.</p></li></ul><p class="s9" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Summary: <span class="p">When implementing your DMP protocol, you have to take into account that Bluetooth will need the radio every connection interval for a short time (230 µs – 2350 µs). Bluetooth needs accurate timing, so Bluetooth packets cannot be delayed. The Bluetooth packets can interrupt both your packet sending and packet receiving. Therefore, the proprietary protocol should implement acknowl- edgement and retransmission mechanisms, or a deterministic timing that is interleaved with the Bluetooth communication. Bluetooth communication can be subdued by a higher priority radio task for a time interval shorter than the supervision timeout.</span></p><p class="s6" style="padding-bottom: 3pt;padding-left: 270pt;text-indent: 0pt;text-align: left;">Software Architecture of a Bluetooth / Proprietary DMP application</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_007.png"/></span></p></li><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark3">Software Architecture of a Bluetooth / Proprietary DMP application</a><a name="bookmark4">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">DMP applications require an RTOS. The RTOS helps run the Bluetooth and Proprietary protocols in parallel and independently. In this document, the term RTOS refers both to the Micrium RTOS and the FreeRTOS, included with Silicon Labs Bluetooth SDK version</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">3.1.0. The adaptation layer has been designed to work with Micrium RTOS and FreeRTOS.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Since the Bluetooth stack itself is just a collection of functions, Bluetooth needs separate tasks to run the stack. The <span class="s11">BluetoothTask() </span>and the <span class="s11">LinkLayerTask() </span>are responsible for this, and they can be used as they are. The functions of the Bluetooth stack can be ac- cessed through these tasks using BGAPI, as in the case of an RTOS-less or an NCP application. The Bluetooth application (handling Bluetooth events and calling Bluetooth commands) has to be implemented by the developer in <span class="s11">sl_bt_on_event() </span>, which is (indirect- ly) called from the <span class="s11">sl_bt_event_handler_task()</span>. For details, refer to <i>AN1260: Integrating v3.x Silicon Labs Bluetooth® Applications with Real-Time Operating Systems</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The proprietary protocol is implemented in the <span class="s11">proprietaryAppTask()</span>. Unlike Bluetooth, the proprietary protocol can access the radio directly through the RAIL API. RAIL events need a callback function – <span class="s11">sl_rail_app_on_event() </span>– to be defined. This function is called every time a new RAIL event is generated, and can notify the application about the event. Note: <span class="s11">sl_rail_app_on_event() </span>is called from interrupt context, so only time-critical functions should be implemented in it. Everything else should be done in the application.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Although the Bluetooth and Proprietary applications are independent, they can communicate using inter-process communication (IPC).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="616" height="326" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_008.jpg"/></span></p></li><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">Developing a Bluetooth / Proprietary DMP Project</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Three steps are required when developing a Bluetooth / Proprietary DMP project:</p><ol id="l6"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Create the project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Configure Bluetooth.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Configure the Proprietary Protocol.</p></li></ol><ol id="l7"><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Create a New Project</a><a name="bookmark14">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Silicon Labs Bluetooth SDK (v3.2 or later) include four software samples, which can be used as a starting point for every Bluetooth / Proprietary application.</p><ul id="l8"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth - SoC Empty RAIL DMP FreeRTOS</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth - SoC Empty RAIL DMP Micrium OS</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth - SoC Empty Standard DMP FreeRTOS</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth - SoC Empty Standard DMP Micrium OS</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Each sample:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Includes the multiprotocol RAIL library</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Includes the Bluetooth library</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Includes the selected RTOS</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Has a default Bluetooth GATT database configuration</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Has a default RAIL configuration</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Has a default RTOS configuration</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Implements Bluetooth initialization</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Implements RAIL initialization</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Implements RTOS initialization</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The sample types differ in that the &#39;RAIL&#39; samples contain a radio configurator, so they can be used for any proprietary protocol, where- as the &#39;standard&#39; samples uses the IEE802.15.4 standard protocol.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The only thing you have to do is to modify the configurations according to your needs and implement the Bluetooth application task and the Proprietary application task. As default the <span class="s11">proprietaryAppTask() </span>is defined and implemented in the files <i>proprietary_app.c </i>and <i>proprietary_app.h</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">For the Bluetooth part, the default implementation contains the Bluetooth event handler, the <span class="s11">sl_bt_on_event() </span>function, defined in the</p><p class="s8" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bluetooth_app.c <span class="p">file.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The GATT database can be configured with the visual GATT Configurator in Simplicity Studio 5, while the RAIL configuration can be generated with the Radio Configurator tool. You may also need to add some <b>emlib </b>and <b>emdrv </b>files to your project to support peripheral configuration. The general workflow to create a DMP project looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="232" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">To create a new project.</p><ol id="l9"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select a connected device in the Debug Adapters view, or select a part in the My Products view.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>File &gt; New &gt; Silicon Labs Project Wizard</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Review your SDK and toolchain. If you have more than one GSDK version installed, verify that Gecko SDK Suite v3.x is shown. If you wish to use IAR instead of GCC, be sure to change it here. Once you have created a project, it is difficult to change toolchains. Click <b>NEXT</b>.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">On the Example Project Selection dialog, filter on Bluetooth and select <b>Bluetooth - SoC Empty RAIL DMP FreeRTOS</b>. Click</p><p class="s9" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">NEXT<span class="p">.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Name your project. Click [<b>FINISH</b>].</p></li></ol></li><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Configure Bluetooth</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Configuring Bluetooth consists of two steps:</p><ul id="l10"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configuring the local GATT database</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configuring the Bluetooth stack</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To configure the local GATT database, use Simplicity Studio 5&#39;s GATT Configurator.</p><ol id="l11"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the .slcp file in the project (if it is not already open).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click the CONFIGURATION TOOLs tab.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Open </b>next to <b>Bluetooth GATT Configurator</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;"><span><img width="609" height="373" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Add your custom services and characteristics as described in <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide </i>(or use the default GATT database).</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Your changes are automatically saved and project files are generated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span><img width="516" height="322" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_011.jpg"/></span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To configure the Bluetooth stack:</p><ol id="l12"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Go to the SOFTWARE COMPONENTS tab.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Find Bluetooth &gt; Stack &gt; Bluetooth Core component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="715" height="266" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_012.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Change the configuration according to your needs. For details, see <i>UG434: Silicon Labs Bluetooth® C Application Developers Guide for SDK v3.x </i>(or use the default configuration).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 111pt;text-indent: 0pt;text-align: left;"><span><img width="526" height="322" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_013.jpg"/></span></p></li></ol></li><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Configure the Proprietary Protocol</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l13"><ol id="l14"><ol id="l15"><li><p class="s9" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark9">Using the Radio Configurator</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Configuring the proprietary protocol consists of two steps:</p><ul id="l16"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configuring the radio channels (base frequency, modulation, and so on)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configuring the RAIL</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To configure the radio channels, use Simplicity Studio 5&#39;s Radio Configurator tool:</p><ol id="l17"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the .slcp file in the project (if it is not already open).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click the CONFIGURATION TOOLS tab.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Open </b>next to <b>Radio Configurator</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;"><span><img width="609" height="373" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Select <b>Base Profile </b>from the radio profiles.</p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select a predefined radio PHY from the list, or select <b>Customized</b>, and apply your settings. For details, see <i>AN1253: EFR32 Radio Configurator Guide for Simplicity Studio 5</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;"><span><img width="528" height="326" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_015.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">To configure RAIL:</p><ol id="l18"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">On the Software Components tab, select Platform &gt; Radio &gt; RAIL Utility, Initialization &gt; inst0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: left;"><span><img width="539" height="322" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_016.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Configure</b>. Change configurations as needed.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;"><span><img width="548" height="328" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_017.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s9" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark10">Using Standard Protocol APIs</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In the “Bluetooth - SoC Empty Standard DMP” sample project, the radio is configured with APIs. The sample project contains a default configuration for the IEE802.15.4 standard protocol. This configuration is set in the function “<i>app_proprietary_init()</i><a href="https://docs.silabs.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">”. For more informa- tion about the possible configurations, refer to the API documentation on </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">docs.silabs.com</span>.</p></li><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Develop Bluetooth Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Bluetooth applications have to be implemented the same way as in a non-DMP scenario:</p><ul id="l19"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">BGAPI commands can be called from anywhere (except from interrupt context!)</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">BGAPI events have to be fetched from the internal event queue of the Bluetooth stack. This is typically done in an infinite loop.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">A single protocol Bluetooth application can run with or without RTOS. The DMP Bluetooth application can, however, only run over RTOS. As described in section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">3. Software Architecture of a Bluetooth / Proprietary DMP application</span>, you must implement Bluetooth event handling in the Bluetooth application task. The skeleton of this task is implemented in main.c. To handle new Bluetooth events, simply add new case statements with the appropriate event IDs. The general process can be seen in the following figure:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;"><span><img width="366" height="390" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_018.jpg"/></span></p></li><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">Develop Proprietary Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Proprietary application uses RAIL directly:</p><ul id="l20"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RAIL API commands can be called from anywhere.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">RAIL API events have to be handled in the events callback function.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Almost all RAIL APIs can be used in DMP, but a few are incompatible (like <span class="s11">RAIL_HoldRxPacket()</span>), and a few work slightly differently. For example, automatic state transitions are defined differently due to the concept of background Rx, which is specific on DMP. See <i>UG305: Dynamic Multiprotocol User’s Guide </i>for details.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">By default, the events callback function is set to <span class="s11">sl_rail_app_on_event()</span>, just like in a regular RAIL application. An empty <span class="s11">sl_rail_app_on_event() </span>function is implemented as a weak function in <i>sl_rail_util_callbacks.c</i>. It can be overloaded in the applica- tion. This function is called every time a new radio event intended for the proprietary protocol is received from RAIL. Each RAIL event sets a specific flag in the 64-bit bitfield. Be aware that multiple flags may be set, so you may have to handle multiple events within one callback. Note: The events callback function is almost always called from an interrupt context, so you have to handle it as an interrupt handler! Do only quick calculations, and set a flag to inform your main loop about the changes.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In the DMP context, you should also prepare for more error events: <span class="s11">RAIL_EVENT_SCHEDULER_STATUS </span>should be implemented, as that is the event which is triggered if a proprietary radio is interrupted by Bluetooth.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Upon completing a finite radio task (like transmission), <span class="s11">RAIL_YieldRadio() </span>or <span class="s11">RAIL_Idle() </span>should be called to let the radio scheduler know that other protocols might use the radio.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The main loop to process the radio events is implemented in the <span class="s11">proprietaryAppTask()</span>, which runs parallel to the <span class="s11">sl_bt_event_handler_task() </span>that ultimately calls the <span class="s11">sl_bt_on_event() </span>event handler. It is the developer’s job to decide how to communicate between the radio event handler (<span class="s11">sl_rail_app_on_event()</span>) and the <span class="s11">proprietaryAppTask()</span>, but in general use the services of the RTOS, like semaphores, flags, message queues, and so on.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The general process is shown in the following figure:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="645" height="297" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Communication between Bluetooth and Proprietary Protocol</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth and the proprietary protocol are running parallel in two independent tasks. However, often they need to be synchronized, for example if you want to send out a proprietary packet when a value changed in the local GATT database, or you want to change a value in the local GATT database when you received a proprietary packet.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To notify the proprietary task from the Bluetooth task, or the other way around, the easiest way is to set an RTOS flag. You can define a queue for events and use that to notify the other task. From the proprietary task, you can also set an external event to the Bluetooth stack, using the function <span class="s11">sl_bt_external_signal()</span>. This will generate an <span class="s11">sl_bt_evt_system_external_signal_id </span>event in the Bluetooth stack.</p></li></ol></li><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark15">Examples</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l21"><li><p class="s9" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark16">Sending Proprietary Packets</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This simple example sends out a proprietary packet every time a specific characteristic in the local GATT database is written.</p><ol id="l22"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Create a new <b>Soc Empty Rail Dmp </b><a href="#bookmark14" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">project as described in section </a><a href="#bookmark14" class="s12">4.1 Create a New </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Project</span>.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In the GATT configurator, add a new characteristic to the GATT database (as described in <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide</i>) with the following parameters:</p><ol id="l23"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Name: Proprietary characteristic</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">ID: prop_char</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Value type: hex</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Length: 16 byte</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Properties: Read, Write, Notify</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Define a CHARACTERISTIC_CHANGED flag. This flag will be used in the communication between <span class="s11">sl-bt-on-event() </span>and the proprietaryAppTask, as part of the proprietary_event_flags flag group.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> #define CHARACTERISTIC_CHANGED ((OS_FLAGS)0x01)                                                              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Create a Tx FIFO. Define the following in <i>proprietary_app.c</i>::</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define RAIL_TX_FIFO_SIZE (64)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static uint8_t txFifo[RAIL_TX_FIFO_SIZE];</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In the Bluetooth application task (more precisely in <span class="s11">sl_bt_on_event()</span>):</p><ol id="l24"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -9pt;text-align: left;">Add a new event handler to the switch – case statement to handle characteristic value changes.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -9pt;text-align: left;">Check if it is the prop_char that has changed.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Set a flag to notify the proprietary protocol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_gatt_server_attribute_value_id:</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">if (evt-&gt;data.evt_gatt_server_attribute_value.attribute == gattdb_prop_char)</p><p class="s11" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;text-align: left;">OSFlagPost(&amp;proprietary_event_flags,</p><p class="s11" style="padding-left: 158pt;text-indent: 0pt;line-height: 107%;text-align: left;">CHARACTERISTIC_CHANGED, OS_OPT_POST_FLAG_SET,</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">&amp;err);</p><p class="s11" style="text-indent: 0pt;text-align: center;">}</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">break;</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In the <span class="s11">proprietaryAppTask() </span>– before the infinite loop:</p><ol id="l25"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Set up the Tx FIFO for RAIL.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Define scheduler info for the packet to be sent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RAIL_SetTxFifo(railHandle, txFifo, 0, RAIL_TX_FIFO_SIZE);</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">RAIL_SchedulerInfo_t txSchedulerInfo = (RAIL_SchedulerInfo_t){ .priority = 100,</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">.slipTime = 100000,</p><p class="s11" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">.transactionTime = 800 };</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Within the infinite loop of the <span class="s11">proprietaryAppTask()</span>:</p><ol id="l26"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Wait for the CHARACTERISTIC_CHANGED flag.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Copy the content of the characteristic into the Tx FIFO.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Send out the packet.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">while (DEF_TRUE) {</p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;line-height: 107%;text-align: left;">RTOS_ERR err; OSFlagPend(&amp;proprietary_event_flags,</p><p class="s11" style="padding-left: 109pt;text-indent: 0pt;line-height: 107%;text-align: left;">CHARACTERISTIC_CHANGED, (OS_TICK)0,</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">OS_OPT_PEND_BLOCKING \</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">+ OS_OPT_PEND_FLAG_SET_ANY \</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;line-height: 107%;text-align: left;">+ OS_OPT_PEND_FLAG_CONSUME, NULL,</p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">&amp;err);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">sl_status_t result;;</p><p class="s11" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">result = sl_bt_gatt_server_read_attribute_value(gattdb_prop_char, 0, 16, data_len,</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">dataPacket);</p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;line-height: 107%;text-align: left;">RAIL_WriteTxFifo(railHandle, dataPacket, data_len, true); RAIL_StartTx(railHandle, 0, RAIL_TX_OPTIONS_DEFAULT, &amp;txSchedulerInfo);</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-top: 4pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">In <span class="s11">sl_rail_app_on_event()</span>:</p><ol id="l27"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -9pt;text-align: left;">Check for the packet_sent event, and do not forget to yield the radio.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">static void sl_rail_on_event(RAIL_Handle_t railHandle,</p><p class="s11" style="padding-left: 148pt;text-indent: 0pt;text-align: left;">RAIL_Events_t events)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 61pt;text-indent: -19pt;line-height: 107%;text-align: left;">if (events &amp; RAIL_EVENT_TX_PACKET_SENT) { RAIL_YieldRadio(railHandle);</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/></li></ol></li></ol></li><li><p class="s9" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark17">Receiving Proprietary Packets</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example implements a receiver for the transmitter implemented in the previous section. Once a proprietary packet is received, the example updates a characteristic in the local GATT database.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To implement a receiver, use the transmitter project described in the previous section and extend it with the following procedure.</p><ol id="l28"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Define a new flag for signaling packet reception to the proprietary application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><span class="s13" style=" background-color: #D8D8D8;"> #define PACKET_RECEIVED ((OS_FLAGS)0x02)                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 40pt;text-indent: -8pt;text-align: left;">Create an Rx FIFO. Define the following in <i>proprietary_app.c</i>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define RAIL_RX_FIFO_SIZE (64)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">static uint8_t rxFifo[RAIL_RX_FIFO_SIZE];</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In the <span class="s11">proprietaryAppTask() </span>– before the infinite loop:</p><ol id="l29"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Set Rx transition in order to automatically restore Rx state after packet reception.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Set the Rx priority lower than the Tx priority.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Start Rx (before the infinite loop!).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RAIL_StateTransitions_t stateTransition = (RAIL_StateTransitions_t){</p><p class="s11" style="padding-left: 260pt;text-indent: 0pt;text-align: left;">.success = RAIL_RF_STATE_RX,</p><p class="s11" style="padding-left: 260pt;text-indent: 0pt;text-align: left;">.error = RAIL_RF_STATE_RX };</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">RAIL_SetRxTransitions(railHandle,&amp;stateTransition);</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">RAIL_SchedulerInfo_t rxSchedulerInfo = (RAIL_SchedulerInfo_t){ .priority = 200 }; RAIL_StartRx(railHandle, 0, &amp;rxSchedulerInfo);</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In the radio event handler, such as <span class="s11">sl_rail_app_on_event()</span>:</p><ol id="l30"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Check if a packet was successfully received.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Copy the packet content to your local Rx FIFO.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Set a flag to notify the proprietary protocol about the new packet.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 22pt;text-indent: -19pt;line-height: 107%;text-align: left;">if (events &amp; RAIL_EVENT_RX_PACKET_RECEIVED) { RAIL_RxPacketInfo_t packetInfo;</p><p class="s11" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">RTOS_ERR err;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 66pt;text-indent: -43pt;line-height: 107%;text-align: left;">RAIL_GetRxPacketInfo(railHandle, RAIL_RX_PACKET_HANDLE_NEWEST,</p><p class="s11" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">&amp;packetInfo);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 36pt;text-indent: -14pt;line-height: 107%;text-align: left;">if (packetInfo.packetStatus == RAIL_RX_PACKET_READY_SUCCESS) { RAIL_CopyRxPacket(rxFifo,&amp;packetInfo); OSFlagPost(&amp;proprietary_event_flags,PACKET_RECEIVED,OS_OPT_POST_FLAG_SET,&amp;err);</p><p class="s11" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Within the infinite loop of the <span class="s11">proprietaryAppTask():</span></p><ol id="l31"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Check for two event flags: CHARACTERISTIC_CHANGED and PACKET_RECEIVED. You can wait for both of them and then check which one was set.</p></li><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">If the PACKET_RECEIVED flag is set then write the content of the received packet into the local GATT database and</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Notify the Bluetooth stack that the value has changed (using a Bluetooth external signal).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">while (DEF_TRUE) {</p><p class="s11" style="text-indent: 0pt;text-align: right;">RTOS_ERR err;</p><p class="s11" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">OS_FLAGS active_flags = OSFlagPend (&amp;proprietary_event_flags,</p><p class="s11" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">CHARACTERISTIC_CHANGED \</p><p class="s11" style="padding-left: 211pt;text-indent: 0pt;line-height: 107%;text-align: left;">+ PACKET_RECEIVED, (OS_TICK)0, OS_OPT_PEND_BLOCKING \</p><p class="s11" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">+ OS_OPT_PEND_FLAG_SET_ANY \</p><p class="s11" style="padding-left: 211pt;text-indent: 0pt;line-height: 107%;text-align: left;">+ OS_OPT_PEND_FLAG_CONSUME, NULL,</p><p class="s11" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">&amp;err);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">if (active_flags &amp; CHARACTERISTIC_CHANGED)</p><p class="s11" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">sl_status_t result;</p><p class="s11" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">result = sl_bt_gatt_server_read_attribute_value(gattdb_prop_char, 0, 16, data_len,</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">dataPacket);</p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;line-height: 107%;text-align: left;">RAIL_WriteTxFifo(railHandle, dataPacket 16, true); RAIL_StartTx(railHandle, 0, RAIL_TX_OPTIONS_DEFAULT, &amp;txSchedulerInfo);</p><p class="s11" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">if (active_flags &amp; PACKET_RECEIVED)</p><p class="s11" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 51pt;text-indent: 0pt;line-height: 107%;text-align: left;">sl_bt_gatt_server_write_attribute_value(gattdb_prop_char,0,16,rxFifo); sl_bt_external_signal(CHARACTERISTIC_CHANGED);</p><p class="s11" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">}</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">In <span class="s11">sl_bt_on_event()</span>:</p><ol id="l32"><li><p style="padding-top: 2pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Add a new event handler for the external signal.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Check if you got a CHARACTERISTIC_CHANGED signal.</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -8pt;text-align: left;">Send out a notification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case sl_bt_evt_system_external_signal_id:</p><p class="s11" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">if (bluetooth_evt-&gt;data.evt_system_external_signal.extsignals &amp;</p><p class="s11" style="padding-left: 289pt;text-indent: 0pt;text-align: left;">CHARACTERISTIC_CHANGED)</p><p class="s11" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="text-indent: 0pt;text-align: right;">sl_bt_cmd_gatt_server_send_characteristic_notification(0xff, gattdb_prop_char,</p><p class="s11" style="text-indent: 0pt;text-align: right;">16, rxFifo, &amp;sent_len);</p><p class="s11" style="text-indent: 0pt;text-align: center;">}</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">break;</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"/></li></ol></li></ol></li></ol></li><li><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark18">Light/Switch Example</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">This section provides details on working with the Light/Switch multiprotocol example code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l33"><li><p class="s9" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark19">Working with the Light/Switch Example</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <b>Flex (RAIL) - Switch </b>and <b>Bluetooth - SoC Ligh /RAIL DMP </b>applications are generated, built, and uploaded in the same way as other applications in their SDKs.</p><ul id="l34"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">To see details about installing Simplicity Studio and the Flex SDK and building an example application, see <i>QSG168: Proprietary Flex SDK v3.x Quick-Start Guide</i>.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">To see details about installing Simplicity Studio and the Bluetooth SDK and building an example application, see <i>QSG169: Blue- tooth® SDK v3.x Quick-Start Guide</i>.</p></li></ul><p class="s9" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">In a demonstration configuration with multiple RAIL/Bluetooth dynamical protocol light devices and a single switch device, unpre- dictable behavior may occur. We recommend testing with a single light device and a single switch device.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The following summary procedures are provided for your convenience.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><ol id="l36"><ol id="l37"><li><p class="s9" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark20">Building the RAIL:Switch Application</a></p><ol id="l38"><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select a connected device in the Debug Adapters view.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select File &gt; New &gt; Silicon Labs Project Wizard ...</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Review the SDK and toolchain, and change as necessary. Click <b>NEXT</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">On the Example Project Selection dialog, filter on Proprietary and select <b>Flex (RAIL) - Switch</b>. Click <b>NEXT</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Name your project. Click [<b>FINISH</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Either automatically compile and flash using the debug button, or manually compile and then load.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Application load success indicators are code-dependent. With the <b>Flex (RAIL) - Switch </b>example, the LCD displays a short menu be- fore changing over to the light bulb display.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 225pt;text-indent: 0pt;text-align: left;"><span><img width="178" height="172" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_020.jpg"/></span></p></li></ol></li><li><p class="s9" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark21">Building the Bluetooth Light Application</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth Light application requires the Gecko Bootloader to be loaded on the device. The Gecko Bootloader is loaded when you load the precompiled <b>SOC-Light-Rail-Dmp </b>demonstration. Alternatively you can build and load your own Gecko Bootloader combined image (called &lt;projectname&gt;-combined.s37), as described in <i>UG266: Silicon Labs Gecko Bootloader User’s Guide</i>.</p><ol id="l39"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select the connected device in the Debug Adapters view.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select File &gt; New &gt; Silicon Labs Project Wizard ...</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Review the SDK and toolchain, and change as necessary. Click <b>NEXT</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">On the Example Project Selection dialog, filter on Bluetooth and select <b>Soc Light Rail Dmp</b>. Click <b>NEXT</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Name your project. Click [<b>FINISH</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Either automatically compile and flash using the debug button, or manually compile and then load.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Application load success indicators are code-dependent. With the <b>Bluetooth - SoC Light RAIL DMP </b>example, the LCD displays a light bulb.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;"><span><img width="175" height="176" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_021.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s9" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark22">Changing the PHY Configuration</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The default PHY configuration for the RAIL/Bluetooth example is a sub-gigahertz configuration. You may want to modify this PHY con- figuration as you begin to develop applications for your own hardware.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To change the PHY configuration:</p><ol id="l40"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the <b>Flex (RAIL) - Switch </b>project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the .slcp file in the project, and click the <b>Configuration Tools </b>tab.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Click <b>Open </b>next to Radio Configurator.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Select a new PHY.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">The new config will be generated into the folder <i>autogen</i>, with the names of rail_config.c and rail_config.h.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Open the <b>Bluetooth - SoC Light RAIL DMP </b>project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Import the modified radio configuration file (radio_settings.radioconf) from the Switch project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Rebuild and flash both projects as you would normally.</p></li></ol></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Smart. Connected. <span class="s14">Energy-Friendly.</span></h2><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="769" height="433" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products">www.silabs.com/products</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_024.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="padding-top: 5pt;padding-left: 248pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 248pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s18">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s18">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s18">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s21" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s20" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s22" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s17">Silicon Laboratories Inc.</span>®<span class="s17">, Silicon Laboratories</span>®<span class="s17">, Silicon Labs</span>®<span class="s17">, SiLabs</span>® <span class="s17">and the Silicon Labs logo</span>®<span class="s17">, Bluegiga</span>®<span class="s17">, Bluegiga Logo</span>®<span class="s17">, Clockbuilder</span>®<span class="s17">, CMEMS</span>®<span class="s17">, DSPLL</span>®<span class="s17">, EFM</span>®<span class="s17">, EFM32</span>®<span class="s17">, EFR, Ember</span>®<span class="s18">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s17">, EZLink</span>®<span class="s17">, EZRadio</span>®<span class="s17">, EZRadioPRO</span>®<span class="s17">, Gecko</span>®<span class="s17">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s17">, Precision32</span>®<span class="s17">, ProSLIC</span>®<span class="s17">, Simplicity Studio</span>®<span class="s17">, SiPHY</span>®<span class="s17">, Telegesis, the Telegesis Logo</span>®<span class="s17">, USBXpress</span>® <span class="s17">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s17">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x/Image_026.png"/></span></p><p class="s20" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s20" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h4 href="http://www.silabs.com/">www.silabs.com</h4></p></body></html>
