<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1271: Secure Key Storage</title><meta name="author" content="Silicon Labs"/><meta name="description" content="How to securely “wrap” keys in EFR32 Series 2 devices with Secure Vault, so they can be stored in non-volatile storage."/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s7 { color: #A0B82D; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s14 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; vertical-align: -1pt; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s16 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h2 { color: #FFF; font-family:"Trebuchet MS", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s17 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s18 { color: #FB1725; font-family:"Trebuchet MS", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s19 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s20 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s21 { color: #4D4D4F; font-family:"Trebuchet MS", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4D4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s23 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s24 { color: #FB1725; font-family:"Trebuchet MS", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt;counter-reset: g1 1; }
 #l6> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l7 {padding-left: 0pt;counter-reset: d2 1; }
 #l7> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l8 {padding-left: 0pt;counter-reset: d3 1; }
 #l8> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l9 {padding-left: 0pt;counter-reset: d4 1; }
 #l9> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l10 {padding-left: 0pt;counter-reset: d4 1; }
 #l10> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l11 {padding-left: 0pt;counter-reset: d4 1; }
 #l11> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l12 {padding-left: 0pt;counter-reset: d3 1; }
 #l12> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l13 {padding-left: 0pt;counter-reset: h1 1; }
 #l13> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l14 {padding-left: 0pt;counter-reset: i1 1; }
 #l14> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l15 {padding-left: 0pt;counter-reset: d3 1; }
 #l15> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l16 {padding-left: 0pt;counter-reset: j1 1; }
 #l16> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l17 {padding-left: 0pt;counter-reset: d3 1; }
 #l17> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l18 {padding-left: 0pt;counter-reset: k1 1; }
 #l18> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l19 {padding-left: 0pt;counter-reset: l1 1; }
 #l19> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l20 {padding-left: 0pt;counter-reset: m1 1; }
 #l20> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l21 {padding-left: 0pt;counter-reset: d3 1; }
 #l21> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l22 {padding-left: 0pt;counter-reset: d2 1; }
 #l22> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l23 {padding-left: 0pt;counter-reset: d3 1; }
 #l23> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l24 {padding-left: 0pt;counter-reset: d2 1; }
 #l24> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l25 {padding-left: 0pt; }
 #l25> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1271-efr32-secure-key-storage/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="38" height="38" alt="image" src="an1271-efr32-secure-key-storage/Image_002.png"/></span></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1271: Secure Key Storage</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1271-efr32-secure-key-storage/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="207" height="1" alt="image" src="an1271-efr32-secure-key-storage/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="208" height="1" alt="image" src="an1271-efr32-secure-key-storage/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Keys are encrypted or &#39;wrapped&#39; with a Secure Vault root key</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Secure Vault root key is not stored on the device, instead it is generated on each reset</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Wrapped keys are confidential to the Secure Vault, and can be stored in NVM safely</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Wrapped keys can be imported into Secure Vault for usage at a later time</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Secure Key Storage is a feature in Secure Vault-enabled Series 2 devices that allows for the protection of cryptographic keys by key wrapping. User keys are encrypted by the device&#39;s root key for non-volatile storage for later usage. This prevents the need for a key to be stored in plaintext format on the device, preventing attackers from gaining access to the keys through traditional flash-extraction or application attacks, and allow- ing for a potentially unlimited number of keys to be securely stored in any available storage.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">This document describes the operation and usage of this feature, and provides com- parisons with other key storage methods.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="636" height="333" alt="image" src="an1271-efr32-secure-key-storage/Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l2"><li><h4 style="padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">EFR32 Series 2 Device Security Features</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Protecting IoT devices against security threats is central to a quality product. Silicon Labs offers several security options to help devel- opers build secure devices, secure application software, and secure paths of communication to manage those devices. Silicon Labs’ security offerings were significantly enhanced by the introduction of the EFR32 Series 2 products that included a Secure Vault. The Secure Vault is a tamper-resistant component used to securely store sensitive data, keys and to execute cryptographic functions and secure services.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Secure Vault is the foundation of two core security functions:</p><ul id="l3"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure Boot: Process where the initial boot phase is executed from an immutable memory (such as ROM) and where code is au- thenticated before being authorized to be executed.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure Debug access control: The ability to lock access to the debug ports for operational security, and to securely unlock them when access is required by an authorized entity.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Some EFR32 Series 2 products offer additional security options through Secure Vault. Secure Vault is a dedicated security CPU that isolates cryptographic functions and data from the host processor core. Devices with Secure Vault offer the following security features:</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure Key Storage: Protects cryptographic keys by “wrapping” or encrypting the keys using a root key known only to the Secure Vault.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Anti-Tamper protection: A configurable module to protect the device against tamper attacks.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Device authentication: Functionality that uses a secure device identity certificate along with digital signatures to verify the source or target of device communications.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A Secure Element Manager and other tools allow users to configure and control their devices both in house during testing and manu- facturing, and after the device is in the field.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">User Assistance</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In support of these products Silicon Labs offers whitepapers, webinars, and documentation. The following table summarizes the key security documents:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Document</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Summary</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Applicability</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">AN1190: Series 2 Secure Debug</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">How to lock and unlock EFR32 Series 2 debug access, including background infor- mation about the Secure Element</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">AN1218: Series 2 Secure Boot with RTSL</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Describes the secure boot process on EFR32 Series 2 devices using Secure Ele- ment</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">AN1247: Anti-Tamper Protection Configu- ration and Use</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">How to program, provision, and configure the anti-tamper module</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2 with Secure Vault</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">AN1268: Authenticating Silicon Labs Devi- ces using Device Certificates</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">How to authenticate a device using secure device certificates and signatures, at any time during the life of the product</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2 with Secure Vault</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">AN1271: Secure Key Storage <span class="s5">(This docu- ment)</span></p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">How to securely “wrap” keys so they can be stored in non-volatile storage.</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2 with Secure Vault</p></td></tr><tr style="height:40pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">AN1222: Production Programming of Ser- ies 2 Devices</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">How to program, provision, and configure security information using Secure Element during device production</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2</p></td></tr></table><p class="s7" style="padding-bottom: 3pt;padding-left: 378pt;text-indent: 0pt;text-align: left;">EFR32 Series 2 Device Security Features</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_007.png"/></span></p></li><li><p class="s3" style="padding-top: 7pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Key Reference</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Public/Private keypairs along with other keys are used throughout Silicon Labs security implementations. Because terminology can sometimes be confusing, the following table lists the key names, their applicability, and the documentation where they are used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 151pt;text-indent: 0pt;text-align: center;">Table 1.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Key Name</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SE Manager ID</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Customer Programmed</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Used in</p></td></tr><tr style="height:51pt"><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Public Sign key (Sign Key Public)</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">SL_SE_KEY_SLOT_AP- PLICATION_SE- CURE_BOOT_KEY</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Secure Boot binary au- thentication and/or OTA upgrade payload authen- tication</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 30pt;text-indent: 0pt;text-align: left;">AN1218 (primary), AN1222</p></td></tr><tr style="height:40pt"><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Public Command key (Command Key Public)</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">SL_SE_KEY_SLOT_AP- PLICATION_SE- CURE_DEBUG_KEY</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Secure Debug Unlock or Disable Tamper com- mand authentication</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 30pt;text-indent: 0pt;text-align: left;">AN1190 (primary), AN1222, AN1247</p></td></tr><tr style="height:40pt"><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">OTA Decryption key (GBL Decryption key) aka AES-128 Key</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">SL_SE_KEY_SLOT_AP- PLICA- TION_AES_128_KEY</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Decrypting GBL payloads used for firmware up- grades</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 30pt;text-indent: 0pt;text-align: left;">AN1222 (primary), UG266</p></td></tr><tr style="height:40pt"><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Attestation key aka Pri- vate Device Key</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">SL_SE_KEY_SLOT_AP- PLICATION_ATTESTA- TION_KEY</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Device authentication for secure identity</p></td><td style="width:108pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">AN1268</p></td></tr></table><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Device Compatibility</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_008.png"/></span></p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark3">Device Compatibility</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">This application note supports Series 2 device families with the Secure Vault feature. Some functionality is different depending on the device.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Wireless SoC Series 2 devices with Secure Vault consists of:</p><ul id="l5"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EFR32BG21B</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EFR32MG21B</p></li></ul><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Secure Element Manager</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_009.png"/></span></p></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark4">Secure Element Manager</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="https://docs.silabs.com/gecko-platform/latest/service/api/group-sl-se-manager" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">The Secure Element Manager provides thread-safe APIs for the Secure Vault&#39;s mailbox interface. The Secure Element Manager APIs related to Secure Key Storage operations are listed in the table below. Documentation for Secure Element Manager APIs can be found at </a>https://docs.silabs.com/gecko-platform/latest/service/api/group-sl-se-manager<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">Table 3.1.  Secure Element Manager API for Secure Key Storage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure Element Manager API</p></td><td style="width:324pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s4" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Usage</p></td></tr><tr style="height:19pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_generate_key</p></td><td style="width:324pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Generate a new key into a Secure Vault volatile key storage slot.</p></td></tr><tr style="height:40pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_transfer_key</p></td><td style="width:324pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: justify;">Transfer a wrapped key. Used to export a wrapped key from an internal storage slot or an external plaintext key. Also used to import a wrapped key into the Se- cure Vault.</p></td></tr><tr style="height:30pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_export_key</p></td><td style="width:324pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s5" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Export a plaintext key if allowed. This will fail for a key that has been flagged as</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_SE_KEY_FLAG_NON_EXPORTABLE<span class="s5">.</span></p></td></tr></table><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_010.png"/></span></p></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">Introduction</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Secure Vault is a dedicated security CPU that isolates cryptographic functions and data from the host Cortex-M33 core. It is used to accelerate cryptographic operations as well as to provide a method to securely store keys. This application note will cover the Secure Key Storage feature of the Secure Vault.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The Secure Vault contains one-time programmable memory (OTP) key storage slots for three specific keys:</p><ol id="l6"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Public Sign key, used for Secure Boot and Secure Upgrades</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Public Command key, used for Secure Debug unlock and tamper disable</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The OTA Decryption key, used for Over-the-Air updates</p></li></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">These keys are one-time programmable, and, after programming, are persistent on the device through a power-on reset.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Secure Vault also contains four volatile storage slots for any other user keys. These slots are not persistent through a reset. In the case where a key needs persistent storage, the key must be stored outside of the Secure Vault in non-volatile storage. After a device reset, the key can be loaded into the Secure Vault volatile key storage for usage by index, or used in-place (passed to the Secure Vault on every requested operation). Without any secure key storage mechanism, this necessitates the storage of the user key in plaintext format in non-volatile storage. This opens the keys to storage-extraction attacks (such as gaining access to and downloading device flash), as well as application level attacks (i.e. taking control of the user application or privileges in a manner that allows access to the keys).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">With Secure Key Storage, a user can export a key from the Secure Vault in &#39;wrapped&#39; format. In this format, the key is encrypted by a device-unique root key, only available to the Secure Vault. This allows a user to store a key confidentially in non-volatile storage to provide key persistence. Using Secure Key Storage, the plaintext key is never stored in non-volatile memory, preventing storage-ex- traction attacks from obtaining the key. After a device reset, the wrapped key can be loaded into the Secure Vault for usage without ever exposing the plaintext key to the application, which also prevents application-level attacks from exposing the key.</p></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">Key Storage Method Comparisons</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The following section demonstrates three methods for key storage: plaintext, ARM® TrustZone®, and Secure Key Storage.</p><p class="s3" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">In the following examples, AES key usage is demonstrated. However, any other key types supported by the device can also be used with Secure Vault key storage.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Key Generation and Usage</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In Series 2 devices, cryptographic functions are performed by the Secure Vault. In order to perform these functions, the Secure Vault must have access to any user keys needed. Keys can be generated and be used by the Secure Vault in multiple ways:</p><ol id="l8"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">External storage, in-place usage:</p><ol id="l9"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">A user generates a plaintext key and stores it in device memory.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The user provides a key descriptor to the Secure Vault that points to this key for a specific cryptographic operation.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The Secure Vault performs the cryptographic operation using this key, but does not store it in any Secure Vault volatile storage slot.</p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">External storage with Secure Vault import:</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">A user generates a plaintext key and stores it in device memory.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The user provides a key descriptor to the Secure Vault that points to this key, as well as a slot number to store the key.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The Secure Vault imports this key into a volatile key storage slot.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The user requests that the Secure Vault performs a cryptographic function by providing the index of the storage slot.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Internal Secure Vault key generation:</p><ol id="l11"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">The user commands the Secure Vault to generate a new key within one of the Secure Vault&#39;s volatile key slots.</p></li><li><p style="padding-top: 3pt;padding-left: 23pt;text-indent: 27pt;line-height: 182%;text-align: left;">The user requests that the Secure Vault performs a cryptographic function by providing the index of the storage slot. In each case, in order to provide persistent storage for the key, the key must be stored in non-volatile memory.</p></li></ol></li></ol></li><li><p class="s3" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Plaintext Key Storage</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The simplest manner to store a key is to save it in plaintext form. The steps to store and use a key stored in plaintext form are as follows:</p><ol id="l12"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">A user key is generated and imported into device memory. For persistent storage, this must be non-volatile storage, such as device flash.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">After a device reset, the Secure Vault volatile key storage will be empty, so the plaintext key must be loaded into a slot for usage. Alternatively, the key could be used in-place from non-volatile storage on a per-operation basis.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:397.657pt" cellspacing="0"><tr style="height:36pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Plaintext Key</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 2</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 3</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 4</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="585" height="404" alt="image" src="an1271-efr32-secure-key-storage/Image_011.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault Enabled Device</p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 22pt;text-indent: -22pt;text-align: left;">Plaintext User Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 25pt;text-indent: -13pt;text-align: left;">Encrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">Figure 5.1. Plaintext Key Storage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: right;">In order to use the key for a cryptographic operation, the following procedure is used.</p><ol id="l13"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user passes data to be processed (in this specific example, AES encrypted data) to the Secure Vault.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user requests a that cryptographic operation be performed on this data using one of the keys stored in the Secure Vault vola- tile key storage slots. Alternatively, the key can be passed to the Secure Vault directly for a singular cryptographic operation.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The Secure Vault performs the cryptographic operation.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The output of the cryptographic operation is passed back to the user for processing.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:348.15pt" cellspacing="0"><tr style="height:36pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p></td><td style="width:24pt" rowspan="2" bgcolor="#E17F26"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" rowspan="2" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p></td></tr><tr style="height:8pt"><td style="width:24pt;border-left-style:solid;border-left-width:2pt;border-left-color:#797777" rowspan="4" bgcolor="#E17F26"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 2</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 3</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 4</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="404" alt="image" src="an1271-efr32-secure-key-storage/Image_012.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault Enabled Device</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">4</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 25pt;text-indent: -13pt;text-align: left;">Decrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 25pt;text-indent: -13pt;text-align: left;">Encrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.2.  Plaintext Key Usage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">This method exposes the keys to two major vulnerabilities:</p><ol id="l14"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">Access to device storage gives access to the keys. In this case, an attack that gains access to the flash contents will expose the user key.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Since the application has access to the keys, compromising the application or device privileges can compromise the keys. Such an attack might not directly access device memory, but take control of the application in a way that causes the application to expose the key to an attacker.</p></li></ol></li></ol></li><li><p class="s3" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">ARM® TrustZone® Key Storage</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In some ARM devices, key management is handled by a feature called TrustZone. TrustZone divides the device memory map into two regions: a trusted region and a non-trusted region. User code is executed from the non-trusted region, which does not have access to any part of the trusted region. The trusted region is used to store user keys securely and to control other secure operations. Using TrustZone for key storage requires the following steps:</p><ol id="l15"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">A plaintext user key is created and imported into untrusted device memory.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The key is imported into the trusted region from the untrusted region. For persistent storage, the key must be stored in device non- volatile memory, such as flash.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The plaintext key in the untrusted region can now be deleted. From here, the untrusted region no longer has direct access to the plaintext key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="514" height="410" alt="image" src="an1271-efr32-secure-key-storage/Image_013.png"/></span></p><p class="s11" style="padding-left: 42pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ARM TrustZone Enabled Device</p><p class="s12" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">Untrusted Region Trusted Region</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 22pt;text-indent: -22pt;text-align: left;">Plaintext User Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 7pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 8pt;padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.3.  TrustZone Key Import</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Once a key has been loaded into the trusted zone, it can be used for cryptographic operations through the following procedure:</p><ol id="l16"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user passes data to be processed (in this specific example, AES encrypted data) to the trusted zone.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user requests that a cryptographic operation be performed on this data using one of the keys stored in the trusted region.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The trusted region performs the cryptographic operation.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The output of the cryptographic operation is passed back to the untrusted region for processing.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="421" height="410" alt="image" src="an1271-efr32-secure-key-storage/Image_014.png"/></span></p><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">4</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-left: 13pt;text-indent: -13pt;text-align: left;">Decrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: center;">RAM</p><p class="s13" style="padding-top: 4pt;text-indent: 0pt;text-align: center;">Encrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 15pt;text-align: left;">2 <span class="s13">Plaintext Key</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 42pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ARM TrustZone Enabled Device</p><p class="s12" style="padding-left: 168pt;text-indent: -168pt;line-height: 18pt;text-align: left;">Untrusted Region            Trusted Region Flash</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.4.  TrustZone Key Usage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">Once the key is loaded into the trusted region, the user application no longer has direct access to the key. This eliminates the applica- tion-level vulnerability mentioned previously. However, the plaintext version of the key is still stored in device memory, meaning that this method is still vulnerable to a storage extraction attack on the device.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">TrustZone also has another limitation: since the trusted area is some portion of the device memory, the number of keys that you can securely store is limited to the space available within the trusted region.</p></li></ol></li><li><p class="s3" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Secure Key Storage</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">With Secure Key Storage, the user key, using the Secure Vault, can be exported in an encrypted, or &#39;wrapped&#39; form. Only the Secure Vault has access to the key to decrypt, or &#39;unwrap&#39;, the wrapped key. This Secure Vault root key is not stored on the device during power-down, but rather regenerated after each reset. This allows a user to securely store a key in non-volatile memory, limiting the number of keys that can be stored only by the amount of storage the user has available.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To wrap an externally-generated key:</p><ol id="l17"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">After power-on, the device&#39;s unique root key is generated with output from the PUF (Physically Unclonable Function).</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">A user key is generated and imported into device memory. In this example, the key is imported into RAM for easy deletion, and the added security that, if device power is removed, the key will be lost.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user key is passed to the Secure Vault, where it is encrypted with the Secure Vault&#39;s root key.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The wrapped key is passed back to the user application for storage in non-volatile memory (in this case, device flash).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The plaintext key can now be deleted from the device. From this point forward, only the Secure Vault will have access to the plain- text key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:26pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 22pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Flash</p></td></tr><tr style="height:16pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A;border-left-style:solid;border-left-width:2pt;border-left-color:#D81E2A;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A;border-right-style:solid;border-right-width:2pt;border-right-color:#D81E2A" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">Wrapped Key</p></td></tr><tr style="height:62pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A" bgcolor="#0597AA"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:36pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-right: 20pt;text-indent: 0pt;text-align: right;">Slot 1</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-right: 20pt;text-indent: 0pt;text-align: right;">Slot 2</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-right: 20pt;text-indent: 0pt;text-align: right;">Slot 3</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-right: 20pt;text-indent: 0pt;text-align: right;">Slot 4</p></td></tr></table><p class="s11" style="padding-left: 216pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="585" height="446" alt="image" src="an1271-efr32-secure-key-storage/Image_015.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault Enabled Device</p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 22pt;text-indent: -22pt;text-align: left;">Plaintext User Key</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">5</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">4</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 20pt;text-indent: 0pt;text-align: center;">PUF</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Root Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 7pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.5.  External Key Import, Wrapping, and Storage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Instead of importing an external key, the Secure Vault can generate a new key directly into one of its volatile key storage slots. This key can then be exported in wrapped form for secure persistent storage.</p><ol id="l18"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The user requests that the Secure Vault generates a new key into one of its storage slots using the true random number generator (TRNG).</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The key is encrypted with the Secure Vault&#39;s root key.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The wrapped key is passed back to the user application for non-volatile storage (flash, in this case).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:168.125pt" cellspacing="0"><tr style="height:26pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 22pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Flash</p></td></tr><tr style="height:16pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A;border-left-style:solid;border-left-width:2pt;border-left-color:#D81E2A;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A;border-right-style:solid;border-right-width:2pt;border-right-color:#D81E2A" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">Wrapped Key</p></td></tr><tr style="height:62pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A" bgcolor="#0597AA"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="446" alt="image" src="an1271-efr32-secure-key-storage/Image_016.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">EFR32xG21B Device</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 20pt;text-indent: 0pt;text-align: center;">PUF</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Root Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">Slot 4</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">Slot 3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">Slot 2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.6.  Internally Generated Key Wrapping and Storage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">In order to import a wrapped key into the Secure Vault for usage:</p><ol id="l19"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The wrapped key is passed to the Secure Vault.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The wrapped key is decrypted (&quot;unwrapped&quot;) with the Secure Vault&#39;s root key.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The plaintext key is stored in a volatile key storage slot.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:348.15pt" cellspacing="0"><tr style="height:36pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Plaintext Key</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 2</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 3</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 4</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="446" alt="image" src="an1271-efr32-secure-key-storage/Image_017.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault Enabled Device</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 20pt;text-indent: 0pt;text-align: center;">PUF</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Root Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Wrapped Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flash</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.7.  Wrapped Key Import</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">In order to use the key for a cryptographic operation, the same steps are followed as when using a plaintext key that has been imported into the Secure Vault:</p><ol id="l20"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The user passes data to be processed (in this specific example, AES encrypted data) to the Secure Vault.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The user requests that a cryptographic operation be performed on this data using one of the keys stored in the Secure Vault vola- tile key storage slots. Alternatively, the wrapped key can be passed to the Secure Vault directly for a singular cryptographic opera- tion. In this case, the key will be unwrapped before being used, but will not be stored for future operations.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The Secure Vault performs the cryptographic operation.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">The output of the cryptographic operation is passed back to the user for processing.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:26pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 22pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Flash</p></td></tr><tr style="height:16pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A;border-left-style:solid;border-left-width:2pt;border-left-color:#D81E2A;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#D81E2A;border-right-style:solid;border-right-width:2pt;border-right-color:#D81E2A" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">Wrapped Key</p></td></tr><tr style="height:62pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#D81E2A" bgcolor="#0597AA"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:36pt"><td style="width:72pt;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777" bgcolor="#0597AA"><p class="s9" style="padding-top: 3pt;padding-left: 17pt;text-indent: -9pt;text-align: left;">Volatile Key Storage</p></td><td style="width:21pt" rowspan="2" bgcolor="#E17F26"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" rowspan="2" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Plaintext Key</p></td></tr><tr style="height:8pt"><td style="width:21pt;border-left-style:solid;border-left-width:2pt;border-left-color:#797777" rowspan="4" bgcolor="#E17F26"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 2</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 3</p></td></tr><tr style="height:17pt"><td style="width:72pt;border-top-style:solid;border-top-width:2pt;border-top-color:#797777;border-left-style:solid;border-left-width:2pt;border-left-color:#797777;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#797777;border-right-style:solid;border-right-width:2pt;border-right-color:#797777" bgcolor="#007694"><p class="s10" style="padding-top: 1pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">Slot 4</p></td></tr></table><p class="s11" style="padding-left: 167pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Plaintext Key</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="404" alt="image" src="an1271-efr32-secure-key-storage/Image_018.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault Enabled Device</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">3</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">4</h3><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">1</h3><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">x</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">ilbo</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Ma</p><p style="text-indent: 0pt;text-align: left;"/><h3 style="text-indent: 0pt;line-height: 16pt;text-align: left;">2</h3><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Secure Vault</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 11pt;text-align: left;">M33 Core Area</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">AES Engine</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 25pt;text-indent: -13pt;text-align: left;">Decrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 1pt;padding-left: 25pt;text-indent: -13pt;text-align: left;">Encrypted Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">RAM</p><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;padding-left: 156pt;text-indent: 0pt;text-align: center;">Figure 5.8.  Wrapped Key Usage</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Secure Key Storage Advantages</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Secure Key Storage confers the following benefits over other key storage methods:</p><ol id="l21"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Access to device memory does not expose user keys.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Compromising the user application does not expose user keys, since the user application itself does not have access to the plain- text keys.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The number of user keys that can be securely stored is only limited by the amount of storage available to the user, including exter- nal storage.</p><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Operation Details</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_019.png"/></span></p></li></ol></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark12">Operation Details</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Root Key Generation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Secure Key Storage depends on the Secure Vault to encrypt / decrypt (wrap / unwrap) user keys with its own symmetric root key. The symmetric key used for this wrapping and unwrapping must be highly secure as it can expose all other key material in the system. The Secure Vault Key Management system uses a Physically Unclonable Function (PUF) to generate a persistent device-unique seed key on power up to dynamically generate this critical wrapping/unwrapping key. The key is only visible to the AES encryption engine and it is not retained when the device loses power.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Exporting a Wrapped Key</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Using Secure Key Storage, a user key can be set to non-exportable in its key descriptor. This prevents the Secure Vault from exporting the plaintext key when it is requested. However, a &#39;wrapped&#39; version of the key can still be exported to the user application. On export, the key is first encrypted by the Secure Vault&#39;s root key. The Secure Vault also tags the key with information to identify the wrapped key. Since only the Secure Vault has access to use the root key, the plaintext key is non-accessible, even to the user application.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: Wrapped keys are slightly larger than the equivalent plaintext key, as some additional metadata is required to identify the wrap- ped key to the Secure Vault.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark15">Wrapped Key Storage and Usage</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Once a key has been wrapped and exported, it can be safely stored anywhere - device flash, RAM, external storage, etc. The number of keys that can be securely stored is only limited by the available storage space. A wrapped key can later be imported into a Secure Vault volatile storage slot for usage, or used in-place. Once the key is wrapped and stored, the plaintext key available to the application can be deleted. From here, only the Secure Vault will have the ability to unwrap and use the key.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">With access to the wrapped key, the Secure Vault can use this key in one of two ways:</p><ol id="l23"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">A user can request that a cryptographic operation be performed using the key stored in memory. In this case, the Secure Vault will import the key, unwrap it, and then perform the cryptographic operation. The key will not be stored within the Secure Vault.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">A user can import the wrapped key into a Secure Vault volatile storage slot. In this case, the key is unwrapped by the Secure Vault and stored in plaintext in a volatile slot. The user can then later request that a cryptographic function be performed by the Secure Vault by referencing the volatile slot index. This provides a performance increase over using wrapped keys in place, as the Secure Vault does not need to import and unwrap the key on each requested operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark16">Password Protection</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When defining a key descriptor for a new key, or when importing an existing key into Secure Vault, the user can choose to require a password to allow use of the key. The password field in the key descriptor structure is eight bytes in length. If unspecified, the key will use the default password of all zeros.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">After importing a key with a password, failing to provide the correct password when performing a cryptographic operation will result in Secure Vault returning an invalid credentials error, and no operation will be performed.</p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark17">Examples</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><li><p class="s3" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Simple Key Generation and Storage</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This example demonstrates the generation, storage, and use of a wrapped AES-256 key using Secure Element Manager.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Key Generation</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">A new AES-256 key can be generated into the Secure Vault volatile key storage slot 0 by the following code. It is important to set the key flags to include <span class="s15">SL_SE_KEY_FLAG_NON_EXPORTABLE </span>to disallow the Secure Vault from exporting the plaintext key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">sl_status_t status; sl_se_command_context_t ctx;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_key_descriptor_t key = {</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.type = SL_SE_KEY_TYPE_AES_256,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.flags = SL_SE_KEY_FLAG_NON_EXPORTABLE,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.storage.method = SL_SE_KEY_STORAGE_INTERNAL_VOLATILE,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.storage.location.slot = SL_SE_KEY_SLOT_VOLATILE_0 };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">status = sl_se_generate_key(&amp;ctx, &amp;key);</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Key Usage</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This key can now be used for cryptographic operations. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">unsigned char msg[] = &quot;Hello world.&quot;; unsigned char msgEncrypted[16];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">status = sl_se_aes_crypt_ecb(&amp;ctx,</p><p class="s15" style="padding-left: 119pt;text-indent: 0pt;line-height: 107%;text-align: left;">&amp;key, SL_SE_ENCRYPT,</p><p class="s15" style="padding-left: 119pt;text-indent: 0pt;line-height: 107%;text-align: left;">msg, msgEncrypted);</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Note, this example only encrypts one AES block. For AES-256, the block size is 16 bytes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Wrapped Key Export</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To save the wrapped key to flash, first export it to a RAM buffer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">unsigned char aesKeyWrappedBuf[32 + 28];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_key_descriptor_t keyWrapped = {</p><p class="s15" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.type = SL_SE_KEY_TYPE_AES_256,</p><p class="s15" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.flags = SL_SE_KEY_FLAG_NON_EXPORTABLE,</p><p class="s15" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.storage.method = SL_SE_KEY_STORAGE_EXTERNAL_WRAPPED,</p><p class="s15" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.storage.location.buffer.pointer = aesKeyWrappedBuf,</p><p class="s15" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">.storage.location.buffer.size = sizeof(aesKeyWrappedBuf) };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">status = sl_se_transfer_key(&amp;ctx, &amp;key, &amp;keyWrapped);</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Note: A wrapped key will always add an additional 28 bytes of overhead to the key size. In this example, the AES-256 key, unwrapped, is 32 bytes. Wrapped, it is 32 + 28 bytes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Writing Wrapped Key to Flash</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Once a key has been exported to a RAM buffer, the MSC can be used to write it to a flash location.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define KEY_STORAGE_ADDR (0xF0000)</p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">MSC_WriteWord((uint32_t *)KEY_STORAGE_ADDR, aesKeyWrappedBuf, sizeof(aesKeyWrappedBuf));</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In this example, the key is written to address 0xF0000.</p><p class="s3" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Importing Wrapped Key</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">After a device reset, or if the key has been deleted from its volatile slot, the key can be imported back into slot 0 by the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">sl_status_t status; sl_se_command_context_t ctx;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_key_descriptor_t key = {</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.type = SL_SE_KEY_TYPE_AES_256,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.flags = SL_SE_KEY_FLAG_NON_EXPORTABLE,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.storage.method = SL_SE_KEY_STORAGE_INTERNAL_VOLATILE,</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">.storage.location.slot = SL_SE_KEY_SLOT_VOLATILE_0 };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_se_key_descriptor_t keyWrapped = {</p><p class="s15" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.type = SL_SE_KEY_TYPE_AES_256,</p><p class="s15" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.flags = SL_SE_KEY_FLAG_NON_EXPORTABLE,</p><p class="s15" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.storage.method = SL_SE_KEY_STORAGE_EXTERNAL_WRAPPED,</p><p class="s15" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.storage.location.buffer.pointer = (unsigned char*)KEY_STORAGE_ADDR,</p><p class="s15" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">.storage.location.buffer.size = 32+16 };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">status = sl_se_transfer_key(&amp;ctx, &amp;keyWrapped, &amp;key);</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s3" style="padding-top: 4pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark19">Github Examples</a></p><p class="s16" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><a href="https://github.com/SiliconLabs/peripheral_examples/tree/master/series2" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Additional Secure Element Manager examples can be found in the Silicon Labs </a>Github repository <span style=" color: #000;">under the series2/semgr/ semgr_secure_key_storage directory. The following examples are available:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">generate_AES_export_wrapped</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">This example generates a new AES-256 key into a Secure Vault volatile storage slot. The key is used to encrypt a message, which is then stored in flash. The key is then exported in wrapped form and stored into flash. On device reset, if a wrapped key is stored in flash, it is loaded into the Secure Vault, and used to decrypt the message. The key in flash is then erased.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">generate_AES_export_wrapped_with_password</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The previous example is duplicated with the addition of an 8-byte password used to protect access to the key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">import_rand_AES_export_wrapped</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The first example is duplicated. Instead of using Secure Vault to generate a key within a storage slot, a random key is generated using the TRNG in a RAM buffer. This buffer is imported as an AES key into a volatile storage slot, then deleted from RAM. The key is then exported in wrapped format.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">ecdh_export_wrapped</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">An ECDH exchange is performed to generate a 32-byte shared secret. The shared secret is used as an AES-256 key to encrypt and decrypt a message. The AES key is then exported in wrapped format. At no point is a plaintext version of the generated shared secret available to the user.</p><p class="s3" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">import_ECC_P256_pem_export_wrapped</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example demonstrates importing a PEM-encoded key into the device. PEM is a common key file format that allows encoding a key into ASCII characters. An example PEM encoded private EC key is shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: justify;">-----BEGIN EC PRIVATE KEY-----</p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">MHcCAQEEIAG+QwyHX1dmKtkBGKiOjEfDvfZH+kd4pTtLOmoa1tEYoAoGCCqGSM49 AwEHoUQDQgAErpxARso4TaKuxCObCG3G1eUNxLVsdkzHB9UJi1BK0xQobLq0Nj3H DKh0vb/PBoaWw1kTx+P1HcnGUU4GTOpniw==</p><p class="s15" style="padding-left: 2pt;text-indent: 0pt;text-align: justify;">-----END EC PRIVATE KEY-----</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In this example, the user generates a key pair using openssl (run openssl_genkeys.sh in the base example directory). Example key pairs have also been provided in the base example directory as private.pem/der and public.pem/der. The EC private key is imported in PEM format over UART. mbedtls is used to convert the PEM-encoded key into binary format, which is then imported into a Secure Vault volatile slot. The plaintext keys are then deleted from RAM, and the wrapped key is exported and stored in flash.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><a href="https://slproweb.com/products/Win32OpenSSL.html" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">This example uses OpenSSL to generate PEM encoded keys. The Windows version of OpenSSL can be downloaded from here - </a><a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank">https://slproweb.com/products/Win32OpenSSL.html</a></p><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Revision History</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1271-efr32-secure-key-storage/Image_020.png"/></span></p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark20">Revision History</a></h4></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Revision 0.1</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">September 2020</p><ul id="l25"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Initial Revision.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 17pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s17" style="padding-top: 16pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="433" alt="image" src="an1271-efr32-secure-key-storage/Image_021.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="80" alt="image" src="an1271-efr32-secure-key-storage/Image_022.png"/></span></p><p class="s18" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/IoT" class="s19">www.silabs.com/IoT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="80" alt="image" src="an1271-efr32-secure-key-storage/Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">SW/HW</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/simplicity" class="s20">www.silabs.com/simplicity</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="80" alt="image" src="an1271-efr32-secure-key-storage/Image_024.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Quality</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/quality" class="s19">www.silabs.com/quality</a></p><p class="s18" style="padding-top: 6pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="80" alt="image" src="an1271-efr32-secure-key-storage/Image_025.png"/></span></p><p style="padding-top: 1pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s19">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s22" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons.  Such changes will not alter the specifications or the performance of the product.  Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s22" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress®, Zentri, the Zentri logo and Zentri DMS, Z-Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="134" height="66" alt="image" src="an1271-efr32-secure-key-storage/Image_026.png"/></span></p><p class="s23" style="padding-top: 7pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s23" style="padding-left: 134pt;text-indent: 0pt;line-height: 9pt;text-align: left;">USA</p><p style="padding-top: 4pt;padding-left: 134pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/" class="s24">http://www.silabs.com</a></p></body></html>
