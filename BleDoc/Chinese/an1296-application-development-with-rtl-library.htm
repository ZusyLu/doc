<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1296: Application Development with Silicon Labs’ RTL Library</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s7 { color: #007693; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s9 { color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s12 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s15 { color: #0052CC; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt; }
 .s16 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s18 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s19 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s20 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s21 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s23 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s24 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s25 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s26 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s27 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s28 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s29 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s30 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s32 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s34 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s35 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h3 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 2; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d2 3; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10 {padding-left: 0pt;counter-reset: d2 1; }
 #l10> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12 {padding-left: 0pt;counter-reset: f1 1; }
 #l12> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l13 {padding-left: 0pt;counter-reset: g1 1; }
 #l13> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l14 {padding-left: 0pt;counter-reset: d2 3; }
 #l14> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l15 {padding-left: 0pt;counter-reset: h1 1; }
 #l15> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l16 {padding-left: 0pt;counter-reset: d2 1; }
 #l16> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18 {padding-left: 0pt;counter-reset: i1 1; }
 #l18> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt;counter-reset: j1 3; }
 #l20> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l20> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l21 {padding-left: 0pt;counter-reset: j2 2; }
 #l21> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l21> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l22 {padding-left: 0pt;counter-reset: j3 1; }
 #l22> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l23 {padding-left: 0pt;counter-reset: k1 1; }
 #l23> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l24 {padding-left: 0pt;counter-reset: j1 3; }
 #l24> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l24> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l25 {padding-left: 0pt;counter-reset: j2 2; }
 #l25> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l25> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l26 {padding-left: 0pt;counter-reset: j3 2; }
 #l26> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l27 {padding-left: 0pt;counter-reset: l1 1; }
 #l27> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l28 {padding-left: 0pt;counter-reset: l2 1; }
 #l28> li>*:first-child:before {counter-increment: l2; content: counter(l2, lower-latin)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l29 {padding-left: 0pt;counter-reset: j1 3; }
 #l29> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l29> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l30 {padding-left: 0pt;counter-reset: j2 2; }
 #l30> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l30> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l31 {padding-left: 0pt;counter-reset: j3 4; }
 #l31> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l32 {padding-left: 0pt;counter-reset: m1 1; }
 #l32> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l33 {padding-left: 0pt;counter-reset: m2 1; }
 #l33> li>*:first-child:before {counter-increment: m2; content: counter(m2, lower-latin)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l34 {padding-left: 0pt;counter-reset: j1 3; }
 #l34> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l34> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l35 {padding-left: 0pt;counter-reset: j2 2; }
 #l35> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l35> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l36 {padding-left: 0pt;counter-reset: j3 5; }
 #l36> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l36> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l37 {padding-left: 0pt;counter-reset: n1 1; }
 #l37> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l37> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l38 {padding-left: 0pt;counter-reset: n2 1; }
 #l38> li>*:first-child:before {counter-increment: n2; content: counter(n2, lower-latin)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l38> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l39 {padding-left: 0pt; }
 #l39> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40 {padding-left: 0pt; }
 #l40> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l41 {padding-left: 0pt;counter-reset: d2 1; }
 #l41> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l41> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l42 {padding-left: 0pt;counter-reset: o1 4; }
 #l42> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l42> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 #l43 {padding-left: 0pt;counter-reset: o2 1; }
 #l43> li>*:first-child:before {counter-increment: o2; content: counter(o1, decimal)"."counter(o2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l43> li:first-child>*:first-child:before {counter-increment: o2 0;  }
 #l44 {padding-left: 0pt;counter-reset: o3 1; }
 #l44> li>*:first-child:before {counter-increment: o3; content: counter(o1, decimal)"."counter(o2, decimal)"."counter(o3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l44> li:first-child>*:first-child:before {counter-increment: o3 0;  }
 #l45 {padding-left: 0pt;counter-reset: d2 2; }
 #l45> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l46 {padding-left: 0pt;counter-reset: p1 1; }
 #l46> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l46> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 #l47 {padding-left: 0pt;counter-reset: q1 1; }
 #l47> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l47> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 li {display: block; }
 #l48 {padding-left: 0pt; }
 #l48> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l49 {padding-left: 0pt;counter-reset: r1 1; }
 #l49> li>*:first-child:before {counter-increment: r1; content: counter(r1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l49> li:first-child>*:first-child:before {counter-increment: r1 0;  }
 #l50 {padding-left: 0pt; }
 #l50> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l51 {padding-left: 0pt; }
 #l51> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 li {display: block; }
 #l52 {padding-left: 0pt;counter-reset: s1 1; }
 #l52> li>*:first-child:before {counter-increment: s1; content: counter(s1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l52> li:first-child>*:first-child:before {counter-increment: s1 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="127" height="62" alt="image" src="an1296-application-development-with-rtl-library/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="an1296-application-development-with-rtl-library/Image_002.png"/></span></p><h1 style="padding-top: 11pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">AN1296: Application Development with Silicon Labs’ RTL Library</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="728" height="1" alt="image" src="an1296-application-development-with-rtl-library/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="206" height="1" alt="image" src="an1296-application-development-with-rtl-library/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="208" height="1" alt="image" src="an1296-application-development-with-rtl-library/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-left: 20pt;text-indent: -7pt;text-align: left;">Overview of Silicon Labs’ sample appli- cations</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Connection-based asset tag</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Connectionless asset tag</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Silicon Labs Enhanced asset tag</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">AoA locator</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">AoA multilocator</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Aoa multilocator GUI</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note provides guidance on how to start developing Bluetooth 5.1 Direction Finding (DF) applications using the Silicon Labs Bluetooth LE stack and the Real Time Locating Library (RTL lib).</p><p style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Silicon Labs provides sample projects including examples for asset tags and locators to demonstrate Bluetooth LE 5.1-based DF applications. This document provides an overview of the sample projects, software architecture, and a step-by-step guide on how to create your own applications using Simplicity Studio 5 and Bluetooth SDK v3.x.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Readers of this document should be familiar with the basics and terms of Direction Find- ing. To learn more about the theory of Direction Finding, see <i>UG103.18: Bluetooth® Di- rection Finding Fundamentals. </i>To get started with Silicon Labs Direction Finding Solu- tion, read <i>QSG175: Silicon Labs Direction Finding Solution Quick-Start Guide</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l2"><li><h4 style="padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark0">Introduction</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs provides modularized software sample projects for Angle of Arrival (AoA) asset tags and locators that can be easily extended to address different use case scenarios.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In general, the sample applications can be grouped in two main categories:</p><ul id="l3"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">AoA asset tag sample app—demonstrates a Constant Tone Extension (CTE) transmitter.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">AoA locator sample app—demonstrates a CTE receiver.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark1">AoA Asset Tags—CTE Transmitters</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth SDK in Gecko SDK Suite v3.x provides an AoA asset tag sample project (<i><b>Bluetooth - SoC AoA Asset-Tag</b></i>) that can easily be extended to address the following three scenarios by simply installing software components using Simplicity Studio 5’s Project Configurator.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Bluetooth 5.1 Connection-based AoA asset-tag</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Bluetooth 5.1 Connectionless AoA asset-tag</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Silicon Labs enhanced AoA asset-tag</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark2">AoA Locators—CTE Receivers</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth SDK v3.x also provides sample projects for AoA locators. Due to the resource-constrained nature of the EFR32 device, all the locator sample applications supported in Bluetooth SDK v3.x work in NCP (Network Co-Processor) mode. Thus, two sample applica- tions are provided in the SDK to support both the NCP target and the NCP host of the locator:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">NCP AoA locator sample app</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">AoA locator host sample app</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack runs on the EFR32 (AoA locator target) and the application runs on a host (MCU or PC). While the NCP AoA locator is generic for all variants, the AoA locator host sample app must be compiled for the desired type of CTE receiver (that is, connection- based, connectionless, or Silicon Labs enhanced).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">AoA can be measured accurately using a single locator. However, a single locator can only provide a rough estimation of the asset tag’s position. To determine the precise position of the asset tag, using multiple locators is recommended. By using multiple antenna arrays, the position of an asset tag can be determined using triangulation.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To demonstrate position estimation using multiple locators, the Bluetooth SDK also provides a sample project for supporting multiple locators—the multi-locator AoA locator host application.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In summary, Bluetooth SDK v3.x offers the following examples that can be adapted for different use case scenarios:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Studio Examples</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">soc_aoa_asset_tag— <i><b>Bluetooth – SoC AoA Asset Tag</b></i></p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">ncp_aoa_locator—<i><b>Bluetooth - NCP AoA locator</b></i></p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Host Examples (app/Bluetooth/example_host)</p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">aoa_locator—<i>AoA locator host (single locator)</i></p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">aoa_multilocator—<i>AoA locator host (multi-locator)</i></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Additionally, two more host sample apps are provided for visualization purposes:</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">aoa_compass (see <i>QSG175: Silicon Labs Direction Finding Solution Quick-Start Guide </i>for a detailed description)</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">aoa_multilocator_gui</p><ol id="l8"><li><p class="s5" style="padding-top: 7pt;padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark3">Software Architecture</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following diagram provides an overview of the software architecture for the asset-tag, NCP AoA locator, and host sample applications provided by Silicon Labs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="646" height="517" alt="image" src="an1296-application-development-with-rtl-library/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 1-1. Software Architecture for the Asset-Tag, NCP AoA Locator, and Host Sample Applications</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The yellow and orange boxes represent the AoA asset tag and NCP AoA locator sample projects, respectively. These example projects are meant to run on an EFR32xG22 device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The green box represents the AoA locator host sample app. This sample app is meant to run on a host machine (for example, x86, Raspberry Pi). The orange and green boxes logically form a single locator (a CTE receiver).</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The AoA locator host (green box) connects to the NCP AoA locator (orange box) via a serial port (VCOM) or TCP/IP. In the latter case, the AoA locator host and NCP AoA locator can be in different locations.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Silicon Labs AoA sample projects utilize the MQTT messaging protocol for sending and receiving the asset tag’s angle and position information. MQTT is a publish and subscribe messaging exchange protocol where a publisher sends, and the subscriber receives topics of interest via a message broker. The subscribers and publishers in the MQTT protocol do not interact with each other. The connection between them is handled by the broker. The broker filters all incoming messages and distributes them to the subscribers.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The AoA locator host controls the Bluetooth stack running on the NCP AoA locator and receives the CTE IQ samples (In-Phase and Quadrature-Phase pair of readings) using BGAPI protocol. Using the RTL library, the AoA locator host calculates the Angle of Arrival of an asset tag and publishes the result to the MQTT broker (white box in the figure above).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The box in blue represents the multi-locator host sample project. This host application subscribes to MQTT topics (related to the angle data) published by single locators to calculate and publish the exact position of an asset tag in an X, Y, Z coordinate.</p><p class="s7" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1296-application-development-with-rtl-library/Image_007.png"/></span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark4">Prerequisites</a><a name="bookmark5">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To get started with AoA application development, you will need the following:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">EFR32xG22-based device serving as a tag (for example, Thunderboard BG22).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">4x4 antenna array board: one for single locator sample apps, more than one for multi-locator sample app.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">A Wireless Starter Kit (WSTK) for each antenna array board.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Simplicity Studio v5 installed on your PC.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Bluetooth 3.1.0 or higher SDK installed from Gecko SDK Suite v3.1.0 or later.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">MinGW64 for building the AoA locator host applications, if you are using a Windows PC as a host.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Mosquitto MQTT Broker—<a href="https://mosquitto.org/download/" style=" color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank"> </a><a href="https://mosquitto.org/download/" class="s9" target="_blank">https://mosquitto.org/download/.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">MQTT Explorer (optional)—<a href="http://mqtt-explorer.com/" style=" color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank"> </a><a href="http://mqtt-explorer.com/" class="s9" target="_blank">http://mqtt-explorer.com/</a><a href="http://mqtt-explorer.com/" class="s10" target="_blank">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Python 3.7 for visualization purposes.</p></li></ul></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark6">Bluetooth - SoC AoA Asset Tag</a><a name="bookmark10">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Asset tags are relatively simple as their only goal is to send CTEs on a single antenna. However, CTEs can be sent in several different ways depending on the use case. Bluetooth SDK v3.1 provides an asset tag sample project, <i><b>Bluetooth - SoC AoA Asset Tag</b></i>, that can easily be extended to address the following three scenarios by installing software components using Simplicity Studio 5’s Project Config- urator.</p><ul id="l9"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Bluetooth 5.1 Connection-based AoA asset-tag—sends CTE responses on a connection when a CTE request is received.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Bluetooth 5.1 Connectionless AoA asset-tag— sends CTE in periodic advertisements.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Silicon Labs Enhanced (Silicon Labs proprietary) AoA asset-tag—sends CTE in extended advertisements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 170pt;text-indent: 0pt;text-align: left;"><span><img width="334" height="98" alt="image" src="an1296-application-development-with-rtl-library/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 2-1. Bluetooth – SoC Asset Tag</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">At its core, the <i><b>Bluetooth - SoC AoA Asset-Tag </b></i>is simply a <i><b>Bluetooth – SoC Empty </b></i>sample project extended with a CTE transmitter and an Asset Tracking Profile (ATP) in its GATT database. These properties can be added by installing one or two of the following software components, depending on the use case.</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Constant Tone Extension GATT Service (Connection)</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Constant Tone Extension GATT Service (Connectionless)</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Constant Tone Extension GATT Service (Silabs proprietary)</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">By default, the <i><b>Bluetooth - SoC AoA Asset Tag </b></i>has the <i>Constant Tone Extension GATT Service (Connection) </i>and <i>Constant Tone Extension GATT Service (Silabs proprietary) </i>component preinstalled in the project. The <i>Constant Tone Extension GATT Service (Con- nection) </i>component has dependency on <i>AoA Transmitter</i>. Therefore, it is installed in the background. The <i>AoA Transmitter </i>component enables initializing the CTE transmitter.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In addition to enabling the AoA transmitter, the <i>Constant Tone Extension GATT Service (Connection) </i>component also contributes to the Bluetooth GATT configuration, which is the <i>Constant Tone Extension Service </i>with a <i>Constant Tone Extension Enable </i>characteristic, as shown by <i>(a) </i>in the following figure. The <i>Constant Tone Extension Enable </i>characteristics is mandatory, and thus must be included in Connection, Connectionless, and Silicon Labs proprietary tag implementations.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On the other hand, the <i>Constant Tone Extension GATT Service (Silabs Proprietary) </i>component allows broadcasting CTEs in extended advertisements. This component contributes the following characteristics to the <i>Constant Tone Extension GATT Service </i>which can be used to alter different CTE parameters:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Length</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Transmit Count</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Transmit Duration</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Interval</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension PHY</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">These characteristics are mandatory when CTE transmission is supported on advertising channels, which is the case for the Connection- less and Silicon Labs proprietary approaches.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="542" height="285" alt="image" src="an1296-application-development-with-rtl-library/Image_009.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 2-2. Bluetooth SoC – AoA Asset Tag Sample Project</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <i><b>Bluetooth - SoC AoA Asset-Tag </b></i><a href="https://www.bluetooth.com/specifications/specs/" class="s10" target="_blank">sample project enables CTE transmission, and automatically adds the CTE Service specified by the Bluetooth SIG (</a><span style=" color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt;">https://www.bluetooth.com/specifications/specs/</span>) to the GATT database. Since a locator device finds the asset tag by looking for this service in the advertising packets, advertising CTE service is also enabled in the sample project by default (see “<b>advertise service</b>” checked in the Bluetooth GATT configurator in the figure below).</p><p class="s5" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Note<span class="p">: In Bluetooth SDK v3.1, a temporary UUID was used for the CTE service. In Bluetooth SDK v3.2, the official UUID of the CTE service is supported. This means that tags programmed with v3.1 are not compatible with locators programmed with v3.2 and vica versa.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 138pt;text-indent: 0pt;text-align: left;"><span><img width="411" height="186" alt="image" src="an1296-application-development-with-rtl-library/Image_010.jpg"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 2-3. Bluetooth SoC – AoA Asset Tag CTE Service</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l10"><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark7">Connection-Based Asset Tag Sample Application</a><a name="bookmark11">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">A connection-based asset tag needs to implement:</p><ul id="l11"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">A connectable Bluetooth peripheral that starts advertising itself</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">CTE transmitter to be able to send CTE responses, and</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">ATP in its GATT database.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As mentioned above, the <i>Constant Tone Extension GATT Service (Connection) </i>component implements both the CTE transmitter and ATP in the GATT database of your project. As such, for the connection-based tag, the <i><b>Bluetooth - SoC AoA Asset-Tag </b></i>sample app works out of the box without having to install any additional software components. You can uninstall the <i>Constant Tone Extension GATT Service (Silabs Proprietary) </i>component if your custom project does not need to send CTEs on extended advertising.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The CTE transmitter is initialized by calling the <span class="s11">sl_bt_init_classes()</span>. This API is automatically added in the Bluetooth initializa- tion by the <i>AoA Transmitter </i>component. The <i>AoA Transmitter </i>component is added to the project (in the background) when the <i>Constant Tone Extension GATT Service (Connection) </i>is installed, which is the default in the <i><b>Bluetooth - SoC AoA Asset-Tag </b></i>sample app.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D2D2D2;">main() -&gt; sl_system_init() -&gt; sl_stack_init() -&gt; sl_bt_init() -&gt; sl_bt_init_classes()</span></p><p style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">CTE transmission is enabled by <span class="s11">sl_bt_cte_transmitter_enable_connection_cte() </span>after a locator device connects to the tag and writes 0x01 into the <i>Constant Tone Extension Enable </i>characteristics. This process is handled by <span class="s11">sl_gatt_ser- vice_cte_on_event() </span>when the <span class="s11">sl_bt_evt_gatt_server_user_write_request </span>event is triggered. <span class="s11">sl_gatt_ser- vice_cte_on_event() </span>is defined in <span class="s11">sl_gatt_service_cte.c</span>, which is generated inside the <i>gecko_sdk_3.1.x/app/Blue- tooth/common/gatt_service_cte </i>directory by the <i>Constant Tone Extension GATT Service (Connection)</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">It is important that the “Write” property of the <i>Constant Tone Extension Enable </i>characteristics is enabled in the Bluetooth GATT configu- rator service (see “Write” checked under Properties).</p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test a connection-based asset tag application:</p><ol id="l12"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Create a Bluetooth - SoC AoA Asset Tag project in Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Flash it to an EFR32xG22 device. Note: If you use a new Thunderboard, push its reset button before programming. On some boards, the factory default firmware puts the device into EM4 after 30 seconds, and in this case the device must be restarted to be accessible by the programmer.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">The sample does not contain a bootloader. If you have not flashed any bootloader into your device, flash an xG22 bootloader sample app (for example <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\v3.1\platform\bootloader\sample-apps\boot- loader-storage-internal-single-512k\efr32mg22c224f512im40-brd4182a\ bootloader-storage-internal-single-512k.s37</i>).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark8">Connectionless Asset Tag Sample Application</a><a name="bookmark12">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">A connectionless asset tag needs to implement:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">A periodic advertiser.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">CTE transmitter – to be able to send CTEs in periodic advertisements.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">ATP (Asset Tracking Profile) in its GATT database.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The CTE transmitter is initialized by calling the <span class="s11">sl_bt_init_classes()</span>. This API is automatically added in the Bluetooth initializa- tion by the <i>AoA Transmitter </i>component. This component is added to the project (in the background) when the <i>Constant Tone Extension GATT Service (Connection) </i>is installed, which is the default in the <i><b>Bluetooth - SoC AoA Asset Tag </b></i>sample app.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D2D2D2;">main() -&gt; sl_system_init() -&gt; sl_stack_init() -&gt; sl_bt_init() -&gt; sl_bt_init_classes()</span></p><p style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The connectionless version of the asset tag is rather simple. It starts periodic advertising with CTE enabled, and that is all. To achieve this, remove the <i>Constant Tone Extension GATT Service (Silabs Proprietary) </i>and install the <i>Constant Tone Extension GATT Service (connectionless) </i>component.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <i>Constant Tone Extension GATT Service (Connectionless) </i>component also contributes to the Bluetooth GATT configurator. It adds the following characteristics to the <i>Constant Tone Extension GATT Service</i>, which can be used to alter different CTE parameters:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Length</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Transmit Count</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Transmit Duration</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Interval</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension PHY</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">It is important that the “<b>Write</b>” property of each of these characteristics is enabled in the Bluetooth GATT configurator service (see “Write” checked under Properties).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In a nutshell, when the tag is booted, it initializes the CTE transmitter and periodic advertising feature, and enters an infinite loop of processing Bluetooth stack events.</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">void sl_bt_process_event(sl_bt_msg_t *evt)</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">sl_bt_ota_dfu_on_event(evt); sl_gatt_service_cte_on_event(evt); sl_gatt_service_cte_adv_on_event(evt); sl_bt_on_event(evt);</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s11">sl_gatt_service_cte_adv_on_event() </span>handles events related to system boot and user write requests. When a system boot event is triggered, CTE advertising is initialized and started automatically by this handler using <span class="s11">adv_cte_init() </span>and <span class="s11">adv_cte_start(), </span>respectively. These functions are defined in <span class="s11">sl_gatt_service_cte_adv.c </span>and <span class="s11">sl_gat_ser- vice_cte_connectionless.c</span>, generated inside <i>gecko_sdk_3.1.x/app/Bluetooth/common/gatt_service_cte_adv </i>directory when the <i><b>Constant Tone Extension GATT Service (Connectionless) </b></i>component is installed.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">adv_cte_init() <span class="p">is called only once during the init phase. It sets the default parameter values for the CTE advertising. In contrast, </span>adv_cte_start() <span class="p">is triggered during the initialization and when the user write request for updating the value of one of the connec- tionless CTE characteristics (listed above) is completed. The </span>adv_cte_start() <span class="p">normally sets the advertising phy, starts a connec- tionless advertising, and adds CTEs to the periodic advertisements using </span>sl_bt_cte_transmitter_enable_connection- less_cte()<span class="p">.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test the connectionless asset tag application:</p><ol id="l13"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Create Bluetooth - SoC AoA Asset-Tag project in Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Uninstall the Constant Tone Extension GATT Service (Silabs Proprietary) component.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Install the Constant Tone Extension GATT Service (Connectionless) component using the Project Configurator.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Flash it to an EFR32xG22 device. Note: If you use a new Thunderboard, push its reset button before programming. On some boards, the factory default firmware puts the device into EM4 after 30 seconds, and in this case the device must be restarted to be accessible by the programmer.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">The sample does not contain a bootloader. If you have not flashed any bootloader into your device, flash an xG22 bootloader sample app (for example <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\v3.1\platform\bootloader\sample-apps\boot- loader-storage-internal-single-512k\efr32mg22c224f512im40-brd4182a\ bootloader-storage-internal-single-512k.s37</i>).</p></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that you cannot uninstall the <i>Constant Tone Extension GATT Service (Connection) </i>in a connectionless asset tag as it is the only component that installs the <i>AoA Transmitter </i>and contributes the <i>Constant Tone Extension Enable </i>characteristic, which is mandatory for the <i>Constant Tone Extension Service</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l14"><li><p class="s5" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark9">Silicon Labs Enhanced (Silabs proprietary) Asset Tag Sample Application</a><a name="bookmark13">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Silicon Labs asset tag sample app sends CTEs in extended advertisements, which is not a standard solution, and therefore can only be used with Silicon Labs locators. The advantage of this solution is that it uses extended advertisements, in which case no synchroni- zation information needs to be stored on the locator for each tag, in contrast to connections and periodic advertisements. This solution scales much better than the other two and can be used with hundreds of tags.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This sample app implements:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">An advertiser broadcasting extended advertisements.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">CTE transmitter – to be able to send CTEs in extended advertisements.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">ATP (Asset Tracking Profile) in its GATT database.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The difference between the connectionless version and the Silicon Labs proprietary version of the asset tag sample app is that the Silicon Labs solution starts extended advertising with CTE instead of periodic advertising. This offers better scalability since it puts no RAM constraints on the receiver side, like connections and periodic advertisement synchronizations.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The CTE transmitter is initialized by calling the <span class="s11">sl_bt_init_classes()</span>. This API is automatically added in the Bluetooth initializa- tion by the <i>AoA Transmitter </i>component. This component is added to the project (in the background) when the <i>Constant Tone Extension GATT Service (Connection) </i>is installed, which is the default in the <i><b>Bluetooth - SoC AoA Asset Tag </b></i>sample app.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D2D2D2;">main() -&gt; sl_system_init() -&gt; sl_stack_init() -&gt; sl_bt_init() -&gt; sl_bt_init_classess_cte()</span></p><p style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To broadcast CTEs in extended advertisement, the <i>Constant Tone Extension GATT Service (Silabs Proprietary) </i>software component must be installed, which is the default in the <i>Bluetooth - SoC AoA Asset-Tag </i>sample app. As such, for the Silicon Labs proprietary tag, the <i><b>Bluetooth - SoC AoA Asset-Tag </b></i>sample app works out of the box without having to install any additional software components.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Similar to the connectionless version, the <i><b>Constant Tone Extension GATT Service (Silabs Proprietary) </b></i>component adds the following characteristics to the <i>Constant Tone Extension GATT Service</i>, which can be used to alter different CTE parameters:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Length</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Minimum Transmit Count</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Transmit Duration</p></li><li><p style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension Interval</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Advertising Constant Tone Extension PHY</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">It is important that the “<b>Write</b>” property of each of these characteristics is enabled in the Bluetooth GATT configurator service (see “Write” checked under Properties).</p><p style="padding-top: 7pt;padding-left: 25pt;text-indent: 0pt;text-align: left;">In a nutshell, when the tag is booted, it initializes the CTE transmitter, and enters an infinite loop of processing Bluetooth stack events.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void sl_bt_process_event(sl_bt_msg_t *evt)</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">sl_bt_ota_dfu_on_event(evt); sl_gatt_service_cte_on_event(evt); sl_gatt_service_cte_adv_on_event(evt); sl_bt_on_event(evt);</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s11">sl_gatt_service_cte_adv_on_event() </span>handles events related to system boot and user write requests. When a system boot event is triggered, CTE advertising is initialized and started automatically by this handler using <span class="s11">adv_cte_init() </span>and <span class="s11">adv_cte_start()</span>, respectively. These functions are defined in <span class="s11">sl_gatt_service_cte_adv.c </span>and <span class="s11">sl_gat_ser- vice_cte_silabs.c</span>, generated inside <i>gecko_sdk_3.1.x/app/Bluetooth/common/gatt_service_cte_adv </i>directory when the <i>Constant Tone Extension GATT Service (Silabs Proprietary) </i>component is installed.</p><p class="s11" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">adv_cte_init()<span class="p">is called only once during the init phase. It sets the default parameter values for the CTE advertising. Whereas, </span>adv_cte_start() <span class="p">is triggered during the initialization and when a user write request for updating the value of one of the connection- less CTE characteristics (listed above) is completed. The </span>adv_cte_start() <span class="p">normally sets the advertising phy, starts a connectionless advertising, and adds CTEs to the extended advertisements using </span>sl_bt_cte_transmitter_enable_silabs_cte()<span class="p">.</span></p><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To test the Silicon Labs proprietary asset tag application:</p><ol id="l15"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Create a <i><b>Bluetooth - SoC AoA Asset-Tag </b></i>project in Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Flash it to an EFR32xG22 device. Note: if you use a new Thunderboard, push its reset button before programming. On some boards, the factory default firmware puts the device into EM4 after 30 seconds, and in this case the device must be restarted to be accessible by the programmer.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">The sample does not contain a bootloader. If you have not flashed any bootloader into your device, flash an xG22 bootloader sample app (for example <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\v3.1\platform\bootloader\sample-apps\boot- loader-storage-internal-single-512k\efr32mg22c224f512im40-brd4182a\ bootloader-storage-internal-single-512k.s37</i>).</p></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that you cannot uninstall the <i>Constant Tone Extension GATT Service (Connection) </i>in a Silicon Labs proprietary asset tag as it is the only component that installs the <i>AoA Transmitter </i>and contributes the <i>Constant Tone Extension Enable </i>characteristic, which is man- datory for the <i>Constant Tone Extension Service</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth specification allows CTEs to be added to periodic advertisements only. Therefore, this is a proprietary, non-standard solution. It can, however, help you scale your system. In the case of periodic advertisement, the locator must keep track of each periodic advertiser one-by-one. For each, it needs to know when and on which channel to expect the next packet. With hundreds of tags, this can result in huge RAM consumption, making this solution less scalable. In contrast to this, to receive an extended advertisement the locator must scan on the primary advertising channels only, listen for legacy advertisements that point to extended advertisements, and jump to the reported channel at the reported time. No time/channel tracking is needed; therefore, hundreds of tags can be followed.</p></li></ul></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark14">Single Locator Sample Application</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Locators are much more complicated than asset tags. They control an array of antennae (not a single antenna), they must precisely sample the incoming signal, and optionally must also calculate the angle values from the received signal. Because of the limited capabil- ities of the EFR32, all the locator sample applications supported in Bluetooth SDK v3.x work in NCP (Network Co-Processor) mode, meaning that the Bluetooth stack runs on the EFR32 (NCP target) and the application runs on a host (MCU or PC).</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Bluetooth SDK v3.x provides one sample project for the EFR32 NCP AoA locator target (<i><b>Bluetooth - NCP AoA locator</b></i>) and one sample app for a locator host. The NCP target sample project can be found in Simplicity Studio, and the host sample app can be found in the SDK folder inside app/bluetooth/<i>example_host/aoa_locator</i>. The full path is:</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\example_host\aoa_locator</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">While the NCP AoA locator application is unified for all variants (connection-based, connectionless and Silicon Labs proprietary), the locator host should be compiled for each variant separately.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="595" height="382" alt="image" src="an1296-application-development-with-rtl-library/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 3-1. AoA Locator</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The physical interface between the AoA locator host and NCP AoA locator can be either virtual COM port over USB (VCOM) or TCP/IP. In the latter case, the WSTK with the antenna board can be decoupled in space from the host, as long as the host reaches the NCP AoA locator using its IP address.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l16"><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark15">NCP AoA Locator Sample Application</a><a name="bookmark22">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Bluetooth SDK v3.x provides the <i><b>Bluetooth - NCP AoA locator </b></i>example project to support an NCP AoA locator that can receive and sample CTEs transmitted by asset tags.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The NCP AoA locator (EFR32) is responsible for:</p><ul id="l17"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Running the Bluetooth stack</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Initializing the CTE transmitter and receiver classes</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">IQ sampling</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Antenna switching</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Mirroring the BGAPI interface to UART</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The CTE transmitter and receiver are initialized by calling the <span class="s11">sl_bt_class_cte_transmitter_init() </span>and <span class="s11">sl_bt_class_cte_receiver_init() </span>APIs. These APIs are automatically added in the Bluetooth initialization by the installation of the <i>AoA Transmitter </i>and <i>AoA Receiver </i>components, which are default in the <i><b>Bluetooth - NCP AoA locator </b></i>project.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void sl_bt_init(void)</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">...</p><p class="s11" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">sl_bt_class_cte_receiver_init(); sl_bt_class_cte_transmitter_init();</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">...</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Also, the <i><b>Bluetooth - NCP AoA </b></i>locator project has two main additional components:</p></li><li><p class="s6" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Periodic Advertising Synchronization<span class="p">—enables the periodic advertising synchronization feature.</span></p></li><li><p class="s6" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">RAIL Utility, AoX<span class="p">—supports antenna pin configuration.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test the NCP AoA locator application:</p><ol id="l18"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Create Bluetooth - NCP AoA locator project in Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Flash it to an EFR32xG22 device with an antenna array (that is, to a Silicon Labs Direction Finding board).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">The sample does not contain a bootloader. If you have not flashed any bootloader into your device, flash an xG22 bootloader sample app (for example <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\v3.1\platform\bootloader\sample-apps\boot- loader-storage-internal-single-512k\efr32mg22c224f512im40-brd4182a\ bootloader-storage-internal-single-512k.s37</i>).</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark16">Single AoA Locator Host Application</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The AoA locator host application is responsible for:</p><ul id="l19"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Controlling the stack, for example to find tags, connect to them, sync on periodic advertisings, and so on.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Initializing a buffer for IQ samples, and receiving the IQ samples from the stack.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Using the RTL library to calculate angles from the IQ samples (optional).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Publishing the angle/IQ report data to the MQTT broker.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Subscribing to a “correction” MQTT topic that contains its address.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The host application can be compiled in three variants: connection-based, connectionless, and Silicon Labs proprietary. Regardless of its type, the AoA host application provides a common interface for the angle data structure to the MQTT broker. A prototype of the angle data looks like:</p><p class="s13" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;azimuth&quot;: 60.0,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;elevation&quot;: 120.0,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;distance&quot;: 2.5,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;quality&quot;: 0,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&quot;sequence&quot;: 123</p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><ol id="l20"><ol id="l21"><ol id="l22"><li><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 35pt;line-height: 176%;text-align: left;"><a name="bookmark17">Building a Single AoA Locator Host Sample Application Windows</a><a name="bookmark23">&zwnj;</a></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">At the moment, the only supported build environment on Windows is MinGW-64. The makefiles make sure that the gcc is used with a proper prefix (<b>x86_64-w64-mingw32-</b>). The recommended build environment on Windows is <b>MSYS2</b>.</p><ol id="l23"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Download and install MSYS2:<a href="https://www.msys2.org/" style=" color: #0052CC; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank"> </a><a href="https://www.msys2.org/" class="s15" target="_blank">https://www.msys2.org/</a><a href="https://www.msys2.org/" class="s10" target="_blank">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open the Mintty bash. Make sure to start Mingw-w64 64 (<b>mingw64.exe</b>) when launching Mintty. 32-bit versions of MYSYS2 will not work.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Install additional packages.</p></li></ol><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pacman -S make mingw-w64-x86_64-gcc</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="211" height="127" alt="image" src="an1296-application-development-with-rtl-library/Image_012.jpg"/></span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="https://mosquitto.org/download/" class="s10" target="_blank">You must also install Mosquitto MQTT broker before compiling the host application. The makefile makes sure that it copies the necessary client library files from the installation directory. Download and install Mosquitto broker, if you have not done it yet: </a><span style=" color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt;">https://mos-</span><a href="https://mosquitto.org/download/" style=" color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank"> </a><a href="https://mosquitto.org/download/" class="s9" target="_blank">quitto.org/download/.</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To build the project:</p></li></ol></ol></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Change to the <i><b>example_host/aoa_locator </b></i>directory.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cd $GSDK_DIR/app/bluetooth/example_host/aoa_locator</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project using the following commands.</p><table style="border-collapse:collapse;margin-left:41pt" cellspacing="0"><tr style="height:19pt"><td style="width:115pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Connection type</p></td><td style="width:165pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Command</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connection-based</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connectionless</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn_less</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Silicon Labs proprietary</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make (default)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Linux</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The RTL library is built for Ubuntu 18 LTS 64-bit. The makefile is written so that it recognizes the Linux environment and automatically uses the Linux version of the RTL library.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To build the project:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Install mosquitto libraries if it&#39;s not installed yet.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">sudo apt install libmosquitto-dev</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Change to <i><b>example_host/aoa_locator </b></i>directory.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cd ~$GSDK_DIR/app/bluetooth/example_host/aoa_locator</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Build the project using the following commands.</p><table style="border-collapse:collapse;margin-left:41pt" cellspacing="0"><tr style="height:19pt"><td style="width:115pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Connection type</p></td><td style="width:165pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Command</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connection-based</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connectionless</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn_less</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Silicon Labs proprietary</p></td><td style="width:165pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make (default)</p></td></tr></table><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Raspberry Pi</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The RTL library is built for Raspbian 9. Cross compilation is not supported in the makefiles. Instead, there is a build target called <span class="s11">ex- port </span>that collects all the dependencies from the Bluetooth SDK into a folder called export created next to the makefile. Then only the export folder should be copied to the RPI, for example via an ssh connection by using scp. Follow these steps from the host computer with the Bluetooth SDK installed:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Change to the <i><b>example_host/aoa_locator </b></i>directory.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cd $GSDK_DIR/app/bluetooth/example_host/aoa_locator</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Export GSDK files.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">make export</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Copy exported GSDK files to the RPI&#39;s home folder.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">scp –r export pi@raspberrypi.local:~</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Start SSH connection with RPI</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="mailto:pi@raspberrypi.local" class="s19" target="_blank">ssh pi@raspberrypi.local</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Install mosquitto libraries if it&#39;s not installed yet.</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">sudo apt install libmosquitto-dev</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Change to the exported project folder</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cd ~/export/app/bluetooth/example_host/aoa_locator</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Build the project using the following commands.</p><table style="border-collapse:collapse;margin-left:41pt" cellspacing="0"><tr style="height:19pt"><td style="width:115pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Connection type</p></td><td style="width:158pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Command</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connection-based</p></td><td style="width:158pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">connectionless</p></td><td style="width:158pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make APP_MODE=conn_less</p></td></tr><tr style="height:20pt"><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Silicon Labs proprietary</p></td><td style="width:158pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt"><p class="s18" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">make (default)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The single AoA locator can be detached from the RTL library and thus does not have to calculate angle values. Instead, it can publish IQ reports directly to the MQTT broker. This can be done using the ANGLE make variable.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #D2D2D2;">make ~$GSDK_DIR/app/bluetooth/example_host/aoa_locator APP_MODE=&lt;conn_type&gt; ANGLE=0</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A prototype of the MQTT message in this case looks like:</p><p class="s13" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;channel&quot;: 13,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;rssi&quot;: -50,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;sequence&quot;: 123,</p><p class="s13" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;samples&quot;: [23, 105, 106, -10, 2, -108, ...]</p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><ol id="l25"><ol id="l26"><li><p class="s5" style="padding-top: 4pt;padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark18">Running a Single AoA Locator Host Sample Application</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">After the project is built, an executable file <span class="s11">aoa_locator.exe </span>is generated inside the <i><b>exe </b></i>folder. Run the application using the follow- ing command:</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><span class="s20" style=" background-color: #D2D2D2;">aoa_locator -t &lt;address&gt; | -u &lt;serial_port&gt; [-b &lt;baud_rate&gt;] [-m &lt;address&gt;[:&lt;port&gt;]] [-f &lt;handshake&gt;]</span><span class="s13"> </span><span class="s20" style=" background-color: #D2D2D2;">[-c &lt;config&gt;]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Options:</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-t <span class="p">Target TCP/IP connection parameters (if WSTK is connected via Ethernet).</span></p><p class="s11" style="padding-top: 8pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">&lt;address&gt; <span class="p">IP address of the WSTK board.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-u <span class="p">Target USB serial connection parameter (if WSTK is connected via USB).</span></p><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&lt;serial_port&gt; <span class="p">COM port (Windows) or device file (POSIX) to be opened</span></p><p class="s11" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">-b <span class="p">Baud rate can be given if the connection is established via serial port.</span></p><p class="s11" style="padding-top: 8pt;text-indent: 0pt;text-align: right;">&lt;baud_rate&gt; <span class="p">Baud rate of the serial connection (default: 115200)</span></p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-m <span class="p">MQTT broker connection parameters.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">&lt;address&gt; <span class="p">Address of the MQTT broker (default: localhost)</span></p><p class="s11" style="padding-top: 8pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">&lt;port&gt; <span class="p">Port of the MQTT broker (default: 1883)</span></p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-f <span class="p">Target flow control.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">&lt;handshake&gt;: <span class="p">0/1 (disabled/enabled). (default: 1)</span></p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-c <span class="p">Locator configuration file. It contains azimuth mask, and asset tag allowlist.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">&lt;config&gt;: <span class="p">Path to the configuration file. An example config file is provided in </span><span class="s4">aoa_locator/config/locator_config.json</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <b>azimuth mask </b>in the locator’s config file tells the estimator in which range NOT to search for the tag. For instance, if a locator is next to a wall, and the asset tag is to be searched in the room, then the locator should look for an Angle of Arrival in a 180° range instead of a 360° range. Similarly, if the locator is in the corner, it may be enough to search in a 90° angle range only. This improves both reliability and computation time. When the azimuth mask is configured, the RTL lib will set the weighting of the angle values inside the masked region to zero and will not return values inside the masked region. Instead, it chooses the next highest value outside the masked region.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The azimuth masks are independent of the coordinate system and are related to angle directions of each individual boards. 0°, 45°, 90°, 135°, 180°, -135°, -90°, and -45° directions are indicated on the antenna array board. Once you place the board, you can easily tell in which direction you want to search for the tag. Consider the following setup where the blue area is the desired tracking space. The red lines on the locators indicate the masked regions where the estimator will not search for the tag.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><span><img width="383" height="243" alt="image" src="an1296-application-development-with-rtl-library/Image_013.png"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Figure 3-2. Azimuth mask configuration</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">For this setup, the config files for each locator should look like this:</p><p class="s6" style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">aoa_locator/config_locato1.json aoa_locator/config_locato2.json aoa_locator/config_locator3.json</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 76pt;text-indent: -24pt;text-align: left;">&quot;azimuth_mask&quot;: { &quot;min&quot;: -180.0,</p><p class="s11" style="padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;max&quot;: 0.0</p><p class="s11" style="padding-left: 52pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 76pt;text-indent: -24pt;text-align: left;">&quot;azimuth_mask&quot;: { &quot;min&quot;: -180.0,</p><p class="s11" style="padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;max&quot;: 90.0</p><p class="s11" style="padding-left: 52pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 76pt;text-indent: -24pt;text-align: left;">&quot;azimuth_mask&quot;: { &quot;min&quot;: -90.0,</p><p class="s11" style="padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;max&quot;: 90.0</p><p class="s11" style="padding-left: 52pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">On the other hand, the <b>tag allowlist </b>in the config file tells the locator the list of asset tags to track. This improves the performance of the system by searching only asset tags that are only in the list.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you are using the MQTT Explorer to monitor the MQTT messages on your PC, make sure the port and host are configured as shown in the following figure:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 132pt;text-indent: 0pt;text-align: left;"><span><img width="424" height="241" alt="image" src="an1296-application-development-with-rtl-library/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 3-2. MQTT Explorer Configuration</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 95pt;text-indent: -36pt;text-align: left;"><a name="bookmark19">Connection-Based Single Locator Host Sample Application</a><a name="bookmark24">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A connection-based locator must:</p></li></ol></ol></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Find the asset tag by its advertisement.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Connect to the asset tag.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Discover the GATT database.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Enable CTE using the Constant Tone Extension Enable characteristic.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Send a CTE request and receive a CTE response.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Sample the CTE and store the IQ sample for processing.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">These are all done in the <span class="s11">app_conn.c </span>file of the <i><b>example_host/aoa_locator </b></i>sample project.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Once the IQ samples are available, the <i>angle </i>is calculated and published to the MQTT broker by calling <span class="s11">app_on_iq_report()</span>. This processing is done in <span class="s11">app.c </span>file. In the background, the <span class="s11">app_on_iq_report() </span>calls the <span class="s11">aoa_calculate() </span>API, which lever- ages the RTL library to calculate the angle. This is done in the <span class="s11">aoa.c </span>file.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The MQTT topic for the angle data has the format <span class="s11">silabs/aoa/angle/&lt;locator_id&gt;/&lt;tag_id&gt;</span>. The <span class="s11">locator_id </span>and <span class="s11">tag_id </span>are formed as <span class="s11">ble-&lt;ADDRESS_TYPE&gt;-&lt;BLE_ADDRESS&gt;</span><span class="s21">, </span>where <span class="s11">&lt;ADDRESS_TYPE&gt; </span>is either <span class="s11">sr </span>(for static random) or <span class="s11">pd </span>(for public device). <span class="s11">&lt;BLE_ADDRESS&gt; </span>is the 6-byte address without any separators, strictly using UPPERCASE letters.</p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test a connection-based single locator host sample application:</p><ol id="l27"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark11" class="s10">Flash a tag device (such as a Thunderboard BG22) with a bootloader and connection-based sample app as described in </a><a href="#bookmark11" class="a">2.1 Con- nection-Based Asset Tag </a><a href="#bookmark11">Sample Application.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark22" class="s10">Flash the NCP AoA locator board with the antenna array attached to a WSTK with a bootloader and the NCP AoA locator as described in </a><a href="#bookmark22" class="a">3.1 NCP AoA Locator Sample </a><a href="#bookmark22">Application.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark23" class="s10">Make sure you have the correct build environment: </a><a href="#bookmark23" class="a">3.2.1 Building a Single AoA Locator Host Sample </a><a href="#bookmark23" class="s10">Application</a><a href="#bookmark23">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark5" class="s10">Make sure you have installed Mosquitto MQTT broker: </a><a href="#bookmark5" class="a">1.4 </a><a href="#bookmark5">Prerequisites.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Navigate to the /app/bluetooth/example_host/aoa_locator folder</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open Mintty bash and build the project by executing <span class="s11">make APP_MODE=conn </span>inside the project directory.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open the <i>/exe </i>folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Attach the WSTK to the PC and find the port number of the virtual COM port over JLink, for example by opening a terminal program that lists serial ports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 183pt;text-indent: 0pt;text-align: left;"><span><img width="294" height="70" alt="image" src="an1296-application-development-with-rtl-library/Image_015.jpg"/></span></p></li><li><p style="padding-top: 6pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Start the host application from a command line with the COM port number, for example: <span class="s11">.\aoa_locator.exe -u COM57.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Alternatively, connect to your WSTK via Ethernet and start the application using its IP address, for example</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">./aoa_locator.exe -t 192.168.1.2</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application gets stuck at the beginning, push the reset button on the WSTK.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application exits at the beginning with an MQTT error, make sure that the mosquitto service is running in the background. For example, on Windows</p><ol id="l28"><li><p style="padding-top: 8pt;padding-left: 76pt;text-indent: -18pt;text-align: left;">Open the Task Manager.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If you see the simplified view, click “More details”.</p></li><li><p style="padding-left: 77pt;text-indent: -18pt;text-align: left;">Open the Services tab.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">Find the mosquitto service.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If it is stopped, right-click it, and click Start. If it is running, right-click it, and click Restart.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open MQTT Explorer for a structured overview of the MQTT messages (angle data). Now you should see something like this:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="522" height="164" alt="image" src="an1296-application-development-with-rtl-library/Image_016.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l29"><ol id="l30"><ol id="l31"><li><p class="s5" style="padding-left: 94pt;text-indent: -36pt;text-align: left;"><a name="bookmark20">Connectionless Single Locator Host Sample Application</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">CTEs can also be received in Bluetooth periodic advertisements. In this case, the CTE receiver (the locator) must:</p></li></ol></ol></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Find the asset tag by its advertisement.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Sync on the periodic advertisement.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Sample the CTE and store the IQ sample for processing.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">These are all done in the <span class="s11">app_conn_less.c </span>file of the <i><b>example_host/aoa_locator </b></i>sample project.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Once the IQ samples are available, the <i>angle </i>is calculated and published to the MQTT broker by calling <span class="s11">app_on_iq_report()</span>. This processing is done in <span class="s11">app.c </span>file. In the background, the <span class="s11">app_on_iq_report()</span>calls <span class="s11">aoa_calculate() </span>API, which leverages the RTL library to calculate the angle. This is done in <span class="s11">aoa.c </span>file.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The MQTT topic for the angle data has the format <span class="s11">silabs/aoa/angle/&lt;locator_id&gt;/&lt;tag_id&gt;</span>. The <span class="s11">locator_id </span>and <span class="s11">tag_id </span>are formed as <span class="s11">ble-&lt;ADDRESS_TYPE&gt;-&lt;BLE_ADDRESS&gt;</span><span class="s21">, </span>where <span class="s11">&lt;ADDRESS_TYPE&gt; </span>is either <span class="s11">sr </span>(for static random) or <span class="s11">pd </span>(for public device). <span class="s11">&lt;BLE_ADDRESS&gt; </span>is the 6-byte address without any separators.</p><p class="s5" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test a connectionless single locator host application:</p><ol id="l32"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark12" class="s10">Flash a tag device (such as Thunderboard BG22) with a bootloader and connectionless sample app as described in </a><a href="#bookmark12" class="a">2.2 Connection- less Asset Tag Sample Application</a><a href="#bookmark12" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark22" class="s10">Flash the NCP AoA locator board with the antenna array attached to a WSTK with a bootloader and the NCP AoA locator as described in </a><a href="#bookmark22" class="a">3.1 NCP AoA Locator Sample </a><a href="#bookmark22">Application.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark23" class="s10">Make sure you have the correct build environment: </a><a href="#bookmark23" class="a">3.2.1 Building a Single AoA Locator Host </a><a href="#bookmark23" class="s10">Sample Application</a><a href="#bookmark23">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark5" class="s10">Make sure you have installed Mosquitto MQTT broker: </a><a href="#bookmark5" class="a">1.4 </a><a href="#bookmark5">Prerequisites.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Navigate to the /app/bluetooth/example_host/aoa_locator folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open Mintty bash and build the project by executing <span class="s11">make APP_MODE=conn_less </span>inside the project directory.</p></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Open the <i>/exe </i>folder.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Attach your WSTK to the PC and find the port number of the virtual COM port over JLink, for example by opening a terminal program that lists serial ports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 183pt;text-indent: 0pt;text-align: left;"><span><img width="294" height="70" alt="image" src="an1296-application-development-with-rtl-library/Image_017.jpg"/></span></p></li><li><p style="padding-top: 6pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Start the host application from a command line with the COM port number, for example: <span class="s11">.\aoa_locator.exe -u COM57.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Alternatively, connect to the WSTK via Ethernet and start the application using its IP address, for example:</p><p class="s11" style="padding-top: 3pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">./aoa_locator.exe -t 192.168.1.2</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application gets stuck at the beginning, push the reset button on the WSTK.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application exits at the beginning with an MQTT error, make sure that the mosquitto service is running in the background. For example, on Windows:</p><ol id="l33"><li><p style="padding-top: 7pt;padding-left: 76pt;text-indent: -18pt;text-align: left;">Open the Task Manager.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If you see the simplified view, click “More details”.</p></li><li><p style="padding-left: 77pt;text-indent: -18pt;text-align: left;">Open the Services tab.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">Find the mosquitto service.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If it is stopped, right-click it, and click Start. If it is running, right-click it, and click Restart.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open MQTT Explorer for a structured overview of the MQTT messages (angle data). Now you should see something like this:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="522" height="164" alt="image" src="an1296-application-development-with-rtl-library/Image_018.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l34"><ol id="l35"><ol id="l36"><li><p class="s5" style="padding-left: 94pt;text-indent: -36pt;text-align: left;"><a name="bookmark21">Silicon Labs Proprietary Single Locator Host Sample Application</a></p></li></ol></ol></ol><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">CTEs can also be received in extended advertising. In this approach, the receiver (that is, the locator) must:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Find the asset tag by its advertisement.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Sample CTE and store the IQ sample for processing.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">These are all done in the <span class="s11">app_silabs.c </span>file of the <i><b>example_host/aoa_locator </b></i>sample project.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Once the IQ samples are available, the <i>angle </i>is calculated and published to the MQTT broker by calling <span class="s11">app_on_iq_report()</span>. This processing is done in <span class="s11">app.c </span>file. In the background, the <span class="s11">app_on_iq_report()</span>calls <span class="s11">aoa_calculate() </span>API, which leverages the RTL library to calculate the angle. This is done in <span class="s11">aoa.c </span>file.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The MQTT topic for the angle data has the format <span class="s11">silabs/aoa/angle/&lt;locator_id&gt;/&lt;tag_id&gt;</span>. The <span class="s11">locator_id </span>and <span class="s11">tag_id </span>are formed as <span class="s11">ble-&lt;ADDRESS_TYPE&gt;-&lt;BLE_ADDRESS&gt;</span>, where <span class="s11">&lt;ADDRESS_TYPE&gt; </span>is either <span class="s11">sr </span>(for static random) or <span class="s11">pd </span>(for public device). <span class="s11">&lt;BLE_ADDRESS&gt; </span>is the 6-byte address without any separators.</p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To test Silicon Labs proprietary single locator host application:</p><ol id="l37"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark13" class="s10">Flash a tag device (such as a Thunderboard BG22) with a bootloader and connectionless sample app as described in </a><a href="#bookmark13" class="a">2.3 Silicon Labs Proprietary Asset Tag Sample Application</a><a href="#bookmark13" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark22" class="s10">Flash the NCP AoA locator board with the antenna array attached to a WSTK with a bootloader and the NCP AoA locator as described in </a><a href="#bookmark22" class="a">3.1 NCP AoA Locator Sample Application</a><a href="#bookmark22" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark23" class="s10">Make sure you have the correct build environment: </a><a href="#bookmark23" class="a">3.2.1 Building a Single AoA Locator Host Sample Application</a><a href="#bookmark23" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark5" class="s10">Make sure you have installed Mosquitto MQTT broker: </a><a href="#bookmark5" class="a">1.4 Prerequisites</a><a href="#bookmark5" class="s10">.</a></p></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Navigate to the /app/bluetooth/example_host/aoa_locator folder.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Open Mintty bash and build the project by executing <span class="s11">make </span>inside the project directory.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open the <i>/exe </i>folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Attach your WSTK to the PC and find the port number of the virtual COM port over JLink, for example by opening a terminal program that lists serial ports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 183pt;text-indent: 0pt;text-align: left;"><span><img width="294" height="70" alt="image" src="an1296-application-development-with-rtl-library/Image_019.jpg"/></span></p></li><li><p style="padding-top: 6pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Start the host application from a command line with the COM port number, for example: <span class="s11">.\aoa_locator.exe -u COM57</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Alternatively, connect to the WSTK via Ethernet and start the application using its IP address, for example:</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">./aoa_locator.exe -t 192.168.1.2</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application gets stuck at the beginning, push the reset button on the WSTK.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the application exits at the beginning with an MQTT error, make sure that the mosquitto service is running in the background. For example, on Windows:</p><ol id="l38"><li><p style="padding-top: 8pt;padding-left: 76pt;text-indent: -18pt;text-align: left;">Open the Task Manager.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If you see the simplified view, click “More details”.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">Open the Services tab.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">Find the mosquitto service.</p></li><li><p style="padding-left: 76pt;text-indent: -18pt;text-align: left;">If it is stopped, right-click it, and click Start. If it is running, right-click it, and click Restart.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open MQTT Explorer for a structured overview of the MQTT messages (angle data). Now you should see something like this:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="522" height="164" alt="image" src="an1296-application-development-with-rtl-library/Image_020.png"/></span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Silicon Labs proprietary approach supports scalability up to hundreds of asset tags. This approach uses the proprietary Silicon Labs CTE protocol, which improves the scalability and has low memory consumption on the AoA receiver, even with hundreds of tags. In practice this approach can support an unlimited number of tags, although a large number of tags may result in collisions on the advertising channels.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In contrast, the Connection-based and Connectionless standard solutions need more memory for the stack to keep information related to the connection status and periodic advertising syncs, respectively. Also, establishing connections or periodic advertising syncs can be time consuming, and therefore puts an absolute limit on the number of tags (about 1-50 tags on a xG22 device).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When tracking more than one tag, it is strongly recommended to disable application debug logging, as it can accumulate latencies and significantly impact the system’s real-time tracking performance.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To disable the logs, open <span class="s11">app_log_config.h </span>in <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;ver- sion&gt;\app\bluetooth\common_host\app_log\config </i>and make the following change:</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">#define APP_LOG_ENABLE 0</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In addition, when tracking more than one tag, it is important to increase the CTE advertising interval from the default value (which is 20 ms) to at least 100 ms to prevent the locator’s UART from being congested, and more importantly avoid packet collisions. The advertising interval can be changed using the project configurator via <i>Bluetooth &gt; GATT &gt; Constant Tone Extension GATT Service (Silabs proprie- tary) </i>and changing the value from 32 to 160.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 104pt;text-indent: 0pt;text-align: left;"><span><img width="498" height="119" alt="image" src="an1296-application-development-with-rtl-library/Image_021.png"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 3-2. Configuring Silabs CTE advertising interval</p></li></ul></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark25">Multi-Locator Sample Application</a><a name="bookmark32">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">A single antenna array can give a rough estimation of the position of an asset, given that the distance can be determined from the RSSI or is constrained. However, to determine the location of an asset tag with high accuracy multiple locators are needed. Each of the locators can determine the Angle-of-Arrival of the asset, from which the position of the asset tag can be calculated using triangulation.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Bluetooth SDK v3.x provides a unified host application (<i><b>example_host/aoa_multilocator </b></i>) to demonstrate direction finding using multi-locators.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="614" height="449" alt="image" src="an1296-application-development-with-rtl-library/Image_022.jpg"/></span></p><p class="s5" style="padding-top: 8pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-1. Multi-Locator AoA Architecture</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The multi-locator host application must:</p><ul id="l39"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Parse a JSON configuration file containing the orientation and coordinates of each individual locators.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Initialize an MQTT client and subscribe to topics created by each locator.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Upon arrival of MQTT messages:</p><ul id="l40"><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -18pt;text-align: left;">feed the IQ reports to the RTL library (optional).</p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -18pt;text-align: left;">feed the angle objects to the RTL library</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Get the position (x, y, z) of the tag and publish it to the MQTT broker.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Publish “correction” feedback MQTT messages about the expected angles so that deviating locators can take into account the feed- back and apply the corrections.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">These are all done in the <span class="s11">app.c </span>file of the <i><b>example_host/aoa_multilocator </b></i>project. Note that the angle data is agnostic to the type of the CTE transmission mode used by the locators (that is, connection-based, connectionless, or Silicon Labs proprietary). This offers great flexibility and possibilities to have different locator types in the same infrastructure. From the multi-locator host perspective, ideally, a tag can send CTEs for two different locator types (for instance, connection-based locator and Silicon Labs proprietary locator), and the angle data coming from both can be used to estimate the position of the tag accurately.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Like the single locator case, where the NCP AoA locator and AoA locator host can be decoupled in space, the multi-locator host also does not necessarily need to run on the same machine. It can basically run on any machine (a PC or Cloud). In fact, the multi-locator host does not need to know the IP addresses of each locator, as the communication takes place using the MQTT protocol. The MQTT Publish/subscribe communication model provides great flexibility and has none of the disadvantages inherent to the client/server archi- tecture.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">However, to locate a tag, the multi-locator host application needs to know the ID of each locator, their position relative to a local coordinate system, and their orientation with respect to the X, Y, and Z axis. This information is provided to the multi-locator host using a JSON config file during runtime. Using the locators’ ID, the multi-locator host determines the topics that it will subscribe to at the MQTT broker.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l41"><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark26">Locator Configuration</a></p><p style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">The multi-locator configuration file has a simple JSON format that has a name/value pair of the locators’ IDs, coordinates, and orientations.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark24" class="s10">The locator’s ID is generated from its Bluetooth address, as described in section </a><a href="#bookmark24" class="a">3.2.2 Connection-Based Single Locator Host Sample Application</a>. The Bluetooth address of the locator can be learned in many ways. One way is to start the <i>aoa_locator </i>sample app, which logs the Bluetooth address of the locator at the beginning.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In addition to the locators’ ID, the multi-locator application must know the positions (coordinates), and orientation of each locator on the local coordinate system. Moreover, azimuth angle mask can also be provided via each locator’s configuration file to improve both reliability and computation time, as described later in this section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l42"><ol id="l43"><ol id="l44"><li><p class="s5" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark27">Locator Coordinates</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The coordinates are relative to a local coordinate system. The origin of the coordinate system and the orientation of the coordinate system are arbitrary. The only constraint is that it must be right-handed Cartesian (so that if x is pointing right, y is pointing up, as in the following image), and the unit of distance must be meter. The position of each locator board must be understood as the position of the center of the antenna array relative to the origin. The following image provides an example how the positions of the boards must be given (each board is assumed to be the same height, z=0):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span><img width="443" height="318" alt="image" src="an1296-application-development-with-rtl-library/Image_023.jpg"/></span></p><p class="s5" style="padding-top: 8pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-2. Locator Coordinate Configuration</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The configuration file for the above setup looks like this:</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&quot;id&quot;: &quot;multilocator_test_room&quot;, &quot;locators&quot;: [</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">&quot;id&quot;: &quot;ble-sr-111111111111&quot;,</p><p class="s11" style="padding-top: 7pt;padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 2.2,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-222222222222&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 2.8,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 2.2,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-333333333333&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 2.8,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.6,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;line-height: 11pt;text-align: left;">]</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark28">Locator Orientations</a></p></li></ol></ol></ol><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">After defining the position (that is, coordinates) of the locator boards, it is very important to define their orientation (rotation), as well. The calculated Angle of Arrival is always relative to the coordinate system of the board, not to the local coordinate system. Therefore, the</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">orientation of the boards must be known, so that the RTL library can transform the angles to align with the local coordinate system. The coordinate system of the locator board looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 193pt;text-indent: 0pt;text-align: left;"><span><img width="267" height="225" alt="image" src="an1296-application-development-with-rtl-library/Image_024.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-3. Locator Board Orientation on the X, Y, Z Axes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">If the board is positioned so that the axes of this coordinate system are parallel to the axes of the local coordinate system, the rotation (orientation) does not need to be defined. In any other case, the orientation relative to this default state must be defined. (Note that in the previous image, the patch antennas are facing upward, the <i>z </i>axis is also pointing upward, and the <i>x </i>axis is pointing to the 0° direction as marked on the board.)</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The orientation of the board is defined by three values: <i>x, y, </i>and <i>z</i>. Here <i>x </i>means that the board is rotated around the X axis by <i>x </i>degrees. Similarly, <i>y </i>and <i>z </i>mean that the board is rotated around the Y / Z axis by <i>y </i>/ <i>z </i>degrees. Positive values mean that the board is rotated to the positive direction, that is counterclockwise, when the given axis is pointing towards you. The center of the antenna array board should stay at the same point while rotating.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following image gives a very simple example of how the orientation should be defined. Here two boards are rotated around the z axis by 90°and -90°. (Note that patch antennas of the boards are facing upward.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 191pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="247" alt="image" src="an1296-application-development-with-rtl-library/Image_025.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-4. Orientation Definition Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In this case, the configuration file should look like this:</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&quot;id&quot;: &quot;multilocator_test_room&quot;, &quot;locators&quot;: [</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-sr-111111111111&quot;,</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;coordinate&quot;: {</p><p class="s11" style="padding-top: 7pt;padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-222222222222&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 1.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 90.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-333333333333&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 1.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: -90.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;line-height: 11pt;text-align: left;">]</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">It may easily happen that the board must be rotated around multiple axes to get from the default orientation to its actual orientation. In this case it is important to consider that:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">The rotations must be done in Z – Y – X order while proceeding from the default orientation to the actual orientation.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">The axes are also rotated with the board, so at the 2nd rotation the new state of axes must be considered.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following images give some examples for this scenario. Assume the board is facing upside down, and its 0° direction is pointing in the direction of the y axis of the local coordinate system. To get this orientation from the default orientation, the board has to be rotated 90° around its z axis first, then 180° around its x axis:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="540" height="149" alt="image" src="an1296-application-development-with-rtl-library/Image_026.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-5. Locator Board Orientation for an Upside-Down Position— 0° Direction Pointing in the Direction of the Y Axis</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Similarly, if the board is facing upside down, and its 0° direction is pointing in the opposite direction as the y axis of the local coordinate system, then the board has to be rotated -90° around its z axis first, then 180° around its x axis:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 89pt;text-indent: 0pt;text-align: left;"><span><img width="545" height="162" alt="image" src="an1296-application-development-with-rtl-library/Image_027.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-6. Locator Board Orientation for and Upside-Down Position— 0° Direction Pointing in the Direction Opposite to the Y Axis</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following image gives a simple example of how the orientation should be defined for a system with antenna arrays facing down:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><span><img width="280" height="252" alt="image" src="an1296-application-development-with-rtl-library/Image_028.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-7. Example Showing the Values of Orientation Parameters of Three Locators Positioned Upside Down</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following two images show two recommended setups for testing purposes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">(a) <span><img width="261" height="172" alt="image" src="an1296-application-development-with-rtl-library/Image_029.png"/></span><span class="s23">                             </span>(b) <span><img width="271" height="169" alt="image" src="an1296-application-development-with-rtl-library/Image_030.png"/></span></p><p class="s5" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-8. Recommended Setup of Multi-Locators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The simplest setup (a) is when four locators are placed on the four corners of a table, facing up. In this case the tag should be located above the plane of the table, since the antenna arrays “see” only upward. If the locators are rotated to the same direction, then all orientation parameters will be 0 in the config file.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A slightly more realistic use case is the second case (b), when the antennas are either fixed on the ceiling or standing on tripods, facing down. This ensures a better line of sight in any room. The recommended distance between the antennas is 3-5 m. In this case the tag should be found under the antenna array, and since the antenna arrays are facing down, the orientation parameter for either <i>x </i>or <i>y </i>of each of them should be set to 180° in the config file.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following configuration shows a practical setup for the above scenario. The setup consists of four locators which are in square formation at a height of 2+ meters, rotated upside-down. The locators can be, for example, mounted onto the ceiling or on stands. The evaluation setup has four locators in order to provide best possible positioning and ensure that effects of multipath are minimal in the position calculation, as most often at least three of the locators give correct angle estimations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 134pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="560" alt="image" src="an1296-application-development-with-rtl-library/Image_031.png"/></span></p><p class="s5" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">Figure 4-9. Example Setup for Evaluation of Position Calculation Using Four Locators Mounted on the Ceiling of a Room</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&quot;id&quot;: &quot;multilocator_evaluation_setup&quot;, &quot;locators&quot;: [</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-111111111111&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 2.6</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 180.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-top: 7pt;padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-222222222222&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 4.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 2.6</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 180.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-333333333333&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 4.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 2.6</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 180.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">},</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;id&quot;: &quot;ble-pd-444444444444&quot;,</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;coordinate&quot;: { &quot;x&quot;: 4.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 4.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 2.6</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">},</p><p class="s11" style="padding-left: 70pt;text-indent: -12pt;text-align: left;">&quot;orientation&quot;: { &quot;x&quot;: 180.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;y&quot;: 0.0,</p><p class="s11" style="padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&quot;z&quot;: 0.0</p><p class="s11" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">}</p><p class="s11" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">},</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;line-height: 11pt;text-align: left;">]</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l45"><li><p class="s5" style="padding-top: 4pt;padding-left: 58pt;text-indent: -36pt;text-align: left;"><a name="bookmark29">AoA Configurator Tool</a><a name="bookmark33">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It can, at times, be a daunting task to determine the orientations of locator boards, especially when the boards are rotated over multiple axes to suit the set-up environment. To simplify this process, Bluetooth SDK v3.2 has introduced the AoA Configurator Tool. Using this tool, you can add as many locators as you have, drag them to the position you want, and even rotate them to the best orientation that is suitable for your setup. The output of the tool can be saved to a JSON file which can then be used by the multi-locator application.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To generate a multi-locator configuration file using the AoA Configurator Tool</p><ol id="l46"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Create a project using SSv5 (for instances, <i>Bluetooth - NCP AoA locator</i>).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Go to <b>File &gt; New &gt; Other </b>(steps 1 and 2 in the figure below).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">When the new wizard opens, select <b>AoA Configurator file </b>and click <b>Next </b>(step 3 and 4).</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Browse to the project created above (step5). Note that the project needs to be writable and should be opened in SSv5.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Enter a filename (it should have the <i>.aoaconf </i>extension) and click <b>Finish </b>(step 6 and 7).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="660" height="198" alt="image" src="an1296-application-development-with-rtl-library/Image_032.png"/></span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">After the AoA configuration file is created SSv5 opens it in a new window automatically. In this window, you can:</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Add a new locator button 8.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Translate the axes of a locator using button 9.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Rotate a locator using button 10.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Select a locator, edit a locator&#39;s ID, delete a locator using buttons in 11.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Manually edit a locator’s coordinates, and orientations using button in 12.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="594" height="258" alt="image" src="an1296-application-development-with-rtl-library/Image_033.png"/></span></p></li><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Save and close the file.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">Open the file in a text editor, and copy its content to your multilocator_config.json file. Alternatively, you can copy the *.aoaconf file to your /aoa_multilocator/config director and rename it with *.json extension.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 22pt;text-indent: 0pt;line-height: 18pt;text-align: justify;"><a name="bookmark30">Testing the Multi-Locator Sample App To test the multi-locator host application</a></p><ol id="l47"><li><p style="padding-top: 4pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;"><a href="#bookmark10" class="s10">Flash a tag device (such as a Thunderboard BG22) with a bootloader and the asset tag sample project of your choice as described in </a><a href="#bookmark10" class="a">2 Bluetooth - SoC AoA Asset Tag</a><a href="#bookmark10" class="s10">.</a> In a multi-locator scenario connectionless or Silicon Labs proprietary mode is highly recom- mended.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;"><a href="#bookmark22" class="s10">Flash one or more NCP AoA locator boards with the antenna arrays attached to WSTKs with a bootloader and the NCP AoA locator as described in </a><a href="#bookmark22" class="a">3.1 NCP AoA Locator Sample Application</a><a href="#bookmark22" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark23" class="s10">Make sure you have the correct build environment: </a><a href="#bookmark23" class="a">3.2.1 Building a Single AoA Locator Host Sample </a><a href="#bookmark23">Application</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a href="#bookmark5" class="s10">Make sure you have installed Mosquitto MQTT broker: </a><a href="#bookmark5" class="a">1.4 Prerequisites</a><a href="#bookmark5" class="s10">.</a></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Navigate to the /app/bluetooth/example_host/aoa_locator folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open Mintty bash and build the project by executing <span class="s11">make APP_MODE=&lt;conn_type&gt; </span>inside the project directory. Where</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&lt;conn_type&gt; <span class="p">is the connection type of your choice: </span>conn<span class="p">, </span>conn_less<span class="p">, or </span>silabs<span class="p">.</span></p><p style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">If you want the aoa_locator to publish IQ reports to MQTT broker but do not calculate angle value, replace the above command with:</p><p class="s11" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">make APP_MODE=&lt;conn_type&gt; ANGLE=0</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">Attach the WSTKs to the PC either by USB or Ethernet.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">Open the <i><b>example_host/aoa_locator/exe </b></i>folder and start the host application for each locator with their USB COM or IP address, for example <span class="s11">.\aoa_locator.exe -u COM57</span>.</p><p style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">If you want to apply constraints for a given locator, as specified in a locator_config.json file, also provide the locator config file as a parameter, for example <span class="s11">.\aoa_locator.exe -u COM57 -c ../config/locator_config1.json</span>. The apps started for each locator must run simultaneously, so you will need more command prompts. For more accurate results, use at least four locators in your setup.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Navigate to the <b>/app/bluetooth/example_host/aoa_multilocator </b>folder.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open Mintty bash and build the project by executing <span class="s11">make</span>. If you want the aoa_multilocator application to receive IQ reports, and calculate angle and position values, execute <span class="s11">make ANGLE=1 </span>instead.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Find the default multi-locator configuration file under <i>/app/bluetooth/example_host/aoa_multilocator/config/multilocator_config.json</i></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">and modify it according to the IDs, coordinates, and orientations of your locators.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Start the multi-locator host application from a command line with the config file as parameter, for example</p><p class="s11" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">.\exe\aoa_multilocator.exe -c .\config\multilocator_config.json<span class="p">.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">If the MQTT broker is not using the default host:port parameters, configure it with the -m switch, just like in the case of the <i>aoa_locator</i></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">sample app.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Open the MQTT Explorer to monitor the angle and position data. You should see something like the following.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;text-align: left;"><span><img width="557" height="235" alt="image" src="an1296-application-development-with-rtl-library/Image_034.png"/></span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">By default, the multi-locator application runs with a feedback mechanism enabled. The feedback mechanism provides a “correction” for a deviating locator whose angle reports are far off the expected one, and thus is not pointing to the same direction where all other locators see the tag. The correction feedback provides the single locator with the information in which direction it is supposed to see the tag. This helps locators that locked up on a reflection signal which is stronger than the one coming in the line-of sight direction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="555" height="220" alt="image" src="an1296-application-development-with-rtl-library/Image_035.png"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-10. Multi-locator Feedback Mechanism</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If you want to run the application without the feedback mechanism, start the multi-locator application on the command line with the “<span class="s11">-n</span>” flag:</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">.\exe\aoa_multilocator.exe -c .\config\multilocator_config.json -n<span class="p">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The multi-locator application does not print logs to the console. This was opted out intentionally to avoid the overhead of printf which can cause significant delay, especially if there are several tags updating angle and position information to multiple locators.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When tracking more than one tag, it is important to increase the CTE advertising interval from the default value (which is 20 ms) to at least 100 ms as shown below to prevent the locators’ UART from being congested, and more importantly avoid packet collisions. In this case, the estimation interval of the multi-locator application in <span class="s11">app_config.h </span>should also be changed accordingly.</p><p class="s13" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">// Estimation interval in seconds.</p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">// This value should approximate the time interval between two consecutive CTEs #define ESTIMATION_INTERVAL_SEC 0.1f // changed from default value 0.02f</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a name="bookmark31">Note that each CTE packet contains a 16-bit event counter. The multi-locator host application uses this value to calculate the positions of an asset tag by matching IQ samples with similar event counter. In connection mode, however, since event counters for different connections are different, the multi-locator will not give any results. Thus, the connection mode should not be used to test the multi-locator application.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 58pt;text-indent: -36pt;text-align: left;">Visualization Script for Silicon Labs Multi-Locator Sample Application</p></li></ol></li></ul></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth SDK also provides a Python script to visualize the results of the multi-locator application, since it would be extremely hard to see through the textual results when following many tags.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The visualization script is a separate application that collects the data (that is the x, y, z coordinates of the tags) by subscribing to the topic where the <i>aoa_multilocator </i>sample app publishes the position estimation results (x, y, z coordinates). Therefore, it is also an example for the <i>user application </i><a href="#bookmark32" class="s10">as depicted in the figure at the beginning of section </a><a href="#bookmark32" class="a">4 Multi-Locator Sample Application</a><a href="#bookmark32" class="s10">.</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The images below show how the 2D and 3D modes should look in the visualization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 152pt;text-indent: 0pt;text-align: left;"><span><img width="372" height="267" alt="image" src="an1296-application-development-with-rtl-library/Image_036.jpg"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-11. The Position of One Asset Tag Being Plotted in the 2D View</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 147pt;text-indent: 0pt;text-align: left;"><span><img width="387" height="291" alt="image" src="an1296-application-development-with-rtl-library/Image_037.jpg"/></span></p><p class="s5" style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-12. Positions of two tags and one locator shown in the 3D view</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The 3D view also supports drawing simple 3D objects such as tables and shelves, as seen on the right in the above figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 147pt;text-indent: 0pt;text-align: left;"><span><img width="387" height="263" alt="image" src="an1296-application-development-with-rtl-library/Image_038.jpg"/></span></p><p class="s5" style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">Figure 4-13. One of the Locators Shown in the 3D View</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The locators are placed in the environment as given in the locator configuration file, so the visualization can be used to confirm that the configuration file matches the real-world setup. The front of the locator array (the side on which the patch antennas are located) is labeled as FRONT and the back of the locator is labeled BACK.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The visualization script can be found in the Gecko SDK Suite under:</p><p class="s4" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">/app/bluetooth/example_host/aoa_multilocator_gui</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following settings are configurable in the visualization script:</p><ul id="l48"><li><p class="s5" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">PLOT_VIEW_3D (0/1)<span class="p">: Toggle 3D view. If disabled, uses 2D view. Note that the 3D view requires more processing and can slow down the tags’ visual update rate. It is suggested to use the 2D mode for better responsiveness and the 3D mode for debugging or better but slower visualization.</span></p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">PLOT_TAG_ADDRESSES (0/1)<span class="p">: Toggle plotting of the tags’ Bluetooth addresses next to their dots.</span></p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;"><b>PLOT_ROOM (0/1)</b>: Toggle plotting of objects defined in <span class="s11">plot_room() </span>function in 3D mode.</p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;">PLOT_DEBUG_LINES (0/1)<span class="p">: Toggle plotting visual lines from locators to tags in 3D mode. The number of lines to be drawn can be configured with the parameters MAX_NUM_TAG_LINES and MAX_NUM_LOCATOR_LINES.</span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">PLOT_DEBUG_LOCATORS (0/1)<span class="p">: Toggle plotting the locator arrays into the environment in 3D mode. This can be useful to ensure the locator configuration file matches with the actual setup.</span></p></li><li><p class="s5" style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">PLOT_MARKER_TRACES (0/1)<span class="p">: Toggle plotting marker traces. Marker traces are trailing dots that show the previous positions of tags. Number of trace markers to plot at once can be configured by setting self.numMarkerTraces to the desired value.</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Setting up the visualization environment</p><ol id="l49"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Make sure Python 3.7 is installed in your environment. The version should be exactly 3.7, as Python 2.x or 3.8 will not work.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Install the following packages to your Python 3.7 installation using for example pip</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">py -3.7 -m pip install &lt;package name&gt; <span class="p">or </span>python3.7 -m pip install &lt;package name&gt;</p><ul id="l50"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">pyqtgraph</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">pyqt5==5.14.0 (this exact version for Linux)</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">pyopengl</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">numpy</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">Pillow</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">paho-mqtt</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">If the previous package installations fail, try running the follow commands:</p><ul id="l51"><li><p class="s11" style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">python3.7 -m pip install –upgrade pip</p></li><li><p class="s11" style="padding-left: 51pt;text-indent: -14pt;text-align: left;">python3.7 -m pip install –upgrade setuptools</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">If installation of one of the previous packages cannot be done, the Python visualization may not work properly. Consider running in pipenv or docker in that case.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Running the multi-locator sample app with visualization</p><ol id="l52"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a href="#bookmark33" class="s10">Follow the instructions in section 4.2 </a>Testing the Multi-Locator Sample App to get the multi-locator app up and running.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Ensure that the Python environment is set up correctly as per the instructions above.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Open a command prompt and navigate to the folder /apps/bluetooth/example_host/aoa_multilocator_gui</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Run the visualization script with either of the following commands:</p><p class="s11" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">py -3.7 app.py</p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">or</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">python3.7 app.py</p></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: justify;">Note that the visualization script also needs the multi-locator config file to be able to display the locators and to be able to subscribe to the appropriate topics at the MQTT broker. If you do not use the default multilocator_config.json file found under /app/buetooth/ex- ample_host/aoa_multilocator/config, then define its location with the -c switch as for the aoa_multilocator sample app:</p><p class="s11" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">py -3.7 app.py -c ./../aoa_multilocator/config/my_config.json</p></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Similarly, if you are not using the default MQTT host:port settings, then define them using the -m switch.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Now you should be able to see the GUI start, displaying the locators and tags.</p></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note that 3D mode may have significantly worse performance with more than three locators and more than five tags, and default intervals are used. In this case it is strongly recommended to use the 2D mode or to significantly increase the connection/advertisement intervals.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When tracking more than one tag using multiple locators, it is strongly recommended to disable the debug logs of the host applications, as logging can accumulate latencies and significantly impact the system’s real-time tracking performance. This is particularly evident if the <i>aoa_locator </i>and <i>aoa_multilocator </i>applications are running on the same machine.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To disable the logs, open <span class="s11">app_log_config.h </span>in <i>C:\SiliconLabs\SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;ver- sion&gt;\app\bluetooth\common_host\app_log\config </i>and make the following change:</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">#define APP_LOG_ENABLE 0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s25" style="padding-top: 14pt;padding-left: 36pt;text-indent: 0pt;line-height: 122%;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="432" alt="image" src="an1296-application-development-with-rtl-library/Image_039.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:63.94pt" cellspacing="0"><tr style="height:99pt"><td style="width:98pt" bgcolor="#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;"><span><img width="66" height="66" alt="image" src="an1296-application-development-with-rtl-library/Image_040.png"/></span></p><p style="padding-top: 10pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/solutions/iot" class="s26">IoT Portfolio</a></p><p style="padding-top: 1pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/IoT" class="s27">www.silabs.com/IoT</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/simplicity" class="s26">SW/HW</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/simplicity" class="s27">www.silabs.com/simplicity</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/about-us/corporate-responsibility/commitment-to-quality" class="s26">Quality</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s27">www.silabs.com/quality</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/community" class="s26" target="_blank">Support &amp; Community</a></p><p style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.silabs.com/community" class="s27">www.silabs.com/community</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1296-application-development-with-rtl-library/Image_041.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1296-application-development-with-rtl-library/Image_042.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1296-application-development-with-rtl-library/Image_043.png"/></span></p><p class="s28" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s29" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s30">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s30">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s30">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><span class="s32">information, visit </span><a href="https://www.silabs.com/about-us/inclusive-lexicon-project" class="s34" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s32" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s35" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s29">Silicon Laboratories Inc.</span>®<span class="s29">, Silicon Laboratories</span>®<span class="s29">, Silicon Labs</span>®<span class="s29">, SiLabs</span>® <span class="s29">and the Silicon Labs logo</span>®<span class="s29">, Bluegiga</span>®<span class="s29">, Bluegiga Logo</span>®<span class="s29">, Clockbuilder</span>®<span class="s29">, CMEMS</span>®<span class="s29">, DSPLL</span>®<span class="s29">, EFM</span>®<span class="s29">, EFM32</span>®<span class="s29">, EFR, Ember</span>®<span class="s30">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s29">, EZLink</span>®<span class="s29">, EZRadio</span>®<span class="s29">, EZRadioPRO</span>®<span class="s29">, Gecko</span>®<span class="s29">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s29">, Precision32</span>®<span class="s29">, ProSLIC</span>®<span class="s29">, Simplicity Studio</span>®<span class="s29">, SiPHY</span>®<span class="s29">, Telegesis, the Telegesis Logo</span>®<span class="s29">, USBXpress</span>® <span class="s29">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s29">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1296-application-development-with-rtl-library/Image_044.png"/></span></p><p class="s32" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s32" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">www.silabs.com</h3></p></body></html>
