<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1299: Understanding the Silicon Labs Bluetooth Mesh SDK v2.x Lighting Demonstration</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 24pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s8 { color: #4F81BC; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: #4F81BC; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: #007693; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .a, a { color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s14 { color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s16 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s18 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s19 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s20 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s21 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s23 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s25 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s27 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s28 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h3 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d3 1; }
 #l4> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10 {padding-left: 0pt;counter-reset: f1 1; }
 #l10> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l11 {padding-left: 0pt;counter-reset: d3 1; }
 #l11> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13 {padding-left: 0pt; }
 #l13> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14 {padding-left: 0pt; }
 #l14> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="127" height="62" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 11pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">AN1299: Understanding the Silicon Labs <i>Bluetooth® </i>Mesh SDK v2.x Lighting            <span><img width="37" height="37" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_002.png"/></span><span class="s2"> </span>Demonstration</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="214" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">KEY FEATURES</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="216" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s4" style="padding-left: 14pt;text-indent: -7pt;text-align: left;">Short introduction to Bluetooth mesh</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 14pt;text-indent: -7pt;text-align: left;">Lighting example application description and code walkthrough</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 14pt;text-indent: -7pt;text-align: left;">Silicon Labs Bluetooth mesh mobile appli- cation</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh SDK comes with an example project that creates a wireless network of lights and switches using Bluetooth mesh technology. The example assumes usage of Silicon Labs WSTKs for switches and lights and an Android or iOS mobile phone for provisioning and controlling the network. In this document, we discuss the basics of Bluetooth mesh required to understand the example, and walk through key aspects of the application source code.</p><p style="padding-top: 9pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This document assumes you have read <i>QSG176: Bluetooth Mesh SDK v2.x Quick-Start Guide, </i>installed the Bluetooth mesh SDK, and successfully run the examples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><span><img width="436" height="301" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 4pt;padding-left: 131pt;text-indent: 0pt;text-align: center;">Bluetooth LE and Mesh Stacks and Supported Topologies</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l2"><li><h4 style="padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark0">Introduction</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document explains the Bluetooth mesh lighting demo, installed as part of the Bluetooth mesh SDK. Most of the documentation focuses on the example application and its usage flow, explaining key parts of the source code and the Silicon Labs Bluetooth Mesh mobile application. This document also introduces some concepts of the specification that are important for understanding the example.</p><p class="s9" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="#bookmark12" class="s11">The following subsections briefly go through the relevant aspects of the Bluetooth mesh technology. Section </a><a href="#bookmark12" class="s8">2 Bluetooth Mesh Lighting </a>Demonstration <a href="#bookmark14" class="s11">describes the features and functions of the Lighting Demonstration, section </a><a href="#bookmark14" class="s8">3 </a>Network Analyzer <a href="#bookmark16" class="s11">describes using Network Analyzer for packet capture, and section </a><a href="#bookmark16" class="s8">4 </a>Bluetooth Mesh Stack and Application for Smartphones <span style=" color: #000;">focuses on the mobile application.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark1">Bluetooth Mesh</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth mesh is a new topology available for Bluetooth LE devices and applications. Previously Bluetooth devices have been using point-to-point connectivity or broadcasting topologies to communicate with other devices. Bluetooth mesh extends that and allows both many-to-many device communications and using Bluetooth devices in a mesh topology. This enables multi-hop communications between Bluetooth devices and much larger-scale Bluetooth device networks than have been possible previously.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Bluetooth mesh uses Bluetooth LE advertising channels to send and receive messages between the Bluetooth mesh nodes, but it can also use Bluetooth connections and GATT services to communicate with devices that do not natively support Bluetooth mesh.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth mesh also uses its own security architecture, which is separate from the normal Bluetooth LE security architecture, although the same AES-CCM 128-bit and Elliptic Curve Diffie Hellman (ECDH) security algorithms are used.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth mesh also defines its own application layer called mesh model which is different than the GATT-based profiles and services that non-mesh Bluetooth LE devices use. The new application layer was defined to address the requirements and needs of mesh-based topologies and also to make Bluetooth mesh a full stack solution and enable interoperable mesh devices to be built.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark2">Bluetooth Mesh Network Roles and Node Features</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh network typically consists of multiple nodes. All nodes can transmit and receive mesh messages, but they can optionally also support one or more additional features. If a node does not implement any of the additional features, it is considered just a node. Various node types are illustrated in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 165pt;text-indent: 0pt;text-align: left;"><span><img width="342" height="324" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_007.jpg"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 131pt;text-indent: 0pt;text-align: center;">Figure 1-1: Node Types</p><p class="s10" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_008.png"/></span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The four types of specified node features are as follows:</p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Proxy feature<span class="p">: Enables message proxy between Bluetooth mesh and GATT, and enables devices such as smartphones to connect to Bluetooth mesh.</span></p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Relay feature<span class="p">: Relays messages to extend the range and scale of a Bluetooth mesh network.</span></p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Friend feature<span class="p">: Implements an additional message cache to support nodes with the low power feature.</span></p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Low power feature<span class="p">: Allows sleeping and polling of messages from friend nodes at known time intervals.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/products/wireless/learning-center/bluetooth/bluetooth-mesh" class="s11" target="_blank">For further information on these features and Bluetooth mesh technology, please go to the Silicon Labs </a><a href="http://www.silabs.com/products/wireless/learning-center/bluetooth/bluetooth-mesh" class="a" target="_blank">Bluetooth mesh learning center</a><a href="http://www.silabs.com/products/wireless/learning-center/bluetooth/bluetooth-mesh" class="s11" target="_blank">.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark3">Provisioning</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Provisioning refers to the operation where devices that are not part of any Bluetooth mesh network are transformed into nodes that are part of one or more Bluetooth mesh networks. For example, provisioning happens when a new light bulb is installed and taken into use, so it can be controlled by switches or dimmers.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Provisioning is mainly a security process where the first level security keys are generated by the provisioner and transferred to the device that is being provisioned to make it part of a Bluetooth mesh network.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The provisioning process begins when a device starts to send unprovisioned Bluetooth beacon packets and the provisioner receives them. The provisioner then initiates the provisioning process, the devices exchange public keys, and both generate session keys. The session keys are used to secure the session, in the transfer of the actual network key, and the rest of the provisioning process. After provisioning, each device, now a node in the network, has the network key, a security parameter called the IV index, and its unicast address.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark4">Publish and Subscribe</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In Bluetooth mesh, communication to a group of devices is typically implemented through a publish and subscribe mechanism. This is an easy-to-understand concept which also simplifies the setup of Bluetooth mesh networks and adding and reconfiguring nodes.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Usually the Bluetooth mesh nodes are configured into groups, which may represent their physical location (kitchen or living room) or specific function (lights or window coverings). Usually the devices are also controlled as groups, so the same message is sent to all devices in a group. To accomplish this functionality, Bluetooth mesh uses a concept called publish – subscribe, where nodes, such as lights, subscribe to messages groups and nodes, like switches, publish messages to those groups. At the network layer, each group is assigned a group address, and multicast messaging is used to send the messages to all devices in a specific group.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><span><img width="432" height="191" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_009.jpg"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 131pt;text-indent: 0pt;text-align: center;">Figure 1-2: Publish and Subscribe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The benefit of publish and subscribe is that, when a new node is added or an existing node is removed or replaced, only that node needs to be provisioned and configured.</p></li></ol></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark5">Bluetooth Mesh Lighting Demonstration</a><a name="bookmark12">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s7" style="padding-top: 10pt;padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark6">Requirements</a></p><ul id="l6"><li><p style="padding-top: 6pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="https://www.silabs.com/developers/simplicity-studio" class="a" target="_blank">Simplicity </a><a href="https://www.silabs.com/developers/simplicity-studio" target="_blank">Studio</a></p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 73pt;text-indent: -14pt;text-align: left;">Bluetooth Mesh SDK 2.1.0 or later, distributed through Simplicity Studio 5.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">The pre-built demo binaries and source code are included in the SDK.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Simplicity Studio has a network analyzer capable of capturing and decoding Bluetooth mesh packets.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">The actual code development can be done with Simplicity Studio, IAR EWARM, or command line tools.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="https://www.silabs.com/developers/bluetooth-mesh-mobile-app" class="a" target="_blank">Silicon Labs Bluetooth mesh mobile </a><a href="https://www.silabs.com/developers/bluetooth-mesh-mobile-app" target="_blank">application</a></p><ul id="l8"><li><p style="padding-top: 3pt;padding-left: 73pt;text-indent: -14pt;text-align: left;">Available for both iOS and Android.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Used for discovering and provisioning devices over GATT.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Includes network, group, and publish-subscribe setup.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Allows device configuration and control.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Requires iOS 10 or later.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">Requires Android 6 (API23) or later.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">For the full experience, at least three<a href="https://www.silabs.com/development-tools/wireless/bluetooth/efr32bg-bluetooth-soc-starter-kit" class="s13" target="_blank"> </a><a href="https://www.silabs.com/development-tools/wireless/bluetooth/efr32bg-bluetooth-soc-starter-kit" class="a" target="_blank">Silicon Labs Blue Gecko SoC Wireless Starter Kits</a> are needed.</p><ul id="l9"><li><p style="padding-top: 3pt;padding-left: 73pt;text-indent: -14pt;text-align: left;">2 kits are used as lights with proxy feature.</p></li><li><p style="padding-left: 73pt;text-indent: -14pt;text-align: left;">1 kit is used as a switch.</p></li><li><p class="s14" style="padding-left: 73pt;text-indent: -14pt;text-align: justify;">	<span class="p">EFR32BG12, EFR32MG12, EFR32BG13, EFR32MG13, EFR32xG21, and EFR32xG22 SoCs as well as the BGM13P, BGM13S, BGM220P, and BGM220S modules support Bluetooth mesh software. Note that EFR32xG22, BGM220P, and BGM220S only support limited Bluetooth mesh features.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">See <i>QSG176: Bluetooth Mesh SDK v2.x Quick-Start Guide </i>for more information on obtaining required hardware and software, and run- ning the demonstration.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The demonstration setup can, in principle, consist of any number of switch nodes and light nodes. A single switch node can control an arbitrary number of light nodes by sending commands to a group address. Similarly, a light node can receive on/off commands from multiple switches.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li></ul></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark7">Mesh Network Implementation</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The demonstration implementation process can be divided into four main phases as follows:</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Unprovisioned mode – After the demo firmware is installed, the device starts in unprovisioned mode.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Provisioning – The devices are provisioned to a Bluetooth mesh network and network security is set up.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Configuration – The group, publish and subscribe, and application security are configured.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -18pt;text-align: left;">Normal operation – The light node(s) can be controlled by the switch node(s) and the smartphone application.</p></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In the first phase, all the devices are unprovisioned and transmitting unprovisioned beacons. They do not have any network keys or application keys configured, and publish and subscribe settings are not set. In this state, the devices are simply waiting for the provisioner to assign them into a Bluetooth mesh network and to configure publish and subscribe and mesh models. In this state, the devices can be detected by the smartphone application.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In the provisioning phase, the provisioner adds lights and switches to the Bluetooth mesh network. A network key is generated and distributed to the nodes, and each node is assigned a unicast address.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In the configuration phase, the provisioner configures groups, publish and subscribe settings, application-level security, and mesh models.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">After provisioning and configuration, the Bluetooth mesh network is operational, and switches can be used to control the lights. The WSTK switch’s buttons can be used to control all the lights in a group. The same functionality can be done with the smartphone application, and it can also control individual lights using unicast addressing.</p></li><li><p class="s7" style="padding-top: 7pt;padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark8">Code Walkthrough</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh SDK includes light and switch example projects, named <b>Bluetooth Mesh – SoC Light </b>and <b>Bluetooth Mesh – SoC Switch</b>. Both examples are implemented using the same event-driven architecture that is used in plain Bluetooth (non-mesh) applications.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark9">For information about Bluetooth C application development, see </a><i>UG434: Silicon Labs Bluetooth® C Application Developer&#39;s Guide for SDK v3.x</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;">Unprovisioned Mode, Provisioning, and Configuration</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In unprovisioned mode, both light and switch examples behave the same way. The unprovisioned device simply starts sending unprovi- sioned beacons and waits for a provisioner to provision and configure it.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">After receiving the <span class="s15">system_boot </span>event (<span class="s15">sl_bt_evt_system_boot_id</span>), the application checks if a button is pressed. If yes, it calls the function <span class="s15">sl_btmesh_initiate_full_reset()</span>, which halts the system and performs a factory reset by erasing PS storage. The factory reset is also done after receiving a <span class="s15">node_reset </span>event (<span class="s15">sl_btmesh_evt_node_reset_id</span>). If no button is pressed, then the name of the device is set based on the Bluetooth address, and the function <span class="s15">sl_btmesh_node_init() </span>is called to initialize the Bluetooth mesh node stack.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The event <span class="s15">sl_btmesh_evt_node_initialized_id </span>indicates that the Bluetooth mesh node stack initialization is complete. When this event is raised, the callback function <span class="s15">sl_btmesh_on_provision_init_status() </span>is called to provide information about the node status. The application first checks the provisioning status. If the node is not provisioned (the default state when the device is first powered up after programming), then the application starts unprovisioned beaconing by calling <span class="s15">sl_btmesh_node_start_unprov_beacon- ing()</span>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The API <span class="s15">sl_btmesh_node_start_unprov_beaconing </span>takes one parameter (<span class="s15">bearer</span>) that selects which bearers are used (PB-ADV, PB-GATT, or both). In this example, both bearers are used. Because the PB-GATT bearer is enabled, the device will begin advertising its provisioning GATT service. This allows the smartphone application to detect unprovisioned nodes.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When unprovisioned beaconing has been started, the application waits for the provisioner (in this case, the smartphone app) to start provisioning. The start of provisioning is indicated with the event <span class="s15">sl_btmesh_evt_node_provisioning_started_id. </span>When this event is raised, the callback function <span class="s15">sl_btmesh_on_node_provisioning_started() </span>is called.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">During provisioning, no actions are required from the user application. The Bluetooth mesh stack automatically handles network key configuration and other operations. Both the light and the switch application simply start blinking the two LEDs on the WSTK to indicate that provisioning is in progress. Then they wait for the event <span class="s15">sl_btmesh_evt_node_provisioned_id </span>that indicates provisioning is complete. When this event is raised, the callback function <span class="s15">sl_btmesh_on_node_provisioned() </span>is called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="696" height="316" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 131pt;text-indent: 0pt;text-align: center;">Figure 2-1: Life Cycle of the Application</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The next step after provisioning is configuration of the node. As explained in <i>QSG176: Bluetooth Mesh SDK v2.x Quick-Start Guide</i>, the smartphone app is used to configure a node either as a switch or a light and assign it to a group. The configuration procedure consists of following steps:</p><ul id="l12"><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Provisioner distributes an application key to the node.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">The application key is bound to the selected Bluetooth mesh model.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Publish address and settings are configured.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Subscribe address and settings are configured.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The configuration phase is mostly handled between the Bluetooth mesh stack and the provisioner and it does not require any involvement from the user application in the node. The following events are generated by the stack to give status information about the ongoing configuration:</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_evt_node_key_added_id: <span class="p">generated when the provisioner has sent a new key (network or application)</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_evt_node_model_config_changed_id: <span class="p">indicates that the provisioner has modified configuration of the local model (either publish or subscribe settings changed)</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Up to this point, the code in the examples <b>Bluetooth Mesh – SoC Light </b>and <b>Bluetooth Mesh – SoC Switch </b>is almost identical.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: justify;"><a name="bookmark10">Switch Node Example</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This section describes basic operation of the <b>Bluetooth Mesh – SoC Switch </b>example<b>. </b>It is assumed that the node is already provisioned and publish - subscribe settings have been configured by the smartphone app. The switch node has one simple task: listen for push- button presses and, based on the button press length, control the brightness, color temperature, or on/off state of the lights in the group or recall previously stored scenes. Short button presses (less than 250 ms) are used to adjust light brightness up (PB1) and down (PB0). Medium button presses (more than 250 ms and less than 1 s) are used to adjust light color temperature up (PB1) and down (PB0). A long press (more than 1 s and less than 5 s) turns the light on (PB1) or off (PB0). A very long press (more than 5 s) recalls scene number 1 (PB0) or scene number 2 (PB1).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The on/off control uses the <b>Generic OnOff Client </b>model, the brightness control uses the <b>Light Lightness Client </b>model, the color tem- perature control uses the <b>Light CTL Client </b>model, and the scene recalls use the <b>Scene Client </b>model (see the Bluetooth Mesh Model specification for more details on the Scene model). The switch example also demonstrates the <b>Low Power Node </b>(LPN) feature. When the switch is provisioned into the network, it will start looking for a friend so that it can enter low-power mode. When a friendship is established, the switch can go to deep sleep, and it will wake up periodically to poll the friend node for any incoming messages.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Upon receiving the <span class="s15">sl_btmesh_evt_node_initialized_id </span>event, the Light CTL Client, the Lighting Client, the Scene Client, and the mesh library are initialized. The <b>Low Power Node </b>(LPN) feature is then initialized and configured. After the LPN feature is initialized, the callback function <span class="s15">sl_btmesh_lpn_on_init() </span>is called and the application displays “LPN on” on the WSTK LCD. The LPN config- uration has five parameters: <span class="s15">lpn_queue_length</span>, <span class="s15">lpn_poll_timeout</span>, <span class="s15">lpn_receive_delay</span>, <span class="s15">lpn_request_retries</span>, and <span class="s15">lpn_retry_interval</span>. The settings of these parameters are defined in <span class="s15">sl_btmesh_lpn_config.h </span>as <span class="s15">LPN_MIN_QUEUE_LENGTH</span>, <span class="s15">LPN_POOL_TIMEOUT</span>, <span class="s15">LPN_RECEIVE_DELAY</span>, <span class="s15">LPN_REQUEST_RETRIES</span>, and <span class="s15">LPN_RETRY_INTERVAL</span>, respectively. After that, the node starts finding a friend node. The LPN feature status is displayed on the WSTK LCD display.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The LPN feature is mostly implemented in the mesh stack, so only a few informative events can be raised to the application through corresponding callback functions:</p><ul id="l13"><li><p class="s15" style="padding-top: 2pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_lpn_on_friendship_established<span class="p">: A friendship was successfully established. The application displays “LPN with friend” on the WSTK LCD.</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_lpn_on_friendship_failed<span class="p">: The Friendship establishment failed. The application displays “No friend” on the WSTK LCD, and the node tries to establish a friendship again in 2 seconds.</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_lpn_on_friendship_terminated<span class="p">: The friendship was terminated for some reason. The application displays “Friend lost” on the WSTK LCD, and the node tries to establish a friendship again in 2 seconds.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If a GATT connection is opened, the friendship is terminated and the LPN is de-initialized. In this case, the callback function <span class="s15">sl_btmesh_lpn_on_deinit() </span>is called, and the application displays “LPN off” on the WSTK LCD. After all GATT connections are closed, the LPN feature is re-initialized.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s15">sl_btmesh_change_lightness() </span>function changes the lightness level and sends its value to the server for short button presses. Short presses are used to adjust light brightness up and down. The application sends a request using the <b>Light Lightness </b>model. The last level that has been set is stored in a variable (type <span class="s15">uint16</span>), and the level is adjusted up or down each time a short button press is detected.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Sending a single light lightness request is implemented in function <span class="s15">send_lightness_request()</span>, which is very similar to the <span class="s15">send_on- off_request() </span>that is used for on/off requests. Both of these use the same API <span class="s15">mesh_lib_generic_client_publish() </span>to publish the request. The differences are in the model ID that is passed as argument and the parameter data type.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <span class="s15">sl_btmesh_change_temperature() </span>function changes the color temperature and sends its value to the server for medium button presses. Medium presses are used to adjust light color temperature up and down. The application sends a request using the <b>Light CTL </b>model. The last temperature that has been set is stored in a variable (type <span class="s15">uint16</span>), and the temperature is adjusted up or down each time a medium button press is detected.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Sending a single light CTL request is implemented in function <span class="s15">send_ctl_request()</span>, which is very similar to <span class="s15">send_lightness_re- quest() </span>that is used for light brightness requests. Both of these use the same API <span class="s15">mesh_lib_generic_client_publish() </span>to publish the request. The differences are in the model ID that is passed as argument and the parameter data type.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s15">sl_btmesh_change_switch_position() </span>function changes the switch position and sends its value to the server for long button presses. For each long button press, the application publishes three consecutive on/off requests to the group address that has been set by the smartphone app. The request is sent multiple times for increased reliability. Note that it is the application’s responsibility to choose a suitable strategy for reliable communications. In this example, multiple application message transmissions were chosen. Retransmis- sions can also be configured to be added automatically at the network level.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Sending a single on/off request is implemented in the function <span class="s15">send_onoff_request()</span>. A soft timer is used to trigger three calls to</p><p class="s15" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">send_onoff_request() <span class="p">with a 50 ms delay between each call.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The mesh stack API used to send one on/off transaction is <span class="s15">mesh_lib_generic_client_publish()</span>. This is a common API used to publish data for several client models. It is not limited to the generic on/off client only. For example, publishing data as a generic transition time client would be done using the same API. The first parameter <span class="s15">model_id </span>selects which model is being used.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In addition to the desired on/off status, the publish API has some additional parameters such as <b>transaction identifier</b>, <b>transition time</b>, and <b>delay</b>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The transaction identifier is a running number that is incremented for each transaction. In this example, each on/off state change triggers three consecutive on/off requests. The transaction identifier is the same for each of these requests so that, at the receiving end, duplicate requests can be filtered out. In other words, all three published messages are part of the same transaction, and they will trigger only one event at the receiving light node.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The delay parameter can be used to indicate that the on/off transition should not be executed immediately but after a given delay. In this example, the delay parameter is set to values of 100 ms / 50 ms / 0 in the first, second, and third request, respectively. The purpose is to ensure that all lights in the target group change their state simultaneously, regardless of which of the three on/off requests was captured on the receiving side.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s15">sl_btmesh_select_scene() </span>function selects the scene and sends its value to the server for very long button presses. Very long presses are used to recall scenes. The application sends a request using the <b>Scene Client </b>model.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Sending a single scene recall request is implemented in function <span class="s15">send_scene_recall_request()</span>, which is similar to other requests. The difference is that it uses a dedicated API <span class="s15">sl_btmesh_scene_client_recall() </span>for publishing. This function is generally used for sending scene recall requests. If the destination address is set to the prohibited address 0, the function publishes the recall message.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The application code that implements the light switch functionality is relatively simple because many aspects are automatically handled by the mesh stack. For example, the switch node does not need to know anything about the light nodes that it is controlling. Any number of light nodes can be subscribed to the on/off requests that are published by the switch node.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The switch node does not need to know the group address that has been configured by the provisioning application. It simply publishes the on/off requests using the API <span class="s15">mesh_lib_generic_client_publish()</span>, and the stack automatically sends the requests using the group address that has been configured by the provisioner.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark11">Light Node Example</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This section describes basic operation of the <b>Bluetooth Mesh – SoC Light </b>example<b>. </b>It is assumed that the node is already provisioned and that the publish and subscribe settings have been configured by the smartphone app.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The main feature of the light node is that the development kit LEDs are turned on or off based on the requests that are received from switch nodes or from the smartphone application. The brightness of the LEDs can also be controlled. The On/off control is based on the Bluetooth mesh Generic OnOff model, and the brightness control is based on the Light Lightness model. The Light CTL model supports color temperature requests. Color temperature changes are shown on the WSTK LCD display. The light node also supports the friend feature. It can establish a friendship with a low-power switch node in the network so that the switch node can enter low-power mode.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The light node supports the following states:</p><ul id="l14"><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic OnOff</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic Level</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic OnPowerUp</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic Default Transition Time</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light Lightness</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light CTL</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Scenes</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">All Light LC states</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">All Light LC Property states</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Upon receiving the <span class="s15">sl_btmesh_evt_node_initialized_id </span>event, the Lighting Server, the Light CTL Server, the Light LC Server, the Scene Server, the Scheduler Server, the Time Server, and the mesh library are initialized. The mesh library is an adaptation layer between the mesh stack and the application code that enables using multiple models with a small set of generic API calls.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To support all the states listed above, the light node must store its internal state permanently so that it is preserved over reboots and power cycles. The Lighting Server holds Generic and Light Lightness states in the <span class="s15">lightbulb_state </span>struct. The Light CTL Server holds Light CTL states in the <span class="s15">lightbulb_state </span>struct. The Light LC Server holds Light LC states in the <span class="s15">lc_state </span>struct and Light LC Property states in the <span class="s15">lc_property_state </span>struct. The state information is also held in the stack.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The light state initialization is implemented in <span class="s15">sl_btmesh_lighting_server_init() </span>and <span class="s15">sl_btmesh_ctl_server_init()</span>. The OnPowerUp state enables configuration of the default state after power is applied to the light node. The possible settings are listed below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">OnPowerUp Setting</p></td><td style="width:436pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description (light node)</p></td></tr><tr style="height:15pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">OFF</p></td><td style="width:436pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Light is off after power up</p></td></tr><tr style="height:15pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ON</p></td><td style="width:436pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Light is on after power up</p></td></tr><tr style="height:15pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">RESTORE</p></td><td style="width:436pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The state before light was powered down is restored at next power up</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 183%;text-align: left;">The transition time model makes it possible to configure how long it takes for the light to transition from one state to another. The <span class="s15">lightbulb_state </span>struct in the Lighting Server contains the following fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Struct Member Name</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">onoff_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current state of light (ON or OFF)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">onoff_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target state of light (ON or OFF)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">transtime</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Default transition time</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">onpowerup</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Light state after power up (possible values OFF/ON/RESTORE)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current brightness (possible values from 0 to 65535)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target brightness</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_last</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Last non-zero brightness</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_default</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Default brightness</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_min</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Minimum lightness value</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_max</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Maximum lightness value</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">pri_level_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current generic level on primary element (possible values from -32768 to 32767)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">pri_level_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target generic level on primary element</p></td></tr></table><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s15">lightbulb_state </span>struct in the Light CTL Server contains the following fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Struct Member Name</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">temperature_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current color temperature (possible values from 800 to 20000)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">temperature_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target color temperature</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Struct Member Name</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">temperature_default</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Default color temperature</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">temperature_min</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Minimum color temperature</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">temperature_max</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Maximum color temperature</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">deltauv_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current value of delta UV (possible values from -32768 to 32767)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">deltauv_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target value of delta UV</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">deltauv_default</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Default value of delta UV</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">sec_level_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current generic level on secondary element (possible values from -32768 to 32767)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">sec_level_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target generic level on secondary element</p></td></tr></table><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">After that, LC (Light Controller) models are initialized in <span class="s15">sl_btmesh_lc_init()</span>. See the Bluetooth Mesh Model specification for more details on the LC model.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s15">lc_state </span>struct contains following fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Struct Member Name</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">mode</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current Light LC Mode state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">occupancy_mode</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current Light LC Occupancy Mode state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">light_onoff</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current Light LC OnOff state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">onoff_current</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Current generic state of LC (ON or OFF)</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">onoff_target</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Target generic state of LC (ON or OFF)</p></td></tr></table><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s15">lc_property_state </span>struct contains the following fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23.25pt" cellspacing="0"><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Struct Member Name</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_occupancy_delay</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Delay between receiving a sensor occupancy message and changing the Light LC Occupancy state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_fade_on</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Transition time from a standby state to a run state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_run_on</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Duration of the run state after last occupancy was detected</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_fade</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Transition time from a run state to a prolong state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_prolong</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Duration of the prolong state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_fade_standby_auto</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Transition time from a prolong state to a standby state when the transition is automatic</p></td></tr><tr style="height:25pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">time_fade_standby_manual</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Transition time from a prolong state to a standby state when the transition is triggered by a manual operation</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_on</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Lightness level in a run state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_prolong</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Lightness level in a prolong state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">lightness_standby</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Lightness level in a standby state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ambient_luxlevel_on</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Required Ambient LuxLevel level in the Run state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ambient_luxlevel_prolong</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Required Ambient LuxLevel level in the Prolong state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ambient_luxlevel_standby</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Required Ambient LuxLevel level in the Standby state</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">regulator_kiu</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Integral coefficient of PI light regulator when increasing output</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">regulator_kid</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Integral coefficient of PI light regulator when decreasing output</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">regulator_kpu</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Proportional coefficient of PI light regulator when increasing output</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">regulator_kpd</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Proportional coefficient of PI light regulator when decreasing output</p></td></tr><tr style="height:15pt"><td style="width:125pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">regulator_accuracy</p></td><td style="width:415pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Accuracy of PI light regulator</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Both structs are used for saving and restoring the LC states between the resets. Most of the LC functionality is implemented in the stack, so events are mostly used for saving state and informative purposes. The application uses the <span class="s15">sl_btmesh_evt_lc_server_lin- ear_output_updated_id </span>event to update the LED state according to the LC output value generated by the light controller based on the LC properties, state, and received sensor readings.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The friend functionality is then initialized to enable the friend feature implemented in the stack. After successful initialization, friend re- quests from Low Power Nodes can be accepted. The friend feature is mostly implemented in the stack, so after initialization only a few informative events can be raised to the application through corresponding callback functions:</p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_friend_on_friendship_established<span class="p">: a friendship was established. The application displays “FRIEND” on the WSTK LCD and/or in UART logs.</span></p></li><li><p class="s15" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">sl_btmesh_friend_on_friendship_terminated<span class="p">: the friendship was terminated. The application displays “NO LPN” on the WSTK LCD and/or in UART logs.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Next, the Scene Server and Scene Setup Server models are initialized. The Scene Server behaviors are implemented in the stack, so the application receives only informative events. The Scene Server automatically recalls Light LC states and generates the <span class="s15">sl_btmesh_evt_generic_server_state_recall_id </span>event to inform other models what states are stored with the scene.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The light node registers callback functions for each of the supported models. This is done by calling the <span class="s15">mesh_lib_ge- neric_server_register_handler() </span>function. The function has five parameters: the model ID, the element index, the client request handler function, the server state change handler function, and the server state recall handler function.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The light node registers handlers for the following models in the Lighting Server:</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic OnOff Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic PowerOnOff Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic Default Transition Time Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light Lightness Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light Lightness Setup Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic Level Server (on primary element)</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The light node registers handlers for the following models in the Light CTL Server:</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light CTL Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light CTL Setup Server</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Light CTL Temperature Server (on secondary element)</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic Level Server (on secondary element)</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The light node registers handlers for the following model in the Light LC Server:</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Generic OnOff Server (on secondary element)</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On the server side, the mesh library works as follows. When any generic request from a client is received, the event <span class="s15">sl_btmesh_evt_generic_server_client_request_id </span>is raised. The application then calls the function <span class="s15">mesh_lib_ge- neric_server_event_handler </span>from the mesh library and passes the event as the parameter. The mesh library decodes the model ID from the event and invokes the callback function that has been registered for that model.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">For example, in the light node, a Generic OnOff request will invoke the callback function <span class="s15">onoff_request()</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s15">onoff_request() </span>function is called whenever an on/off request is received either from one of the switch nodes or from the smartphone app. This is the piece of code in the light node that turns lights on and off.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If the request does not specify any transition time or delay, then the light state is changed immediately. Alternatively, the client may have requested a delay and/or a transition time, meaning that the transition does not happen instantly. In that case, the light node application starts a soft timer with the given delay. The light state is not changed until the soft timer expires.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Light Lightness requests are handled in function <span class="s15">lightness_request()</span>. The lightness request includes a parameter of type <span class="s15">uint16 </span>that indicates the light brightness on a scale of 0 – 65535. The example code uses pulse-width modulation (PWM) to drive the LEDs. The PWM is implemented using a 16-bit timer and the requested brightness value is directly mapped to the value of the Compare/Capture register of the timer. For example, the value 32768 will result in 32768/65536 ~ 50% brightness / PWM duty cycle. The duty cycle of the PWM signal is displayed on the LCD so that it is easy to compare the brightness that has been requested and the brightness that is currently set in the light node.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Generic OnOff state is bound with the Light Lightness state. This means that, if the light is turned off with an on/off request, the last brightness value is saved by the application and is recovered after the application receives an on/off request that turns the light on. If</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">brightness is set to 0 using lightness request, the generic on/off state is set to OFF. If brightness is set to a positive value, the generic on/off state is set to ON.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Brightness can be also changed using Generic Level requests handled in function <span class="s15">pri_level_request()</span>. The generic level request includes a parameter of type <span class="s15">int16 </span>that indicates brightness level. The conversion from level to lightness is made by adding 32768 to the level value.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Light CTL requests are handled in function <span class="s15">ctl_request()</span>. The CTL request includes three parameters that indicate the light bright- ness, color temperature, and delta UV. The first two parameters are of type <span class="s15">uint16</span>, and the third is of type <span class="s15">int16</span>. Actual color temper- ature and delta UV are displayed on the WSTK LCD below the lightness. Color temperature is limited by spec to scale 800 – 20000 K. Limits can be changed by <span class="s15">ctl_setup_request() </span>with type of request set to <i>ctl_temperature_range</i>. Also the default values for CTL state could be changed using <span class="s15">ctl_setup_request() </span>with type of request set to <i>ctl_default </i>.</p><p class="s10" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Network Analyzer</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_011.png"/></span></p></li></ol></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark13">Network Analyzer</a><a name="bookmark14">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Network Analyzer is a packet capture, decoder software, and visualization application and is part of Silicon Labs Simplicity Studio. Net- work Analyzer has support for Bluetooth LE and Bluetooth mesh packet capture, and the latest version of Simplicity Studio also has decoders to decode the Bluetooth LE and mesh traffic. Refer to AN1317: Network Analyzer for Bluetooth Low Energy and Mesh for more information.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The EFR32 SoCs have a dedicated Packet Trace Interface (PTI), which outputs all the radio traffic sent and received by a specific EFR32 device, and Network Analyzer can capture this traffic. On the EFR32, the PTI functionality can be enabled or disabled at the source-code level so it can be enabled during development and can then be disabled for production software.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Silicon Labs Wireless Starter Kits (WSTKs) support PTI packet capture either over USB, which is useful for capturing packets from a few WSTKs at a time, or over an Ethernet connection. The Ethernet connection also provides access to PTI, and this functionality enables building and debugging a network of WSTKs and large-scale testing environments for Bluetooth mesh.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The easiest way to start a Network Analyzer session for a specific application is to right-click on a project, select <b>Profile As </b>and then select <b>Network Analyzer Target</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="712" height="382" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_012.jpg"/></span></p><p class="s7" style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;text-align: center;">Figure 3-1: Starting Silicon Labs Network Analyzer</p><p class="s10" style="padding-bottom: 2pt;padding-left: 317pt;text-indent: 0pt;text-align: left;">Bluetooth Mesh Stack and Application for Smartphones</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_013.png"/></span></p></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark15">Bluetooth Mesh Stack and Application for Smartphones</a><a name="bookmark16">&zwnj;</a></h4></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Silicon Labs also provides a Bluetooth mesh stack and a reference application for smartphones. The application can be used to provision mesh-capable Bluetooth devices as nodes that are part of a Bluetooth mesh network, as well as configure the nodes, set up groups, and the publish subscribe settings for nodes. At the time of writing this document, the application supports one physical network, multiple groups, and Lighting mesh models, but the application will be constantly updated for new features and functionality.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As the smartphones at the time of writing this document do not natively support Bluetooth mesh, Silicon Labs also provides the Bluetooth mesh stack for the phones. The mesh stack is needed for the phone to be able to provision, configure, and control the Bluetooth mesh nodes over the GATT bearer. The figure below illustrates the architecture and the relationship between the Bluetooth stack on the phone operating system and the Silicon Labs Bluetooth mesh stack, as well as how the application relates to this.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Bluetooth mesh stack will be available as a binary library for phone application developers. A reference application implementing the Bluetooth mesh stack, provisioning, configuration, and device control is available on the Google Play and Apple App Stores.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Contact your local Silicon Labs sales office for more information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="413" height="442" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_014.gif"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 131pt;text-indent: 0pt;text-align: center;">Figure 4-1: Bluetooth Stacks and Application Architecture on Smartphones</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s18" style="padding-top: 14pt;padding-left: 36pt;text-indent: 0pt;line-height: 122%;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="432" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_015.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:63.94pt" cellspacing="0"><tr style="height:99pt"><td style="width:98pt" bgcolor="#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;"><span><img width="66" height="66" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_016.png"/></span></p><p style="padding-top: 10pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/solutions/iot" class="s19">IoT Portfolio</a></p><p style="padding-top: 1pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/IoT" class="s20">www.silabs.com/IoT</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/simplicity" class="s19">SW/HW</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/simplicity" class="s20">www.silabs.com/simplicity</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/about-us/corporate-responsibility/commitment-to-quality" class="s19">Quality</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s20">www.silabs.com/quality</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/community" class="s19" target="_blank">Support &amp; Community</a></p><p style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.silabs.com/community" class="s20">www.silabs.com/community</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_018.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_019.png"/></span></p><p class="s21" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s23">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s23">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s23">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><span class="s25">information, visit </span><a href="https://www.silabs.com/about-us/inclusive-lexicon-project" class="s27" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s25" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s28" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s22">Silicon Laboratories Inc.</span>®<span class="s22">, Silicon Laboratories</span>®<span class="s22">, Silicon Labs</span>®<span class="s22">, SiLabs</span>® <span class="s22">and the Silicon Labs logo</span>®<span class="s22">, Bluegiga</span>®<span class="s22">, Bluegiga Logo</span>®<span class="s22">, Clockbuilder</span>®<span class="s22">, CMEMS</span>®<span class="s22">, DSPLL</span>®<span class="s22">, EFM</span>®<span class="s22">, EFM32</span>®<span class="s22">, EFR, Ember</span>®<span class="s23">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s22">, EZLink</span>®<span class="s22">, EZRadio</span>®<span class="s22">, EZRadioPRO</span>®<span class="s22">, Gecko</span>®<span class="s22">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s22">, Precision32</span>®<span class="s22">, ProSLIC</span>®<span class="s22">, Simplicity Studio</span>®<span class="s22">, SiPHY</span>®<span class="s22">, Telegesis, the Telegesis Logo</span>®<span class="s22">, USBXpress</span>® <span class="s22">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s22">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="an1299-understanding-bluetooth-mesh-lighting-demo-sdk-2x/Image_020.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s25" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">www.silabs.com</h3></p></body></html>
