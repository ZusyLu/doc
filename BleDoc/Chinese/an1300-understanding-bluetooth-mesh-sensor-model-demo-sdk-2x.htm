<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .h2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 19pt; vertical-align: 8pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s8 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s11 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s14 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s15 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h3 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13 {padding-left: 0pt;counter-reset: d3 1; }
 #l13> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l14 {padding-left: 0pt; }
 #l14> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15 {padding-left: 0pt;counter-reset: d2 1; }
 #l15> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l16 {padding-left: 0pt; }
 #l16> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">AN1300: Understanding the Silicon Labs Bluetooth<span class="h2">® </span>Mesh Sensor Model Demonstration in SDK v2.x</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="189" height="1" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="187" height="1" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Short introduction to Bluetooth mesh sensor model</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Using the sensor example application</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Sensor example application code walkthrough</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh SDK comes with two sample projects that create a wireless network of sensors and sensor clients using Bluetooth mesh technology. The examples assume use of Silicon Labs WSTKs for sensors and sensor clients, and the Silicon Labs Bluetooth Mesh mobile app as provisioner. In this document we discuss the basics of sensor models and describe the related sample applications in the SDK.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_005.png"/></span></p><ol id="l2"><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document focuses on explaining the Bluetooth mesh sensor demo, installed as part of the Bluetooth mesh SDK. For the most part the documentation centers on the example application and its usage flow, along with an explanation of key part of the source code. It also includes a brief discussion of some concepts of the sensor model specification that are important for understanding the example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">Sensor Model</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="https://www.bluetooth.com/specifications/mesh-specifications/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">The sensor model is Bluetooth mesh’s method of interfacing with sensors. For a list of supported sensor types refer to the Bluetooth Mesh Device Properties </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">specifications</span>. This model is made up of sensor states including descriptors, settings, cadence, data, and ser- ies columns. This model also defines the messages used for setting and reporting these states between client and server.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Sensor Descriptors: <span class="p">The sensor descriptors define the sensor property ID, to indicate the device’s sensor type, the positive and nega- tive tolerance of the sensor, the sampling function, the measurement period, and the update interval.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Sensor Settings<span class="p">: The sensor settings state controls the parameters of a sensor, such as sensitivity. The sensor setting property ID determines whether the sensor settings can be read and written as well as a raw setting’s size and content.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Sensor cadence<span class="p">: The sensor cadence state controls how often the sensor data is published. Data can be published either through a trigger or a fast cadence. The trigger can be defined either by the sensor property ID or as a percentage change in the measured value. A fast cadence can be used if the measured valued falls within a specified range.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Sensor Data<span class="p">: The sensor data state is constructed of a sensor property ID and a raw value. Multiple instances are permitted.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Sensor Series Column<span class="p">: Sensor measurements may be organized as arrays, conceptually as columns of data. The sensor series col- umn state is made up of a raw Y value, raw X value, and column width. The sizes and contents of each of these is determined by the sensor property ID.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Sensor Messages</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Each state in the sensor model has an acknowledged get message and an unacknowledged status message associated with it. A client requests the status message by sending the get message. In addition, writable sensor states such as the cadence and setting states also have both acknowledged and unacknowledged set messages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Sensor Server and Client</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The defined models are the Sensor Client, Sensor Server, and Sensor Setup Server. In any element where the Sensor Server is present, the Sensor Setup Server must also be present to allow configuration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><h4 style="padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark4">Bluetooth Mesh Sensor Project</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section describes how to create a generic sensor client and server project based on the Bluetooth Mesh SDK v2.x.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Prebuilt demonstration application images areprovided for EFR32xG12, xG13 and xG21 parts. EFR32xG22 parts have limited support for Bluetooth Mesh (only LPN is supported). If you wish to modify the application, the following section describes how to create the corresponding project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Requirements</a></p><ul id="l5"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="https://www.silabs.com/products/development-tools/software/simplicity-studio">Simplicity Studio 5</a></p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Bluetooth Mesh SDK 2.0.0 or later, distributed through Simplicity Studio 5.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">The pre-built demo binaries and source code are included in the SDK.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Simplicity Studio has a network analyzer capable of capturing and decoding Bluetooth mesh packets.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">The actual code development can be done with Simplicity Studio, IAR EWARM, or command line tools.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Used for discovering and provisioning devices</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Silicon Labs EFR32BG Wireless Starter Kits</p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Used for discovering and provisioning devices.</p></li></ul></li></ul><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Bluetooth Mesh Sensor Project</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_006.png"/></span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Bluetooth Mesh Sensor Client and Server</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Plug a kit to your computer and launch Simplicity Studio 5. The kit should now appear in the Debug Adapter view as well as in the launcher:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Click the <b>Example Projects &amp; Demos </b>tab. Under Technology Types, filter on <b>Bluetooth Mesh</b>. Next to the <b>Bluetooth Mesh - SoC Sensor Client </b>project, click [<b>Create</b>].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 115pt;text-indent: 0pt;text-align: left;"><span><img width="478" height="352" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_007.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Click the <b>Software Components </b>tab, and expand the Bluetooth Mesh components group to see the installed features.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;"><span><img width="502" height="326" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Project files autogenerate, with progress reflected in the lower right of the Simplicity IDE. Buiild the project. Repeat for the <b>Bluetooth Mesh - SoC Sensor Server </b>example.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">For more information on how to configure a node in the Bluetooth Mesh SDK v2., refer to <i>UG472: Bluetooth® Mesh Node Configurator User&#39;s Guide for SDK v2.x</i>.</p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark7">Bluetooth Mesh Sensor Demonstration</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Requirements</a></p><ul id="l9"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="https://www.silabs.com/products/development-tools/software/simplicity-studio">Simplicity Studio</a></p><ul id="l10"><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Bluetooth Mesh SDK 1.5.0 or later, distributed through Simplicity Studio.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">The pre-built demo binaries and source code are included in the SDK.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Simplicity Studio has a network analyzer capable of capturing and decoding Bluetooth mesh packets.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">The actual code development can be done with Simplicity Studio, IAR EWARM, or command line tools.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="https://www.silabs.com/products/development-tools/software/bluetooth-low-energy/mobile-apps/ble-mesh" class="a" target="_blank">Silicon Labs Bluetooth Mesh Mobile </a><a href="https://www.silabs.com/products/development-tools/software/bluetooth-low-energy/mobile-apps/ble-mesh" target="_blank">Application</a></p><ul id="l11"><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Used for discovering and provisioning devices.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Includes network, group and publish-subscribe setup.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Allows device configuration for the sensor models.</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="https://www.silabs.com/products/development-tools/wireless/bluetooth/blue-gecko-bluetooth-low-energy-soc-starter-kit" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">For the full experience at least two </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Silicon Labs Blue Gecko SoC Wireless Starter Kits </span>are needed.</p><ul id="l12"><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">1 kit is used as the sensor client.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">1 kit is used as the sensor server.</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">EFR32BG12, EFR32MG12, EFR32BG13, EFR32MG13 and EFR32xG21 SoCs as well as the BGM13P, and BGM13S</p></li><li><p style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">Modules support Bluetooth mesh software.</p></li></ul></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note that EFR32xG22 SoCs and BGM220 have limited Bluetooth Mesh support (LPN only).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">Load the Demonstrations on the Target</a><a name="bookmark12">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Open Simplicity Studio 5 with a compatible SoC wireless kit plugged to the computer. Click the <b>Example Projects &amp; Demos </b>tab. To see only the demos, turn off the Example Projects and, if you have more than one SDK installed, enter &#39;mesh&#39; in the keyword field. Next to either <b>Bluetooth Mesh - SoC Sensor Client </b>or t <b>Bluetooth Mesh - SoC Sensor Server</b>, click <b>RUN</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span><img width="440" height="343" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_009.jpg"/></span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Mesh Network Implementation</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The demonstration implementation process can be divided into four main phases:</p><ol id="l13"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Unprovisioned mode – After the demo firmware is installed, the device starts in unprovisioned mode.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Provisioning – The devices are provisioned to a Bluetooth mesh network and network security is set up.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Configuration – The group, publish and subscribe, and application security are configured.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Normal operation – The sensor server(s) can be controlled by the client(s).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In the first phase, all the devices are unprovisioned and transmitting unprovisioned beacons. They do not have any network keys or application keys configured, and publish and subscribe settings are not set. In this state the devices are simply waiting for the provision- er to assign them into a Bluetooth mesh network, and configure publish and subscribe settings and mesh models. In this state the devi- ces can be detected by the smartphone application.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In the provisioning phase the provisioner adds sensor servers and clients to the Bluetooth mesh network. A network key is generated and distributed to the nodes and each node is assigned a unicast address.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">In the configuration phase the provisioner configures groups, publish and subscribe settings, application-level security, and mesh mod- els.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">After provisioning and configuration, the Bluetooth mesh network is operational and clients can be used to configure and request data from the sensors.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Running the Example</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This section assumes you have installed the <b>BT Mesh – Sensor Client Example </b>demo binary to one of the WSTKs and the <b>BT Mesh</b></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">– Sensor Server Example <a href="#bookmark12" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">to the other, as described in section </a><a href="#bookmark12">3.2 Load the Demonstrations on the Target</a></p><ul id="l14"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Provision and configure the sample apps using the Silicon Labs Bluetooth Mesh mobile application.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Open a serial console in Simplicity Studio for each. If you reset the devices this is what you will observe on the console for the client and server:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 203pt;text-indent: 0pt;text-align: left;"><span><img width="272" height="140" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 203pt;text-indent: 0pt;text-align: left;"><span><img width="275" height="142" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 36pt;text-indent: -9pt;text-align: left;">And this is what you will see in the WSTK display for the client and server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 191pt;text-indent: 0pt;text-align: left;"><span><img width="304" height="123" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 36pt;text-indent: -9pt;text-align: left;">Press PB0 on the client WSTK to select the people count sensor. Now press PB1 on the client WSTK to register the server. The LCD on the client displays the people count reported by the server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><span><img width="319" height="126" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_013.jpg"/></span></p></li><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Press PB1 on the server to increase the count or PB0 to decrease the count.</p></li><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Press PB0 on the client WSTK again to select the temperature sensor. Now the LCD on the client WSTK will display the tempera- ture reported by the server.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 207pt;text-indent: 0pt;text-align: left;"><span><img width="257" height="123" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_014.jpg"/></span></p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark13">Code Walkthrough</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">As of BT Mesh SDK v2.x, the code structure of both the stack API and the code examples have been reworked. The Bluetooth Mesh API now abstracts away much of the event handling in generated files and allows the user to focus on application development.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The sections bellow describe the code in the application source of the examples (app.c)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><li><p class="s5" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Unprovisioned Mode, Provisioning, and Configuration</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In unprovisioned mode, both examples behave the same way. The unprovisioned device simply starts sending unprovisioned beacons and waits for a provisioner to provision and configure it.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">After receiving the system_boot event (<span class="s7">sl_bt_evt_system_boot_id</span>), the application checks if a button is pressed in the <span class="s7">handle_boot_event() </span>routine. If yes, it calls the function <span class="s7">sl_btmesh_initiate_factory_reset()</span>, which closes connections if any exist and performs a factory reset by erasing NVM3 storage. The factory reset is also done after receiving the mesh_node_reset event (<span class="s7">sl_bt_evt_mesh_node_reset_id</span>). If no button is pressed, then the name of the device is set based on the Bluetooth address, and the function <span class="s7">sl_btmesh_node_init() </span>is called to initialize the Bluetooth mesh node stack.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The event <span class="s7">sl_btmesh_evt_node_initialized_id </span>indicates that the Bluetooth mesh node stack initialization is complete. This event also includes information about the node status. The application first checks the provisioning status. If the node is not provisioned (the default state when the device is first powered up after programming) then the application starts unprovisioned beaconing by calling <span class="s7">sl_btmesh_node_start_unprov_beaconing()</span>.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The API call <span class="s7">sl_btmesh_node_start_unprov_beaconing </span>takes one parameter (bearer) that selects which bearers are used (PB- ADV, PB-GATT, or both). In this example, both bearers are used. Because the PB-GATT bearer is enabled, the device will begin advertising its provisioning GATT service. This allows the smartphone application to detect unprovisioned nodes. When unprovisioned beaconing has been started the application waits for the provisioner (in this case, the smartphone app) to start provisioning. Start of provisioning is indicated with the event <span class="s7">sl_btmesh_evt_node_provisioning_started_id </span>(see sl_btmesh_provisioning_decorator.c). This is handled in the application code through the <span class="s7">sl_btmesh_on_node_provisioning_started() </span>callback.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">During provisioning, no actions are required from the user application. The configuration of network keys and other operations are han- dled automatically by the Bluetooth mesh stack. Both the light and the switch applications simply start blinking the two LEDs on the WSTK to indicate that provisioning is in progress. Then they wait for the event <span class="s7">sl_btmesh_evt_node_provisioned_id </span>(see sl_btmesh_provisioning_decorator.c for more details) that indicates provisioning is complete. This is handled in the application code through the <span class="s7">sl_btmesh_on_node_provisioned() </span>callback.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark15">Sensor Server Example</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">This section describes basic operation of the <b>Bluetooth Mesh – SoC Sensor Server</b>. It is assumed that the node is already provi- sioned and publish-subscribe settings have been configured by the smartphone app.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The sensor server supports two types of sensors: a People Count sensor and a Present Ambient Temperature sensor. The People Count sensor is simulated by the buttons on the starter kit: PB0 decreases the count and PB1 increases the count. The count is main- tained in a 16-bit unsigned integer. The Present Ambient Temperature sensor is a Silicon Labs Si7021. Temperature is reported in units of 0.5 degrees Celsius as a signed 8-bit integer.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Upon receiving the <span class="s7">sl_btmesh_evt_node_initialized_id </span>event and call to the corresponding callback <span class="s7">handle_node_initialized_event()</span>, the sensor server node initializes the sensors by calling <span class="s7">sl_btmesh_sensor_server_node_init()</span>. This function sets the people count to 0 and initializes the temperature sensor hardware. Next, it enables GPIO interrupts for WSTK buttons PB0 and PB1. Otherwise the node starts unprovisioned beaconing and waits for a provisioner. Once provisioned and initialized, the sensor server node simply waits for messages from the client. Events generated by messages from the client are handled in the sl_btmesh_sensor_server.c.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Please note that sensor settings and cadence are not supported at this time so the message handlers are stubs.</p><ul id="l16"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Get requests are handled by <b>handle_sensor_server_get_request(). </b>The property_id is queried. If the value is non-zero and is a supported value then the sensor data for that property is returned. If the property_id is zero then all supported sensor data is re- turned. If the value is non-zero and is an unsupported value, the data length is set to zero to indicate an unsupported property. In all cases, <span class="s7">gecko_cmd_mesh_sensor_server_send_status() </span>is called to send the status to the client.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Get Series requests are handled by <b>handle_sensor_server_get_series_request()</b>. Neither sensor properties supported in this ex- ample include either Series State so only the property_id is sent back to the client .</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Get Column requests are handled by <b>handle_sensor_server_get_column_request(). </b>Neither of the sensor properties include Col- umn State so the same data is sent back to the client, per the specification.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Publishing sensor data is handled by <b>handle_sensor_server_publish_event() </b>when the publish period expires. Data from both sensors is published.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">The Cadence and Settings States for the properties in this example are not included so their handlers simple return the property ID, per the specification.</p></li></ul></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark16">Sensor Client Example</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section describes basic operation of the <b>Bluetooth Mesh – SoC Sensor Client. </b>It is assumed that the node is already provisioned and publish-subscribe settings have been configured by the smartphone app. The main purpose of the sensor client is to request sen- sor data from the sensor server. The sensor client supports two types of sensors: a people counting sensor and a temperature sensor.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Upon receiving the <span class="s7">sl_btmesh_evt_mesh_node_initialized_id </span>event, the sensor client node performs the following actions:</p><ul id="l17"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Initializes the sensor client model by calling <span class="s7">sl_btmesh_cmd_mesh_sensor_client_init().</span></p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Handles the buttons on the WSTK through calling <span class="s7">sl_btmesh_button_press_cb()</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Requests a sensor descriptor by calling <span class="s7">sl_btmesh_sensor_client_get_descriptor() </span>with address 0x0000 to publish the mes- sage using the publish parameters set by the configuration client.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Starts a timer to periodically request sensor data.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The WSTK buttons are used as follows:</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">PB0 to select the sensor property_id to interact with.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">PB1 to reset the list of registered devices.</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">When PB0 is pressed, <span class="s7">sensor_client_change_current_property() </span>is called to handle the change. This function increments the var- iable current_property, which is used to index the properties array containing a list of the supported properties.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When PB1 is pressed <span class="s7">update_registered_devices() </span>is called to find and register the devices that support the currently selected property. This is done by calling <span class="s7">sl_btmesh_sensor_client_get_descriptor() </span>with the selected property as a parameter. A recur- ring timer is started with a 2000 ms interval. This timer is used to request the sensor data by calling <span class="s7">sl_btmesh_cmd_mesh_sensor_client_get()</span>.</p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">When a message is received from a sensor server, one of the sensor events are triggered. These events are as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event</p></td><td style="width:132pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Behavior</p></td></tr><tr style="height:40pt"><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_btmesh_evt_sensor_client_descriptor_status_id</p></td><td style="width:132pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">Indicates that a descriptor sta- tus message has been re- ceived.</p></td><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Adds the server to the list of registered devi- ces if it was not previously registered.</p></td></tr><tr style="height:40pt"><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_btmesh_evt_sensor_client_status_id</p></td><td style="width:132pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Indicates that a sensor status message has been received.</p></td><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: justify;">Verifies that the data came from a registered device, determines which type of sensor the data comes from, then saves and displays it.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s12">www.silabs.com/products</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s12">www.silabs.com/quality</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s13" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_015.png"/></span></p><p class="s14" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1300-understanding-bluetooth-mesh-sensor-model-demo-sdk-2x/Image_016.png"/></span></p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">http://www.silabs.com</h3></p></body></html>
