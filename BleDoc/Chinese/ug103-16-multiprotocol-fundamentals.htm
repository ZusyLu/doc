<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>ug103-16-multiprotocol-fundamentals</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s8 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 a { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s9 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s10 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s11 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt;counter-reset: d2 1; }
 #l9> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l11 {padding-left: 0pt;counter-reset: j1 1; }
 #l11> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: j1 0;  }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">UG103.16: Multiprotocol Fundamentals</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="182" height="1" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="183" height="1" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Multiprotocol implementation modes</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Core requirements</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Protocol considerations</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Overview of the Radio Scheduler</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document discusses the ways in which more than one proto- col can be used on a single chip. It discusses considerations when selecting protocols for multiprotocol implementations. It al- so describes the basics of the Silicon Labs Radio Scheduler, a required component of a dynamic multiprotocol solution.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs’ <i>Fundamentals </i>series covers topics that project managers, application de- signers, and developers should understand before beginning to work on an embedded networking solution using Silicon Labs chips, networking stacks such as EmberZNet PRO or Silicon Labs <i>Bluetooth®</i>, and associated development tools. The documents can be used as a starting place for anyone needing an introduction to developing wire- less networking applications, or who is new to the Silicon Labs development environ- ment.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Silicon Labs is developing products designed to meet the demands of customers as we move to an ever-connected world of devices in the home, what is often referred to as the IoT (Internet of Things). At a high level the goals of IoT for Silicon Labs are to:</p><ul id="l3"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Connect all the devices in the home with best-in-class mesh networking, whether with Zigbee PRO or other emerging standards.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Leverage the company’s expertise in low-power, constrained devices.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Enhance established low-power, mixed-signal chips.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Provide low-cost bridging to existing Ethernet and Wi-Fi devices.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Enable cloud services and connectivity to smartphones and tablets that promote ease of use and a common user experience for customers.</p><p style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;line-height: 19pt;text-align: left;">Achieving all of these goals will increase adoption rates and user acceptance for IoT devices in the Connected Home. In general, implementing more than one protocol on a single device allows for:</p></li><li><p style="padding-top: 1pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Cost savings: A single device can perform more than one function.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Space savings: End user product packaging can be smaller and simpler when protocols can share a single radio.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Energy savings: The number of devices on a network is reduced.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document describes the four different ways to implement multiprotocol devices and the infrastructure requirements for an effective implementation. It discussed some aspects of protocol operation to be considered when selecting a protocol for a multiprotocol imple- mentation. Finally it summarizes the operation of the Silicon Labs Radio Scheduler, an essential component of a dynamic multiprotocol implementation.</p><p class="s5" style="padding-bottom: 3pt;padding-left: 390pt;text-indent: 0pt;text-align: left;">Types of Multiprotocol Implementations</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_006.png"/></span></p></li></ul></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Types of Multiprotocol Implementations</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Multiple protocols can be implemented on a single device in four different ways:</p><ul id="l4"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Programmable: A device that is compatible with more than one protocol is programmed with one of the protocols in manufacturing.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Switched: The application switches between protocols using a bootloader.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Dynamic: The application time-slices between two protocols.</p></li><li><p style="padding-top: 3pt;padding-left: 24pt;text-indent: 3pt;line-height: 182%;text-align: left;">Concurrent: The application runs both protocols on the same RF channel of the single radio. The following sections discuss these implementations in more detail.</p></li></ul><ol id="l5"><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Programmable Multiprotocol</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A programmable multiprotocol implementation requires a chip with the infrastructure to support more than one protocol. Applications are developed in different protocols, such as Zigbee and Thread. Each chip is programmed with a single application in manufacturing. The customer achieves cost savings by being able to use a single chip for multiple applications and purposes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Switched Multiprotocol</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In switched multiprotocol, a device is initially programmed with one protocol, and then uses a bootloader to switch to another protocol at some point in the future. Switched multiprotocol has two primary use cases.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Future Proofing: <span class="p">Device manufacturers may need to sell their devices into different protocol environments, or may wish to plan for an environment changing over time.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Commissioning by Smartphone: <span class="p">Device manufacturers who are committed to a single protocol environment, such as Zigbee Home Automation, may wish to make the process of adding a new device more secure and user friendly. In this case the device is initially programmed with a Bluetooth commissioning application. The Home Gateway / Trust Center is also programmed with a Bluetooth ap- plication, and the customer uses a commissioning app on their smartphone. Using the smartphone app they can join a new device onto the network, set up a pairing with other appropriate devices in the network, then switch over to the network protocol. Each wireless network protocol has its own mechanisms for joining and pairing devices, but all can be accommodated with this mechanism.</span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">An effective switched multiprotocol implementations requires:</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">A multiprotocol-enabled platform with sufficient memory.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">A consistent API to use the radio.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">A cross-compatible bootloader.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 6pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Dynamic Multiprotocol</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In a dynamic multiprotocol implementation, two protocols run concurrently but the application time-slices the radio and rapidly changes radio configurations, such as channel, to enable different wireless protocols to operate reliably at the same time. In time-slicing, the software schedules tasks based around their priority and minimum duration and will default to a background listen task between sched- uled tasks. The scheduler can even interrupt or delay a lower priority task if a higher priority task is scheduled. .</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A dynamic multiprotocol implementation allows a device to perform multiple simultaneous functions. For example an end user can use a smartphone app to connect to the device via bluetooth to control it or perform diagnostics, at the same time the device is connected to the Zigbee network routing packets and acting on Zigbee Cluster Library commands..</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In addition to a multiprotocol-enabled platform with sufficient memory, common code infrastructure, common radio interface, and com- mon API to use the radio such as that provided by Silicon Labs RAIL, an effective dynamic multiprotocol implementation requires:</p><ul id="l7"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">An RTOS to support task switching and resource sharing.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark10" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">A radio scheduler to manage time-slicing. See section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">4. Radio Scheduler </span>for background on the Silicon Labs radio scheduler.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">See <i>UG305: Dynamic Multiprotocol User’s Guide </i>for additional information about Silicon Labs dynamic multiprotocol implementation and <i>UG103.13: RAIL Fundamentals </i>for more information about Silicon Labs RAIL.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Concurrent Multiprotocol</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In a concurrent multiprotocol implementation, two protocols not only run concurrently but also share the same radio channel. For exam- ple, a Zigbee/Thread gateway or controller device could manage the transition of the network from one protocol to another, or could manage both a Zigbee-based and a Thread-based network at the same time. The multiprotocol device always controls what channels the networks use. In the case of two separate networks, they must be able to accommodate reduced bandwidth either by scaling their traffic or limiting the number of devices on the network.</p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">Protocol Considerations</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">It is important to recognize that a single radio cannot receive or transmit two packets for two different protocols simultaneously. To share a single radio, both protocols have to accept they will not have 100% use of the radio. They must therefore be able to survive loss of radio without significantly decreasing performance or losing application messages. “Significantly” in this case means that the applica- tion is working outside of its intended operational parameters, for example message latency or message loss is higher than acceptable.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">While some protocols and applications will have strict timing requirements for packet transmission, in most cases the critical area of concern with multiprotocol is the receipt of incoming packets from the networks.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">In order for a protocol to be a good candidate for a dynamic or concurrent multiprotocol implementation, the following considerations apply.</p><ul id="l8"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Neither protocol can take over the radio for long periods (longer than a few milliseconds at a time) under normal operating conditions (that is except for commissioning, firmware upgrades, and so on).</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">One or both protocols must have a robust mechanism for managing loss of incoming packets, such as MAC retries.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The use case calls for tightly constrained radio use for one or both protocols, for example transmit only, low duty cycle.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">One or both protocols must have very short packets and/or a short time required on the radio;</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">One or both protocols must implement strict time slots / connection intervals; and/or both protocols must use the same radio PHY (e.g. IEEE 802.15.4) and channel.</p></li></ul><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">When a radio has to switch between two different PHYs, it &#39;disappears&#39; from one network or another. For protocols where the device might be the &#39;parent&#39; of a sleepy end device, if the parent device is not available when the sleepy end device wakes up to send a message, regular dependency on retries will impact the sleepy end device’s battery life.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>If you have a protocol that uses multiple radio configurations, you do not need to implement multiprotocol. For example, Silicon Labs&#39; RAIL and the radio configurator supports multiple radio configurations in the same protocol. See <i>AN971: EFR32 Radio Configura- tor Guide </i>for more details. Multiprotocol makes sense if protocols have mostly independent protocol stacks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l9"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Dynamic Multiprotocol Example</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Bluetooth LE and Zigbee are suitable protocols for a dynamic multiprotocol implementation. Because of the low duty cycle for Zigbee traffic and the retry mechanisms in the Zigbee networking stack, a Zigbee Router can switch its radio to some other frequency/protocol for short periods without dropping any messages at an application level.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Bluetooth LE radio usage can be predicted and planned in advance. Bluetooth beacons are quite short packets, usually up to 30 bytes. The radio only needs about 1 ms to transmit the beacon and the interval between beacons is typically no shorter than 100 ms, thus providing a duty cycle of just 1%. This means that the radio can devote at least 99% of its time to the main Zigbee network.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you are using Silicon Labs products, adding Bluetooth LE to most proprietary networks is also possible because of the short Bluetooth LE packets and the long delay between communications. The proprietary stack must be updated to work with the Bluetooth stack, and all proprietary communications should be examined to determine the priority and required timing accuracy of it. For more details, see <i>UG305: Dynamic Multiprotocol User&#39;s Guide </i>and <i>AN1134: Dynamic Multiprotocol Development with Bluetooth and Proprietary Proto- cols on RAIL</i>.</p></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Concurrent Multiprotocol Example</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Zigbee and Thread are one example of suitable protocols for a concurrent multiprotocol implementation (not yet implemented in Silicon Labs stacks).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The multiprotocol device can control which IEEE 802.15.4 channel it is operating on, to connect to other Zigbee and Thread devices. It only has a single IEEE 802.15.4 MAC/PHY to listen to/send on both networks concurrently, meaning that switching radio PHYs is not required.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The multiprotocol device can manage incoming packets from either network by filtering both PAN IDs, directing to the appropriate net- working stack</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Operational constraints include:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The multiprotocol device must control selection of the same IEEE 802.15.4 channel for both Zigbee and Thread, which means that it is most likely a Zigbee Coordinator / Thread Leader, in practice the Gateway/Controller in both networks.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The device cannot be required to receive Zigbee and Thread packets simultaneously. However, because of MAC retries, this should not be a limitation in most use cases.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The combined duty cycle of the Zigbee and Thread traffic to/from the device must not exceed what would normally be tolerated by a single Zigbee or Thread device.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Radio Scheduler</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_007.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark9">Radio Scheduler</a><a name="bookmark10">&zwnj;</a></h3></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">A radio scheduler is an essential component of a dynamic multiprotocol implementation. It is a system for on-demand scheduling of radio tasks as requested by wireless stacks and the manufacturer’s applications. This section introduces basic radio scheduler con- cepts. See <i>UG305: Dynamic Multiprotocol User’s Guide </i>for details, including examples, of the Silicon Labs radio scheduler operation.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The Silicon Labs Radio Scheduler is part of the RAIL library. It operates above the radio hardware and below the RAIL API, as shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 190pt;text-indent: 0pt;text-align: left;"><span><img width="277" height="351" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Different radio events in each protocol may be more or less important, or more or less time sensitive, depending on the situation. The Radio Scheduler can take those into account when making decisions about conflicts and how to adjudicate them.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">Micrium OS is an RTOS that allows stacks and application logic to share CPU execution time. The Radio Scheduler uses the following concepts:</p><p class="s6" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Radio Operation: <span class="p">A specific action to be scheduled. A radio operation has both a radio configuration and a priority. Each stack can request that the radio scheduler perform three radio operations:</span></p><ul id="l10"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Background receive: Continuous receive, intended to be interrupted by other radio operation</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Scheduled receive: Receive at a future time with a minimum duration</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Scheduled transmit: Transmit at a future time with a minimum duration</p></li></ul><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Radio Config<span class="p">: Determines the state of the hardware that must be used to perform a radio operation.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Priority: <span class="p">Each operation from each stack has a default priority. An application can change default priorities.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Slip Time: <span class="p">The maximum time in the future when the operation can be started if it cannot begin at the requested start time.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Yield: <span class="p">A stack must voluntarily yield at the end of an operation or sequence of operations, unless it is performing a background receive. Until the stack yields, the scheduler will not schedule lower priority tasks.</span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The Radio Scheduler can interrupt a scheduled radio operation if a higher priority task conflicts with it. This could occur in the following two circumstances:</p><ol id="l11"><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">A scheduled radio operation takes longer than expected and the corresponding stack does not yield before the higher priority radio operation must start.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">A higher priority radio operation has just been scheduled to occur in the future and conflicts with a lower priority operation already scheduled.</p></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Certain long-lived radio operations can have an outsized impact on the correct operation of the product. The application may need to coordinate these tasks between the protocols. If the application does not then the radio scheduler priorities will take precedence. This can result in the task being interrupted prematurely.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products">www.silabs.com/products</a></p><p class="s8" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality">www.silabs.com/quality</a></p><p class="s8" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s9" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_009.png"/></span></p><p class="s10" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.® , Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, Clockbuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z-Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="ug103-16-multiprotocol-fundamentals/Image_010.png"/></span></p><p class="s10" style="padding-top: 6pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s10" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
