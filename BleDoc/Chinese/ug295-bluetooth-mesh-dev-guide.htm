<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>UG295: Silicon Labs Bluetooth Mesh C Developer&#39;s Guide for SDK v2.</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s6 { color: #007693; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a, a { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s8 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s12 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s15 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s16 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s17 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s18 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s19 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s20 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s21 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s22 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s23 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s25 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s27 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s28 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h3 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt;counter-reset: d3 1; }
 #l6> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l7 {padding-left: 0pt;counter-reset: d2 1; }
 #l7> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt;counter-reset: d2 1; }
 #l9> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l10 {padding-left: 0pt;counter-reset: d3 1; }
 #l10> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 li {display: block; }
 #l11 {padding-left: 0pt;counter-reset: e1 1; }
 #l11> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l13 {padding-left: 0pt;counter-reset: e2 1; }
 #l13> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l14 {padding-left: 0pt;counter-reset: e2 2; }
 #l14> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l15 {padding-left: 0pt; }
 #l15> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l16 {padding-left: 0pt;counter-reset: e2 1; }
 #l16> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l18 {padding-left: 0pt;counter-reset: e2 1; }
 #l18> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l19 {padding-left: 0pt;counter-reset: e2 1; }
 #l19> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l20 {padding-left: 0pt;counter-reset: e3 1; }
 #l20> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l21 {padding-left: 0pt;counter-reset: g1 1; }
 #l21> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l22 {padding-left: 0pt;counter-reset: e2 1; }
 #l22> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l23 {padding-left: 0pt;counter-reset: e3 3; }
 #l23> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l24 {padding-left: 0pt;counter-reset: e2 1; }
 #l24> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l25 {padding-left: 0pt;counter-reset: e3 4; }
 #l25> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt;counter-reset: e2 1; }
 #l28> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l29 {padding-left: 0pt;counter-reset: e3 5; }
 #l29> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l29> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l30 {padding-left: 0pt;counter-reset: e2 1; }
 #l30> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l31 {padding-left: 0pt;counter-reset: e2 1; }
 #l31> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l32 {padding-left: 0pt; }
 #l32> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l33 {padding-left: 0pt; }
 #l33> li>*:first-child:before {content: " "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l34 {padding-left: 0pt;counter-reset: e2 1; }
 #l34> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l34> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l35 {padding-left: 0pt;counter-reset: e3 1; }
 #l35> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="127" height="62" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_002.png"/></span></p><h1 style="padding-top: 11pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">UG295: Silicon Labs <i>Bluetooth® </i>Mesh C Application Developer’s Guide for SDK v2.x</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="206" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="206" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-left: 20pt;text-indent: -7pt;text-align: left;">Bluetooth mesh stack and chip configu- ration</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Interaction with the Bluetooth LE stack</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Event and sleep management</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Resource usage and availability</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Radio State Monitoring</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document is an essential reference for anyone developing C-based applications for Silicon Labs Wireless Gecko products using the Silicon Labs Bluetooth Mesh stack. This is a companion to <i>UG434: Silicon Labs Bluetooth C Application Developers Guide for SDK v3.x </i>and contains content specific to mesh application development. The guide covers both Bluetooth mesh stack architecture, application development flow, use and limitations of the MCU  core and peripherals, stack configuration options, and the stack’s resource usage. This version applies to the Silicon Labs Bluetooth Mesh SDK version 2.x.</p><p style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of the document is to capture and fill in the blanks between the Blue- tooth Mesh Stack API reference, Gecko SDK API reference, and Wireless Gecko reference manuals, when developing Bluetooth mesh applications for the Wireless Geckos. This document exposes details that will help developers make the most out of the available hardware resources.</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Table of Contents</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Table of Contents</p><ol id="l2"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark3" class="a">Introduction </a><a href="#bookmark3">1</a></p><ol id="l3"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark4" class="a">About This Version </a><a href="#bookmark4">1</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark5" class="a">Prerequisites </a><a href="#bookmark5">1</a></p></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark10" class="a">Application Development Flow </a><a href="#bookmark10">2</a></p><ol id="l4"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark11" class="a">Application Build Flow </a><a href="#bookmark11">3</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark12" class="a">Bluetooth Mesh API documentation </a><a href="#bookmark12">3</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark13" class="a">Bluetooth Mesh Application Build Flow </a><a href="#bookmark13">4</a></p></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark22" class="a">Project Structure </a><a href="#bookmark22">6</a></p><ol id="l5"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark23" class="a">Bluetooth Mesh Library Files </a><a href="#bookmark23">6</a></p><ol id="l6"><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark24" class="a">Stack </a><a href="#bookmark24">7</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark25" class="a">Node </a><a href="#bookmark25">7</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark26" class="a">Provisioner </a><a href="#bookmark26">9</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark27" class="a">GATT Database </a><a href="#bookmark27">10</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark28" class="a">Bluetooth Mesh Device Composition Data </a><a href="#bookmark28">11</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark29" class="a">RTOS Support </a><a href="#bookmark29">11</a></p></li></ol></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark32" class="a">Bluetooth Mesh Stack Event Handling </a><a href="#bookmark32">12</a></p><ol id="l7"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark33" class="a">Bluetooth LE versus Bluetooth Mesh Event </a><a href="#bookmark33">12</a></p></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark35" class="a">NVM Layout </a><a href="#bookmark35">13</a></p></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark41" class="a">Bluetooth Mesh Features </a><a href="#bookmark41">14</a></p><ol id="l8"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark42" class="a">Proxy </a><a href="#bookmark42">14</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark43" class="a">Relay </a><a href="#bookmark43">14</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark44" class="a">Friend </a><a href="#bookmark44">14</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark45" class="a">Low Power Node </a><a href="#bookmark45">15</a></p></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark51" class="a">Bluetooth Mesh Stacks and Wireless Gecko Configuration and Resources </a><a href="#bookmark51">17</a></p><ol id="l9"><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark52" class="a">Wireless Gecko MCU and Peripherals Configuration </a><a href="#bookmark52">17</a></p></li><li><p style="padding-top: 8pt;padding-left: 63pt;text-indent: -29pt;text-align: left;"><a href="#bookmark53">Wireless Gecko Resources 17</a></p><ol id="l10"><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark54" class="a">Internal Flash and SRAM </a><a href="#bookmark54">18</a></p></li><li><p style="padding-top: 8pt;padding-left: 83pt;text-indent: -40pt;text-align: left;"><a href="#bookmark55" class="a">Monitoring Radio RX and TX State Using PRS (Peripheral Reflex System) </a><a href="#bookmark55">18</a></p></li></ol></li></ol></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark57" class="a">Documentation </a><a href="#bookmark57">21</a></p></li></ol><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_007.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li><h4 style="padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark0">Introduction</a><a name="bookmark3">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document is a C developer’s guide for the Silicon Labs Bluetooth Mesh stack. It covers various aspects of development and is an important reference for anyone developing in C for Wireless Gecko products that are running the Bluetooth stack.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The document covers the following topics:</p><ul id="l12"><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="#bookmark10" class="a">Section </a><a href="#bookmark10" class="s8">2 </a>Application Development Flow <span style=" color: #000;">discusses the application development flow.</span></p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="#bookmark22" class="a">Section </a><a href="#bookmark22" class="s8">3 Project </a>Structure <span style=" color: #000;">reviews project structure.</span></p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="#bookmark32" class="a">Section </a><a href="#bookmark32" class="s8">4 Bluetooth Mesh Stack Event </a>Handling <span style=" color: #000;">is an important piece for everyone developing with the Silicon Labs Bluetooth stack, as it explains how the application runs in sync with the stack in an event-based architecture.</span></p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="#bookmark35" class="a">Section </a><a href="#bookmark35" class="s8">5 NVM </a>Layout <span style=" color: #000;">describes memory allocation for Bluetooth LE and mesh.</span></p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;"><a href="#bookmark41" class="a">Section </a><a href="#bookmark41" class="s8">6 </a>Bluetooth Mesh Features <span style=" color: #000;">reviews functionality provided by Bluetooth mesh features.</span></p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;"><a href="#bookmark51" class="a">Section </a><a href="#bookmark51" class="s8">7 Bluetooth Mesh Stacks and Wireless Gecko Configuration and Resources</a> <span style=" color: #000;">touches on the topics of peripherals and the chipset resources, covers what is reserved for the stack usage, how interrupts should be handled, and the stack’s memory footprint and available memory for the application. It also covers radio TX/RX monitoring.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l13"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark1">About This Version</a><a name="bookmark4">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The current version of Silicon Labs&#39; Bluetooth Mesh SDK is 2.1.x. Currently supported compilers and IDE version are:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">IDE: Simplicity Studio 5.0.0 or newer.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Compiler: IAR v8.50.9 and GCC 10.2.0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l14"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark2">Prerequisites</a><a name="bookmark5">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document assumes the current version of Silicon Labs’ Bluetooth SDK has been properly installed to the development machine (Windows, MAC OSX, or Linux), and that you are familiar with the <i>QSG176: Silicon Labs Bluetooth® Mesh SDK v2.x Quick-Start Guide </i>and with the SDK’s examples. Also, you should have a basic understanding of Bluetooth technology. For more information, see <i>UG103.14: Bluetooth Technology Fundamentals</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ul></li><li><h4 style="padding-top: 4pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark6">Application Development Flow</a><a name="bookmark10">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following figure describes the high-level firmware structure. The developer creates an application on top of the stack, which Silicon Labs provides as a precompiled object-file, enabling the Bluetooth mesh connectivity for the end-device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><span><img width="250" height="482" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_008.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 2.1. Firmware Architecture</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh stack contains the following blocks.</p><ul id="l15"><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;"><b>Bootloader</b>—The Gecko Bootloader is not part of the stack but is provided with the Bluetooth SDK. See <i>UG266: Gecko Bootloader User Guide </i>and <i>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth Applications </i>for more information. For information on bootloading in general, see <i>UG103.06: Bootloading Fundamentals</i>.</p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Bluetooth stack<span class="p">—Bluetooth functionality consisting of link layer, generic access profile, security manager, attribute protocol, and generic attribute profile.</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Bluetooth AppLoader<span class="p">—An application that starts after the bootloader. It checks if the user application is valid and, if it is, starts the application. If the application image is not valid, AppLoader starts the Bluetooth Low Energy OTA process to try to receive a valid application image. This requires using the Gecko Bootloader.</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Bluetooth Mesh Stack <span class="p">-The Bluetooth mesh functionality consisting of the network layer, lower and upper transport layer, and access layer. Models are also provided as part of the stack.</span></p><ol id="l16"><li><p class="s7" style="padding-top: 7pt;padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark7">Application Build Flow</a><a name="bookmark11">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="697" height="320" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="text-indent: 0pt;text-align: right;">Figure 2.2. Bluetooth Mesh Project Build Flow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Building a Bluetooth mesh project starts by selecting the right base project that is to be generated and adding any extra required com- ponents. Models and elements can be added to the project using the Bluetooth Mesh Configurator. If the GATT bearer is used, the Bluetooth mesh services and characteristics can be viewed just like any other GATT services and characteristics in the Bluetooth GATT Configurator. For more information on the Bluetooth GATT Configurator and Bluetooth application development, see <i>QSG169: Blue- tooth® SDK v3.x Quick-Start Guide</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Compiling the project generates an object file, which is then linked with the pre-compiled libraries provided in the SDK. The output of the linking is a flash image that can be programmed to the supported Wireless Gecko devices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark8">Bluetooth Mesh API documentation</a><a name="bookmark12">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth Mesh API documentation can be found in HTML format along with all Application Notes and User Guide pdf files in the following default installation directory:</p><p style="padding-top: 8pt;text-indent: 0pt;text-align: right;">SimplicityStudio\v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\app\bluetooth\documentation</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The API reference is under API_BLUETOOTH_MESH_HTML.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 86pt;text-indent: 0pt;text-align: left;"><span><img width="557" height="298" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_010.jpg"/></span></p><p class="s7" style="padding-top: 3pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 2.3. Bluetooth Mesh API Reference</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark9">Bluetooth Mesh Application Build Flow</a><a name="bookmark13">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Following the Simplicity Studio v5 software approach, the Bluetooth mesh stack is configured using components. Typically, items such as models, stack parameters, and features can be tuned through the software components menu. All component dependencies are handled internally by Simplicity Studio. Components and models can be configured, added, or removed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="703" height="355" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_011.jpg"/></span></p><p class="s7" style="padding-top: 5pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 2.4. Bluetooth Mesh Configurable Component</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Installing a model is shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="702" height="347" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_012.jpg"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 2.5. Bluetooth Mesh Model Installation</p></li></ol></li></ul></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: justify;"><a name="bookmark14">Project Structure</a><a name="bookmark22">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">This section explains the application project structure and the mandatory and optional resources available in the project.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A Bluetooth mesh project is a collection of C source and header files that is built using makefiles. The Simplicity Studio 5 installation generates build files and either generates, copies, or links all SDK or component source files, based on the selection made during pro- ject creating. After a project is created, the following directories are created:</p><ul id="l17"><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">The config directory - This directory is autogenerated and aggregates the component configuration files. Files are all headers and contain macros that are specific to each component. The UI tools used to generate the GATT database as well as the DCD for Bluetooth mesh are in this directory.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">The autogen directory – This directory aggregates the C code generated by Simplicity Studio and the SDK. It is a mix of header and source files that constitute the skeleton of the project. Silicon Labs recommends that you do not edit the files in this directory, as they will be overwritten the next time files are generated.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">The gecko_sdk_3.x directory – This directory copies or links to the SDK resources. Only sources that are relevant to your project and how it is configured are copied or linked.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">The GNU ARM Vxyz – Debug/Release directory – This is the build directory when the GCC compiler is used.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Application code is implemented at the root of the project in app.c/h and main.c. The following table shows the typical layout of a pro- ject:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><span><img width="454" height="289" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_013.jpg"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 3.1. Bluetooth Mesh Project Directories</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l18"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: justify;"><a name="bookmark15">Bluetooth Mesh Library Files</a><a name="bookmark23">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The Bluetooth stack libraries are:</p></li></ol></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">binapploader.o<span class="p">: Binary image of the Bluetooth AppLoader, provides the optional Bluetooth LE Over-the-Air (OTA) functionality.</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">binapploader_nvm3.o<span class="p">: Binary image of the Bluetooth AppLoader for Series 1 with NVM3 support.</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">libbluetooth.a<span class="p">: Bluetooth stack library.</span></p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;"><b>libnvm3_CMxx_gcc.a</b>: NVM3 functionality for Bluetooth LE and Bluetooth mesh stacks. NVM3 is the unique memory management system used for non-volatile memory. For more information how to use NVM3, see <i>AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage</i>.</p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">libbluetooth_mesh.a<span class="p">: This library includes the radio driver layer and the Bluetooth LE stack, with the Bluetooth mesh stack built on top of it.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>RAIL (Radio Application Interface Layer)</b>. The Bluetooth LE and mesh stacks use RAIL to access the radio. RAIL libraries are linked to the Bluetooth mesh stack under libbluetooth_mesh.a. RAIL has separate libraries for each device family and for single- and multi- protocol environments. RAIL libraries are provided in the Gecko Platform. For more information refer to <i>UG103.13: RAIL Fundamentals </i>and other RAIL documentation.</p><p class="s7" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">EMLIB and EMDRV<span class="p">. The Bluetooth LE and mesh stacks use EMLIB and EMDRV libraries to access EFR32 hardware. EMLIB and EMDRV peripheral libraries are provided in source code and they must be included in the project. EMLIB and EMDRV are part of the Gecko Platform. For more details on EMLIB and EMDRV, refer to the Gecko Bootloader API reference in &lt;Simplicity Studio Gecko SDK&gt;\platform\bootloader\documentation\Gecko_Bootloader_API_Reference\index.html, along with the documentation in their respec- tive folders under &lt;Simplicity Studio Gecko SDK&gt;\platform\.</span></p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">mbedTLS<span class="p">. The mbedTLS security library is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Among other header files generated by the SDK, the following defines the APIs for both the Bluetooth mesh and LE stack. These files serve two purposes: first they contain the actual Bluetooth LE and mesh stack API and the commands and events for the stack, and second they provide configuration, event, and sleep management API to the Bluetooth LE and mesh stack.</p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">sl_btmesh_api.h<span class="p">. This file is part of the SDK directory and defines the Bluetooth mesh API available to the user. It contains all routine definitions as well as types, structures and event definitions needed in order to write a Bluetooth mesh application.</span></p><p class="s7" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">sl_bt_api.h<span class="p">. This file is part of the SDK directory and defines the API available to the user. It contains all routine definitions as well as types, structures and event definitions needed in order to write a Bluetooth LE application.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that an application may use both APIs if the developer wished to use both Bluetooth LE and mesh in the project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l19"><ol id="l20"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark16">Stack</a><a name="bookmark24">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh stack initialization is autogenerated and takes place in sl_btmesh.c under the autogen directory. Sequentially, in the user application code, a system init function <span class="s11">sl_system_init() </span>is called in main.c. This function is defined in the generated file sl_system_init.c. The stack is then initialized from there.</p><p class="s12" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">void sl_system_init(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">sl_platform_init(); sl_driver_init(); sl_service_init(); sl_stack_init(); sl_internal_app_init();</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s11">sl_stack_init() </span>function initializes the radio transmitter/receiver and makes the call to both the Bluetooth LE and mesh stack initialization functions (sl_event_handler.c).</p><p class="s12" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">void sl_stack_init(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">sl_rail_util_pa_init(); sl_rail_util_pti_init(); sl_bt_init(); sl_btmesh_init();</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Additionally, the default Bluetooth LE stack configuration structure and macros can be found under the config directory, in the sl_bluetooth_config.h file. The content of that file is generated by the SDK via the Bluetooth LE and mesh components. For more infor- mation on how to configure the Bluetooth mesh stack, refer to <i>UG472: Bluetooth® Mesh Stack and Bluetooth® Mesh Configurator User&#39;s Guide for SDK v2.x</i>.</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">static sl_bt_configuration_t config = SL_BT_CONFIG_DEFAULT; sl_status_t err = sl_bt_init_stack(&amp;config);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This function takes a single argument - a pointer to a sl_bt_configuration_t struct. Its purpose is to configure and initialize the Bluetooth stack with the parameters provided in the struct. More information on the sl_bt_init_stack() routine is available in the HTML API docu- mentation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark17">Node</a><a name="bookmark25">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A device configured as a node in a Bluetooth mesh network is initialized by the <span class="s11">sl_btmesh_node_init() </span>routine. The call to that function is usually present in the Bluetooth mesh user application state machine (switch/case statements) in the app.c file:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">sl_status_t sl_btmesh_node_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Each node can be configured in various ways. Some nodes may support a set of models and features that other nodes are not meant to support. This is specific to the user and the network.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In order to make a model or feature functional, make sure the corresponding initialization class routine are called. For example, if a node supports the same generic server and/or client models (On/Off, Level, and so on), follow this procedure.</p><ol id="l21"><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Make sure that the corresponding model components are installed in your project. When a component is installed, a blue check symbols appears in front of it. If the component is configurable, a Configure control (gear symbol) is available next to the component name, and as a button in the top right corner.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="315" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_014.jpg"/></span></p></li><li><p style="padding-top: 5pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Make sure the models are properly added to your DCD configuration. If the model is not supported as a component, it has to be manually added to the corresponding element using the Bluetooth Mesh Configurator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><span><img width="560" height="278" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_015.jpg"/></span></p></li><li><p style="padding-top: 7pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Make sure the corresponding Bluetooth mesh classes are properly initialized.</p></li></ol><p class="s12" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/** @brief Table of used BGAPI classes */</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static const struct sli_bgapi_class * const btmesh_class_table[] =</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">SL_BTMESH_BGAPI_CLASS(health_server), SL_BTMESH_BGAPI_CLASS(proxy),</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">SL_BTMESH_BGAPI_CLASS(proxy_server), SL_BTMESH_BGAPI_CLASS(node),</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">SL_BTMESH_BGAPI_CLASS(generic_server), NULL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: This section only describes the common pitfalls that a user might encounter when setting up a node using generic client/server as an illustration. It is not an exhaustive list of steps that are necessary to have a generic On/Off or Battery client/server up and running, which would require a much longer description.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In the case of a generic On/Off server model for example, the following steps would need to be implemented on the server:</p></li></ol></ol></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Register a generic server handler.</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void init_models(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mesh_lib_generic_server_register_handler(MESH_GENERIC_ON_OFF_SERVER_MODEL_ID,</p><p class="s12" style="padding-left: 248pt;text-indent: 0pt;line-height: 10pt;text-align: left;">BTMESH_GENERIC_ONOFF_SERVER_MAIN,</p><p class="s12" style="padding-left: 248pt;text-indent: 0pt;text-align: left;">onoff_request, onoff_change, onoff_recall);</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p></li><li><p style="padding-top: 7pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Populate the corresponding request/change/recall functions.</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void onoff_request(uint16_t model_id,</p><p class="s12" style="padding-left: 156pt;text-indent: 0pt;line-height: 10pt;text-align: left;">uint16_t element_index,</p><p class="s12" style="padding-left: 156pt;text-indent: 43pt;text-align: left;">uint16_t element_index, uint16_t client_addr,</p><p class="s12" style="padding-left: 156pt;text-indent: 0pt;text-align: left;">uint16_t server_addr, uint16_t appkey_index,</p><p class="s12" style="padding-left: 156pt;text-indent: 0pt;text-align: left;">const struct mesh_generic_request *request, uint32_t transition_ms,</p><p class="s12" style="padding-left: 156pt;text-indent: 0pt;text-align: left;">uint16_t delay_ms, uint8_t request_flags)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void onoff_change(uint16_t model_id,</p><p class="s12" style="padding-left: 158pt;text-indent: 0pt;line-height: 10pt;text-align: left;">uint16_t element_index,</p><p class="s12" style="padding-left: 158pt;text-indent: 0pt;text-align: left;">const struct mesh_generic_state *current, const struct mesh_generic_state *target, uint32_t remaining_ms)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void onoff_recall(uint16_t model_id,</p><p class="s12" style="padding-left: 158pt;text-indent: 0pt;line-height: 10pt;text-align: left;">uint16_t element_index,</p><p class="s12" style="padding-left: 158pt;text-indent: 0pt;text-align: left;">const struct mesh_generic_state *current, const struct mesh_generic_state *target, uint32_t transition_ms)</p><p style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Note that this is only an example based on the generic On/Off model. It is commonly more difficult to start from scratch with generic models as it would require a very good understanding of both the Bluetooth mesh technology and the stack.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a name="bookmark18">In order to set up a working node configured as a light client/server model, Silicon Labs recommends using the sample application in Simplicity Studio. For more information, refer to </a><i>AN1299: Understanding the Silicon Labs Bluetooth Mesh SDK v2.x Lighting Demon- stration</i>.<a name="bookmark26">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><ol id="l23"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;">Provisioner</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To configure a device as a provisioner, first install the <b>Provisioner </b>component.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A provisioner must support the configuration client model. As a result the corresponding models should be added in the Bluetooth Mesh Configurator. Check that the configuration client model is part of the Bluetooth mesh init class table, generated by the SDK, in the sl_btmesh.c file:</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static const struct sli_bgapi_class * const btmesh_class_table[] =</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">… SL_BTMESH_BGAPI_CLASS(config_client), NULL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">This should also now be visible in the Bluetooth Mesh Configurator user interface.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Additionally, configure the <b>Bluetooth Mesh Stack </b>component so that the following parameters are set to values corresponding to your network:</p></li></ol></ol></li><li><p style="padding-top: 2pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Maximum number of provisioned devices allowed.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Maximum number of App keys allowed for each Provisioned device.</p></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">Maximum number of Net keys allowed for each Provisioned device.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">These three are required for successful provisioning in any network size, and may be enough for a very small network consisting of one or two nodes. In more complicated networks, provisioner configuration depends on many other parameters. For more information on Bluetooth mesh stack parameters, refer to <i>UG472: Bluetooth® Mesh Stack and Bluetooth® Mesh Configurator User&#39;s Guide for SDK v2.x</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following table shows an example. Note that the parameters are set to 4 as an example, not as a recommendation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;"><span><img width="566" height="286" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_016.jpg"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 3.2. Bluetooth Mesh Stack Component - Provisioner Settings</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The Provisioner is initialized using the following routine. The call to that function is usually present in the Bluetooth mesh user applica- tion state machine (switch/case statement) in the app.c file:</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">sl_status_t sl_btmesh_prov_init();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">No Bluetooth mesh API routine can be called before this one. Additionally, the node-initializing routine <span class="s11">sl_btmesh_node_init()</span></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">must not be called on a provisioner.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><ol id="l25"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark19">GATT Database</a><a name="bookmark27">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The GATT (Generic Attribute Profile) database is a standardized way of describing a Bluetooth device’s profiles, services, and charac- teristics. With the Silicon Labs Bluetooth stack, the GATT definitions are either directly edited in the Bluetooth GATT Configurator in Simplicity Studio or are written in XML. For more information on how to create GATT databases and the syntax, refer to <i>UG118: Blue Gecko Bluetooth® Smart Profile Toolkit Developer&#39;s Guide</i>.</p><p class="s7" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">gatt_db.c and gatt_db.h</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The gatt_db.c file defines the GATT database structure and content. It is autogenerated by the Bluetooth GATT configurator. gatt_db.h includes this database and the handles of local characteristics and services. Type definitions of GATT are automatically included from gatt_db_def.h to gatt_db.h. In the case of Bluetooth mesh, only the Bluetooth mesh services are relevant:</p></li></ol></ol></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Mesh Proxy service (UUID 0x1828): The Bluetooth mesh Proxy Service is used to enable a server to send and receive Proxy PDUs with a proxy client .</p><ul id="l26"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">Mesh Proxy Data In (UUID 0x2ADD)</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">Mesh Proxy Data Out (UUID 0x2ADE)</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: justify;">Mesh Provisioning service (UUID 0x1827): The Bluetooth mesh Provisioning Service allows a Provisioning Client to provision a Provisioning server to allow it to participate in the Bluetooth mesh network.</p><ul id="l27"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -14pt;text-align: left;">Mesh Provisioning Data In (UUID 0x2ADB)</p></li><li><p style="padding-left: 51pt;text-indent: -14pt;text-align: left;">Mesh Provisioning Data Out (UUID 0x2ADC)</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Those services and characteristics can be thought of as duplex communication channels for provisioning and proxy PDUs. The &quot;data in&quot; and &quot;out&quot; characteristics are then the Tx and Rx channel, respectively.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A device may support the Bluetooth mesh Provisioning Service or the Mesh Proxy Service or both. If both are supported, only one of these services should be exposed in the GATT database at a time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l28"><ol id="l29"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark20">Bluetooth Mesh Device Composition Data</a><a name="bookmark28">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The device composition data, or DCD, is a set of data indicating which features are supported, how many elements are present on a node with their description, and a set of identifiers defining the model layout across the elements of the node.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Composition Data state contains information about a node, the elements it includes, and the supported models. The Composition Data is composed of a number of pages of information. Composition Data Page 0 is mandatory. All other pages are optional. All Com- position Data Pages not defined in this specification are reserved for future use. The size of the state must not exceed the maximum useful access payload size.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following code snippet illustrate how this is defined for the Bluetooth mesh stack:</p><p class="s12" style="padding-top: 8pt;padding-left: 34pt;text-indent: -11pt;text-align: left;">const uint8_t<u> </u>mesh_dcd[] = { U16TOA(0x02ff), /* Company ID */ U16TOA(0xf0b0), /* Product ID */ U16TOA(0x1234), /* Version Number */</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">U16TOA(SL_BTMESH_CONFIG_RPL_SIZE), /* Capacity of Replay Protection List */ U16TOA(SL_BTMESH_FEATURE_BITMASK), /* Features Bitmask */</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/* Main */</p><p class="s12" style="padding-left: 44pt;text-indent: 0pt;line-height: 10pt;text-align: left;">U16TOA(0x0000), /* Location */</p><p class="s12" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">0x04, /* Number of SIG Models = 4 */ 0x00, /* Number of Vendor Models = 0 */</p><p class="s12" style="padding-left: 44pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/* SIG Models */</p><p class="s12" style="padding-left: 55pt;text-indent: 0pt;text-align: left;">U16TOA(0x0000), /* Configuration Server */ U16TOA(0x0002), /* Health Server */ U16TOA(0x0001), /* Configuration Client */ U16TOA(0x0003), /* Health Client */</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">const uint8_t *__mesh_dcd_ptr =<u> </u>mesh_dcd;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The structure called<u> </u>mesh_dcd is passed via a pointer to the C Bluetooth mesh library.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">After provisioning, the Provisioner typically retrieves the DCD of the newly provisioned node in order to determine the node’s features and functionalities so that it can be configured to operate in the network.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark21">RTOS Support</a><a name="bookmark29">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note that multiprotocol applications are not supported by the Bluetooth mesh protocol. RTOS is available only for the Bluetooth LE stack.</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Bluetooth Mesh Stack Event Handling</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></ol></li></ul></li></ul></li><li><h4 style="padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark30">Bluetooth Mesh Stack Event Handling</a><a name="bookmark32">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh stack for the Wireless Geckos is an event-driven architecture, where events are handled in the main while loop. The Bluetooth mesh stack runs on top of the Silicon Labs Bluetooth stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l30"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark31">Bluetooth LE versus Bluetooth Mesh Event</a><a name="bookmark33">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh protocol is built on top of Bluetooth Low Energy. This mean that a device running a Bluetooth LE stack will be able to receive a Bluetooth mesh PDU but will not be able to interpret the data that it contains. Nevertheless, a node or device can run both. In effect, it is possible to have Bluetooth LE and Bluetooth mesh events treated separately in an application.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this particular case, Bluetooth LE and Bluetooth mesh event application state machines need to be separate. In other words, the Bluetooth LE and Bluetooth mesh events cannot be treated in a unique switch-case statement.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">At the application level, the Silicon Labs Bluetooth Mesh API provides a way to differentiate Bluetooth mesh events from Bluetooth LE events. This is done through the Bluetooth mesh listener.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh events in the stack are handled similarly to the regular Bluetooth LE events. In a freshly created project, the Blue- tooth mesh switch case statement is performed by the routine <span class="s11">sl_btmesh_step() </span>and <span class="s11">sl_btmesh_process_event()</span>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For more information on how events are processed in both the Bluetooth LE and mesh stacks, refer to the ‘Bluetooth Stack Event Han- dling’ section in <i>UG434: Silicon Labs Bluetooth C Application Developer’s Guide for SDK v3.x</i>.</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">NVM Layout</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_018.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><h4 style="padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark34">NVM Layout</a><a name="bookmark35">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The non-volatile memory management system, called non-volatile memory 3 (NVM3), is a data storage driver for storing persistent data primarily, but not only, in internal flash. The term &quot;non-volatile&quot; and &quot;NVM3&quot; are synonymous in this section.</p><p class="s10" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">AN1135: Using Third Generation Non Volatile Memory Data Storage <span class="p">describes in detail how NVM3 operates. The NVM3 subsystem allocates a certain range of address to both the user and the Bluetooth LE and Bluetooth mesh stacks, among other things. The follow- ing table shows what key ranges are dedicated to the stack and the user:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:246pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Domain</p></td><td style="width:305pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">NVM3 Key Range</p></td></tr><tr style="height:15pt"><td style="width:246pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">User</p></td><td style="width:305pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">0x00000 - 0x0FFFF</p></td></tr><tr style="height:15pt"><td style="width:246pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth stack</p></td><td style="width:305pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">0x40000 - 0x4FFFF</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack key range is shared between regular Bluetooth Low Energy and Bluetooth mesh. Within this key range, the distri- bution is laid out as follow:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:244pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Domain</p></td><td style="width:307pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#808080"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">NVM3 Key Range</p></td></tr><tr style="height:15pt"><td style="width:244pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth internal stack data (bonding, etc.)</p></td><td style="width:307pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">0x40000 - 0x40FFF</p></td></tr><tr style="height:15pt"><td style="width:244pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth mesh stack data</p></td><td style="width:307pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">0x41000 - 0x44000</p></td></tr><tr style="height:15pt"><td style="width:244pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reserved for future use</p></td><td style="width:307pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">0x48000 - 0x4FFFF</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h4 style="padding-top: 4pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark36">Bluetooth Mesh Features</a><a name="bookmark41">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Optional networking or energy features may also be implemented in a Bluetooth mesh application. The Bluetooth mesh profile specifi- cation refers to those simply as features. There are four Bluetooth mesh features: Proxy, Relay, Friends, and Low Power nodes. This section describes all four.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Note: These features are specific to nodes, that is, devices in a Bluetooth mesh network. The provisioner of a network is not subject to features support.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark37">Proxy</a><a name="bookmark42">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Proxy feature allows a node to receive and transmit Bluetooth mesh messages between GATT and advertising bearers. The proxy feature is used to forward Network packets received by a node between GATT bearer and advertising bearers. This feature is optional and can be enabled/disabled at runtime. When this feature is enabled, the corresponding GATT Proxy service must be exposed.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The proxy feature defines two roles, the proxy client and the server. The proxy server is a node that supports both the GATT bearer and the advertising bearer. In practice, the proxy client is a node that supports only the GATT bearer.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For a proxy feature to run, the corresponding proxy routine class must be part of the stack initialization table. The following code snippet gives a proxy server example.</p><p class="s12" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static const struct sli_bgapi_class * const btmesh_class_table[] =</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">SL_BTMESH_BGAPI_CLASS(health_server), SL_BTMESH_BGAPI_CLASS(proxy),</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">SL_BTMESH_BGAPI_CLASS(proxy_server), SL_BTMESH_BGAPI_CLASS(node),</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">NULL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-top: 4pt;padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark38">Relay</a><a name="bookmark43">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Relay feature allows a node to receive and retransmit Bluetooth mesh messages over the advertising bearer to enable larger net- works.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The provisioner can enable the relay feature on a particular node (if supported) via the following routine:</p><p class="s12" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sl_status_t sl_btmesh_config_client_set_relay(uint16_t enc_netkey_index,</p><p class="s12" style="padding-left: 271pt;text-indent: 0pt;text-align: left;">uint16_t node_address, uint8_t value,</p><p class="s12" style="padding-left: 271pt;text-indent: 0pt;text-align: left;">uint8_t retransmit_count, uint16_t retransmit_interval_ms, uint32_t * handle)</p><p style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">A getter function is also available. For more details, refer to the Bluetooth Mesh Configuration Client section of the API html documenta- tion.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: In large networks, it is in general a good practice to limit the number of nodes supporting the relay feature. Otherwise, the data traffic can increase very rapidly to undesired levels.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark39">Friend</a><a name="bookmark44">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Friend feature allows a node to help a node supporting the Low Power feature to operate by storing messages destined for that node. Friendship is used by Low Power Nodes to limit the amount of time that they need to listen.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The application code for nodes supporting that feature need to enable it using:</p><ul id="l32"><li><p class="s11" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_btmesh_friend_init(void) <span class="p">for enabling the feature.</span></p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 22pt;text-indent: 0pt;line-height: 168%;text-align: left;">sl_status_t sl_btmesh_friend_deinit(void) <span class="p">for disabling the feature. For more information, refer to the HTML API Reference delivered with the SDK.</span></p></li></ul></li><li><p class="s7" style="padding-top: 7pt;padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark40">Low Power Node</a><a name="bookmark45">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The Low Power Node (LPN) feature allows a node to operate within a Bluetooth mesh network at significantly reduced receiver duty cycles, only in conjunction with a node supporting the Friend feature.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Similarly to the Friend feature, the application code for nodes supporting the Low Power Node feature needs to enable it:</p><ul id="l33"><li><p class="s11" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_btmesh_lpn_init(void)</p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_btmesh_lpn_deinit(void)</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">When the feature has been enabled on a node, and if a node offering friendship is within radio range, the friendship can be established and terminated using the following routines with the associated network key index:</p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_btmesh_lpn_establish_friendship(uint16_t netkey_index)</p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_btmesh_lpn_terminate_friendship(uint16_t netkey_index)</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Silicon Labs Bluetooth Mesh API allows the user to configure the time interval at which the LPN will poll the friend as well as other time variables:</p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 37pt;text-indent: -14pt;text-align: left;">sl_status_t sl_status_t sl_btmesh_lpn_config(uint8_t setting_id, uint32_t value)</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following arrays describes the setting id enum used by the stack to aggregates the LPN configuration values <span class="s11">(enum sl_btmesh_lpn_settings_t)</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:38pt"><td style="width:190pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">sl_btmesh_lpn_queue_length</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-right: 11pt;text-indent: 0pt;text-align: right;">(0x00)</p></td><td style="width:274pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 27pt;text-indent: 0pt;line-height: 110%;text-align: left;">Minimum queue length the friend must support in bytes. The value is rounded up to the nearest power of 2. Default is 2. Range is 2..128.</p></td></tr><tr style="height:46pt"><td style="width:190pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">sl_btmesh_lpn_poll_timeout</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-right: 11pt;text-indent: 0pt;text-align: right;">(0x01)</p></td><td style="width:274pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Poll timeout in milliseconds, which is the longest time that LPN sleeps in between querying its friend for queued messages.</p><p class="s16" style="padding-left: 5pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Default is 50 ms. The value is rounded to the nearest multiple of 100 ms. The range is 1 s to 95 h 59 min 59 s 900 ms.</p></td></tr><tr style="height:56pt"><td style="width:190pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">sl_btmesh_lpn_receive_delay</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-right: 11pt;text-indent: 0pt;text-align: right;">(0x02)</p></td><td style="width:274pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 7pt;text-indent: 0pt;text-align: justify;">Receive delay in milliseconds. Receive delay is the time between the LPN sending a request and listening for a response. Receive delay allows the friend node time to prepare the message and the LPN to sleep. Range: 10 ms to 255 ms. The default receive delay is 10 ms. The default value is 10.</p></td></tr><tr style="height:46pt"><td style="width:190pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">sl_btmesh_lpn_request_retries</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-right: 11pt;text-indent: 0pt;text-align: right;">(0x03)</p></td><td style="width:274pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Request retry is the number of retry attempts to repeat, for example, how many times to repeat the friend poll message if the friend update was not received by the LPN. Range is from 0 to 10. The default value is 6 (initial attempt plus 5 retries).</p></td></tr><tr style="height:25pt"><td style="width:190pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s17" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">sl_btmesh_lpn_retry_interval</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 7pt;padding-right: 11pt;text-indent: 0pt;text-align: right;">(0x04)</p></td><td style="width:274pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Time interval between retry attempts in milliseconds. Range is 0 to 100 ms. The default value is 100 ms.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Additionally, a friend poll request can be sent from the LPN at any time using the flowing routine with the appropriate network key index:</p><p class="s12" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">sl_status_t sl_btmesh_lpn_poll(uint16_t netkey_index)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 181%;text-align: left;">However, it is not required for correct operation, because the procedure will be performed automatically before the poll timeout expires. For more information on the friend and LPN API, refer to the HTML API documentation.</p><p class="s7" style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sl_btmesh_dcd.c</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">From a practical standpoint, the device composition data of each node contains a 2-byte field indicating the supported features. The following array illustrates the features field:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 85pt;text-indent: 0pt;text-align: left;">Bit</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Feature</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Notes</p></td></tr><tr style="height:25pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 89pt;text-indent: 0pt;text-align: left;">0</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Relay</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 31pt;text-indent: 0pt;text-align: left;">Relay feature supported if set to 1. 0 otherwise.</p></td></tr><tr style="height:25pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 89pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Proxy</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 31pt;text-indent: 0pt;text-align: left;">Proxy feature supported if set to 1. 0 otherwise.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 79pt;padding-right: 78pt;text-indent: 0pt;text-align: center;">Bit</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Feature</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Notes</p></td></tr><tr style="height:25pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;text-indent: 0pt;text-align: center;">2</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Friend</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 29pt;text-indent: 0pt;text-align: left;">Friend feature supported if set to 1. 0 otherwise.</p></td></tr><tr style="height:25pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;text-indent: 0pt;text-align: center;">3</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Low Power Node (LPN)</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 37pt;text-indent: 0pt;text-align: left;">LPN feature supported if set to 1. 0 otherwise.</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 79pt;padding-right: 78pt;text-indent: 0pt;text-align: center;">4 - 15</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reserved for future use.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reserved for future use.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark28" class="a">As mentioned in section </a><a href="#bookmark28" class="s8">3.1.5 Bluetooth Mesh Device Composition </a>Data, each node, after provisioning, sends its composition data page 0 to the provisioner. In the code example presented in that section, the macro SL_BTMESH_FEATURE_BITMASK is used with the default value of 3:</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">#define SL_BTMESH_FEATURE_BITMASK 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In this example, that macro enables the relay and proxy features (3) in the Bluetooth mesh stack. This is the default setting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><h4 style="padding-top: 4pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark46">Bluetooth Mesh Stacks and Wireless Gecko Configuration and Resources</a><a name="bookmark51">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">To run the Bluetooth stack and an application on a Wireless Gecko, the MCU and its peripherals have to be properly configured. Once the hardware is initialized, the stack also has to be initialized using the <span class="s11">sl_btmesh_init() </span><a href="#bookmark24" class="a">function as described in section </a><a href="#bookmark24" class="s8">3.1.1 Stack</a>. This process is automated by the SDK.</p><p class="s7" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_system_init()</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <span class="s11">sl_system_init() </span>function is used to initialize the system. It will call platform, driver, service, stack, and internal app init func- tions, located in the autogen folder.</p><p class="s7" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">app_init()</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This function is used to initialize application-specific features.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l34"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark47">Wireless Gecko MCU and Peripherals Configuration</a><a name="bookmark52">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When the configuration is relevant to Bluetooth mesh, the information is the same as provided in the ‘Wireless Gecko MCU and Periph- erals Configuration’ section of <i>UG434: Silicon Labs Bluetooth C Application Developer’s Guide for SDK v3.x</i>. The following table follows the order in that document and provides cross-references where appropriate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Configuration</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth mesh</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reference</p></td></tr><tr style="height:87pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Adaptive Frequency Hopping</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">Not supported when using the advertising bearer, as all data traffic uses on the primary advertising channels. If the GATT bearer is used, Bluetooth mesh data are sent and received via the Proxy protocol, which uses a Bluetooth Low Energy connection with dedicated Bluetooth mesh services.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Mesh profile specification</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth Clocks</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘Bluetooth Clocks’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">DC-DC Configuration</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘DC-DC Configuration’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">LNA</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘LNA’</p></td></tr><tr style="height:35pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Periodic Advertising</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 24pt;text-indent: 0pt;text-align: left;">Not supported. Legacy advertising (31 bytes long) only, as per the profile specification.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PTI</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘PTI’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Transmit Power</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘Transmit Power’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Filter Accept List</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘Accept List Filtering’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Wi-Fi Coexistence</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘Wi-Fi Coexistence’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">OTA Configuration</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported using Bluetooth LE services.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘OTA Configuration’</p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Even Connection Distribution Algorithm</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Not supported.</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:15pt"><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Interrupts</p></td><td style="width:183pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Supported</p></td><td style="width:184pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">UG434, ‘Interrupts’</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark48">Wireless Gecko Resources</a><a name="bookmark53">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth mesh stack uses some of the Wireless Gecko’s resources, which are not available to the application. The following table lists the resources and describes their use by the stack. The first four resources are always used by the Bluetooth stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Category</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Resource</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Used in software</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Notes</p></td></tr><tr style="height:25pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PRS</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PRS7</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PROTIMER RTC</p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">synchronization</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 28pt;text-indent: 0pt;text-align: left;">PRS7 always used by the Bluetooth stack.</p></td></tr><tr style="height:25pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Timers</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">RTCC</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">EM2</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">The sleep timer uses RTCC in the default configuration.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:17.49pt" cellspacing="0"><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Category</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Resource</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Used in software</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A6A6A6"><p class="s15" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Notes</p></td></tr><tr style="height:25pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PROTIMER</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth (LE and mesh)</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">The application does not have access to PROTIMER.</p></td></tr><tr style="height:35pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Radio</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">RADIO</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Always used and all radio registers are reserved for the Bluetooth LE and mesh stack.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">GPIO</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">NCP</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Host communication</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Up to 4 I/O pin. Optional.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">PTI</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Packet trace</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">2 to N I/O pins. Optional.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">TX ACTIVE</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">TX activity indication</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">1 I/O pin. Optional.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">RX ACTIVE</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">RX activity indication</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">1 I/O pin. Optional.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">COEX PTA</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Wi-Fi Coexistence</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Up to 4 I/O pins. Optional.</p></td></tr><tr style="height:56pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">CRC</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">GPCRC</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">NVM3</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">Can be used in application, but application should always reconfigure GPCRC before use, and GPCRC clock must not be disabled in CMU.</p></td></tr><tr style="height:15pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Flash</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">MSC</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">NVM3</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Can be used by the application.</p></td></tr><tr style="height:77pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Crypto</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">CRYPTO</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth Link encryption</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">The CRYPTO peripheral can only be accessed through the mbedTLS crypto library, not through any other means. The library should be able to do the scheduling between the stack and application access.</p></td></tr><tr style="height:25pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">“</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">RADIO AES</p></td><td style="width:137pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Bluetooth Link encryption</p></td><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s16" style="padding-top: 1pt;padding-left: 5pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">The application does not have access to RADIOAES</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;"><a name="bookmark49">Internal Flash and SRAM</a><a name="bookmark54">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark50">For more information, refer to the Wireless Gecko Resources section in </a><i>UG434: Silicon Labs Bluetooth C Application Developer’s Guide for SDK v3.x</i>.<a name="bookmark55">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 51pt;text-indent: -28pt;text-align: left;">Monitoring Radio RX and TX State Using PRS (Peripheral Reflex System)</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It is sometimes useful, for debugging purposes, to monitor the state of the radio transmitter/receiver. This can be done by outputting on pins the RX_ACTIVE and TX_ACTIVE signals. An example is provided here on how to do that on series 2 devices (EFR32xG21-based Wireless Gecko starter kit).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">First, make sure the <b>PRS </b>component is installed in the project. Then the following code example indicates how PRS can be used to output the RX_ACTIVE and TX_ACTIVE signals.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark53" class="a">Note: As indicated in the table in section </a><a href="#bookmark53" class="s8">7.2 Wireless Gecko Resources</a>, PRS channel 7 is used by the Bluetooth LE stack and cannot be used in this example.</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">#include &quot;em_prs.h&quot; #include &quot;em_cmu.h&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">/* Enable TX_ACT signal through GPIO PD03 */ #define _PRS_CH_CTRL_SOURCESEL_RAC2 0x00000031UL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#define PRS_CH_CTRL_SOURCESEL_RAC2 (_PRS_CH_CTRL_SOURCESEL_RAC2 &lt;&lt; 8) #define _PRS_CH_CTRL_SIGSEL_RACRX 0x00000003UL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#define PRS_CH_CTRL_SIGSEL_RACRX (_PRS_CH_CTRL_SIGSEL_RACRX &lt;&lt; 0) #define _PRS_CH_CTRL_SIGSEL_RACTX 0x00000004UL</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#define PRS_CH_CTRL_SIGSEL_RACTX (_PRS_CH_CTRL_SIGSEL_RACTX &lt;&lt; 0)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">/* RACPAEN Enable (TX_ACT) signal through GPIO PD03 */ #define TX_ACTIVE_PRS_SOURCE PRS_CH_CTRL_SOURCESEL_RAC2 #define TX_ACTIVE_PRS_SIGNAL PRS_CH_CTRL_SIGSEL_RACTX #define TX_ACTIVE_PRS_CHANNEL 10</p><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">#define TX_ACTIVE_PRS_PORT gpioPortD #define TX_ACTIVE_PRS_PIN 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">/* Enable RX_ACT signal through GPIO PD02 */</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#define RX_ACTIVE_PRS_SOURCE PRS_CH_CTRL_SOURCESEL_RAC2 #define RX_ACTIVE_PRS_SIGNAL PRS_CH_CTRL_SIGSEL_RACRX #define RX_ACTIVE_PRS_CHANNEL 11</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#define RX_ACTIVE_PRS_PORT gpioPortD #define RX_ACTIVE_PRS_PIN 2</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This snippet of codes defines which PRS signals coming from the radio source (RAC, 0x31 on xG21) should be used. Those signals will then be routed to the desired pins, in this case PD3 for the TX_ACTIVE signal and PD2 for the RX_ACTIVE signal.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Then the following functions set up the pins and configure the PRS module:</p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void initGpio(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">// Set RX/TX active pins</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">GPIO_PinModeSet(TX_ACTIVE_PRS_PORT, TX_ACTIVE_PRS_PIN, gpioModePushPull, 0); GPIO_PinModeSet(RX_ACTIVE_PRS_PORT, RX_ACTIVE_PRS_PIN, gpioModePushPull, 0);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Set up GPIO clock */ CMU_ClockEnable(cmuClock_GPIO,true);</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">static void initPrs(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Enable PRS clock */ CMU_ClockEnable(cmuClock_PRS, true);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Use RAC, PAEN as PRS source */</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">PRS_SourceAsyncSignalSet( TX_ACTIVE_PRS_CHANNEL, PRS_RAC_PAEN, PRS_RAC_PAEN);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Use RAC, RX_ACT as PRS source */</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">PRS_SourceAsyncSignalSet( RX_ACTIVE_PRS_CHANNEL, PRS_RAC_RX, PRS_RAC_RX);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Route output to PC01. No extra PRS logic needed here. */ PRS_PinOutput(TX_ACTIVE_PRS_CHANNEL,prsTypeAsync, TX_ACTIVE_PRS_PORT , TX_ACTIVE_PRS_PIN); PRS_PinOutput(RX_ACTIVE_PRS_CHANNEL,prsTypeAsync, RX_ACTIVE_PRS_PORT , RX_ACTIVE_PRS_PIN);</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s11">initGpio() </span>routine sets the previously-defined pins as output and enables the GPIO clock. The <span class="s11">initPrs() </span>routine enables the PRS module clock, sets the asynchronous channels, and routes the signals to the pins.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The two functions need to be called in the user application code as such:</p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">SL_WEAK void app_init(void)</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Set up GPIOs */ initGpio();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">/* Set up PRS */ initPrs();</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The radio state can then be monitored using the defined pins on a logic analyzer. In this example, the radio is running a simple Blue- tooth LE advertisement example. On each of the three primary advertising channels, data is first transmitted (long logic high) then the radio switches to the receive state (short logic high), which is repeated on each channel.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="700" height="80" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_019.jpg"/></span></p><p class="s7" style="padding-top: 5pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 7.1. Radio State Monitored (Bluetooth LE Advertisement)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="695" height="81" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_020.jpg"/></span></p><p class="s7" style="padding-top: 5pt;padding-left: 147pt;text-indent: 0pt;text-align: center;">Figure 7.2 Radio State Monitored (Zoomed)</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Documentation</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_021.png"/></span></p></li></ol></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 40pt;text-indent: -18pt;text-align: left;"><a name="bookmark56">Documentation</a><a name="bookmark57">&zwnj;</a></h4></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="720" height="815" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s18" style="padding-top: 14pt;padding-left: 36pt;text-indent: 0pt;line-height: 122%;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="432" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_023.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:63.94pt" cellspacing="0"><tr style="height:99pt"><td style="width:98pt" bgcolor="#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;"><span><img width="66" height="66" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_024.png"/></span></p><p style="padding-top: 10pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/solutions/iot" class="s19">IoT Portfolio</a></p><p style="padding-top: 1pt;padding-left: 1pt;padding-right: 19pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/IoT" class="s20">www.silabs.com/IoT</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/simplicity" class="s19">SW/HW</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/simplicity" class="s20">www.silabs.com/simplicity</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;text-align: center;"><a href="https://www.silabs.com/about-us/corporate-responsibility/commitment-to-quality" class="s19">Quality</a></p><p style="padding-top: 1pt;padding-left: 18pt;padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s20">www.silabs.com/quality</a></p></td><td style="width:126pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/community" class="s19" target="_blank">Support &amp; Community</a></p><p style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.silabs.com/community" class="s20">www.silabs.com/community</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_026.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_027.png"/></span></p><p class="s21" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s23">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s23">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s23">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><span class="s25">information, visit </span><a href="https://www.silabs.com/about-us/inclusive-lexicon-project" class="s27" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s25" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s28" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s22">Silicon Laboratories Inc.</span>®<span class="s22">, Silicon Laboratories</span>®<span class="s22">, Silicon Labs</span>®<span class="s22">, SiLabs</span>® <span class="s22">and the Silicon Labs logo</span>®<span class="s22">, Bluegiga</span>®<span class="s22">, Bluegiga Logo</span>®<span class="s22">, Clockbuilder</span>®<span class="s22">, CMEMS</span>®<span class="s22">, DSPLL</span>®<span class="s22">, EFM</span>®<span class="s22">, EFM32</span>®<span class="s22">, EFR, Ember</span>®<span class="s23">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s22">, EZLink</span>®<span class="s22">, EZRadio</span>®<span class="s22">, EZRadioPRO</span>®<span class="s22">, Gecko</span>®<span class="s22">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s22">, Precision32</span>®<span class="s22">, ProSLIC</span>®<span class="s22">, Simplicity Studio</span>®<span class="s22">, SiPHY</span>®<span class="s22">, Telegesis, the Telegesis Logo</span>®<span class="s22">, USBXpress</span>® <span class="s22">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s22">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="ug295-bluetooth-mesh-dev-guide/Image_028.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s25" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">www.silabs.com</h3></p></body></html>
