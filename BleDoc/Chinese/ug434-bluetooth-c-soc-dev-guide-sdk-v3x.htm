<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>UG434: Silicon Labs Bluetooth ® C Application Developer&#39;s Guide for SDK v3.x</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .h3 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 19pt; vertical-align: 8pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 18pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .a, a { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s8 { color: #007694; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s9 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s10 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s14 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s18 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s19 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s20 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s21 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s23 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s24 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s25 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s26 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s27 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s28 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s29 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s31 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s32 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s33 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 .s34 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt;counter-reset: d2 1; }
 #l6> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l7 {padding-left: 0pt;counter-reset: d3 1; }
 #l7> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l8 {padding-left: 0pt;counter-reset: d3 1; }
 #l8> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l9 {padding-left: 0pt;counter-reset: e1 4; }
 #l9> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l9> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l10 {padding-left: 0pt;counter-reset: e2 2; }
 #l10> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l10> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l11 {padding-left: 0pt;counter-reset: e3 8; }
 #l11> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l12 {padding-left: 0pt;counter-reset: d2 1; }
 #l12> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l13 {padding-left: 0pt;counter-reset: d3 1; }
 #l13> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l14 {padding-left: 0pt;counter-reset: d3 1; }
 #l14> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l15 {padding-left: 0pt;counter-reset: d2 1; }
 #l15> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l16 {padding-left: 0pt;counter-reset: d2 1; }
 #l16> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l17 {padding-left: 0pt;counter-reset: d3 1; }
 #l17> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l18 {padding-left: 0pt;counter-reset: d3 1; }
 #l18> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 li {display: block; }
 #l19 {padding-left: 0pt;counter-reset: f1 1; }
 #l19> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l20 {padding-left: 0pt; }
 #l20> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21 {padding-left: 0pt;counter-reset: f2 1; }
 #l21> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l22 {padding-left: 0pt; }
 #l22> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23 {padding-left: 0pt; }
 #l23> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24 {padding-left: 0pt;counter-reset: f2 1; }
 #l24> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l25 {padding-left: 0pt;counter-reset: f2 1; }
 #l25> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt;counter-reset: f2 1; }
 #l28> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 #l29 {padding-left: 0pt;counter-reset: f3 1; }
 #l29> li>*:first-child:before {counter-increment: f3; content: counter(f1, decimal)"."counter(f2, decimal)"."counter(f3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l29> li:first-child>*:first-child:before {counter-increment: f3 0;  }
 #l30 {padding-left: 0pt;counter-reset: l1 1; }
 #l30> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l31 {padding-left: 0pt; }
 #l31> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l32 {padding-left: 0pt;counter-reset: f3 1; }
 #l32> li>*:first-child:before {counter-increment: f3; content: counter(f1, decimal)"."counter(f2, decimal)"."counter(f3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: f3 0;  }
 #l33 {padding-left: 0pt; }
 #l33> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l34 {padding-left: 0pt;counter-reset: o1 5; }
 #l34> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l34> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 #l35 {padding-left: 0pt;counter-reset: o2 1; }
 #l35> li>*:first-child:before {counter-increment: o2; content: counter(o1, decimal)"."counter(o2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: o2 0;  }
 #l36 {padding-left: 0pt; }
 #l36> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l37 {padding-left: 0pt;counter-reset: o3 1; }
 #l37> li>*:first-child:before {counter-increment: o3; content: counter(o1, decimal)"."counter(o2, decimal)"."counter(o3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l37> li:first-child>*:first-child:before {counter-increment: o3 0;  }
 #l38 {padding-left: 0pt;counter-reset: o3 1; }
 #l38> li>*:first-child:before {counter-increment: o3; content: counter(o1, decimal)"."counter(o2, decimal)"."counter(o3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l38> li:first-child>*:first-child:before {counter-increment: o3 0;  }
 #l39 {padding-left: 0pt; }
 #l39> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40 {padding-left: 0pt;counter-reset: o2 1; }
 #l40> li>*:first-child:before {counter-increment: o2; content: counter(o1, decimal)"."counter(o2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l40> li:first-child>*:first-child:before {counter-increment: o2 0;  }
 #l41 {padding-left: 0pt; }
 #l41> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l42 {padding-left: 0pt;counter-reset: o2 1; }
 #l42> li>*:first-child:before {counter-increment: o2; content: counter(o1, decimal)"."counter(o2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: o2 0;  }
 #l43 {padding-left: 0pt; }
 #l43> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l44 {padding-left: 0pt;counter-reset: t1 1; }
 #l44> li>*:first-child:before {counter-increment: t1; content: "("counter(t1, decimal)") "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l44> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 #l45 {padding-left: 0pt;counter-reset: o3 1; }
 #l45> li>*:first-child:before {counter-increment: o3; content: counter(o1, decimal)"."counter(o2, decimal)"."counter(o3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: o3 0;  }
 #l46 {padding-left: 0pt; }
 #l46> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l47 {padding-left: 0pt;counter-reset: o3 1; }
 #l47> li>*:first-child:before {counter-increment: o3; content: counter(o1, decimal)"."counter(o2, decimal)"."counter(o3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l47> li:first-child>*:first-child:before {counter-increment: o3 0;  }
 #l48 {padding-left: 0pt;counter-reset: v1 4; }
 #l48> li>*:first-child:before {counter-increment: v1; content: counter(v1, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 #l48> li:first-child>*:first-child:before {counter-increment: v1 0;  }
 #l49 {padding-left: 0pt;counter-reset: w1 2; }
 #l49> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)" "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 #l49> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="37" height="37" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_002.png"/></span></p><h1 style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">UG434: Silicon Labs <i>Bluetooth </i><span class="h3">® </span>C Application Developer&#39;s Guide for SDK v3.x</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="205" height="1" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="202" height="1" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Project structure and development flow</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Bluetooth stack and Wireless Gecko configuration</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Interrupt handling</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Event and sleep management</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Resource usage and available resources</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document is an essential reference for everybody develop- ing C-based applications for the Silicon Labs Wireless Gecko products using the Silicon Labs Bluetooth stack. The guide cov- ers the Bluetooth stack architecture, application development flow, usage, and limitations of the MCU core and peripherals, stack configuration options, and stack resource usage. This ver- sion applies to the Silicon Labs Bluetooth Software Development Kit (SDK) version 3.0.x and higher.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The purpose of the document is to capture and fill in the blanks between the Bluetooth Stack API reference, Gecko SDK API reference, and Wireless Gecko reference man- uals, when developing Bluetooth applications for the Wireless Geckos. This document exposes details that will help developers make the most out of the available hardware resources.</p><h4 style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">Table of Contents</a></h4><ol id="l2"><li><p style="padding-top: 12pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark4" class="s5">Introduction 4</a></p><ol id="l3"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark5" class="a">About this Version </a><a href="#bookmark5">4</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark6" class="a">Prerequisites </a><a href="#bookmark6">4</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark9" class="s5">Application Development Flow 5</a></p><ol id="l4"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark10" class="a">Application Build Flow </a><a href="#bookmark10">6</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark19" class="s5">Project Structure 7</a></p><ol id="l5"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark20" class="a">Bluetooth Files </a><a href="#bookmark20">7</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark21" class="a">GATT Database </a><a href="#bookmark21">9</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark22" class="a">Device Firmware Upgrade </a><a href="#bookmark22">9</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark23" class="a">NCP Applications </a><a href="#bookmark23">9</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark24" class="a">RTOS Support </a><a href="#bookmark24">10</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark25" class="a">Multiprotocol Support </a><a href="#bookmark25">10</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark26" class="a">Platform Components </a><a href="#bookmark26">10</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark51" class="s5">Configuring the Bluetooth Stack and a Wireless Gecko Device 11</a></p><ol id="l6"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark52" class="a">Wireless Gecko MCU and Peripherals Configuration </a><a href="#bookmark52">11</a></p><ol id="l7"><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark53" class="a">Adaptive Frequency Hopping </a><a href="#bookmark53">11</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark54" class="a">Bluetooth Clocks </a><a href="#bookmark54">12</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark55" class="a">DC-DC Configuration </a><a href="#bookmark55">13</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark56" class="a">LNA </a><a href="#bookmark56">13</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark57" class="a">Periodic Advertising </a><a href="#bookmark57">14</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark58" class="a">PTI </a><a href="#bookmark58">14</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark59" class="a">Transmit Power </a><a href="#bookmark59">14</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark60" class="a">Accept List Filtering </a><a href="#bookmark60">15</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark61" class="a">Wi-Fi coexistence </a><a href="#bookmark61">15</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark62" class="a">OTA Configuration </a><a href="#bookmark62">15</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark63" class="a">Even Connection Distribution Algorithm </a><a href="#bookmark63">16</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark64" class="a">Bluetooth Configuration with sl_bt_init_stack() </a><a href="#bookmark64">17</a></p><ol id="l8"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark65" class="a">Bluetooth On-Demand Start </a><a href="#bookmark65">18</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark66" class="a">CONFIG_FLAGS </a><a href="#bookmark66">18</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark67" class="a">Mbedtls </a><a href="#bookmark67">18</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark68" class="a">Multiprotocol Priority Configuration </a><a href="#bookmark68">19</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark69" class="a">Sleep </a><a href="#bookmark69">19</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark70" class="a">Bluetooth Stack Configuration </a><a href="#bookmark70">20</a></p><p style="padding-top: 1pt;padding-left: 48pt;text-indent: 0pt;text-align: left;"><a href="#bookmark71" class="a">4.2.7 PA </a><a href="#bookmark71">20</a></p><ol id="l9"><ol id="l10"><ol id="l11"><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark72" class="a">Software Timers </a><a href="#bookmark72">21</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark73" class="a">RF Path </a><a href="#bookmark73">21</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark74" class="a">NVM3 Error Codes </a><a href="#bookmark74">21</a></p></li></ol></ol></ol></li></ol></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark80" class="s5">Bluetooth Stack Event Handling 22</a></p><ol id="l12"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark81" class="a">Non-Blocking Event Listener </a><a href="#bookmark81">22</a></p><ol id="l13"><li><p style="padding-top: 2pt;padding-left: 82pt;text-indent: -33pt;text-align: left;"><a href="#bookmark82" class="a">Notification for Updating Event Listener </a><a href="#bookmark82">22</a></p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark83" class="a">Event Listener with RTOS </a><a href="#bookmark83">23</a></p><ol id="l14"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark84" class="a">Commands from Multiple Tasks </a><a href="#bookmark84">23</a></p></li></ol></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark88" class="s5">Interrupts 24</a></p><ol id="l15"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark89" class="a">External Event </a><a href="#bookmark89">24</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark90" class="a">Priorities </a><a href="#bookmark90">25</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark103" class="s5">Wireless Gecko Resources 26</a></p><ol id="l16"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark104" class="a">Flash </a><a href="#bookmark104">27</a></p><ol id="l17"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark105" class="a">Optimizing Flash Usage </a><a href="#bookmark105">28</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark106" class="a">Bluetooth Bonding Database </a><a href="#bookmark106">28</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark107" class="a">Linking </a><a href="#bookmark107">29</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark108" class="a">RAM </a><a href="#bookmark108">30</a></p><ol id="l18"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark109" class="a">Bluetooth Stack </a><a href="#bookmark109">30</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark110" class="a">Bluetooth Object Pools </a><a href="#bookmark110">30</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark111" class="a">Bluetooth Buffer Memory </a><a href="#bookmark111">30</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark112" class="a">Bluetooth GATT Database </a><a href="#bookmark112">31</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark113" class="a">Call Stack </a><a href="#bookmark113">31</a></p></li><li><p style="padding-top: 1pt;padding-left: 82pt;text-indent: -33pt;text-align: left;"><a href="#bookmark114" class="a">Heap memory </a><a href="#bookmark114">31</a></p></li></ol></li></ol></li><li><p style="padding-top: 9pt;padding-left: 42pt;text-indent: -19pt;text-align: left;"><a href="#bookmark116" class="s5">Application ELF-file 32</a></p></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark118" class="s5">Documentation 34</a></p></li></ol><p class="s8" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_006.png"/></span></p><ol id="l19"><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Introduction</a><a name="bookmark4">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document is a C developer’s guide for the Silicon Labs Bluetooth stack. It covers various angles of development, and is an impor- tant reference to everyone developing in C for Wireless Gecko products that are running the Bluetooth stack.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The document covers the following topics:</p><ul id="l20"><li><p class="s23" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark9" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Section </a>2. Application Development Flow <span style=" color: #000;">discusses the application development flow.</span></p></li><li><p class="s23" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark19" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Section </a>3. Project Structure <span style=" color: #000;">reviews project structure.</span></p></li><li><p class="s23" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark51" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Section </a>4. Configuring the Bluetooth Stack and a Wireless Gecko Device <span style=" color: #000;">explains the project include libraries and the actual Wireless Gecko configuration in the application code.</span></p></li><li><p class="s23" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark80" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Section </a>5. Bluetooth Stack Event Handling <span style=" color: #000;">is an important piece for everyone developing with the Silicon Labs Bluetooth stack, as it explains how the application runs in sync with the stack in an event-based architecture.</span></p></li><li><p class="s23" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><a href="#bookmark88" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Section </a><a href="#bookmark88" class="s10">6. Interrupts</a> <a href="#bookmark103" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and section </a><a href="#bookmark103" class="s10">7. Wireless Gecko Resources</a> <span style=" color: #000;">touch on the topics of peripherals and the chipset resources, cover- ing what is reserved for the stack usage, how interrupts should be handled, and the stack’s memory footprint and available memory for the application.</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l21"><li><p class="s11" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">About this Version</a><a name="bookmark5">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 19pt;text-align: left;">The current version of Silicon Labs&#39; Bluetooth SDK is 3.2.x. Currently supported compilers and IDE versions are:</p><ul id="l22"><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">IDE: <span class="p">Simplicity Studio 5.2 or newer</span></p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Compiler: <span class="p">GCC-10-2020-q4-update, and IAR 8.50.9</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Prerequisites</a><a name="bookmark6">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document assumes the current version of Silicon Labs’ Bluetooth SDK has been properly installed to the development machine (Windows, MAC OSX, or Linux), and that the reader is familiar with the quick start guides and with the SDK’s examples. Also, the read- er should have a basic understanding of Bluetooth technology. For more information, see <i>UG103.14: Bluetooth Technology Fundamen- tals</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For instructions on getting started using example applications in Silicon Labs Simplicity Studio development environment, see <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide</i>.</p></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark7">Application Development Flow</a><a name="bookmark9">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following figure describes the high-level firmware structure. The developer creates an application on top of the stack, which Silicon Labs provides as a precompiled object-file, enabling the Bluetooth connectivity for the end-device.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 176pt;text-indent: 0pt;text-align: left;"><span><img width="312" height="352" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_007.jpg"/></span></p><p class="s11" style="padding-top: 5pt;padding-left: 143pt;text-indent: 0pt;text-align: center;">Figure 2.1.  Bluetooth Stack Architecture Block Diagram</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack contains following blocks.</p><ul id="l23"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Bootloader—</b>The Gecko Bootloader is not part of the stack but is provided with the Bluetooth SDK. See <i>UG266: Gecko Bootloader User Guide </i>and <i>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth Applications </i>for more information. For information on bootloading in general, see <i>UG103.06: Bootloading Fundamentals</i>.</p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Bluetooth stack—<span class="p">Bluetooth functionality consisting of link layer, generic access profile, security manager, attribute protocol, and generic attribute profile.</span></p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Bluetooth AppLoader—<span class="p">An application that starts after the bootloader. It checks if the user application is valid and, if it is, AppLoad- er starts the application. If the application image is not valid, AppLoader starts the OTA process to try to receive a valid application image. This requires using the Gecko Bootloader.</span></p></li></ul><ol id="l24"><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Application Build Flow</a><a name="bookmark10">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="695" height="225" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_008.jpg"/></span></p><p class="s11" style="padding-top: 6pt;padding-left: 144pt;text-indent: 0pt;text-align: center;">Figure 2.2.  Bluetooth Project Build Flow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Building a project starts by defining the Bluetooth services and characteristics (GATT definitions) and by writing the application source code from Silicon Labs-provided examples or an empty project template, as described in <i>QSG169: Bluetooth® SDK v3.x Quick Start Guide</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">SDK v2.1.0 and later offer two ways to define Bluetooth services and characteristics. The first option is the Visual GATT Editor GUI in Simplicity Studio. This is a graphical tool for designing the GATT and for generating <i>gatt_db.c </i>and <i>gatt_db.h</i>. Additionally, it can im- port <i>.xml </i>and <i>.bgproj </i>GATT definition files. The Visual GATT Editor is the default tool for GATT definition and generation in Simplicity Studio projects.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The second option is to create an .<i>xml </i>or <i>.bgproj </i>according to the <i>UG118: Blue Gecko Bluetooth® Profile Toolkit Developer&#39;s Guide </i>and then use the BGBuild executable as a pre-compilation step to convert the GATT definition file into .c and .h. This method is used in IAR Embedded Workbench projects.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Compiling the project generates an object file, which is then linked with the pre-compiled libraries provided in the SDK. The output of the linking is a flash image that can be programmed to the supported Wireless Gecko devices.</p></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark11">Project Structure</a><a name="bookmark19">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">This section explains the application project structure and the mandatory and optional resources that must be included in the project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l25"><li><p class="s11" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark12">Bluetooth Files Library Files</a><a name="bookmark20">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The Bluetooth stack libraries are:</p><ul id="l26"><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">binapploader.o: <span class="p">Binary image of the Bluetooth AppLoader, provides the optional OTA (Over-the-Air) functionality.</span></p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">binapploader_nvm3.o: <span class="p">Binary image of the Bluetooth AppLoader for EFR32[B|M]G1x devices with NVM3 support.</span></p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">libbluetooth.a: <span class="p">Bluetooth stack library.</span></p></li><li><p class="s11" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">libpsstore.a: <span class="p">PS Store functionality for the Bluetooth stack. This is not available on EFR32[B|M]G2x devices. NVM3 must be used instead.</span></p></li></ul><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">RAIL</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack uses RAIL to access the radio and RAIL libraries needs to be linked with Bluetooth stack. RAIL has separate libra- ries for each device family and for single- and multi-protocol environments. RAIL libraries are provided in the Gecko SDK Suite. For more information refer to <i>UG103.13: RAIL Fundamentals </i>and other RAIL documentation.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">To ensure regulatory compliance of the radio module, the Bluetooth stack for the radio module needs to be linked together with the RAIL library and the configuration library for the radio module. These are librail_module_&lt;soc family&gt;&lt;compiler&gt;_release.a and lib- rail_config&lt;modulename&gt;.a.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">EMLIB and EMDRV</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="https://docs.silabs.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">The Bluetooth stack uses EMLIB and EMDRV libraries to access EFR32 hardware. EMLIB and EMDRV peripheral libraries are provi- ded in source code and they must be included in the project. EMLIB and EMDRV are part of the Gecko SDK Suite. For more details on EMLIB and EMDRV, see platform EMDRV documentation and EMLIB documentation on </a>https://docs.silabs.com/<span style=" color: #000;">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">mbed TLS</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="https://docs.silabs.com/mbed-tls/latest/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">The Bluetooth stack uses the Mbedtls library for cryptographic operations. The Mbedtls library is provided in source code and must be included in the project. Mbedtls is part of the Gecko SDK Suite. For more details, refer to the </a>Mbedtls documentation<span style=" color: #000;">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Sleep Timer</p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="https://docs.silabs.com/mcu/latest/efr32mg13/group-SLEEPTIMER" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Sleep Timer is a platform component providing for software timers, timekeeping, and date functionality. The Bluetooth stack uses it for deep sleep, and it must be included in the project. See </a>platform sleeptimer documentation<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note that Sleep Timer callbacks are called from the interrupt context. BGAPI functions cannot be called from the callback. Instead, the application should implement the timer task handling in the application main loop. A simple timer component implements helper func- tionality that also allows calling BGAPI command from its callback.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Power Manager</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="https://docs.silabs.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Power Manager is a platform component that manages the system&#39;s energy modes. Its main purpose is to transition the system to a low energy mode when the processor has nothing to execute. See the reference for your MCU on </a>https://docs.silabs.com/ <span style=" color: #000;">under Modules&gt; Platform Services&gt;Power Manager.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;">Header Files sl_bt_version.h</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">This file contains the Bluetooth stack version.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">API Header Files</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">These files define the Bluetooth stack API.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">These files serve two purposes: first they contain the actual Bluetooth stack API and the commands and events for the stack, and sec- ond they provide a configuration and event management API to the Bluetooth stack.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The configuration, event, and sleep management API is described below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 61pt;text-indent: 0pt;text-align: left;">sl_status_t sl_bt_init_stack(const sl_bt_configuration_t *config)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This function takes a single argument - a pointer to a <span class="s14">sl_bt_configuration_t </span>struct. Its purpose is to configure and initialize the Blue- tooth stack with the parameters provided in the struct. Once the function <span class="s14">sl_bt_init_stack() </span>is called, each required stack compo- nent must be initialized separately. This separation allows memory optimization, by not including those stack components that are not needed. Project Configurator in Simplicity Studio 5 (SSv5) will take care of the stack initialization. In non-SSv5 applications the applica- tion must call <span class="s14">sl_bt_init_stack() </span>and then initialize BGAPI classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 61pt;text-indent: 0pt;text-align: left;">sl_status_t sl_bt_pop_event(sl_bt_msg_t* evt)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This is a non-blocking function to request Bluetooth events from the Bluetooth stack. When an event is requested and the event queue is not empty, an event object is copied into the memory provided by application. If there are no events in the event queue, SL_STA- TUS_NOT_FOUND is returned.</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark80" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The stack’s event handling is discussed in detail in section </a>5. Bluetooth Stack Event Handling<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 61pt;text-indent: 0pt;text-align: left;">int sl_bt_event_pending(void)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This function checks to see if any Bluetooth stack events are pending in the event queue. If a pending Bluetooth event is found, the function returns a non-zero value to indicate that the event should be processed by <span class="s14">sl_bt_pop_event()</span>. If no event is found, zero is returned.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">sl_bt_types.h sl_bt_stack_init.h sl_bt_api.h sl_bgapi.h</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">These files contain the Bluetooth stack API and the commands and events for the stack, and a configuration API for the Bluetooth stack.</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">sl_bt_ncp_host_api.c, sl_bt_ncp_host.c, sl_bt_ncp_host.h and sl_bt_internal.h</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">These files are used when developing applications for an external host. They provide the API definitions and adaptation layer between the host application and the BGTAPI serial protocol.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">GATT Database</a><a name="bookmark21">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The GATT (Generic Attribute Profile) database is a standardized way of describing the Bluetooth profiles, services, and characteristics of a Bluetooth device. The Silicon Labs’ Bluetooth SDK provides two ways to define the GATT database:</p><ul id="l27"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">A static GATT database can be defined in compile time with the appropriate tools provided by the Bluetooth SDK, or can be written in XML and passed to the BGBuild executable as a pre-build task. In this case, the database structure is stored in the ROM, which means faster start-up time and lower memory usage.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">A dynamic GATT database can be defined in runtime with the appropriate BGAPI commands using the bluetooth_feature_dynam- ic_gattdb component.. In this case, the database structure is stored in the RAM, which makes it more flexible. This is recommended in the NCP use case to avoid re-building the target code that runs on the Wireless Gecko.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">You can also combine these two methods. For more information on how to create GATT databases and the syntax, refer to <i>UG118: Blue Gecko Bluetooth® Smart Profile Toolkit Developer&#39;s Guide</i>.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">gatt_db.c and gatt_db.h</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The gatt_db.c defines the GATT database structure and content, and is auto-generated by BGBuild or by the Visual GATT Editor. gatt_db.h includes this database and the handles of local characteristics and services. Type definitions of GATT are automatically inclu- ded from bg_gatt_db_def.h to gatt_db.h.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Device Firmware Upgrade</a><a name="bookmark22">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Device Firmware Upgrade (DFU) is the process of upgrading the application either over a serial link or over-the-air (OTA). In both cases the application needs to add the following file to enable the support for DFU.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">application_properties.c</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This file includes the application properties struct that contains information about the application image, such as type, version, and se- curity. The struct is defined in <span class="s14">application_properties.h </span>in the Gecko Bootloader API. A pre-generated file is included in Simplicity Studio projects, which can be modified to include application-specific properties. The application properties can be accessed using the Gecko Bootloader API. The following members can be updated by changing the defines:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Version number for this application (uint32_t) #define APP_PROPERTIES_VERSION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Unique ID (e.g. UUID or GUID) for the product this application is built for (uint8_t[16]) #define APP_PROPERTIES_ID</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When using the OTA process with Bluetooth AppLoader, a pointer to the application properties struct needs to be set to application vector table vector 13. This is enabled automatically when using the default startup file and the struct name is <span class="s14">sl_app_properties</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark15">NCP Applications</a><a name="bookmark23">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When developing applications for an external host, the <span class="s14">SL_BT_API_FULL </span>define needs to be defined to prevent the linker from dropping the BGAPI command implementation from the application. The define includes a full implementation of all enabled BGAPI classes in the application.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark16">RTOS Support</a><a name="bookmark24">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack can also run on Micrium RTOS and FreeRTOS. In this case the following files are added to the project:</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: justify;">sl_bt_rtos_adaptation.c sl_bt_rtos_adaptation.h sl_bt_rtos_config.h</p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">sl_bt_rtos_adaptation.c and sl_bt_rtos_adaptation.h</p><p class="s14" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">sl_bt_rtos_adaptation.c <span class="p">and </span>sl_bt_rtos_adaptation.h <span class="p">provide the RTOS tasks for the IPC (Inter-Process Communication) with the Bluetooth stack and other RTOS tasks using CMSIS-RTOS2.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_bt_rtos_config.h</p><p class="s14" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_bt_rtos_config.h <span class="p">is used to set the Bluetooth RTOS task priorities.</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Support for RTOS needs to be configured for the Bluetooth Stack in the <span class="s14">sl_bt_configuration_t </span>struct. The <span class="s14">config_flags </span>field needs to have <span class="s14">SL_BT_CONFIG_FLAG_RTOS </span>set. This causes the Bluetooth stack to rely on the RTOS for sleeping, rather than sleeping directly. <span class="s14">scheduler_callback </span>and <span class="s14">stack_schedule_callback </span>must be configured to call proper functions. These callbacks are used to wake up the corresponding tasks.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The Bluetooth Stack configuration to use with RTOS is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">.config_flags = SL_BT_CONFIG_FLAG_RTOS,</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">.scheduler_callback = sli_bt_rtos_ll_callback,</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">.stack_schedule_callback = sli_bt_rtos_stack_callback,</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">sl_bt_rtos_init() <span class="p">can be called to initialize the stack and create needed RTOS tasks.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> void sl_bt_rtos_init();                                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">It calls function <span class="s14">sl_bt_init() </span>to initialize the Bluetooth stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark17">Multiprotocol Support</a><a name="bookmark25">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">When the Bluetooth Stack is used in a multiprotocol environment, multiprotocol features in the Bluetooth stack must be enabled with following function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sl_bt<u> </u>init_multiprotocol();</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Using Bluetooth in a multiprotocol environment also requires using the RAIL library with multiprotocol support.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Platform Components</a><a name="bookmark26">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The v3.x Bluetooth stack relies on many platform components that are part of the underlying Gecko Platform infrastructure of the Gecko SDK Suite. The <span class="s14">autogen </span>folder contains sources for initializing the hardware and processing events. The <span class="s14">config </span>folder includes hard- ware and stack configuration options.</p></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark27">Configuring the Bluetooth Stack and a Wireless Gecko Device</a><a name="bookmark51">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">To run the Bluetooth stack and an application on a Wireless Gecko, the MCU and its peripherals have to be properly configured.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l28"><li><p class="s11" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark28">Wireless Gecko MCU and Peripherals Configuration sl_system_init()</a><a name="bookmark52">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s14">sl_system_init() </span>function is used to initialize the system. It will call platform, driver, service, stack, and internal app init functions, which are located in the <span class="s14">autogen </span>folder.</p><p class="s11" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">App_init()</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s14">App_init() </span>function is used to initialize application-specific features.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l29"><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark29">Adaptive Frequency Hopping</a><a name="bookmark53">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Bluetooth Stack implements Adaptive Frequency Hopping (AFH), conforming with the ETSI EN 300 328 standard. AFH is required when using transmit power +10 dBm and over. AFH may also provide performance improvement by avoiding congested channels.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To enable AFH in the Bluetooth stack, the following initialization function must be called:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s15" style=" background-color: #D8D8D8;"> void sl_bt_init_afh();                                                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This is included automatically when including the <span class="s14">bluetooth_feature_afh </span>component. In a central-peripheral connection, both ends can use AFH independent of each other. The central device may be non-adaptive, but the peripheral still may need to be adaptive. The standard allows using control transfer on a blocked channel. For compliance reasons, if the peripheral detects that a blocked channel is in use, it will only send a single packet on that channel to prevent connection timeouts.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Legacy advertising does NOT use Adaptive Frequency Hopping. Legacy advertising uses 3 channels, and AFH needs a mini- mum of 15 channels to fulfill the requirements of the ETSI standard. Extended advertising must be used to enable AFH with advertising.</span></p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark30">Bluetooth Clocks</a><a name="bookmark54">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The clock settings are initialized in the <span class="s14">sl_platform_init() </span>function in <span class="s14">sl_event_handler.c</span>. Clock settings include initializations of oscillators (HFXO, LFXO, and LFRCO) with parameters such as tuning, initialization of the clocks (HFCLK, LFCLK, LFA, LFB, LFE), and the assignment of clocks to oscillators. Note: The peripheral clocks (like GPIO clock, TIMER clock) are not enabled in this function. They must be enabled when initializing a peripheral.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">HFCLK</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">HFCLK is used for a radio protocol timer (PROTIMER). HFCLK is a high frequency clock where accuracy must be at least ±50 ppm. This clock needs an external crystal to be sufficiently accurate (HFXO).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The HFXO initialization configures the external crystals for timing-critical connection and sleep management. An HFXO has to be set as the high frequency clock (HFCLK) and physically connected to a Wireless Gecko’s HFXO input pins.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">LFCLK</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">LFCLK, the low frequency clock, is used for two purposes. In the Bluetooth stack, it is used for Bluetooth protocol timing. It is also nee- ded to keep track of time during sleep mode.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When a device enters into sleep mode, the current state of PROTIMER is saved. When the device wakes up, it calculates how many ticks of sleep clock have passed and adjusts the PROTIMER accordingly. To the radio it appears that PROTIMER has been constantly ticking.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The accuracy of this clock depends on the operating mode of the device. When advertising or scanning, accuracy is not that important, but when a connection is open, the accuracy must be at least ±500 ppm. This clock can be driven either by LFXO, PLFRCO (EFR32[B| M]G13 or [B|M]GM13), or LFRCO (EFR32[B|M]G2x or [B|M]GM2x), depending on the accuracy requirements. If applications only re- quire advertising or scanning, LFRCO can be used as the clock source. However, if Bluetooth connections are required, the clock source must be either LFXO, PLFRCO (EFR32[B|M]G13 or [B|M]GM13) or LFRCO with High Precision Mode (EFR32[B|M]G22 or [B| M]GM22). When using PLFRCO or LFRCO, the accuracy of the clock must be configured to ±500 ppm.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In the default configuration, LFXO is connected to the Wireless Gecko and set as the clock source for LFCLK. If the design only has PLFRCO or LFRCO with High Precision Mode, PLFRCO or LFRCO is connected and set as the clock source.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If none of LFXO, PLFRCO, or LFRCO with High Precision Mode is connected in the design, sleeping is disabled automatically if LF clock accuracy does not meet the 500 ppm requirement.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">HFRCODPLL</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">HFRCODPLL is a high frequency clock that is used as a system clock with the Bluetooth stack in EFR32[B|M]G2x devices. On EFR32[B|M]G21x, HFRCODPLL needs to be configured to 80 MHz and set as the system clock source.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">CMU_HFRCODPLLBandSet(cmuHFRCODPLLFreq_80M0Hz); CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFRCODPLL);</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">CTUNE</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The examples have the crystal tune (CTUNE) settings for both HFXO and LFXO set by default to work with all of the Silicon Labs’ Bluetooth modules, reference designs, and radio boards. However, in some cases the end-product design requires specific crystal cali- bration, either per device or per design. The CTUNE value can be adjusted according to the design in the <span class="s14">sl_device_init_hfxo() </span>function.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For more information on configuring the HFXO and LFXO, refer to the EFR32 Reference Manual.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Default HFXO CTUNE Value</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The system checks multiple sources for the default HFXO CTUNE value, using the following logical order:</p><ol id="l30"><li><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">CTUNE PSKEY is set. This key has ID <span class="s14">50 </span>(<span class="s14">32 </span>in hex) and contains 2 bytes of data for the 16 bit CTUNE value. This can be program- med with the BGAPI command <span class="s14">sl_bt_nvm_save</span>.</p></li><li><p style="padding-top: 7pt;padding-left: 33pt;text-indent: -10pt;text-align: left;">Calibration value exists in DEVINFO. Some modules contain a factory-programmed value in the DEVINFO-page.</p></li><li><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Manufacturing token exists in the user data page. This is programmed by the developer, or it can be automatically set by Simplicity Studio if the board EEPROM contains the value. This token consists of 2 bytes, located at offset 0x0100 from the starting address of the User Data page. Refer to the EFR32 Reference Manual for your specific EFR variant for the full flash mapping.</p></li><li><p style="padding-top: 8pt;padding-left: 32pt;text-indent: -10pt;text-align: left;">If a radio board is selected when generating the project, then use default value from board header file.</p></li><li><p style="padding-top: 8pt;padding-left: 32pt;text-indent: -10pt;text-align: left;">If nothing else is found, use the default value from CMU header file.</p></li></ol><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note<span class="p">: The Bluetooth stack only supports 38.4 MHz HFXO frequency; no other HFXO frequencies are supported.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark31">DC-DC Configuration</a><a name="bookmark55">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On devices that have DC-DC, the configuration is set in the <span class="s14">sl_device_init_dcdc() </span>function in sl_event_handler.c. The examples in the SDK have DC-DC configuration set to work with the Silicon Labs’ Bluetooth modules, radio boards, and reference designs, but cus- tom designs might require specific DC-DC settings. These custom settings can be set in <span class="s14">sl_device_init_dcdc_xx.c</span>..</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="150" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_009.png"/></span></p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; DCDC mode. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; VREGIN comparator threshold. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; Ton max timeout control. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; DCM only mode enable. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; DCDC drive speed in EM0/1. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; DCDC drive speed in EM2/3. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; EM0/1 peak current setting. */</p><p class="s14" style="text-indent: 0pt;text-align: left;">/**&lt; EM2/3 peak current setting. */</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">mode; cmpThreshold; tonMax; dcmOnlyEn; driveSpeedEM01; driveSpeedEM23; peakCurrentEM01; peakCurrentEM23;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">EMU_DcdcMode_TypeDef EMU_VreginCmpThreshold_TypeDef EMU_DcdcTonMaxTimeout_TypeDef bool EMU_DcdcDriveSpeed_TypeDef EMU_DcdcDriveSpeed_TypeDef EMU_DcdcPeakCurrent_TypeDef EMU_DcdcPeakCurrent_TypeDef</p><p class="s14" style="text-indent: 0pt;text-align: left;">} EMU_DCDCInit_TypeDef;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">/** DCDC regulator initialization structure. */ typedef struct {</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">For more information on configuring the DC-DC, refer to the EFR32 Reference Manual, Chapter 11, and <i>AN0948: Power Configurations and DC-DC</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark32">LNA</a><a name="bookmark56">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A low-noise amplifier (LNA) is an electronic amplifier that amplifies a very low-power signal without significantly degrading its signal-to- noise ratio. The LNA improves RF sensitivity.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">An LNA is provided on-board in some MGM12P modules as part of front-end module (FEM). To use LNA in these modules, the FEM needs to be correctly configured and enabled. The FEM is configured in <i>sl_fem_util_config.h</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">FEM is initialized in <span class="s14">sl_fem_util_init() </span>within the <span class="s14">sl_service_init() </span>function if the board supports FEM.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark33">Periodic Advertising</a><a name="bookmark57">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Periodic advertising enables multiple listeners to be synchronized with a single advertising device. Thus it is a form of multicast.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each listener needs to be synchronized to the advertising device before they start receiving data. Periodic advertising uses a scanner on the listening device to establish a synchronization to the advertising device. After synchronization the scanner can then be stopped. This makes it much more power-efficient than using the scanner full time for listening for broadcast advertisements.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The periodic advertising consists of two components: periodic advertiser role and periodic advertising synchronization on listening side.These two components are independent of each other and need to be initialized separately.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Periodic Advertiser</p><p class="s14" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">max_advertisers <span class="p">in the Bluetooth configuration also configures the maximum number of periodic advertisers.</span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To enable Periodic Advertiser in the Bluetooth stack, the following initialization function must be called after the generic</p><p class="s14" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_bt_init_stack() <span class="p">function, which is added automatically by including the </span>bluetooth_feature_periodic_adv <span class="p">component:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> void sl_bt_init_periodic_advertising();                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Periodic Advertising Synchronization</p><p class="s14" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">max_periodic_sync <span class="p">in the Bluetooth config is used to configure the maximum number of synchronizations the Bluetooth stack needs to support.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To enable Periodic Advertising Synchronization in the Bluetooth stack, the following initialization function must be called after the gener- ic <span class="s14">sl_bt_init_stack() </span>function by including the <span class="s14">bluetooth_feature_sync </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s15" style=" background-color: #D8D8D8;"> void sl_bt_class_sync_init();                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This command also initializes the BGAPI sync class, making it available to use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark34">PTI</a><a name="bookmark58">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">PTI (Packet Trace Interface) is a built-in block in the Wireless Gecko SoCs to route incoming and outgoing radio packets as raw data to the debug interface. These packets can then be captured and displayed in Simplicity Studio’s Network Analyzer. Network Analyzer has a decoder for Bluetooth packets and can be used to debug, analyze, and measure Bluetooth networks.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">PTI is initialized in <span class="s14">sl_rail_util_pti_init() </span>within the <span class="s14">sl_stack_init() </span>function. The baudrate can be set using the SL_RAIL_UTIL_PTI_BAUD_RATE_HZ definition, and pins can be configured using the definitions with the SL_RAIL_UTIL_PTI_DOUT_ and SL_RAIL_UTIL_PTI_DFRAME_ prefix in <i>sl_rail_util_pti_config.h</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark35">Transmit Power</a><a name="bookmark59">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Transmit power of Bluetooth depends on the maximum power allowed by the radio, the software configuration, RF path gain compensa- tion, and usage of Adaptive Frequency Hopping (AFH).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The ETSI EN 300 328 standard requires using AFH when transmitter power is +10 dBm and over.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The maximum allowed power is limited to less than +10 dBm if prevented by adaptivity requirements. The ETSI standard requires that at least 15 channels are in use for AFH. This requirement prevents using +10 dBm and over in the following cases: legacy advertising, scan responses, and in connections, when not enough channels are available.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark36">Accept List Filtering</a><a name="bookmark60">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Accept list filtering is used to filter devices. Currently it is only supported when discovering devices. Connection requests, scan requests from remote devices during advertising, and connection initiations are not restricted by the accept list.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Accept list size matches the configuration for the max number of bonded devices. If the max number of bonded devices is changed when using filtering, the device needs to be reset before the new setting takes effect.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bonded devices are added to the accept list automatically. Alternatively, they can be added manually with the BGAPI command</p><p class="s14" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">sl_bt_sm_add_to_whitelist()<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Random address resolving is not supported. Devices using resolvable random addresses will not be visible during scanning. Since most Android and iOS phones use resolvable random addresses, the accept list filtering feature will effectively block these devices dur- ing device discovery.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To enable accept list filtering in the Bluetooth stack, the following initialization function must be called after the generic</p><p class="s14" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">sl_bt_init_stack() <span class="p">function:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> void sl_bt_init_whitelisting();                                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">This is included automatically when including the <span class="s14">bluetooth_feature_whitelisting </span>component. When the function is enabled, it can be enabled and disabled at runtime by the BGAPI command <span class="s14">sl_bt_gap_enable_whitelisting()</span>.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Connections may be restricted to only bonded or accept listed devices separately using <span class="s14">sl_bt_sm_configure()</span>. This does not require enabling accept list filtering.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark37">Wi-Fi coexistence</a><a name="bookmark61">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Wi-Fi coexistence (COEX) is a protocol where Bluetooth and Wi-Fi arbitrate which protocol can use the radio for transmitting. When enabled, it improves the performance of Wi-Fi and Bluetooth. COEX is configured in <i>sl_bluetooth_coex_config.h</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To enable COEX, call the following function after <span class="s14">sl_bt_init_stack()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s15" style=" background-color: #D8D8D8;"> sl_bit_init_coex_hal();                                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This is included automatically when including the <span class="s14">bluetooth_feature_coex </span>component. COEX implements the GPIO interface to the Wi-Fi IC. It depends on EMLIB <span class="s14">em_gpio.c </span>and EMDRV <span class="s14">gpiointerrupt.c </span>and requires both files to be included in the project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark38">OTA Configuration</a><a name="bookmark62">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth Over-the-Air (OTA) firmware upgrades are supported, because part of the firmware upgrade is handled by the Bluetooth Ap- pLoader application. Enable OTA configuration with the <span class="s14">bluetooth_feature_ota_config </span>component</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The OTA mode can be configured using the <span class="s14">sl_bt_ota_set_configuration() </span>function, which can, for example, set OTA to use a static random address, instead of a public address. For other options refer to the BGAPI document.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When the Wireless Gecko is in AppLoader&#39;s OTA mode, its device name and the device name length can be configured with the <span class="s14">sl_bt_ota_set_device_name() </span>function. The advertisement data used in OTA mode can be set to use custom data instead of the default one with <span class="s14">sl_bt_ota_set_advertising_data()</span>.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 173%;text-align: left;">If the device is not using the default RF path, it can be configured for OTA mode with <span class="s14">sl_bt_ota_set_rf_path()</span>. Finally, setting the device to OTA DFU mode should be secured so that only trusted devices have that capability.</p><p style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For more details about OTA firmware updates, refer to <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide </i>and <i>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth Applications</i>.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark39">Even Connection Distribution Algorithm</a><a name="bookmark63">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The even connection distribution algorithm is designed to be used especially with applications that involve several concurrent connec- tions. The algorithm tries to distribute the connections such a way that they are distributed over time as evenly as possible without over- lapping, and all connections should get an equal share of the air interface resource.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For optimal performance, the algorithm user should:</p><ul id="l31"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Initiate the first connection with the longest connection interval if all connections do not have the same interval.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Set the connection intervals of the other connections such that they are, or allow (via min-max range), integer fractions of the first interval.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Make the first interval long enough such that all connections would fit within the interval with a reasonable transmission time.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The algorithm and the connections can be expected to work if the above recommendations are not followed, but performance will not likely be optimal.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">By default, the link layer uses the legacy Random Connection Distribution algorithm. The Even Connection Distribution algorithm can be enabled by including the component <i>bluetooth_feature_ll_even_scheduling </i>or calling link layer function <span class="s14">ll_connSchAlgorithmEvenEnable() </span>during the software initialization phase. As the even connection scheduling mechanism is meant to be used with multiple (up to 32) concurrent connections, the buffer and heap sizes are recommended to be increased as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_BUFFER_SIZE 20160</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_HEAP_SIZE 22520</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark40">Bluetooth Configuration with sl_bt_init_stack()</a><a name="bookmark64">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s14">sl_bt_init_stack() </span>function is used to configure the Bluetooth stack, including memory buffer size that is allocated for connec- tions. None of the Bluetooth stack functions can be used before the Bluetooth stack has been configured.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Bluetooth stack configuration example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="189" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_010.png"/></span></p><p class="s14" style="text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">.bluetooth.max_periodic_sync = SL_BT_CONFIG_MAX_PERIODIC_ADVERTISING_SYNC, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.bluetooth.max_buffer_memory = SL_BT_CONFIG_BUFFER_SIZE, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.scheduler_callback = SL_BT_CONFIG_LL_CALLBACK, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.stack_schedule_callback = SL_BT_CONFIG_STACK_CALLBACK, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.gattdb = &amp;bg_gattdb_data, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.max_timers = SL_BT_CONFIG_MAX_SOFTWARE_TIMERS, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.rf.tx_gain = SL_BT_CONFIG_RF_PATH_GAIN_TX, \</p><p class="s14" style="text-indent: 0pt;text-align: left;">.rf.rx_gain = SL_BT_CONFIG_RF_PATH_GAIN_RX, \</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">\</p><p class="s14" style="text-indent: 0pt;text-align: left;">\</p><p class="s14" style="text-indent: 0pt;text-align: left;">\</p><p class="s14" style="text-indent: 0pt;text-align: left;">\</p><p class="s14" style="text-indent: 0pt;text-align: left;">\</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">#define SL_BT_CONFIG_DEFAULT</p><p class="s14" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">.config_flags = SL_BT_CONFIG_FLAGS,</p><p class="s14" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">.bluetooth.max_connections = SL_BT_CONFIG_MAX_CONNECTIONS,</p><p class="s14" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">.bluetooth.max_advertisers = SL_BT_CONFIG_MAX_ADVERTISERS,</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Configuration options in the <span class="s14">sl_bt_init_stack() </span>function are: Bluetooth connection count, advertiser count, periodic advertisement sync count, memory buffer size, number of timers, GATT database, and PA configuration.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Once the function <span class="s14">sl_bt_init_stack() </span>is called, each stack component used has to be initialized separately. This separation allows memory optimization by not including unnecessary stack components.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following APIs can be used to initialize stack components separately. The calls to the initialization functions are added automatical- ly by including the respective component. The <span class="s14">SL_BT_BGAPI_CLASS </span>macro is used to create a struct <span class="s14">sli_bgapi_class </span>table to initialize included BGAPI classes with <span class="s14">sl_bt_init_classes()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">advertiser</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">The commands and events in this class are related to advertising functionalities in GAP peripheral and broadcaster roles.</p></td></tr><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">coex</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Enables the Bluetooth API to support the Coexistence interface.</p></td></tr><tr style="height:40pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">connection</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: justify;">The commands and events in this class are related to managing connection establishment, parameter setting, and disconnection procedures.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">cte_receiver</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Commands and events in this class manage Constant Tone Ex- tension (CTE) receiving.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">cte_transmitter</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Commands and events in this class manage Constant Tone Ex- tension (CTE) transmission.</p></td></tr><tr style="height:51pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">dfu</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">These commands and events are related to controlling firmware updates over the configured host interface and are available only when the device is booted in DFU mode. Usually not needed in application.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gap</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">The commands and events in this class are related to the Generic Access Profile (GAP) in Bluetooth.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gatt</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">The commands and events in this class are used to browse and manage attributes in a remote GATT server.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gattdb</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 19pt;text-indent: 0pt;text-align: left;">These commands and events are used for managing the local GATT database when using the dynamic GATT database.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">gatt_server</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">These commands and events are used by the local GATT server to manage the local GATT database.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">nvm</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">Manage user data in NVM keys in the flash memory of the Blue- tooth device.</p></td></tr><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ota</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Commands for configuring OTA DFU.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">scanner</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">The commands and events in this class are related to scanning functionalities in GAP central and observer roles.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:40pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sm</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">The commands in this class manage Bluetooth security, including commands for starting and stopping encryption and commands for management of all bonding operations.</p></td></tr><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sync</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Provides the periodic advertising synchronization feature.</p></td></tr><tr style="height:30pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">system</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Commands and events in this class can be used to access and query the local device.</p></td></tr><tr style="height:19pt"><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">test</p></td><td style="width:270pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Enables the DTM test APIs.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l32"><li><p class="s11" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark41">Bluetooth On-Demand Start</a><a name="bookmark65">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">With the Bluetooth on-demand start feature, the application can start and stop the Bluetooth stack from running when needed. The fea- ture is enabled by including the <span class="s14">bluetooth_on_demand_start </span>component. When this feature is enabled, the Bluetooth stack does not run until <span class="s14">sl_bt_system_start_bluetooth() </span>is called. The main purpose of this feature is for the DMP use case, where Bluetooth is not needed all the time, and resources need to be freed for other application uses. The Bluetooth stack can be stopped with <span class="s14">sl_bt_system_stop_bluetooth()</span>, which gracefully restores Bluetooth to an idle state by disconnecting any active connections and stopping any ongoing advertising and scanning. Any resources that were allocated when the stack was started are freed when the stack is stopped. When the Bluetooth stack is not running, all BGAPI classes other than System become unavailable.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If this feature is not enabled, Bluetooth stack is started automatically.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark42">CONFIG_FLAGS</a><a name="bookmark66">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Currently only one config flags is supported, <span class="s14">SL_BT_CONFIG_FLAG_RTOS</span>, which needs to be set if the application uses RTOS.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark43">Mbedtls</a><a name="bookmark67">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Mbedtls cryptography library used by the stack is configured using a configuration file that defines which algorithms are supported, and if the implementation uses hardware acceleration or is done on software. EFR32[B|M]G2x devices use the new PSA crypto API for crypto operations, whereas EFR32[B|M]G1x devices continue to use the classic Mbedtls API. In addition to enabling crypto operations, the PSA crypto API enables storing long-term encryption keys encrypted on flash in Vault-enabled devices.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Mbedtls needs to be initialized with <span class="s14">sl_mbedtls_init()</span>. The Mbedtls configuration file path is given using <span class="s14">#define MBEDTLS_CONFIG_FILE</span>. The default configuration files <span class="s14">config/mbedtls_config.h</span>, <span class="s14">autogen/mbedtls_config_autogen.h</span>, <span class="s14">config/ psa_crypto_config.h</span>, and <span class="s14">autogen/psa_crypto_config_autogen.h </span>should be used as a template if the configuration needs to be changed. The two latter config files are only used with EFR32[B|M]G2x devices.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In PSA crypto API, only a certain number of keys can be open at one time. Bluetooth pairing requires that 2 keys are open at the same time. By default, no key slots are reserved for the application to save RAM. If the application uses PSA crypto API, then the <span class="s14">SL_PSA_KEY_USER_SLOT_COUNT </span>setting must be set to the value of the number of keys the application needs to stay open simultane- ously. This can be changed with the <span class="s14">SL_PSA_KEY_USER_SLOT_COUNT </span>setting located in <span class="s14">config/psa_crypto_config.h</span>. Each key slot will use 40 bytes of RAM.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">With EFR32[B|M]G1x devices, the project must also contain <i>sl_bt_mbedtls_context.c</i>, which is provided as source in the SDK. It is used by the stack to get Mbedtls context sizes, which depend on the Mbedtls configuration used.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If any Mbedtls errors occur when the Bluetooth stack is using crypto operations, <span class="s14">sl_bt_evt_system_error </span>is sent with the status set as <span class="s14">SL_STATUS_BT_CRYPTO </span>and the data field containing the actual Mbedtls error code.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note that the actual Bluetooth connection encryption uses RADIOAES, which does not have DPA countermeasures. RADIOAES only has access to temporary session keys.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark44">Multiprotocol Priority Configuration</a><a name="bookmark68">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">When the Bluetooth stack is used with other protocols in a multiprotocol environment, it may become necessary to change the Blue- tooth priority settings for RAIL to optimize certain use cases.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The application needs to allocate the configuration struct and provide it for the Bluetooth stack:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">sl_bt_bluetooth_ll_priorities custom_priorities; static const sl_bt_configuration_t config = {</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.bluetooth.linklayer_priorities = &amp;custom_priorities,</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s14">sl_bt_bluetooth_ll_priorities </span>struct must be initialized to default state by the <span class="s14">SL_BT_BLUETOOTH_PRIORITIES_DEFAULT </span>con- stant.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s14">sl_bt_bluetooth_ll_priorities </span>struct contains following fields:</p><ul id="l33"><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">scan_min, scan_max, scan step <span class="p">- The priority range for scan operation.</span></p></li><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">adv_min, adv_max, adv step <span class="p">- The priority range for advertisement operation.</span></p></li><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">conn_min &amp; conn_max <span class="p">- The priority range for connection packets.</span></p></li><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">init_min &amp; init_max <span class="p">- The priority range for connection initiation.</span></p></li><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">rail_mapping_offset <span class="p">- The RAIL priority level where Bluetooth priorities are located.</span></p></li><li><p class="s14" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">rail_mapping_range <span class="p">- The RAIL priority range where Bluetooth priorities are located.</span></p></li></ul><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For each priority range, 0 is the maximum priority, and 0xff is the minimum priority. Bluetooth priorities are different from RAIL priorities. That is, Bluetooth has its own space between 0 and 0xff where all Bluetooth priorities are located. To map Bluetooth priorities to RAIL priorities, the values in fields <span class="s14">rail_mapping_offset </span>and <span class="s14">rail_mapping_range </span>are used to form single-degree equation:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s15" style=" background-color: #D8D8D8;"> RAIL_priority=(BT_priority/0xFF)*rail_mapping_range+rail_mapping_offset                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark45">Sleep</a><a name="bookmark69">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Wireless Gecko’s sleep mode EM2 (energy mode two) is managed by the platform power manager component. Including the power manager component or calling the <span class="s14">sl_power_manager_init() </span>function automatically enables deep sleep.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The sleep modes require that an accurate 32 kHz low-frequency clock (LFCLK) is present in the hardware. If an accurate sleep clock is not available for the Bluetooth stack and the application must support Bluetooth connections, then low power sleep modes cannot be entered. For applications where low power sleep modes are not needed, the LFXO or LFRCO can be left out.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Disabling Sleep at Runtime</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">If the application needs to disable sleep at runtime, it can be done by implementing bool <span class="s14">app_is_ok_to_sleep() </span>function. The function is called when the device wants to sleep. While EM2 is disabled (/blocked), the stack will switch between EM0 and EM1. For more information, refer to Power Manager documentation.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: justify;"><a name="bookmark46">Bluetooth Stack Configuration Buffer Memory</a><a name="bookmark70">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack uses memory for buffering API events and the data transmitted in Bluetooth connections, advertising, and scan- ning. This buffer memory is allocated from the heap by the Bluetooth stack when calling <span class="s14">sl_bt_init_stack()</span>. The size of buffer mem- ory in bytes is defined by C-define <span class="s14">SL_BT_CONFIG_BUFFER_SIZE </span>in <i>sl_bluetooth_config.h</i>. The default value is an estimation for achiev- ing adequate throughput and supporting multiple simultaneous connections. Consider increasing this value if the application needs higher data throughput over connections or uses advertising or scanning with long advertisement data.</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Example of setting the buffer memory size:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">static const sl_bt_configuration_t config = {</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">.bluetooth.max_buffer_memory = SL_BT_CONFIG_BUFFER_SIZE,</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Number of Connections</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The absolute maximum number of simultaneous Bluetooth connections is 32. The amount of memory that is allocated for connection management further limits the number of connections. The memory is allocated from the heap during initialization in <span class="s14">sl_bt_init_stack()</span>. C-define <span class="s14">SL_BT_CONFIG_MAX_CONNECTIONS </span>can be defined to set the number of connections. <span class="s14">SL_BT_CONFIG_MAX_CONNECTIONS </span>is passed to Bluetooth stack in the <span class="s14">.bluetooth.max_connections </span>field in the configuration struct.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Example of limiting the Bluetooth connections to one (1).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define SL_BT_CONFIG_MAX_CONNECTIONS 1</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s23" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark110" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">For more information about connection RAM usage, refer to </a>7.3.2 Bluetooth Object Pools<span style=" color: #000;">.</span></p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Advertisers</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The maximum number of advertisement sets can be defined by this configuration option. These sets can be used to start multiple ad- vertisers. This configuration option also configures the maximum number of periodic advertisements. Each advertisement context allo- cates ~60 bytes of RAM. The number of advertisers is defined with <span class="s14">SL_BT_CONFIG_USER_ADVERTISERS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">.bluetooth.max_advertisers = SL_BT_CONFIG_USER_ADVERTISERS;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><b>Note: </b>Maximum connectable advertisements are limited by <span class="s14">MAX_CONNECTIONS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Periodic Advertisement Synchronization</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The maximum number of supported periodic advertisement synchronizations needs to be configured. Each synchronization context al- locates ~40 bytes of RAM.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">.bluetooth.max_periodic_sync = 5; //!&lt; Maximum number of periodic advertisement synchronizations to support. Default is 0.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark47">PA</a><a name="bookmark71">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On EFR32 SoC-based designs, the PAVDD (Power Amplifier voltage regulator VDD input) can be supplied from the output of the DC/DC or straight from a 3.3 V power supply.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack configuration defaults to using DC/DC as the PAVDD input. If PAVDD is being supplied from a 3.3 V power supply, then the <span class="s14">.pa.input </span>field needs to be defined.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="47" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_011.png"/></span></p><p class="s14" style="text-indent: 0pt;text-align: left;">.pa.input = SL_BT_RADIO_PA_INPUT_VBAT, // PAVDD is supplied from an 3.3 V power supply</p><p class="s14" style="text-indent: 0pt;text-align: left;">.pa.pa_mode=0 // selects high power PA if available</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">// PA Configuration is enabled</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">.pa.config_enable = 1,</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack automatically selects the high-power PA if available. The <span class="s14">pa_mode </span>configuration can be used to select the PA mode used by the Bluetooth stack. EFR32[B|M]G21 has 3 PAs so the <span class="s14">pa_mode </span>setting in the Bluetooth config struct can take 3 values. Other devices have 2 PAs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark48">Software Timers</a><a name="bookmark72">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Maximum available software timers can be configured. Each timer needs resources from the stack to be implemented. Increasing the amount of soft timers may cause degraded performance in some use cases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> .max_timers = 4;                                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark49">RF Path</a><a name="bookmark73">&zwnj;</a></p><p class="s18" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Gain</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The application can define RF path gain values for RX and TX separately.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack takes TX RF path gain into account when adjusting transmitter power. Power radiated from the antenna then matches the application request. For example, if maximum power requested by the application is at +10 dBm and path loss is -1 dBm, then actual power at the pin is +11 dBm.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">RX RF path gain is used to compensate the RSSI reports from the Bluetooth Stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">.rf.tx_gain = -20; // RF TX path gain in unit of 0.1 dBm</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">.rf.rx_gain = -18; // RF RX path gain in unit of 0.1 dBm</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s18" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Output selection</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">On EFR32[B|M]G21 SoC-based designs, the RF output can be selected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">.rf.flags = SL_BT_RF_CONFIG_ANTENNA; // enabling output configuration</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">.rf.antenna = 0; // desired output,</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For the correct value refer to the antenna path selection in the RAIL header file <span class="s14">rail_chip_specific.h</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark50">NVM3 Error Codes</a><a name="bookmark74">&zwnj;</a></p></li></ol></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack maps NVM3 error codes to the corresponding <span class="s14">sl_status </span>code if one exists. Other NVM3 error codes are mapped using base value 0x480 + NVM3 error value. The NVM3 error values can be found from platform/emdrv/nvm3/inc/nvm3.h. For example, <span class="s14">ECODE_NVM3_ERR_ALIGNMENT_INVALID </span>would be mapped as 0x481.</p><ol id="l34"><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark75">Bluetooth Stack Event Handling</a><a name="bookmark80">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The Bluetooth stack for the Wireless Geckos is an event-driven architecture, where events are handled in the main while loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><li><p class="s11" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark76">Non-Blocking Event Listener</a><a name="bookmark81">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This mode of operation is the default way in which event processing is done in example applications.</p><ul id="l36"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The <span class="s14">sl_bt_pop_event() </span>function processes the internal message queue until an event is received or all of the messages are pro- cessed.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The function copies the received event data to an <span class="s14">sl_bt_msg_t </span>struct, or returns SL_STATUS_NOT_FOUND if there are no events in the queue.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The application can override a dummy weak implementation of <span class="s14">sl_bt_on_event() </span>to implement the event handler. It is automatically called from the applications main loop. Below is an example from the soc-empty application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">void sl_bt_on_event(sl_bt_msg_t* evt)</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">sl_status_t sc;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">// Handle stack events</p><p class="s14" style="padding-left: 22pt;text-indent: -9pt;line-height: 107%;text-align: left;">switch (SL_BT_MSG_ID(evt-&gt;header)) { case sl_bt_evt_system_boot_id:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">// Create an advertising set.</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">sc = sl_bt_advertiser_create_set(&amp;advertising_set_handle); app_assert(sc == SL_STATUS_OK,</p><p class="s14" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to create advertising set\n&quot;, (int)sc);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Start general advertising and enable connections. sc = sl_bt_advertiser_start(</p><p class="s14" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">advertising_set_handle, // advertising set handle advertiser_general_discoverable, // discoverable mode advertiser_connectable_scannable); // connectable mode</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">app_assert(sc == SL_STATUS_OK,</p><p class="s14" style="padding-left: 85pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;[E: 0x%04x] Failed to start advertising\n&quot;, (int)sc);</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">break;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 31pt;text-indent: -9pt;line-height: 107%;text-align: left;">default: break;</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To do blocking event handling, call <span class="s14">sl_bt_pop_event() </span>in a loop until a valid event is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l37"><li><p class="s11" style="padding-left: 50pt;text-indent: -27pt;text-align: left;"><a name="bookmark77">Notification for Updating Event Listener</a><a name="bookmark82">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In some cases, there may be a need for running the Bluetooth event loop inside another event loop in the application. The Bluetooth stack has a callback mechanism for notifying the application about the demand for updating the Bluetooth stack event listener. This is enabled by defining a callback function in the Bluetooth configuration struct.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>This <span class="s14">stack_schedule_callback </span>is called from the interrupt context. It is important NOT to call <span class="s14">sl_bt_pop_event </span>from this con- text. The application must set a flag or use another mechanism for enabling the application main loop to update the Bluetooth stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">static const sl_bt_configuration_t config = {</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">.stack_schedule_callback = bluetooth_update</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">//</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">void bluetooth_update()</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">//set notification for application</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark78">Event Listener with RTOS</a><a name="bookmark83">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">By default, the event handling with RTOS calls <span class="s14">sl_bt_on_event() </span>when events are received the same way as without RTOS.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If the application needs to define its own Bluetooth event handler it needs to define SL_BT_DISABLE_EVENT_TASK. The application can then use <span class="s14">sl_bt_rtos_has_event_waiting() </span>to check if any events are waiting. To process events, call <span class="s14">sl_bt_rtos_get_event() </span>and <span class="s14">sl_bt_rtos_set_event_handled() </span>is used mark the event has been handled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l38"><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark79">Commands from Multiple Tasks</a><a name="bookmark84">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It is possible to send Bluetooth commands from multiple Micrium OS tasks. It requires that each task acquires exclusivity before send- ing the commands and releases it afterward.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Bluetooth stack provides two functions for convenience. <span class="s14">BluetoothPend </span>acquires the Micrium OS mutex and <span class="s14">BluetoothPost </span>re- leases the mutex.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following code block acquires the mutex for Bluetooth before the Bluetooth command and releases it afterward.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">BluetoothPend(&amp;err); //acquire mutex for Bluetooth stack gecko_cmd_gatt_server_send_characteristic_notification(0xff, gattdb_temp_measurement, 5, temp_buffer); BluetoothPost(&amp;err);//release mutex</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark85">Interrupts</a><a name="bookmark88">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Interrupts create events in their respective interrupt handlers, be it radio interrupts or interrupts from IO pins. The events are later pro- cessed in the main event loop from the message queue. The application should always minimize the processing time within an interrupt handler, and leave the processing for event callbacks or to the main loop.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In general, the interrupt scheme is according to any event-based programming architecture, but a few unique and important exceptions apply to the Bluetooth stack:</p><ul id="l39"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">BGAPI commands cannot be called from interrupt context.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Only the <span class="s14">sl_bt_external_signal() </span>function can be called from interrupt context.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l40"><li><p class="s11" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark86">External Event</a><a name="bookmark89">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">An external event is used to capture all peripheral interrupts as an external signal to be passed to the main event loop and to be pro- cessed within that loop. The external event interrupt can come from any of the peripheral interrupt sources, for example IOs, compara- tors, or ADCs, to name a few. The signal bit array is used for notifying the event handler of what external interrupts have been issued.</p><ul id="l41"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">The main purpose of the external signal is to trigger an event from the interrupt context to the main event loop.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The BGAPI event <span class="s14">sl_bt_evt_system_external_signal </span>can be generated by calling the <span class="s14">void sl_bt_external_signal(uint32 signals) </span>function.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">The function <span class="s14">sl_bt_external_signal </span>can be called from the interrupt context.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The <span class="s14">signals </span>parameter of the <span class="s14">sl_bt_external_signal </span>function is passed to the <span class="s14">sl_bt_evt_system_external_signal </span>event.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">/**</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">* Main</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">*/</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">void main()</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 12pt;text-indent: 19pt;line-height: 107%;text-align: left;">//Event loop while(1)</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 22pt;text-indent: 9pt;line-height: 107%;text-align: left;">//External signal indication (comes from the interrupt handler) case sl_bt_evt_system_external_signal_id:</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">// Handle GPIO IRQ and do something</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">// External signal command’s parameter can be accessed using</p><p class="s13" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">// event-&gt;data.evt_system_external_signal.extsignals</p><p class="s14" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">break;</p><p class="s14" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">...</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">/**</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">* Handle GPIO interrupts and trigger system_external_signal event</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">*/</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">void GPIO_ODD_IRQHandler()</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">static bool radioHalted = false;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">uint32_t flags = GPIO_IntGet(); GPIO_IntClear(flags);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">//Send gecko_evt_system_external_signal_id event to the main loop sl_bt_external_signal(...);</p><p class="s14" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p class="s14" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark87">Priorities</a><a name="bookmark90">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It is highly recommended that the radio should have the highest priority interrupts. This is the default configuration, and other interrupts are handled with lower priority. Interrupt priorities for radio is 4, for Link Layer the priority is 5, USART interrupts are 6, and other inter- rupts have default priority of 7. Smaller value is higher priority interrupt.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If the application needs to disable interrupts, it is recommended that the <span class="s14">BASEPRI </span>register is used instead of the <span class="s14">PRIMASK </span>register. The <span class="s14">BASEPRI </span>register disables with interrupt priority, whereas <span class="s14">PRIMASK </span>disables all interrupts. EMLIB Core can be configured to use the <span class="s14">BASEPRI </span>register, and it can then be used with the <span class="s14">CORE_ENTER_ATOMIC() </span>and <span class="s14">CORE_EXIT_ATOMIC() </span><a href="https://docs.silabs.com/gecko-platform/latest/emlib/api/efr32xg22/group-core" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">macros, which will disable inter- rupt priorities 3 and lower. See </a><span style=" color: #049;">Core Interrupt </span>documentation for more information.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Without RTOS, Link Layer uses PendSV for achieving priority over the application software. With RTOS the Link Layer will not use PendSV, but Link Layer task will have higher priority over application task. RTOS scheduler will then give priority to Link Layer task over application task.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following table describes the three different components within the Bluetooth stack that run in different operating contexts, and their maximum time to disable interrupts in order for each component to assure connections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:30pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Component</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 8pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 13pt;padding-right: 12pt;text-indent: 5pt;text-align: left;">Timing Accuracy</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 16pt;padding-right: 11pt;text-indent: -4pt;text-align: left;">Operating Context</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 17pt;padding-right: 2pt;text-indent: -14pt;text-align: left;">Maximum IRQ Disable</p></td><td style="width:157pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 54pt;padding-right: 27pt;text-indent: -25pt;text-align: left;">If Timing Requirements are Ignored</p></td></tr><tr style="height:51pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 2pt;padding-right: 22pt;text-indent: 0pt;text-align: left;">Time-critical low level TX/RX radio control</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-right: 5pt;text-indent: 0pt;text-align: right;">Microseconds</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio IRQ</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 13pt;padding-right: 13pt;text-indent: 0pt;text-align: center;">&lt; ~10 µs</p></td><td style="width:157pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Packets are not transmitted or re- ceived, which will eventually cause supervision timeout and Bluetooth link loss.</p></td></tr><tr style="height:73pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Link layer</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">Time-critical connection management procedures and encryption</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-right: 8pt;text-indent: 0pt;text-align: right;">Milliseconds</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">PendSV IRQ (1)</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 13pt;padding-right: 13pt;text-indent: 0pt;text-align: center;">&lt; ~20 ms</p></td><td style="width:157pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">If the link control procedure is not handled in time, Bluetooth link loss may happen. Peripheral-side channel map update and connection update timings are controlled by central de- vice.</p></td></tr><tr style="height:51pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Host Stack</p></td><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Bluetooth Host Stack, Se- curity Manager, GATT</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Seconds</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Application</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 13pt;padding-right: 13pt;text-indent: 0pt;text-align: center;">&lt; 30 s</p></td><td style="width:157pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">SMP and GATT have a 30 s timeout and if operations are not handled within that timeout Bluetooth link loss will occur.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">(1) PendSV interrupt is only used without RTOS</p></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark91">Wireless Gecko Resources</a><a name="bookmark103">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The Bluetooth stack uses some of the Wireless Gecko’s resources, which are not available to the application. The following table lists the resources and describes their use by the stack. The first four resources (in red) are always used by the Bluetooth stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Category</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Resource</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Used in software</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Notes</p></td></tr><tr style="height:30pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PRS</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s20" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PRS7</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">PROTIMER RTC synchroni- zation</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">PRS7 always used by the Bluetooth stack.</p></td></tr><tr style="height:59pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="2"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Timers</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s20" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RTCC</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EM2 timings</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">The sleep timer uses RTCC in the default configuration.</p><p style="padding-top: 8pt;padding-left: 3pt;padding-right: 3pt;text-indent: 0pt;text-align: left;"><a href="https://docs.silabs.com/mcu/latest/efr32mg13/group-SLEEPTIMER" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">In EFR32[B|M]G13 and EFR32[B|M]G22, RTCC can be used by applica- tions if the sleep timer is configured to use another resource. See </a><a href="https://docs.silabs.com/mcu/latest/efr32mg13/group-SLEEPTIMER" class="s21" target="_blank">platform sleeptimer documentation</a></p></td></tr><tr style="height:19pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s20" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PROTIMER</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">The application does not have access to PROTIMER.</p></td></tr><tr style="height:19pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s20" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RADIO</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Always used and all radio registers are reserved for the Bluetooth stack.</p></td></tr><tr style="height:48pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="5"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">GPIO</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NCP</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Host communication.</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">2 to 6 x I/O pins can be allocated for the NCP usage depending on used features (UART, RTS/CTS, wake-up and host wake-up).</p><p class="s17" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Optional to use, and valid only for NCP use case.</p></td></tr><tr style="height:38pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PTI</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Packet trace</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">2 to N x I/O pins.</p><p class="s17" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Optional to use.</p></td></tr><tr style="height:38pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">TX enable</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">TX activity indication</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">1 x I/O pin.</p><p class="s17" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Optional to use.</p></td></tr><tr style="height:38pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RX enable</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RX activity indication</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">1 x I/O pin.</p><p class="s17" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Optional to use.</p></td></tr><tr style="height:38pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">COEX</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Wi-Fi coexistence</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">4 x I/O pin.</p><p class="s17" style="padding-top: 8pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Optional to use.</p></td></tr><tr style="height:30pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CRC</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">GPCRC</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PS Store</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;padding-right: 22pt;text-indent: 0pt;text-align: left;">Can be used in application, but application should always reconfigure GPCRC before use, and GPCRC clock must not be disabled in CMU.</p></td></tr><tr style="height:19pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flash</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">MSC</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PS Store</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Can be used by the application.</p></td></tr><tr style="height:40pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="2"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CRYPTO</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CRYPTO</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth link encryption</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">The CRYPTO peripheral can only be accessed through the mbedTLS crypto library, not through any other means. The library should be able to do the scheduling between the stack and application access.</p></td></tr><tr style="height:19pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RADIOAES</p></td><td style="width:120pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth link encryption</p></td><td style="width:303pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">The application does not have access to RADIOAES</p></td></tr></table><ol id="l42"><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: justify;"><a name="bookmark92">Flash</a><a name="bookmark104">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The application and Bluetooth stack are executed from the flash memory. The flash can be split into blocks for the bootloader, the Blue- tooth AppLoader, application + Bluetooth stack, and non-volatile memory, as shown in the following figure.</p><ul id="l43"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">The bootloader is essential to enable Bluetooth stack and application upgradeability. The bootloader has been designed to be fu- ture-proof for bootloader improvements and feature additions. On devices with separate bootloader flash the bootloader is located there.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">The Bluetooth AppLoader provides OTA upgradability for the application. This is an optional feature, but using it requires that the bootloader is also used.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">PS Store and NVM3 are a non-volatile data stores (NVM), where both the Bluetooth stack and the application can store permanent data, such as Bluetooth bonding keys, application configuration data, hardware configurations, and so on. These cannot be used simultaneously. PS Store is only supported on Series 1 devices.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">The application is located between the Bluetooth AppLoader and NVM. The Bluetooth stack is a library that is linked with the appli- cation. The Bluetooth stack includes the actual Bluetooth firmware, including link layer, GAP, SM, ATT, and GATT layers.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Manufacturing tokens storage is used for storing manufacturing tokens. On EFR32[B|M]G2x devices it is located at end of main flash.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="677" height="255" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_012.jpg"/></span></p><p class="s11" style="padding-top: 2pt;padding-left: 144pt;text-indent: 0pt;text-align: center;">Figure 7.1.  Flash Usage With and Without Separate Bootloader Flash</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The following table shows the flash usage for each block. The estimates can vary between use cases, configurations, application re- sources, or SDK version.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:40pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">Compiler</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 20pt;padding-right: 10pt;text-indent: -8pt;text-align: left;">EFR32[B| M]G1</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 18pt;padding-right: 10pt;text-indent: -6pt;text-align: left;">EFR32[B| M]G12</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 18pt;padding-right: 10pt;text-indent: -6pt;text-align: left;">EFR32[B| M]G13</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 18pt;padding-right: 11pt;text-indent: -6pt;text-align: left;">EFR32[B| M]G21</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">EFR32[B|</p><p class="s19" style="padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">M]G21 with Vault</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 18pt;padding-right: 11pt;text-indent: -6pt;text-align: left;">EFR32[B| M]G22</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bootloader</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">16</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">16</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">16</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">16</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">24</p></td></tr><tr style="height:30pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Bluetooth AppLoad- er</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">42</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">46</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">48</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">56</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">56</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 8pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">64</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">soc-empty (1)</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">GCC</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">146</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">157</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">160</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">167</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">169</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">175</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">&quot;</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">IAR</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">145</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">156</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">159</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">167</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">169</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 24pt;text-indent: 0pt;text-align: right;">174</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PS Store</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td></tr><tr style="height:19pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3 (2)</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 8pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">10</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">10</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">40</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">40</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 26pt;text-indent: 0pt;text-align: right;">40</p></td></tr><tr style="height:30pt"><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Manufacturing to- kens</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">8</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 29pt;text-indent: 0pt;text-align: right;">8</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-right: 29pt;text-indent: 0pt;text-align: right;">8</p></td></tr></table><ol id="l44"><li><p class="s12" style="padding-top: 7pt;padding-left: 36pt;text-indent: -13pt;line-height: 11pt;text-align: justify;">soc-empty <span class="p">is an example applications provided in the Bluetooth SDK. It is compiled with high size optimizations. GCC uses the </span><span class="s14">-Os</span></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">flag, and IAR the <span class="s14">-Ohz </span>flag.</p></li><li><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">NVM3 is an alternative to PS Store. They cannot be used simultaneously. NVM3 requires a minimum of 3 flash pages; the default configuration in the Bluetooth sample applications is 5 pages in the SDK. Please refer to <i>AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage </i>for further information about NVM3.</p></li></ol><ol id="l45"><li><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark93">Optimizing Flash Usage Dead code elimination</a><a name="bookmark105">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Bluetooth stack libraries are designed to benefit from the linker&#39;s dead code elimination optimization. With this optimization all unused code will be removed from application.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To fully utilize this optimization feature, it is important not to call any function that is not needed for application. These include all initiali- zation functions for the Bluetooth stack.</p><p class="s11" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Selective Initialization of Bluetooth Stack Components</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark64" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Each required stack component must be individually initialized. For more information, see section </a><a href="#bookmark64" class="s10">4.2 Bluetooth Configuration with </a>sl_bt_init_stack()<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark94">Bluetooth Bonding Database</a><a name="bookmark106">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth bonding database is stored in NVM. NVM3 size must be set so that the required number of bondings can fit to it. The follow- ing table shows how much NVM3 space each bonding will require at maximum in bytes including NVM3 overheads. EFR32[B|M]G1x devices still use use the old bonding database, whereas EFR32[B|M]G2x devices use new PSA ITS (internal trusted store) for storing the keys.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:172pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">EFR32[B|M]G1x</p></td><td style="width:122pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">EFR32[B|M]G2x</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: center;">EFR32[B|M]G2x with Vault</p></td></tr><tr style="height:19pt"><td style="width:172pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure Connections Pairing</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">107</p></td><td style="width:122pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">211</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">299</p></td></tr><tr style="height:19pt"><td style="width:172pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Legacy Pairing</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">155</p></td><td style="width:122pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">311</p></td><td style="width:123pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">443</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that in EFR32[B|M]G2x devices, during the first boot, the device tries to import keys from the old bonding database used in the SDK v3.1.1 and older into PSA ITS. If IRK (privacy key) import fails, all existing bondings are deleted, because IRK is shared with bon- ded devices. If importing certain bonding fails, that bonding is erased and importing will continue with the next one.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When deployed to Secure Vault High devices, sensitive keys such as the Long Term Key (LTK) are protected using the Secure Vault Key Management functionality. The table below shows the protected keys and their storage protection characteristics.</p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:222pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Wrapped Key</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Exportable/Non-Exportable</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Notes</p></td></tr><tr style="height:19pt"><td style="width:222pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Remote Long Term Key (LTK)</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Non-Exportable</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td></tr><tr style="height:19pt"><td style="width:222pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Local Long Term Key (legacy only)</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Non-Exportable</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">-</p></td></tr><tr style="height:30pt"><td style="width:222pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Remote Identity Resolving Key (IRK)</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Exportable</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Must be Exportable for future compat- ibility reasons</p></td></tr><tr style="height:30pt"><td style="width:222pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Local Identity Resolving Key (IRK)</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;text-align: center;">Exportable</p></td><td style="width:159pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Must be Exportable because the key is shared with other devices</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Wrapped keys that are “Non-Exportable” can be used, but cannot be viewed or shared at runtime. Wrapped keys that are “Exportable” can be used or shared at runtime, but remain encrypted while stored in flash.</p></li></ol></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark95">Linking</a><a name="bookmark107">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack is delivered as a set of library files. The application links the Bluetooth stack libraries with the rest of application. The linker will then create an ELF-file, which contains the application code and data ready to be loaded into flash.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For generating OTA DFU files, the application&#39;s code and data must be linked into their own section in the ELF-file. This is automatically done with the linker files provided with the Gecko Platform.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="670" height="176" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_013.jpg"/></span></p><p class="s11" style="padding-top: 5pt;padding-left: 144pt;text-indent: 0pt;text-align: center;">Figure 7.2.  Sections Defined in the Linker File and Their Placement</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Depending on the device used, the bootloader is placed on separate flash memory or, if no separate bootloader flash exists, the linker file reserves some memory from main flash for the bootloader. Bluetooth AppLoader is placed at the beginning of main flash and the application with all libraries start from the next free flash page.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For more information on the OTA updates and how to enable them, please refer to <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide </i>and <i>AN1086: Using the Gecko Bootloader with Silicon Labs Bluetooth Applications</i>.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark96">RAM</a><a name="bookmark108">&zwnj;</a></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 19pt;text-align: left;">The Bluetooth stack reserves part of the RAM from the Wireless Gecko and leaves the unused RAM for the application. RAM consumption of the Bluetooth functionality is divided into:</p><ul id="l46"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth stack</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth object pools</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth buffer memory</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth GATT database</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">C STACK</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">C HEAP</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following table shows the RAM allocations that are done statically at link time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Component</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Static allocation at link time</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Configurable by</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth stack</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">6 kB</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth GATT database</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Application-dependent (20 to 200 bytes)</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Call stack</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2752 bytes</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_STACK_SIZE</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Heap memory</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">9200 bytes</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_HEAP_SIZE</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following table shows the RAM allocations that are done dynamically from the heap at run time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Component</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Dynamic heap allocation at run time</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Configurable by</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth stack</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2 kB</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth connection objects</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1600 bytes = 400 bytes * 4</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_MAX_CONNECTIONS</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth advertiser objects</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">160 bytes = 160 bytes * 1</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_USER_ADVERTISERS</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Bluetooth periodic advertising synchroniza- tion objects</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0 bytes = 168 bytes * 0</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_MAX_PERIODIC_AD- VERTISING_SYNC</p></td></tr><tr style="height:30pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth software timers</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">160 bytes = 40 bytes * 4</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;padding-right: 51pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_MAX_SOFT- WARE_TIMERS</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth buffer memory</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3150 bytes</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s17" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_CONFIG_BUFFER_SIZE</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l47"><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark97">Bluetooth Stack</a><a name="bookmark109">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack allocates around 6 kB of static RAM and 2 kB of heap for its internal use. It includes Bluetooth stack software with low-level radio drivers and the application programming interface.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark98">Bluetooth Object Pools</a><a name="bookmark110">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark108" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Bluetooth stack uses memory to store the necessary context for objects such as connections, advertisers, and periodic advertise- ment synchronizations. The number of these objects depends on the configuration. The table in section </a>7.3 RAM <span style=" color: #000;">summarizes the mem- ory usage in the default configuration and shows which configuration items affect the number of objects allocated.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark99">Bluetooth Buffer Memory</a><a name="bookmark111">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack uses memory for buffering API events and the data transmitted in Bluetooth connections, advertising, and scan- ning. This buffer memory is allocated from the heap by the Bluetooth stack when calling <span class="s14">sl_bt_init_stack()</span>. The size of buffer memory in bytes is defined by the C-define <span class="s14">SL_BT_CONFIG_BUFFER_SIZE </span>in <i>sl_bluetooth_config.h</i>. The default value is an estimation for achieving adequate throughput and supporting multiple simultaneous connections. Consider increasing this value if the application needs higher data throughput over connections or uses advertising or scanning with long advertisement data.</p></li><li><p class="s11" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark100">Bluetooth GATT Database</a><a name="bookmark112">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth GATT database uses statistically-allocated RAM. The amount of RAM used depends on the user-defined GATT data- base and cannot be generalized. All characteristics with write enabled use as much RAM as their length defined. Plus, every attribute in GATT needs a few bytes of RAM for maintaining the Attribute permissions. Typical RAM usage is approximately 20 to 200 bytes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark101">Call Stack</a><a name="bookmark113">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark108" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Bluetooth stack requires at minimum a call stack to be reserved from RAM as summarized in the table in section </a><span style=" color: #049;">7.3 RAM</span>. Applica- tion developers must allocate RAM for the application call stack on top of the memory required by the stack. The size of the call stack is configured by SL_STACK_SIZE in <i>sl_memory_config.h</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s11" style="padding-left: 50pt;text-indent: -27pt;text-align: left;"><a name="bookmark102">Heap memory</a><a name="bookmark114">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark108" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Bluetooth stack uses the heap to allocate storage for object contexts and the stack internal state as summarized in the table in section </a>7.3 RAM<span style=" color: #000;">. In addition to these allocations, the Bluetooth stack requires heap memory for asymmetric encryption operations us- ing the elliptic curve algorithms during Bluetooth pairing.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The C-define <span class="s14">SL_HEAP_SIZE </span>in <i>sl_memory_config.h </i>defines the minimum heap size that is allocated from the physical RAM at link time. The actual heap size at runtime can end up being larger than the minimum to make use of any available physical memory that would otherwise have remained unallocated.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The default minimum heap size is sufficient for running the Bluetooth examples with the default Bluetooth configuration. The application should configure the minimum heap size to account for the Bluetooth configuration used and any extra heap that the application may require.</p></li></ol></li></ol></li><li><p class="s9" style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark115">Application ELF-file</a><a name="bookmark116">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">ELF (Executable and Linkable Format) is a standard file format for executable files. This chapter describes the sections in the ELF file related to the application and the Bluetooth stack.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Some linkers provide output describing the consumed flash, but what it contains is not obvious. A Bluetooth project might contain a bootloader and the Bluetooth AppLoader, and the device might have separate flash for the bootloader. The ELF-file provides exact in- formation about RAM and flash usage.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Simplicity Studio provides the GCC toolchain, which contain command line tool <i>objdump</i>. This tool can be used to get section informa- tion from the ELF-file.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><i>objdump </i>requires input ELF-file. If the parameter <span class="s14">-h </span>is used, <i>objdump </i>dumps the section header information.</p><p class="s11" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">IAR</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Calling <i>objdump </i>from the command line for an example application:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> arm-none-eabi-objdump -h ewarm-iar/exe/soc_empty.out                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">objdump <span class="p">then gives the following output:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="370" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_014.png"/></span></p><p class="s14" style="padding-left: 82pt;text-indent: -77pt;line-height: 107%;text-align: left;">9 .iar.debug_frame 00015f9d 00000000 00000000 00072a58 2**0 CONTENTS, READONLY</p><p class="s14" style="padding-left: 82pt;text-indent: -82pt;line-height: 107%;text-align: left;">10 .comment 000e14ee 00000000 00000000 000889f8 2**0 CONTENTS, READONLY</p><p class="s14" style="padding-left: 82pt;text-indent: -82pt;line-height: 107%;text-align: left;">11 .iar.rtmodel 00000069 00000000 00000000 00169ee8 2**0 CONTENTS, READONLY</p><p class="s14" style="padding-left: 82pt;text-indent: -82pt;line-height: 107%;text-align: left;">12 .ARM.attributes 0000002e 00000000 00000000 00169f54 2**0 CONTENTS, READONLY</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">8 .debug_line</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">7 .debug_info</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">0003bf4f 00000000 00000000 00036a18 CONTENTS, READONLY,  DEBUGGING 00000056 00000000 00000000 00072968 CONTENTS, READONLY,  DEBUGGING 00000096 00000000 00000000 000729c0 CONTENTS, READONLY, DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">6 .debug_frame</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">0 .text_apploader rw 0000dfc0 00006000 00006000 00000034 2**13 CONTENTS, ALLOC, LOAD, READONLY, DATA</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">1 application us 000289f0 00014000 00014000 0000dff4 2**8 CONTENTS, ALLOC, LOAD, READONLY, CODE</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">2 storage_regions rw 0000a000 00074000 00074000 000369e4 2**13 ALLOC</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">3 application_ram rw 000045c8 20000000 20000000 000369e4 2**9 ALLOC</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">4 .debug_abbrev 00000015 00000000 00000000 000369e4 2**0 CONTENTS, READONLY, DEBUGGING</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">5 .debug_aranges 0000001c 00000000 00000000 000369fc 2**0 CONTENTS, READONLY, DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">File off Algn</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">LMA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">VMA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">Size</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">Sections: Idx Name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">.text_apploader <span class="p">contains the Bluetooth AppLoader.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.text_signature <span class="p">is the space reserved for the AppLoader signature.</span></p><p class="s14" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">.text <span class="p">contains the application code and read-only data. Size of the application in this example is 0x289f0 in hexadecimal, and 166384 bytes in decimal.</span></p><p class="s14" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.stack <span class="p">is a RAM section for the call stack.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.data <span class="p">is the RAM section for initialized variables.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">.bss <span class="p">is the RAM section for uninitialized variables.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.heap <span class="p">is the RAM section for heap.</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Refer to IAR documentation for description of the remaining sections.</p><p class="s11" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">GCC</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Calling <i>objdump </i>from the command line for an example application:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> arm-none-eabi-objdump -h build/debug/soc_empty.out                                                              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">objdump <span class="p">then gives the following output:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="345" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_015.png"/></span></p><p class="s14" style="padding-left: 82pt;text-indent: -82pt;line-height: 107%;text-align: left;">11 .debug_frame 000003c0 00000000 00000000 0004cb04 2**2 CONTENTS, READONLY, DEBUGGING</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">00000076 00000000 00000000 0004ca8e CONTENTS, READONLY</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">10 .comment</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">9 .ARM.attributes 00000036 00000000 00000000 0004ca58 2**0 CONTENTS, READONLY</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">00042a58</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">0003c9e4</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">0003c9e4</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">8 .nvm</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">00040b18</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">20002590</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">20002590</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">7 .heap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">20000b18 0003ccfc 00040b18 2**9</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">00001a74 ALLOC 00001f40 CONTENTS 0000a000 CONTENTS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">6 .bss</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">00040800</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">00050000</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">00000800 20000000 20000000</p><p class="s14" style="text-indent: 0pt;text-align: left;">ALLOC</p><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">00000318 20000800 0003c9e4 CONTENTS, ALLOC, LOAD, CODE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: right;">2**2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l48"><li><p class="s14" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">.stack</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s14" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">.data</p></li></ol><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">2**8</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">000289dc 00014000 00014000 00014000 CONTENTS, ALLOC, LOAD, READONLY, CODE 00000008 0003c9dc 0003c9dc 0003c9dc CONTENTS, ALLOC, LOAD, READONLY, DATA</p><p style="text-indent: 0pt;text-align: left;"/><ol id="l49"><li><p class="s14" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">.text</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s14" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">.ARM.exidx</p></li></ol><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">0 .text_apploader 0000dfc0 00006000 00006000 00006000 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA</p><p class="s14" style="padding-left: 77pt;text-indent: -77pt;line-height: 107%;text-align: left;">1 .text_signature 00000040 00013fc0 00013fc0 00013fc0 2**0 ALLOC</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">File off Algn</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">LMA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">VMA</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;text-align: left;">Size</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="text-indent: 0pt;line-height: 107%;text-align: left;">Sections: Idx Name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.text_apploader <span class="p">contains the Bluetooth AppLoader.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">.text_signature <span class="p">is the space reserved for the AppLoader signature.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.text <span class="p">contains the application code and read-only data. The size of the application in this example is 0x289dc in hexa-decimal and 166364 bytes in decimal.</span></p><p class="s14" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.ARM.exidx <span class="p">is used for debugging.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.stack <span class="p">is a RAM section for the call stack</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.data <span class="p">is the RAM section for initialized variables.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.bss <span class="p">is the RAM section for uninitialized variables.</span></p><p class="s14" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">.heap <span class="p">is the RAM section for heap.</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Refer to GCC documentation for a description of the remaining sections.</p><p class="s8" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Documentation</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_016.png"/></span></p></li><li><p class="s9" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark117">Documentation</a><a name="bookmark118">&zwnj;</a></p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="756" height="825" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_017.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Smart. Connected. <span class="s24">Energy-Friendly.</span></h2><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="769" height="433" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s26">www.silabs.com/products</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_020.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s26">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s25" style="padding-top: 5pt;padding-left: 144pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 144pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s26">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s28" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s29">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s29">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s29">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s32" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s31" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s33" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s28">Silicon Laboratories Inc.</span>®<span class="s28">, Silicon Laboratories</span>®<span class="s28">, Silicon Labs</span>®<span class="s28">, SiLabs</span>® <span class="s28">and the Silicon Labs logo</span>®<span class="s28">, Bluegiga</span>®<span class="s28">, Bluegiga Logo</span>®<span class="s28">, Clockbuilder</span>®<span class="s28">, CMEMS</span>®<span class="s28">, DSPLL</span>®<span class="s28">, EFM</span>®<span class="s28">, EFM32</span>®<span class="s28">, EFR, Ember</span>®<span class="s29">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s28">, EZLink</span>®<span class="s28">, EZRadio</span>®<span class="s28">, EZRadioPRO</span>®<span class="s28">, Gecko</span>®<span class="s28">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s28">, Precision32</span>®<span class="s28">, ProSLIC</span>®<span class="s28">, Simplicity Studio</span>®<span class="s28">, SiPHY</span>®<span class="s28">, Telegesis, the Telegesis Logo</span>®<span class="s28">, USBXpress</span>® <span class="s28">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s28">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="ug434-bluetooth-c-soc-dev-guide-sdk-v3x/Image_022.png"/></span></p><p class="s31" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s31" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/" class="s34">www.silabs.com</a></p></body></html>
