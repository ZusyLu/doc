<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1010: Building a Customized NCP Application</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s9 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 a { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s11 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s12 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d3 1; }
 #l4> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1010-customized-ncp/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1010: Building a Customized NCP Application</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1010-customized-ncp/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="205" height="1" alt="image" src="an1010-customized-ncp/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="206" height="1" alt="image" src="an1010-customized-ncp/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Instructions cover starting from an example or from a new file.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Customizations include target hardware, initialization, main loop processing, event definition and handling, and host/NCP command extensions.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The ability to build a customized NCP application image was in- troduced in EmberZNet PRO 5.4.1. This application note pro- vides instructions for configuring various aspects of the applica- tion using the Application Builder tool within Simplicity Studio.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1010-customized-ncp/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In previous stack releases, developers were restricted to using the precompiled binaries delivered in pre-5.4.1 versions of the EmberZ- Net PRO stack. The stack now supports the ability to build NCP applications in the Simplicity Studio IDE (also known as AppBuilder), with customizations for target hardware, initialization, main loop processing, event definition and handling, and host/NCP command ex- tensions. This application note describes how to configure a customized NCP application using the EmberZNet PRO stack for members of the Wireless Gecko (EFR32) platforms.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If you are not familiar with using Simplicity Studio to configure an example application or start from a blank application, and then build the application image and load it and a bootloader, refer to <i>QSG106: Zigbee EmberZNet PRO Quick Start Guide</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For EFR32 platforms, a Hardware Configurator is now available that allows you to modify peripheral configurations, including pin set- tings. Some configuration options can be changed in the relevant plugin&#39;s Hardware Configurator Options interface. All options, includ- ing pin configurations, can be changed in the Hardware Configurator tool. You can access the tool either by double-clicking the .hwconf file or through the [<b>Open Hardware Configurator</b>] control on the HAL tab. Refer to <i>AN1115: Configuring Peripherals for 32-Bit Devices Using Hardware Configurator </i>for more information than is provided in this document.</p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">EmberZNet PRO</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The EmberZNet PRO stack includes an example application that can be configured to work over either SPI or UART. This can be used as starting point for building a customized NCP application, or you can start from a blank application. The first two sections describe these two approaches. The third section details the customizations you can make after starting your application in one of the two ways described.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Starting from an Example Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends that you use either the <b>NCP SPI, NCP UART (HW), </b>or <b>NCP UART SW </b>example applications as a starting point for building a customized NCP application. All of these examples are accessible by beginning a new Simplicity Studio project, choosing <b>Customizable network coprocessor (NCP) applications </b>from the list of application frameworks, choosing the relevant Em- berZNet SDK version if you have more than one installed, and then choosing an example application from the list of provided options.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When you start a new project by clicking the example tile in the Launcher perspective, Simplicity Studio configures the project based on your connected part or scenario. When you start a new project by clicking [<b>[New Project] </b>]and moving through the dialogs, you can select the target part for which the application is being built. Regardless of the creation path, the information in the Architecture box on the General tab should reflect the target part. Regardless of part, the <b>Device Type </b>box on the General tab is preconfigured with &quot;No device type selected&quot; for all NCP example applications. The default selections provided by these examples allow them to work on the EFR32 platform. Therefore, for NCP application purposes, you can leave the Device Type setting unchanged.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you want to override the default stack settings for your NCP, on the Plugins tab In the Stack Libraries section, select the <b>ZigBee PRO Stack Library </b>plugin and alter the plugin properties using the fields to the right of the plugin list. For example, to change the maximum number of supported end device children from the default of 32, click the <b>Child Table Size </b>parameter and input the desired maximum number of end device children you can join directly to the NCP. Note that, while the on-screen text says the value range is 0-127, you cannot build the app if you enter a value greater than 64. The precompiled NCP binaries are limited to 32 children.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Starting from a Blank Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">If, instead of beginning with one of the example applications, you prefer to begin with a blank application, make the following changes under the indicated AppBuilder project tabs to configure basic NCP functionality. Following these changes, other customizations can be made as described in section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">2.3 Customizations</span>.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">General Tab</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">(optional) Change the <b>Device Name </b>field to match your project name, so that the resulting binary will have a distinct name.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Verify that the information shown in the architecture box matches the part you are targeting. If necessary, click [<b>Edit Architecture</b>] to change it.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">For Device Type:</p><ol id="l4"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>No device type selected</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Select <b>EFR32 </b>from the list on the left as appropriate for your target architectures. The device type selections merely choose a set of included default plugins for the build.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Click [<b>Add Device →</b>]. Make sure the selected NCP device type is added to the list on the right.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Click [<b>OK</b>].</p><p class="s6" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">HAL Tab</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">For EFR32 platforms, in the Hardware Configurator Interface group ensure that the <b>Enable integration with Hardware Configurator</b></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">checkbox is checked.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Plugins Tab</p><ul id="l5"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Core section, ensure that only one of the three NCP communication options (<b>NCP - SPI</b>, <b>NCP - UART</b>, or <b>NCP - USB</b>) is enabled and that the selection matches the communication and flow control style (if applicable) used by your host. Note that USB communication is only available for parts that have native USB serial controller functionality and is not recommended for new de- signs. If selecting <b>NCP - UART</b>, select the appropriate <b>Flow Control Type </b>option from the picklist in the plugin options area so that it matches the UART flow control style used by your corresponding host application. For EFR32 platforms, in the <b>NCP -SPI </b>or <b>NCP – UART </b>plugin Hardware Configurator Dependent Module options, check the <b>Enabled </b>box for the SPINCP or UARTNCP peripheral, respectively. Optionally, change the USART port.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the HAL section, enable either the <b>Debug JTAG </b>or <b>Debug JTAG Stub </b>plugin depending on whether you want to support use of the SerialWire/JTAG pins during program operation.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the I/O section, ensure the Serial plugin is enabled. For EFR32 NCP configurations, in the Hardware Configurator Dependent Module options check the <b>Enabled </b>checkboxes for both the SERIAL peripheral and the USARTn peripheral corresponding to the USART port used for SPI or UART NCP communication.</p></li></ul></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark4">Customizations Plugins</a><a name="bookmark5">&zwnj;</a></p></li></ol></li></ol><p style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">One way to customize your NCP design is through the Plugins tab. Examples of common plugin-related customizations follow.</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">For EFR32 platforms, to change the default pins used for EZSP-SPI or EZSP-UART communication, use the following instructions:</p><ul id="l7"><li><p class="s5" style="padding-top: 3pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">For SPI NCP designs<span class="p">:</span></p><ul id="l8"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -9pt;text-align: justify;">In the Core section, select the <b>NCP - SPI </b>plugin. In the Hardware Configurator Dependent Module options, check the <b>Enabled </b>box for the SPINCP peripheral. This should already be enabled if you are starting from an example application. Check that the <b>SPI NCP USART Port </b>setting in the Property listing matches your desired USART for SPI NCP communication and that the <b>nWAKE </b>and <b>nHOST_INT </b>pin settings match your desired signal pinout for SPI communication.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: justify;">Scroll down to the I/O section and select the <b>Serial </b>plugin, which should already be enabled. In the Hardware Configurator Dependent Module Options select the SERIAL peripheral and check the <b>Enabled </b>checkbox, if it is not checked already. None of the Serial peripheral properties need to be changed for an NCP.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: justify;">Select the USART peripheral corresponding to the USART port setting in the <b>NCP - SPI </b>plugin and check the <b>Enabled </b>check- box. Check that the <b>Mode </b>setting in the Property listing for that USART is set to “Synchronous” and that the pin selection properties in that section match your desired signal pinout for EZSP-SPI communication.</p></li></ul></li><li><p class="s5" style="padding-top: 2pt;padding-left: 48pt;text-indent: -9pt;text-align: left;">For UART NCP designs<span class="p">:</span></p><ul id="l9"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -9pt;text-align: justify;">In the Core section, select the <b>NCP - UART </b>plugin. In the Hardware Configurator Dependent Module options, check the <b>Ena- bled </b>box for the SPINCP peripheral. This should already be enabled if you are starting from an example application. Check that the <b>UART NCP USART Port </b>setting in the Property listing matches your desired USART for UART NCP communication.</p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -9pt;text-align: justify;">Scroll down to the I/O section and select the <b>Serial </b>plugin, which should already be enabled. In the Hardware Configurator Dependent Module Options select the USART peripheral corresponding to the USART Port setting in the <b>NCP - USART </b>plu- gin and check the <b>Enabled </b>checkbox. Check that the <b>Mode </b>setting in the Property listing for that USART is set to “Asynchro- nous” and that the pin selection properties in that section match your desired signal pinout for EZSP-UART communication.</p></li></ul></li></ul></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Stack Libraries section, <b>Binding Table Library </b>plugin, change the “Binding Table Size” parameter to the max desired binding table size used by the NCP.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Stack Libraries section, <b>Security Link Keys Library </b>plugin, change the <b>Link Key Table Size </b>parameter to the desired maxi- mum number of unique APS link keys used by the NCP. Note that if you are configuring your NCP to act as a Trust Center with Zigbee 3.0 Security (as set in the Security Type area on the Zigbee Stack tab), it is not necessary to have a unique key table entry for every device. Instead, a single security key known as a Master Key is used to compute unique keys via an AES-HMAC hash function for each device. However, supporting install-code-based keys requires a link key table with as many entries as the number ofinstall-code-based keys you wish to support simultaneously for joining devices with install code support.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Stack Libraries section, <b>ZigBee PRO Stack Library </b>plugin, change the <b>Child Table Size </b>parameter to the desired maximum number of end device children joined directly to the NCP. Note that, while the on-screen text says the value range is 0-127, you cannot build the app if you enter a value greater than 64. The precompiled images are limited to 32 children.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Stack Libraries section, <b>ZigBee PRO Stack Library </b>plugin, increase/decrease other option parameters to meet your needs. You may need to reduce values like Packet Buffer Count, which has a high RAM overhead, if your build fails due to lack of available RAM in the memory map. However, note that most memory-related parameters here simply represent defaults when the NCP boots, and these settings can be overridden by the host during run-time configuration when the NCP is initialized.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Command Handlers section, disable any EZSP command handler plugins for command sets not needed on your NCP, and enable additional EZSP command handler plugins for other features (like Manufacturing Library) that you may need.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the Stack Libraries section, change plugins for any stack features not needed on your NCP to stub variants.</p><p class="s6" style="padding-top: 6pt;padding-left: 36pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Certificate-based Key Establishment (CBKE) non-stub library plugins are enabled in the blank NCP template by default, but these are only required for NCP devices used in Zigbee Smart Energy networks, and they require an ECC Library component availa- ble on request from Silicon Labs technical support. If you do not need Zigbee Smart Energy features in your device, you should replace these CBKE-related libraries with their stub equivalents.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 36pt;text-indent: -9pt;text-align: justify;">In the HAL section, if Activity LED is not desired on your NCP, change the <b>HAL:LED </b>plugin to the <b>HAL:LED Stub </b>plugin.</p></li></ul><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Callbacks</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Another method of customization involves enabling callbacks in the <b>Callbacks </b>tab. Select a callback to see detail about the callback. To enable custom code for that callback, activate the “Is used?” checkbox but deactivate the “Stub?” checkbox. When you (re)generate the callbacks C file, it will contain the prototype for that callback function for you to fill in the code. Some of the more common callbacks are as follows:</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">emberAfMainCallback <span class="p">- NCP Initialization immediately following NCP reset.</span></p><p class="s8" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">emberAfMainTickCallback <span class="p">- Custom processing per iteration of NCP main processing loop.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Custom Code Implementation Files</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Source files, include paths, and libraries that implement custom capabilities should be registered in the corresponding configuration ta- ble found on the Other tab. These files will contain implementation for callbacks, event handlers, and messaging customizations.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Security</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For devices implementing Trust Center functionality (either as a coordinator providing centralized trust center responsibilities for the network or a router in a decentralized trust center configuration), you may wish to override the EZSP Trust Center policy’s decisions about when and how to provide the current network security key to a joining or rejoining device. In EmberZNet PRO releases beginning with version 5.7.1, use the following callback to provide this feature:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EmberJoinDecision emberAfPluginEzspSecurityTrustCenterJoinCallback(EmberNodeId newNodeId,</p><p class="s8" style="padding-left: 328pt;text-indent: 0pt;line-height: 107%;text-align: left;">const EmberEUI64 newNodeEui64, EmberDeviceUpdate status, EmberNodeId parentOfNewNode, EzspDecisionId decisionId, EmberJoinDecision joinDecision)</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">NCP Event Definition and Handling</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Register custom event controls and handlers in the corresponding table on the project Other tab. Implement event triggers and handlers in the custom code implementation files.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Custom Messaging</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">To implement custom messages between NCP and host, the developer defines and implements the format, parsing, and serialization of the message set. The serialized messages are conveyed between NCP and host as opaque byte strings. This “extensible network cop- rocessor” functionality is provided by the <b>XNCP Library </b>plugin (as opposed to the <b>XNCP Stub Library </b>plugin) in the NCP Framework.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">To send a custom message to the host, construct and serialize the message, then send the resulting byte string to the host using the EmberZNet PRO API function <span class="s8">emberAfPluginXncpSendCustomEzspMessage().</span></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">After enabling the <b>XNCP Library </b>plugin, the following callbacks are provided through the Callbacks tab for custom 2-way messaging over EZSP:</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">emberAfPluginXncpIncomingCustomFrameCallback <span class="p">- Processing of custom incoming serial frames from the EZSP host</span></p><p class="s8" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">emberAfIncomingMessageCallback <span class="p">- Custom processing of received Zigbee application layer messages before passing these (through Incoming Message Callback frames) to the EZSP host</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note that custom <i>outgoing </i>serial frames from the NCP to the EZSP host should be provided as response frames to the host in reply to a Callbacks EZSP command or some custom host-to-NCP EZSP command, where they can be handled by the following host-side call- back: <span class="s8">void ezspCustomFrameHandler(int8u payloadLength, int8u* payload)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products">www.silabs.com/products</a></p><p class="s9" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality">www.silabs.com/quality</a></p><p class="s9" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s10" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:&quot;Courier New&quot;, monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1010-customized-ncp/Image_006.png"/></span></p><p class="s11" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s12" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s12" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1010-customized-ncp/Image_007.png"/></span></p><p class="s11" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s11" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
