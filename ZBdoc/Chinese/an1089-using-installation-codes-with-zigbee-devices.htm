<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1089: Using Installation Codes with Zigbee Devices</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s5 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s10 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s11 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s14 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s15 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt;counter-reset: e1 1; }
 #l6> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1089: Using Installation Codes with Zigbee Devices</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="201" height="1" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="202" height="1" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Concepts of the Zigbee installation code</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Programming examples for installation codes on EFR32 devices</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Checking, writing, verifying, and erasing installation codes on target devices</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Joining a Z3 network with an installation code-derived link key</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note provides an overview of using installation codes with Zigbee devices. It also explains (with the help of ex- amples) how to use Simplicity Commander to check, write, verify, and erase installation codes on Silicon Labs Wireless Gecko (EFR32™) devices. Finally, it provides a complete example of how to join a Z3 network with an installation code-derived link key.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends that you be familiar with creating example applications and using the Network Analyzer, as described in <i>QSG106: Zigbee EmberZNet PRO Quick Start Guide</i>.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Installation Code Overview</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Installation Code Overview</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">What Is an Installation Code?</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Zigbee installation codes, sometimes also referred to as “install codes,” are provided as a means for a device to join a Zigbee network in a reasonably secure fashion. The installation code itself is a random value installed on the joining device at manufacturing time, and is used to encrypt the initial network key transport from the Zigbee network’s centralized Trust Center device (the coordinator) to the joining device. With the creation of the Zigbee 3.0 standard in late 2016, all Zigbee devices capable of joining networks (as opposed to forming them) must support the use of installation codes during joining, as this is a requirement for Zigbee 3.0 compliance.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The installation code can be thought of as similar to the PIN code on Bluetooth devices when two devices are paired. The PIN code is provided as an authorization code for the parent device so that the joining device knows it is receiving information securely, such as when a hands-free headset is paired to a smartphone.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The installation code is typically printed on the case or packaging of the device, either as a hexadecimal string or in an encoded fashion such as a barcode or QR code, and provided through an out-of-band mechanism to the Trust Center device or its associated web/cloud interface, along with the 64-bit IEEE MAC address (“EUI64”) of the device. If this device-specific data is stored on a remote web server or cloud-based system, that remote system then securely transports that information to the Trust Center to establish security creden- tials for the joining device in advance of the in-band joining process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Caveats for Zigbee Smart Energy (ZSE) Devices</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Trust Center and the joining device use the installation code as a shared key to establish an initial bond of trust allowing the new device to join the Zigbee network. Once the device has successfully joined the network for which it is authorized, Zigbee requires that the node negotiate a new Trust Center link key for future secure exchanges with the Trust Center. In standard Zigbee 3.0 networks, this occurs through a key request directly to the Trust Center. However, in Zigbee Smart Energy networks, which behave differently from standard Zigbee 3.0 networks, the new Trust Center link key is derived through a special process known as Certificate-Based Key Es- tablishment (CBKE). For more information about the CBKE process, refer to <i>UG103.05: IoT Endpoint Security Fundamentals</i>. Note that the CBKE process requires installing CBKE data certificates signed by Certicom during the manufacturing process. Refer to <i>AN708: Setting Smart Energy Certificates for Zigbee Devices </i>for details about how to set these certificate data. Also consult <i>AN714: Smart Energy ECC-Enabled Device Setup Process </i>for more information about the requirements for preparing Zigbee smart energy (ZSE) de- vices to be able to join a network and for troubleshooting this process.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">This document outlines common practices relating to installation codes for either a standard Zigbee 3.0 device or a ZSE device.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Security Use</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_006.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark3">Security Use</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">An installation code is used to create a preconfigured, link key. The installation code is transformed into a link key by use on an AES- MMO hash algorithm. For more information and sample code, consult the Install Codes section of the Security chapter of the Zigbee Alliance’s Base Device Behavior Specification (Zigbee document #13-0402).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The installation code, while not exactly a secret, cannot be easily guessed by a malicious device that hears the initial exchange be- tween the joining device and the Trust Center. Without knowledge of the installation code and thus the key, the malicious device cannot decrypt the messages.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark21" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The derived Zigbee link key will be known only by the Trust Center and the joining device. The Trust Center uses that key to securely transport the Zigbee network key to the device. Once the device has the network key, it can communicate at the network layer to the Zigbee network. It has the ability to perform service discovery and begin the application’s initialization process. In Zigbee 3.0 (non-ZSE) networks, having the network key is often enough for standard messaging across various clusters. However, ZSE networks have addi- tional restrictions as discussed below. See </a>7. Example: Joining a Z3 Light to a Z3 Gateway Using an Installation Code-Derived Link Key <span style=" color: #000;">for a step-by-step procedure to use an installation code-generated link key for network joining.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The initial link key derived from the installation code does not have full access privileges on a ZSE network. Attempts to use it for Smart Energy messaging are not allowed and will be ignored by other ZSE devices. Shortly after joining a network, a device must use the Key Establishment cluster to establish a new link key with the Trust Center via the CBKE process. Only when key establishment completes successfully will a device have full privileges on the network and be able send and receive certain ZSE messages.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Installation Code Format</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_007.png"/></span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark4">Installation Code Format</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">While Zigbee smart energy networks allow the installation code to be comprised of either 6-, 8-, 12-, or 16-byte random, hexadecimal number with a 2-byte CRC appended to the end, Zigbee 3.0 (Z3) networks specifically require 16-byte hexadecimal installation codes, also accompanied by a 2-byte CRC. Note that the CRC16 should be delivered to the user in little endian byte order, as this is what is expected when the code is entered into the device that performs the AES-MMO hash algorithm. As far as the user is concerned, the CRC is part of the installation code and they do not need to know that it is there or why. Therefore, from the user’s point of view, the length of the install code is 18 bytes (with potentially 8-, 10-, or 14-byte variants possible in ZSE devices).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Manufacturing and managing the list of installation codes will play a part in choosing the size, security, and user experience in installing the device. A larger installation code size will mean less of a chance of an attacker “guessing” the installation code and eavesdropping on the initial join. However, smaller installation code is much easier for a user to read off the device during installation.</p><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The Zigbee 3.0 Base Device Behavior Specification requires that you only use a 16-byte installation code. While this may be more difficult to enter, it provides sufficient strength against an attacker from guessing the installation code and gaining unauthorized access to network or device.</span></p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Installation Code CRC</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_008.png"/></span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">Installation Code CRC</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The installation code CRC is mechanism used to verify the integrity of an installation code when it is transmitted via an out-of-band mechanism to the utility. This transport mechanism involves human interaction in some way. As a result, the CRC was designed as a way to verify that an installation code is valid and was not mistakenly changed during transport.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Zigbee installation model enables users to install a device themselves. Users simply read the installation code on the back of the device and enter it into a webpage or provide it over the phone to a utility service. Because the number is a hexadecimal value, it is easy to transpose digits or read the wrong value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Validation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Zigbee specification expects that the server processing the out-of-band installation code entry from the installer will perform basic checking of the installation code for validity. The server then calculates the CRC over all bytes in the installation code except the final two. It then compares the final two bytes of the installation code with the calculated CRC to see if they match. If they do not match, the user entering the installation code can be informed immediately that it does not look valid. The user should then double-check the val- ue.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Zigbee specifications do not require the Trust Center to validate the installation code directly. (Any validation can be done on a remote web- or cloud-based server if the Trust Center doesn’t have this capability locally.) The Trust Center expects to receive a pre-config- ured link key along with the EUI64 of the new joining device. It does not need to have any knowledge about how that key was derived. It is up to the particular utility how it wishes to manage and transport the link key to the Trust Center.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For details on how the CRC is calculated, including sample code, consult the Install Codes section of the Security Chapter of the Zig- bee 3.0 Base Device Behavior Specification (Zigbee document #13-0402).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Generation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends that the installation code be a random number. This reduces the chances of an attacker guessing the instal- lation code and compromising the initial join procedure. The installation code should not be based on the manufacturing process, such as tied to the EUI64 or sequential numbering based on the manufacturing lot. If that were the case, an attacker with knowledge about the type of device being joined would have a known range of installation codes it could try to compromise the network and clone the device’s identity. An installation code does not have to be unique across all Zigbee devices for all manufacturers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Labels</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The device’s installation code should be printed on a label on the outside of the device along with its EUI64. Both elements should be identified with text indicating what they are. The installation code should not be printed on the outside of the box because that makes it easier for an attacker to gain knowledge of the installation code and potentially compromise the device. It is recommended that the installation code be printed in 2-byte blocks (for example, 83FE D340 7A93 9723 A5C6 39B2 6916 D505 C3B5).</p><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The CRC should be appended to the installation code in little endian format on the label.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">Example</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following is an 18-byte installation code label (16-byte random code with a 2-byte CRC):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> 83FE D340 7A93 9723 A5C6 39B2 6916 D505 C3B5                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The random number portion of the code is the first 16 sequential bytes. The calculated CRC value is 0xB5C3, but it is appended in little- endian format.</p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark10">Programming the Installation Code on a Zigbee Device</a><a name="bookmark15">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Format of the Installation Code File</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">To program the installation code, create a simple text file with the value of the installation code (without the CRC). In these instructions the file is named install-code-file.txt. This file is subsequently passed to em3xx_load or Simplicity Commander.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The format of the file is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> Install Code: &lt;ascii-hex&gt;                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Here is a sample installation code file. The CRC for that code is 0xB5C3 and is not included in the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;"><span class="s8" style=" background-color: #D8D8D8;"> Install Code: 83FED3407A939723A5C639B26916D505                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">Checking the Installation Code on an EFR32 Device</a><a name="bookmark16">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To get started, it is best to verify there is connectivity with the device to be programmed, and what information is currently stored on the node. To do this, execute the following command to print all manufacturing token data from an EFR32-based device. The <span class="s9">tokendump </span>command prints manufacturing token data as key-value pairs. Simplicity Commander supports more than one group of tokens. In this example, the token group named &quot;znet&quot; is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup znet                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">You should see the following output, where the code in <b>bold </b>below reflects the significant fields related to the installation code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># The token data can be in one of three main forms: byte-array, integer, or string. # Byte-arrays are a series of hexadecimal numbers of the required length.</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;"># Integers are BIG endian hexadecimal numbers.</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># String data is a quoted set of ASCII characters. #</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># MFG_EMBER_EUI_64 : A8D417FEFF570B00 MFG_CUSTOM_VERSION : 0xFFFF MFG_CUSTOM_EUI_64 : FFFFFFFFFFFFFFFF MFG_STRING : &quot;&quot;</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">MFG_BOARD_NAME : &quot;&quot;</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">MFG_MANUF_ID : 0xFFFF</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">MFG_PHY_CONFIG : 0xFFFF MFG_SYNTH_FREQ_OFFSET: 0xFFFF MFG_CCA_THRESHOLD : 0xFFFF MFG_EZSP_STORAGE : FFFFFFFFFFFFFFFF MFG_CTUNE : 0xFFFF</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">MFG_XO_TUNE : 0xFFFF</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">MFG_LOCKBITS_PLW : 0x000000000000000000000000FFFFFFFF MFG_LOCKBITS_CLW0 : 0xFFFFFFFF</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">MFG_LOCKBITS_MLW : 0xFFFFFFFF MFG_LOCKBITS_ULW : 0xFFFFFFFF MFG_LOCKBITS_DLW : 0xFFFFFFFF</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">MFG_BOOTLOAD_AES_KEY : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MFG_SECURITY_CONFIG : 0xFFFF</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="734" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_009.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: justify;">MFG_ASH_CONFIG[0] : 0xFFFF MFG_ASH_CONFIG[1] : 0xFFFF MFG_ASH_CONFIG[2] : 0xFFFF MFG_ASH_CONFIG[3] : 0xFFFF MFG_ASH_CONFIG[4] : 0xFFFF MFG_ASH_CONFIG[5] : 0xFFFF MFG_ASH_CONFIG[6] : 0xFFFF MFG_ASH_CONFIG[7] : 0xFFFF MFG_ASH_CONFIG[8] : 0xFFFF MFG_ASH_CONFIG[9] : 0xFFFF MFG_ASH_CONFIG[10] : 0xFFFF MFG_ASH_CONFIG[11] : 0xFFFF MFG_ASH_CONFIG[12] : 0xFFFF MFG_ASH_CONFIG[13] : 0xFFFF MFG_ASH_CONFIG[14] : 0xFFFF MFG_ASH_CONFIG[15] : 0xFFFF MFG_ASH_CONFIG[16] : 0xFFFF MFG_ASH_CONFIG[17] : 0xFFFF MFG_ASH_CONFIG[18] : 0xFFFF MFG_ASH_CONFIG[19] : 0xFFFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_CBKE_DATA (Smart Energy CBKE)&#39; token group Device Implicit Cert :</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF CA Public Key : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Device Private Key : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"># CBKE Flags : 0xFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_INSTALLATION_CODE (Smart Energy Install Code)&#39; token group # Install Code Flags : 0xFFFF</p><p class="s10" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">Install Code : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF # CRC : 0xFFFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_SECURE_BOOTLOADER_KEY (Manufacture token space for storing secure bootloader key.)&#39; token group MFG_SECURE_BOOTLOADER_KEY : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_CBKE_283K1_DATA (Smart Energy 1.2 CBKE)&#39; token group Device Implicit Cert (283k1) :</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFpFFFFFFFFF</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">CA Public Key (283k1) : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">Device Private Key (283k1) : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF # CBKE FLAGS (283k1) : 0xFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_SIGNED_BOOTLOADER_KEY_X (Manufacture token space for storing ECDSA signed bootloader key (X-point).)&#39; token group</p><p class="s9" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">MFG_SIGNED_BOOTLOADER_KEY_X : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">#&#39;MFG_SIGNED_BOOTLOADER_KEY_Y (Manufacture token space for storing ECDSA signed bootloader key (Y-point).)&#39; token group</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 215%;text-align: left;">MFG_SIGNED_BOOTLOADER_KEY_Y : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DONE</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The pre-programmed EUI64 is read out by executing the following command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">commander tokendump --tokengroup znet --token MFG_EMBER_EUI_64 #</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># The token data can be in one of three main forms: byte-array, integer, or string. # Byte-arrays are a series of hexadecimal numbers of the required length.</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;"># Integers are BIG endian hexadecimal numbers.</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># String data is a quoted set of ASCII characters. #</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;"># MFG_EMBER_EUI_64: A8D417FEFF570B00</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Writing the Installation Code into the Manufacturing Area on an EFR32 Device</a><a name="bookmark17">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To write the installation code into the manufacturing area, execute the following command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup znet --tokenfile install-code-file.txt                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">You should see output similar to the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing 2048 bytes starting at address 0x0fe04000 Comparing range 0x0FE04000 - 0x0FE047FF (2 KB) Programming range 0x0FE04270 - 0x0FE04283 (20 Bytes) Verifying range 0x0FE04000 - 0x0FE047FF (2 KB)</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 4pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Verifying the Stored Installation Code on an EFR32 Device</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">After writing the installation code, it is best to verify the information by executing the following command again:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup znet                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark16" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Output of this command should be similar to that shown in section </a>5.2 Checking the Installation Code on an EFR32 Device<span style=" color: #000;">, but with the</span></p><p class="s9" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">MFG_INSTALLATION_CODE <span class="p">data now representing your chosen code and little endian CRC.</span></p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Erasing the Installation Code</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_010.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark18">Erasing the Installation Code</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark17" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">If you want to remove the install code from the device, simply create an installation code file with the contents as &quot;!ERASE!&quot; such as the example below, and then program this file into the target per the instructions in section </a><a href="#bookmark17" class="a">5.3 Writing the Installation Code into the Manu- </a>facturing Area on an EFR32 Device<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> Install Code: !ERASE!                                                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Confirm the install code content using the procedure explained in section </a><span style=" color: #049;">5. Programming the Installation Code on a Zigbee Device</span>. Now your <span class="s9">MFG_INSTALLATION_CODE </span>token data should reflect all 0xFF bytes.</p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark19">Example: Joining a Z3 Light to a Z3 Gateway Using an Installation Code-Derived Link Key</a><a name="bookmark21">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This example uses command line options to join a Z3 Light to a Z3 Gateway using an installation code-derived link key. The exercise uses Z3 Light and Z3 Gateway sample applications included with the EmberZNet SDK version 6.3.1 or higher.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This exercise assumes you have already built an SoC-based Z3 Light application with default configurations and a Z3 Gateway applica- tion using an NCP+Host setup. For GSDK 2.6 or earlier, make sure the Link Key Table size is at least one entry because the following commands populate the Link Key Table. The key table size can be configured under the NCP Configuration plugin on the host side. For GSDK 2.7 or higher, the following commands populate the Transient Key Table which is already sized appropriately. If you are not fa- miliar with building sample applications see <i>QSG106: Zigbee EmberZNet PRO Quick Start Guide </i>for instructions.</p><ol id="l6"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Make sure the Z3 Light is not on any network. If it is issue <span class="s9">network leave</span>.</p></li><li><p class="s7" style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Follow the instructions in section </a><a href="#bookmark15" class="a">5. Programming the Installation Code on a Zigbee Device</a> <span style=" color: #000;">to create an installation code text file, and program the installation code onto the Z3 Light device.</span></p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">On the Z3 Gateway, form a centralized network with Zigbee 3.0 security using this command in the Network Creator plugin&#39;s CLI:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> plugin network-creator start 1                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 42pt;text-indent: -8pt;text-align: left;">To derive a link key from the installation code and store that into the key table on the Z3 Gateway, which acts as the Trust Center for the centralized network, enter:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> option install-code &lt;link key table index&gt; {&lt;Joining Node’s EUI64&gt;} {&lt;installation code + 2-byte CRC&gt;}      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s8" style=" background-color: #D8D8D8;"> option install-code 0 {00 0B 57 FF FE 07 A9 E3} {88 77 66 55 44 33 22 11 11 22 33 44 55 66 77 88 D4 90}     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l7"><li><p style="padding-left: 54pt;text-indent: -9pt;text-align: justify;">Starting with GSDK 2.7, this command adds the key entry into the Transient Key Table which is necessary for Z3 joining. For GSDK 2.6 or earlier, this command populates the Link Key Table. Step 7 shows how to move the key entry from the Link Key Table to the Transient Key Table.</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: justify;">For GSDK 2.7 or higher, this command populates the Link Key Table if the gateway is a Smart Energy device and the Transient Key Table if the gateway is a Z3 device.</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: justify;">The first argument is the Link Key Table index. This argument matters only when populating the Link Key Table, as is the case with GSDK 2.6 or earlier. For GSDK 2.7 or higher, the argument has no effect.</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: justify;">The next argument is the EUI64 of the joining node (in this example, Z3 Light).</p><p style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><b>Tip: </b>You can find this information by running the CLI <span class="s9">info </span>command on the joining node. Look for a string similar to <span class="s9">node [&gt;)000B57FFFE07A9E3]</span>.</p><p style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">You can also find the EUI64 from the output of the tokendump command, but note that it is printed in little endian format. You will need to reverse the bytes to get the proper output.</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: justify;">The last argument is the installation code with the 2-byte CRC appended at the end.</p><p style="padding-top: 8pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">Tip: You can calculate the CRC yourself, or you can simply find out from running the Simplicity Commander <span class="s9">tokendump </span>com- mand:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;"><span class="s8" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup znet                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: justify;">The CRC is displayed just below the install code and is printed in little endian format. Reverse the bytes to big endian before using as an argument with the <span class="s9">option install-code </span>CLI. Because the white spaces inside the curly brackets are not manda- tory, you can do a straight copy/paste without the spaces. The spaces are included to help better view the data.</p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">To see if the link key is added successfully, enter the <span class="s9">keys print </span>CLI on the Z3 Gateway to see it in the Link Key Table or Transi- ent Key Table. This shows both the link key derived from the installation code, and the network key. <b>Note: </b>In GSDK 2.6 or earlier, the fact that the <span class="s9">option install-code </span>CLI copies the link key to the Link Key Table may not be desirable in practice. To avoid populating the permanent Link Key Table completely, instead of using the <span class="s9">option install-code </span>CLI call the API <span class="s9">emAfInstallCodeToKey() </span>to calculate the joining link key from the install code and keep this link key value ready for steps 6 and 7 below. Alternatively, leave the entry in the Link Key Table and reuse it later in step 7, where the entry is moved to the Transient Key Table.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">(Optional but highly recommended, so that you see the joining device join the network as described in step 8.) At this point, you have all the information the Network Analyzer needs to decrypt future transactions between the Z3 Gateway and Z3 Light. In <b>File &gt; Preferences &gt; Network Analyzer &gt; Decoding &gt; Security Keys</b>, add both the network key and the link key to the list of security key. See <i>QSG106: Zigbee EmberZNet PRO Quick Start Guide </i>for more information. Start a new network capture from the Z3 Light and/or Z3 Gateway. <b>Tip: </b>If you are in a &quot;noisy&quot; environment, you may choose to only capture on the specific PAN.</p></li><li><p class="s4" style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Complete this step only for GSDK 2.6 or earlier<span class="p">: Set the transient link key (the same link key that you derived from the install code) on the Trust Center and open the network for joining with the joining device’s EUI64:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">plugin network-creator-security open-with-key {eui64} {linkkey}</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">plugin network-creator-security open-with-key {00 0B 57 FF FE 07 A9 E3} {FA 80 81 CA AA 41 D5 AD E9 B5 65</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">87 99 26 8B 88}</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Once a transient link key exists for the device about to join, remove the unnecessary Link Key Table entry by issuing this com- mand:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">keys delete {index}</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">where <span class="s9">{index} </span>refers to the Link Key Table index as shown in the output to keys print.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Finally, on the joining device enter this CLI to use the Network Steering plugin to join the network:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">plugin network-steering start 0</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: justify;">The joining device should join the network with the transient link key. If you have started a network capture in step 6, you should see the full transactions live. The Z3 Light is initially allowed on the network using the transient link key. The trust center transports the network key encrypted with the transient link key in a &quot;Transport Key (NWK)&quot; frame. Subsequently, the Z3 Light requests a new link key, and the trust center transports that link key in a &quot;Transport Key (Link)&quot; frame.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Transferring Installation Codes to the Trust Center</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In this example, the installation codes were entered manually, but in practice it may not be practical to connect to the Trust Center in this way. Customers are responsible for implementing installation codes, and should consider a number of details:</p><ul id="l9"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Will the commissioning be done all at the same time (perhaps for a large industrial lighting application), or piece-by-piece in a home automation setting?</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Will there be an Internet-connected gateway?</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Can the installation codes be written during manufacturing for a pre-commissioned bundle?</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Will initial commissioning differ from later commissioning for added devices or in the case of leaving the network and then re-joining?</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">How the network might accommodate a commissioner that would leave and return to a network in a switched multiprotocol scenar- io?</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Here are some methods we envision being used:</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Bluetooth commissioning using our Dynamic Multiprotocol (DMP) feature and a Bluetooth phone app for commissioning. See</p><p class="s4" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">UG305: Dynamic Multiprotocol User’s Guide <span class="p">for more information.</span></p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Pre-commissioning at the factory: install codes entered at manufacturing time for trust center and joining devices.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Bluetooth-based commissioning with Switched Multiprotocol (SMP) on the trust center and a Bluetooth phone app for entering install codes. See <i>UG267: Switched Multiprotocol User&#39;s Guide </i>for more information.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Using QR codes on joining devices, and using an app to send the install code via WiFi to an internet-enabled NCP gateway.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Barcode/QR code scanning capability on the trust center.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s12">www.silabs.com/products</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s12">www.silabs.com/quality</a></p><p class="s11" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s13" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_011.png"/></span></p><p class="s14" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1089-using-installation-codes-with-zigbee-devices/Image_012.png"/></span></p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s14" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
