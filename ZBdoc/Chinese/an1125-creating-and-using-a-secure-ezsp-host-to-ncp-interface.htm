<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1125: Creating and Using a Secure EZSP Host-to-NCP Interface</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: 4pt; }
 .s5 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; vertical-align: 3pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s9 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s12 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s13 { color: #D81E2A; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s15 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s16 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s17 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s18 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s19 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s20 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s21 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt;counter-reset: h1 1; }
 #l9> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11 {padding-left: 0pt;counter-reset: d2 1; }
 #l11> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l12 {padding-left: 0pt;counter-reset: d3 1; }
 #l12> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l13 {padding-left: 0pt;counter-reset: d4 1; }
 #l13> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l14 {padding-left: 0pt;counter-reset: d4 1; }
 #l14> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l15 {padding-left: 0pt;counter-reset: d4 1; }
 #l15> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l16 {padding-left: 0pt;counter-reset: d4 1; }
 #l16> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l17 {padding-left: 0pt;counter-reset: d3 1; }
 #l17> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l18 {padding-left: 0pt;counter-reset: d2 1; }
 #l18> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l19 {padding-left: 0pt;counter-reset: i1 6; }
 #l19> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l19> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l20 {padding-left: 0pt;counter-reset: i2 1; }
 #l20> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l20> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l21 {padding-left: 0pt;counter-reset: i3 1; }
 #l21> li>*:first-child:before {counter-increment: i3; content: counter(i1, decimal)"."counter(i2, decimal)"."counter(i3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: i3 0;  }
 #l22 {padding-left: 0pt;counter-reset: j1 6; }
 #l22> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l22> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l23 {padding-left: 0pt;counter-reset: j2 2; }
 #l23> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l23> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l24 {padding-left: 0pt;counter-reset: j3 1; }
 #l24> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l25 {padding-left: 0pt;counter-reset: j4 1; }
 #l25> li>*:first-child:before {counter-increment: j4; content: counter(j4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: j4 0;  }
 #l26 {padding-left: 0pt;counter-reset: k1 6; }
 #l26> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l26> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l27 {padding-left: 0pt;counter-reset: k2 3; }
 #l27> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l27> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l28 {padding-left: 0pt;counter-reset: k3 1; }
 #l28> li>*:first-child:before {counter-increment: k3; content: counter(k1, decimal)"."counter(k2, decimal)"."counter(k3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: k3 0;  }
 li {display: block; }
 #l29 {padding-left: 0pt;counter-reset: l1 6; }
 #l29> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l29> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l30 {padding-left: 0pt;counter-reset: l2 5; }
 #l30> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l30> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l31 {padding-left: 0pt;counter-reset: l3 1; }
 #l31> li>*:first-child:before {counter-increment: l3; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: l3 0;  }
 #l32 {padding-left: 0pt;counter-reset: l4 1; }
 #l32> li>*:first-child:before {counter-increment: l4; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)"."counter(l4, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: l4 0;  }
 #l33 {padding-left: 0pt;counter-reset: l5 1; }
 #l33> li>*:first-child:before {counter-increment: l5; content: counter(l5, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: l5 0;  }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35 {padding-left: 0pt;counter-reset: l5 1; }
 #l35> li>*:first-child:before {counter-increment: l5; content: counter(l5, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: l5 0;  }
 #l36 {padding-left: 0pt; }
 #l36> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l37 {padding-left: 0pt; }
 #l37> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1125: Creating and Using a Secure EZSP Host-to-NCP Interface</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="202" height="1" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="203" height="1" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Introduces the Secure EZSP protocol.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Describes the host configuration and software contents required for using Secure EZSP.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Provides detailed instructions for configuring the hardware and using Secure EZSP.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Includes technical details on the Secure EZSP packet format, cryptographic algorithms, attacks, API commands, and data.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document describes the Secure EmberZNet PRO<span class="s4">® </span>Serial Protocol (Secure EZSP) and how to configure the hardware and required software to construct a secure EZSP Host-to-NCP inter- face.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The EmberZNet PRO<span class="s6">® </span>Serial Protocol (EZSP) is the protocol used by a Host processor to interact with the EmberZNet stack running on a network coprocessor (NCP). The Secure EZSP Protocol (Secure EZSP) is an optional protocol that encrypts communications be- tween the Host and NCP.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">EZSP messages are sent between the Host and the NCP using Universal Asynchronous Receiver/Transmitter (UART). For more infor- mation, refer to:</p><ul id="l3"><li><p class="s7" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">UG100: EZSP Reference Guide <span class="p">(explains the Host-to-NCP communications and provides details on the EZSP frames)</span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">AN706: EZSP-UART Host Interfacing Guide <span class="p">(describes the EZSP-to-UART communications and the EZSP-UART Protocol)</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s8" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">ASH and EZSP</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The underlying transport for UART is a protocol known as Asynchronous Serial Host (ASH). Silicon Labs developed this protocol to provide transport reliability for the serial connection. ASH handles retries and ensures non-cryptographic packet integrity.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">EZSP is the command protocol that runs on top of ASH. EZSP can query the EmberZNet stack for information, send it commands, and pass over-the-air (OTA) Zigbee messages to and from the Host. Secure EZSP is EZSP that has been modified to include authentication and encryption.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Secure EZSP Protocol Key Generation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Each Host device generates a cryptographically random 128-bit key that both the Host and NCP share for encryption of their UART communications. All identically manufactured devices use a different key. The transport of this key is initially done in-the-clear. This application note assumes that the first-time pairing of the Host and NCP is done in a safe environment (such as in a manufacturing facility) that is protected from eavesdropping. The owner of the Host and NCP can perform subsequent re-pairings as needed. Eaves- dropping of these re-pairings would require physical tampering of the UART connection or compromise of one of the devices in the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Secure EZSP Protocol Security Key Storage on the NCP</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Secure EZSP protocol security key is stored in non-volatile memory (NVM) tokens that are read/write. The non-volatile memory model used depends on your part, stack version and, in the case of EFR32 Series 1 parts, preference. See <i>AN1154: Using Tokens for Non-Volatile Data Storage </i>for more information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 193pt;text-indent: 0pt;text-align: center;">Table 1.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM Model</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Part Family</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EmberZNet Version</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SimEEv1/v2</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 1</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Current</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 1</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">6.4.0 - Current</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 2</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">6.5.2 - Current</p></td></tr></table><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Tokens are defined in every application to support stack behavior. Tokens are also protected by read protection. If Read Protection is enabled, it is impossible to read token contents using a debugger.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Secure EZSP Protocol Security Key Storage on the Host</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The Host reference platform documented in this application note uses a Host token file (.nvm) to store the Secure EZSP protocol secur- ity key locally.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">System Requirements</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_006.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">System Requirements</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Random Number Generator</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note assumes that both the host and the NCP have access to a cryptographic random number generator. For the NCP, Silicon Labs EmberZNet PRO has access to the radio and can use it to sample noise to generate a random number. The host must have access to its own random number generator and cannot rely on the NCP for this purpose. The Security Support plugin provides sample usage of random number generation for Unix-based host systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Encrypted Bootloader</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Secure EZSP assumes that the NCP makes use of an encrypted bootloader to restrict what firmware images can be loaded onto the device. Only firmware images encrypted with a symmetric key are allowed to be flashed onto the device. The symmetric key is normally installed at the time of manufacturing. All images generated by the manufacturer are then encrypted with that key before being distrib- uted to the field.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If an encrypted bootloader is not used, it is possible for a malicious attacker to craft a firmware image that can read any internal address in flash and exfiltrate the contents. This could be used to extract Zigbee security keys or the security key of the Secure EZSP protocol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Read Protection of the NCP</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note assumes that the manufacturer will enable read/write protection of the microcontroller to prevent unauthorized ac- cess via the JTAG debug pins.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">Host Security</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note assumes that the Host will enable the necessary security protections to prevent unauthorized access of the Se- cure EZSP protocol key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Software Requirements</a></p><ul id="l6"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EmberZNet PRO Release 5.9.1 and above</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Simplicity Studio (version compatible with your EmberZNet SDK)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Linux or Windows</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Reference Platform</a></p><ul id="l7"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Linux on an x86 system</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EFR32 NCP</p><p class="s8" style="padding-top: 6pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">Note: <span class="p">This application note used the following Host systems for testing purposes: Raspberry Pi and Macintosh.</span></p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Host Configuration</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_007.png"/></span></p></li></ul></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark12">Host Configuration</a><a name="bookmark13">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">Customers using host platforms with an NCP must provide their own implementation of Advanced Encryption Standard (AES). Silicon Labs cannot provide a full software implementation of AES for these platforms due to export restrictions. Instead, the EmberZNet PRO software includes a plugin that serves as a wrapper for AES.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Customers are only required to provide the lower-level Application Programming Interfaces (APIs) to perform AES. To minimize the integration burden for customers on Host platforms, the wrapper is written to use the Rijndael cipher upon which AES is based. An implementation of Rijndael is in the public domain and is widely available from third parties on the Internet.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To configure enhanced security on a Host platform, customers must acquire the Rijndael source and save it in a location on the same drive as the EmberZNet PRO software installation. Implementations of Rijndael generally consist of the following files:</p><ul id="l8"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">rijndael-alg-fst.c</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">rijndael-alg-fst.h</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">rijndael-api-fst.c</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">rijndael-api-fst.h</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The header files rijndael-alg-fst.h and rijndael-api-fst.h are included in the EmberZNet PRO installer to assist customers in locating the corresponding source files. The following file provides implementations of Rijndael that are known to be compatible with EmberZNet PRO as of this writing (click to download):</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="http://www.efgh.com/software/rijndael.zip">http://www.efgh.com/software/rijndael.zip</a></p><p class="s8" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">This file source is not affiliated or controlled by Silicon Labs. Silicon Labs makes no guarantee about the availability of the file or the quality or correctness of the implementation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Once you have acquired Rijndael, perform the following steps to complete the configuration:</p><ol id="l9"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Set the path for the Rijndael algorithm source in the AES (Software) plugin to the location of rijndael-alg-fst.c.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Set the path for the Rijndael API source in the AES (Software) plugin to the location of rijndael-api-fst.c.</p></li></ol><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Software Contents</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_008.png"/></span></p></li></ul></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark14">Software Contents</a><a name="bookmark15">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">In addition to EmberZNet PRO Release 5.9.1 or later, Secure EZSP requires the following host plugins, NCP plugins, and sample appli- cations.</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Host Plugins</p><ul id="l10"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EZSP Secure Protocol</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;"><a href="#bookmark13" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">AES software plugin (with rijndael source file locations set according to section </a><a href="#bookmark13" class="a">3. Host </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Configuration</span>)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Security support plugin</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">CM* encryption plugin</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">If using a Unix library for Unix-based hosts, enable the Token support option in the Unix library plugin.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EZSP Secure Protocol stub (included to make sure that the EZSP project compiles without errors if the Secure EZSP plugin is not selected in Simplicity Studio)</p><p class="s8" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">NCP Plugins</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure EZSP</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Secure EZSP stub (included to make sure that the EZSP project compiles without errors if the Secure EZSP plugin is not selected in Simplicity Studio)</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Sample Applications <span class="p">(with Secure EZSP plugin enabled)</span></p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">XncpLedHost</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">xncp-led</p></li></ul></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark16">Getting Started with Secure EZSP</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark17">Configuring the Hardware</a></p><ol id="l12"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Set up the hardware as described in <i>AN706: EZSP-UART Host Interfacing Guide.</i></p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Start Simplicity Studio, create the XncpLedHost sample application, and compile it for your Host:</p><ol id="l13"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Create a project based on the XncpLedHost application.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;"><a href="#bookmark13" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Configure AES on Host platform as described in section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">3. Host Configuration</span>. Otherwise, the application will not compile.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Generate the application.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;"><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Add the necessary plugins listed in Section </a><a href="#bookmark15" class="a">4. Software </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Contents</span>.</p><p class="s8" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Adding SECURE_EZSP_SERIAL_PRINTF_DEBUG macro to the application, using the Additional Macros section on the Includes tab, will enable helpful printing.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 59pt;text-indent: -8pt;text-align: left;">Compile for the respective system (for example, if a Macintosh is the Host, compile the sample application for the Macintosh; if Raspberry Pi is the Host, compile the sample application for the Raspberry Pi).</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">For example, go to the generated folder in terminal: &lt;user&gt;:~/Downloads/zigbee_5.9_release/app/builder/XncpLedHost_2 $ make</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -6pt;text-align: left;">Once compile is complete, “build success” indicates that the application compiled successfully.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Create the NCP sample application and compile it in Simplicity Studio:</p><ol id="l14"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Create a project based on the xncp-led sample application.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Configure whether the NCP-UART plugin will use hardware or software flow control.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Be sure to enable the Secure EZSP plugin and disable the Secure EZSP stub plugin.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Generate and compile the application.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Upon successful compile, the screen displays Errors: none. In addition, the binaries are generated and located in the compiler directory in the project (for example, IAR ARM – Default or GNU ARM - Default).</p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Flash the bootloader and then application image onto the NCP.</p><ol id="l15"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Right-click on the node, select <b>Upload application </b>and browse to the file (for example, XncpLedHost.s37).</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Select the <b>Bootloader image </b>checkbox and browse to the Bootloader file.</p><p class="s8" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Silicon Labs provides precompiled standalone Bootloader images in protocol/zigbee_&lt;release version&gt;/tool/bootloader-</span></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">&lt;architecture&gt;/serial-uart-bootloader/serial-uart-bootloader.s37.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 60pt;text-indent: -8pt;text-align: left;">Select the <b>erase chip before uploading image </b>checkbox.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click [<b>OK</b>] to flash.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Connect the Host with the NCP using UART.</p></li><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Execute the command <span class="s11">./&lt;executable&gt; -p &lt;usb&gt; </span>on the Host:</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">For example: <span class="s11">./build/exe/XncpLedHost -p /dev/tty.usbserial-A5003vbJ</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">where:</p><p class="s11" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">-p <span class="p">means the port</span></p><p class="s11" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">/dev/tty.usbserial-A5003vbJ <span class="p">is the path to the connected device</span></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><b>Note: </b>This command line assumes that the NCP was configured for hardware flow control. Refer to <i>AN706: EZSP-UART Host In- terfacing Guide </i>for details on executing with other options.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l16"><li><p style="padding-left: 60pt;text-indent: -9pt;text-align: left;">If the connection is successful, you should see initialization printing and a Command Line Interface (CLI) prompt:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">&lt;user&gt;:~/Downloads/zigbee_5.9_release/app/builder/XncpLedHost_2 $ ./build/exe/XncpLedHost_2 -p /dev/ tty.usbmodem1411</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Reset info: 11 (SOFTWARE)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">ezsp ver 0x05 stack type 0x02 stack ver. [5.9.0 GA build 103] Ezsp Config: set source route table size to 0x0007:Success: set</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">…</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Ezsp Policy: set Trust Center Policy to &quot;Allow Joins, ignore preconfigured key rejoins&quot;:Success: set XncpLedHost_2&gt;</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"/></li><li><p style="padding-left: 59pt;text-indent: -8pt;text-align: left;">If the connection is not successful, the terminal screen will display a message similar to this (error appears in <span class="s12">red bold</span>):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">&lt;user&gt;:~/Downloads/zigbee_5.9_release/app/builder/XncpLedHost_2 $ ./build/exe/XncpLedHost_2 -p /dev/ tty.usbmodem1411</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Reset info: 11 (SOFTWARE)</p><p class="s13" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">ERROR: ezspForceReset 0x21</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Assertion failed: (false), function emAfResetAndInitNCP, file ../../../protocol/zigbee_5.9/app/ framework/util/af-main-host.c, line 341.</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">XncpLedHost_2&gt;Child process for serial input got EOF. Exiting Abort trap: 6</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Refer to <i>UG100: EZSP Reference </i>and search for the <span class="s11">EzspConfigId </span>value to learn what the error means and how to address it.</p></li></ol></li></ol></li><li><p class="s8" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Using Secure EZSP</a></p><ol id="l17"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">At the CLI prompt, execute the <span class="s11">info </span>command to verify that standard, unsecured EZSP Host-to-NCP communications are working correctly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">XncpLedHost_2&gt;<b>info </b>MFG String:</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">AppBuilder MFG Code: 0x1002</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">node [(&gt;)000B57FFFE1939B4] chan [0] pwr [-1]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">panID [0xFFFF] nodeID [0xFFFE] xpan [0x(&gt;)0000000000000000]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">ezsp ver 0x05 stack type 0x02 stack ver. [5.9.0 GA build 103] nodeType [0x05]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Security level [05]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">network state [00] Buffs: 244 / 255</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Ep cnt: 1</p><p class="s11" style="padding-left: 22pt;text-indent: -19pt;line-height: 107%;text-align: left;">ep 1 [endpoint enabled, device enabled] nwk [0] profile [0x0104] devId [0x0000] ver [0x00] in (server) cluster: 0x0000 (Basic)</p><p class="s11" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">out(client) cluster: 0x0003 (Identify) in (server) cluster: 0x0003 (Identify) out(client) cluster: 0x0006 (On/off)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Nwk cnt: 1</p><p class="s11" style="padding-left: 12pt;text-indent: -9pt;line-height: 107%;text-align: left;">nwk 0 [Primary (pro)] nodeType [0x01] securityProfile [0x01]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">XncpLedHost_2&gt;</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/></li><li><p style="padding-top: 1pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">To use Secure EZSP, generate a random security key by executing this command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">XncpLedHost_2&gt;<b>plugin secure-ezsp set_security_key 0</b></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Using /dev/random for random number generation</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Gathering sufficient entropy... (may take up to a minute)... Security Key set { AA D1 67 7A B1 4D 7A EA DE C4 E9 C4 D8 DA B7 49 }</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s8" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Note: <span class="s11">0 </span><span class="p">means temporary security key (that is, the security key can be changed). Only temporary keys are currently supported.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">To use Secure EZSP, generate a random Session ID on both the Host and NCP by executing this command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">XncpLedHost_2&gt;<b>plugin secure-ezsp set_security_parameters 5</b></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Using /dev/random for random number generation</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Gathering sufficient entropy... (may take up to a minute)...</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Security Parameters set { B4 4B 8C DD 8C 19 E2 D5 AB 6D 98 46 30 6C 76 87 }</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s8" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Note: <span class="s11">5 </span><span class="p">means encrypted, 32-bit MIC. Only encrypted, 32-bit MIC is currently supported.</span></p></li><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Execute the <span class="s11">info </span>command to verify that Secure EZSP Host-to-NCP encrypted communications are working correctly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">XncpLedHost_2&gt;<b>info </b>MFG String:</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">AppBuilder MFG Code: 0x1002</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">node [(&gt;)000B57FFFE1939B4] chan [0] pwr [-1]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">panID [0xFFFF] nodeID [0xFFFE] xpan [0x(&gt;)0000000000000000]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">ezsp ver 0x05 stack type 0x02 stack ver. [5.9.0 GA build 103] nodeType [0xE8]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Security level [05]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">network state [00] Buffs: 244 / 255</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Ep cnt: 1</p><p class="s11" style="padding-left: 22pt;text-indent: -19pt;line-height: 107%;text-align: left;">ep 1 [endpoint enabled, device enabled] nwk [0] profile [0x0104] devId [0x0000] ver [0x00] in (server) cluster: 0x0000 (Basic)</p><p class="s11" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: justify;">out(client) cluster: 0x0003 (Identify) in (server) cluster: 0x0003 (Identify) out(client) cluster: 0x0006 (On/off)</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Nwk cnt: 1</p><p class="s11" style="padding-left: 12pt;text-indent: -9pt;line-height: 107%;text-align: left;">nwk 0 [Primary (pro)] nodeType [0x01] securityProfile [0x01]</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">When the Host is compiled with the debug macro, SECURE_EZSP_SERIAL_PRINTF_DEBUG, each Secure EZSP transaction is printed to the terminal such as:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="704" height="111" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_009.png"/></span></p><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-------- HOST ENCODE</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">EZSP Frame [ 3A 00 81 52 00 01 ]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure EZSP Frame [ 3A 00 81 00 E0 BC AB CC C6 A4 8D D4 05 00 00 00 05 1C DD D7 04 8D C4 79 ]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">-------- HOST DECODE</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure EZSP Frame [ 3A 80 81 00 70 A7 FC 24 2D 3C 62 6E 05 00 00 00 05 DB DC 87 C7 C9 65 30 88 8F ]</p><p class="s11" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">EZSP Frame [ 3A 80 81 52 00 00 FF 00 ]</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><a href="#bookmark43" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Refer to section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">6.1 Packet Format </span>to understand how the bytes in the EZSP Frame are encoded in the Secure EZSP Frame and vice versa.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">To reset ESZP security and start over, execute the <span class="s11">plugin secure-ezsp reset_to_factory_defaults </span>command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s15" style=" background-color: #D8D8D8;"> XncpLedHost_2&gt;</span><span class="s16" style=" background-color: #D8D8D8;">plugin secure-ezsp reset_to_factory_defaults                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark19">Host and NCP Initialization States</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The following table summarizes what happens when the Host and NCP are initialized. The result depends on how security is set on the Host and the NCP. A key set in a previous initialization is treated as though the key is unset.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 197pt;text-indent: 0pt;text-align: center;">Table 5.1.  Host and NCP Initialization States</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:153pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Host Security</p></td><td style="width:166pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NCP Security</p></td><td style="width:221pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Result</p></td></tr><tr style="height:19pt"><td style="width:153pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Set</p></td><td style="width:166pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Set</p></td><td style="width:221pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Encrypted communication</p></td></tr><tr style="height:19pt"><td style="width:153pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Set</p></td><td style="width:166pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unset</p></td><td style="width:221pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unencrypted communication</p></td></tr><tr style="height:19pt"><td style="width:153pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unset</p></td><td style="width:166pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Set</p></td><td style="width:221pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Fatal error (assert)</p></td></tr><tr style="height:19pt"><td style="width:153pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unset</p></td><td style="width:166pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unset</p></td><td style="width:221pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unencrypted communication (standard EZSP)</p></td></tr></table><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><b>Note: </b>You can change this behavior with <span class="s11">emberSecureEzspInitCallback</span>. It is currently defined in secure-ezsp-cli.c.</p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark20">Technical Details</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l18"><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Packet Format</a><a name="bookmark43">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Packet format and the contents of the Authentication Header (AH or Aux Header), Encrypted Payload, and MIC (Message Integrity Code) are illustrated in the following figures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 103pt;text-indent: 0pt;text-align: left;"><span><img width="503" height="30" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_010.jpg"/></span></p><p class="s8" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;text-align: center;">Figure 6.1.  Color Legend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><span><img width="706" height="106" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_011.jpg"/></span></p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 213pt;line-height: 220%;text-align: left;">Figure 6.2. Packet Format Note: <span class="p">Parentheses contain the number of bytes—for example (1) = 1 byte.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l19"><ol id="l20"><ol id="l21"><li><p class="s8" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark22">Frame Control</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><span><img width="751" height="186" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Starting with EZSP version 8, the Frame Control consists of two bytes. For example, a secure EZSP command would have 0x00 for the Frame Control Low Byte (a command with nosleeping) and 0x81 for the Frame Control High Byte (security enabled and using frame format version 1). The “frameFormatVersion” is included in EZSP Version 8 and its value is set to 1. With earlier versions of EZSP, the two bits of “frameFormatVersion” are set to 0.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Frame Control defines a number of bits and all other bits are reserved. Any reserved bits must be set to <span class="s11">0</span>. If either side of the Secure EZSP protocol sees a reserved bit set to <span class="s11">1</span>, it must reject the entire frame to indicate a new feature that one side does not support.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark23">Security Enabled</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Security Enabled bit in the <b>Frame Control High Byte </b>indicates an Authentication Header, Encrypted Payload, and MIC.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark24">Authenticated Header</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Authentication Header is only present if the <b>Security Enabled </b>field is set to <span class="s11">1</span>. The Authentication Header indicates the parameters of the encrypted payload. It is not encrypted but it is authenticated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark25">Frame ID</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Statring from EZSP version 8, the Frame ID is extended from 1 byte to 2 bytes.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark26">Cryptographic Algorithms</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Secure EZSP leverages IEEE 802.15.4 security as much as possible. This generally means using AES-based algorithms.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><ol id="l23"><ol id="l24"><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark27">Block Cipher</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Secure EZSP uses Advanced Encryption Standard-CBC Counter Mode (AES-CCM) with a 128-bit key because AES-CCM only re- quires AES Encrypt and not AES Decrypt. The AES-CCM cipher creates a block of &quot;noise&quot; and then XORs that with the plaintext or encrypted data to perform the encrypt or decrypt operations. The EM3xx hardware does not expose the AES key schedule necessary to perform the AES Decrypt operation in hardware. IEEE 802.15.4 defines the AES-CCM specifics. Silicon Labs modified it slightly for use in the Secure EZSP protocol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark28">Hashing</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Silicon Labs uses Matyas–Meyer–Oseas (AES-MMO) due to its reliance on AES as the underlying encryption mechanism.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 6pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark29">Nonce</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Because Secure EZSP uses AES-CCM, it is critical that this protocol never uses the same set of security parameters to encrypt two different messages. If that happens, an attacker can XOR those encrypted messages and obtain the XOR of the two unencrypted mes- sage. The nonce is composed of multiple pieces, as described in IEEE 802.15.4-2015, section 9.3.2.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;padding-left: 36pt;padding-right: 35pt;text-indent: 0pt;text-align: center;">Octets: 8</p></td><td style="width:173pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:229pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s9" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td></tr><tr style="height:19pt"><td style="width:138pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 36pt;padding-right: 35pt;text-indent: 0pt;text-align: center;">Source Address</p></td><td style="width:173pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 55pt;padding-right: 54pt;text-indent: 0pt;text-align: center;">Frame Counter</p></td><td style="width:229pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s10" style="padding-top: 3pt;padding-left: 70pt;padding-right: 70pt;text-indent: 0pt;text-align: center;">Nonce Security Level</p></td></tr></table><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Normally the source address is composed of the 64-bit Global Identifier (EUI64) as a means to make it unique, while the frame counter is a monotonically increasing value used to prevent replay attacks. The frame counter starts at 0.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">All frames except for asynchronous callbacks will use the regular frame counters. Asynchronous callbacks are dispatched by the NCP out-of-order. As a result, there will be a separate outgoing frame counter on the NCP and a separate incoming frame counter on the Host for these callbacks.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Rather than use an EUI64, Silicon Labs creates a Session ID. The Session ID is a randomly-generated number contributed to by both the Host and the NCP and it will be generated at each reboot (during the negotiation phase). Having both the Host and the NCP con- tribute to the value prevents one side from choosing a number that might have been previously used (either because of a bug or by malicious intent).</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The Session ID is created with these steps:</p><ol id="l25"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Device A (Host) generates a random 128-bit number (Rand-1) and sends it to Device B (NCP).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Device B (NCP) generates a random 128-bit number (Rand-2) and sends it to Device A (Host).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Both devices construct a string of bits: <i>Rand-1 || Rand-2</i></p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Both devices perform HMAC using the Secure EZSP Protocol Security Key using AES-MMO as the underlying hashing algorithm.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The resulting 16-byte number is split into two 8-byte values as follows: Result = <i>Session-ID-Host || Session-ID-NCP</i></p></li></ol></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark30">Attacks</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l26"><ol id="l27"><ol id="l28"><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark31">Guessing the Key</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">An attacker can try sending frames encrypted with a key known to the attacker in an attempt to determine the correct key.</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Protections</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">A properly, randomly chosen, 128-bit key would require an astronomically long amount of time to guess correctly.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark32">Observing the Key Transport</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">It is possible for an attacker to obtain the key by observing the key transport when it initially occurs.</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Protections</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The key transport can be done in a safe environment, such as in the manufacturing facility. All subsequent communications do not ex- pose the key until the devices are reset to factory defaults. Resetting to factory defaults also wipes out security material associated with the Zigbee network, requiring the user to rejoin the network. Even if the key is obtained, this key is unique to a single set of Host and NCP devices and not global to all devices of that manufacturer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark33">Replaying Frames</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">One of the most basic attacks is to record a legitimate encrypted frame and replay it a second time to have the system accept it.</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Protections</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Each side maintains a RAM copy of the Session ID. Only frames associated with the current Session ID will be accepted. Furthermore, each side of the communication sends a frame with their half of the Session ID and only accepts a received frame with the correspond- ing other half of the Session ID.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Each side maintains a RAM copy of their outgoing frame counter and a copy of the other side&#39;s frame counter as an incoming frame counter. The outgoing frame counter starts from 0 when a session is established. Upon receiving a secured message, the Secure EZSP software running on either the Host or NCP verifies that the message has a frame counter at least 1 higher than the value it currently has for the incoming frame counter. Once a message is received and verified, Secure EZSP records the frame counter of the message as the next minimum incoming frame counter.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Frame counters will not be stored across reboot. Instead, a new Session ID will be established and thus the frame counters can revert to 0 on both sides (incoming and outgoing). Old messages recorded with a different Session ID will not be accepted.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The frame counter cannot wrap from 0xFFFFFFFF to 0. If that ever occurs, a reboot will trigger both sides to establish a new Session ID and reset the frame counters to 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark34">Choosing a Session ID</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">One attack is to get both sides to agree on a Session ID that is chosen by the attacker. Choosing the Session ID allows the attacker to specify the nonce and thus get well-behaving devices to use a previous nonce value.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If one side is replaced with a malicious device, one attack vector is to capture traffic from a session with desirable commands (for ex- ample, <b>Door Unlock</b>), and then try to get the other side to randomly choose the same Session ID as a previously used one. Once a previous Session ID is accepted, the attacker can replay old messages with old frame counter values and they will be accepted.</p><p class="s8" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Protections</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To protect against this potential intrusion Secure EZSP ensures there is enough entropy in the Session ID that is selected and prevents one side from just picking the value (because that could be a malicious device). Using HMAC to generate the Session ID allows both sides to contribute a 128-bit number, while still constraining the size of the Session ID to match the existing nonce format as specified by 802.15.4. The brute force attack of continually rebooting a device to get a desired Session ID is then largely mitigated because the chance of getting the same 64-bit number as a previously recorded session is extremely low.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark35">Guessing a MIC Value</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">First and foremost this attack requires defeating replay protection.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Another brute force attack that is possible is a malicious device that captures a command, modifies it, and then tries to guess valid MIC values. For example, if a Door Lock command was sent from a Host to an NCP, this could be modified to be a Door Unlock command because the location within the frame of the ZCL Command ID would be known. The command ID can be replaced with a value that equals the <b>Door Unlock </b>command ID XOR&#39;ed with the &quot;noise&quot; used to encrypt the <b>Door Lock </b>Command ID.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Modifying that command ID does render the MIC invalid but the attacker can now just guess MIC values. Because there are only four bytes of MIC, this means the attacker has 2<span class="s6">32 </span>guesses and on average will be successful in determining the correct value in half that number of guesses. The mitigation tends to be the rate that guesses can be made, which is limited by the underlying speed of the communication medium. The maximum rate for Zigbee OTA is 250 kb/s. For a point-to-point serial protocol, the rate is 115,280 bytes/ second. Because the rate of guesses is slower in a UART link than OTA, it seems unnecessary to protect against this because it would be easier for an attacker to target Zigbee OTA instead.</p><p class="s8" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Protections</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To protect against this attach, the NCP returns a failed decryption status to the Host, resulting in a reboot. Rebooting is the most effec- tive because it would trigger a new session ID and frame counter, requiring the attacker to start over their attack by obtaining a new copy of an encrypted command, modifying it, and replaying it to guess the 32-bit MIC.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark36">Secure EZSP API</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Refer to secure-eszp-host.h for the Secure EZSP API commands.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s8" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark37">Data Flow</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The following figures illustrate the data flow for the NCP, Host, and security handshake. &#39;NVM&#39; represents the applicable non-volatile memory model.</p><ol id="l29"><ol id="l30"><ol id="l31"><li><p class="s8" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark38">NCP</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;"><span><img width="576" height="473" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_013.jpg"/></span></p><p class="s8" style="padding-top: 6pt;padding-left: 197pt;text-indent: 0pt;text-align: center;">Figure 6.3.  NCP Data Flow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l32"><li><p class="s8" style="padding-left: 56pt;text-indent: -32pt;text-align: left;"><a name="bookmark39">First Time</a></p><ol id="l33"><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The NCP Application boots up and looks at its Secure EZSP Security Key in non-volatile memory. If that location is not written, no rewritable Secure EZSP Protocol Security is yet supported.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Host application initiates the ASH connection to the NCP. It can either start communicating using unencrypted EZSP immedi- ately and forgo any security or set up security.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Host Application sets the encryption key by sending the Secure EZSP Security Key in-the-clear to the NCP Application. The Host Application selects the Security Level to be a rewritable key. A permanent manufacturing key is currently not supported.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The Host Application sets the parameters of the Secure EZSP protocol (frame counters and nonce).</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Once negotiated, the NCP and Host switch their messages into only using encryption and authentication with the following excep- tions:</p><ul id="l34"><li><p class="s11" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">RESET <span class="p">- Allows the Host to trigger a reset of the NCP to re-establish the security parameters.</span></p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">EZSP_RESET_TO_FACTORY_DEFAULTS <span class="p">- Allows the Host to reset the NCP to the factory defaults. This first resets all Zigbee cre- dentials on the NCP and then resets the security key.</span></p></li></ul></li></ol></li><li><p class="s8" style="padding-top: 8pt;padding-left: 56pt;text-indent: -32pt;text-align: left;"><a name="bookmark40">Subsequent Boots</a></p><ol id="l35"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The NCP boots and recognizes that its Secure EZSP Security Key is set, so it only allows the following:</p><ul id="l36"><li><p class="s11" style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">EZSP_SET_SECURITY_PARAMETERS <span class="p">- Allows the Host to negotiate the encryption parameters (frame counters and nonce).</span></p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">EZSP_RESET_TO_FACTORY_DEFAULTS <span class="p">- Allows the Host to reset the NCP to the factory defaults. This resets all Zigbee creden- tials on the NCP first and then resets the security key.</span></p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Once negotiated, the NCP and Host switch their messages into only using encryption and authentication with the following excep- tions:</p><ul id="l37"><li><p class="s11" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">RESET <span class="p">- Allows the Host to trigger a reset of the NCP to re-establish the security parameters.</span></p></li><li><p class="s11" style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">EZSP_RESET_TO_FACTORY_DEFAULTS <span class="p">- Allows the Host to reset the NCP to the factory defaults. This first resets all Zigbee cre- dentials on the NCP and then resets the security key.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li></ol></li></ol></li><li><p class="s8" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark41">HOST</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: left;"><span><img width="498" height="222" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_014.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 212pt;line-height: 220%;text-align: left;"><b>Figure 6.4. Host Data Flow Note: </b>You can change the initial behavior using <span class="s11">emberSecureEzspInitCallback</span>.</p></li><li><p class="s8" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark42">Security Handshake</a></p></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;"><span><img width="568" height="396" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_015.jpg"/></span></p><p class="s8" style="padding-top: 7pt;padding-left: 197pt;text-indent: 0pt;text-align: center;">Figure 6.5.  Security Handshake Data Flow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s18">www.silabs.com/products</a></p><p class="s17" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s18">www.silabs.com/quality</a></p><p class="s17" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s19" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_016.png"/></span></p><p class="s20" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1125-creating-and-using-a-secure-ezsp-host-to-ncp-interface/Image_017.png"/></span></p><p class="s20" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s20" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
