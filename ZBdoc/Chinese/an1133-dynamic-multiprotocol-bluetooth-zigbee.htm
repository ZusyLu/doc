<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1133: Dynamic Multiprotocol Development with Bluetooth and Zigbee</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s6 { color: #D71E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s11 { color: #7E0054; font-family:Consolas, monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:Consolas, monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s14 { color: #005031; font-family:Consolas, monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s16 { color: #0000C0; font-family:Consolas, monospace; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s17 { color: #2A00FF; font-family:Consolas, monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s20 { color: #41719D; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s21 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s22 { color: #5B9BD4; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s23 { color: #5B9BD4; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h4 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s24 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s25 { color: #FFF; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s26 { color: #D91E2A; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 a { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s27 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s28 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s29 { color: #4D4D4F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s30 { color: #D91E2A; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt; }
 #l9> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10 {padding-left: 0pt;counter-reset: f1 1; }
 #l10> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l11 {padding-left: 0pt;counter-reset: g1 2; }
 #l11> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l11> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l12 {padding-left: 0pt;counter-reset: g2 2; }
 #l12> li>*:first-child:before {counter-increment: g2; content: counter(g1, decimal)"."counter(g2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l12> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 #l13 {padding-left: 0pt;counter-reset: g3 1; }
 #l13> li>*:first-child:before {counter-increment: g3; content: counter(g1, decimal)"."counter(g2, decimal)"."counter(g3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: g3 0;  }
 #l14 {padding-left: 0pt;counter-reset: h1 1; }
 #l14> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l15 {padding-left: 0pt;counter-reset: h1 2; }
 #l15> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l16 {padding-left: 0pt;counter-reset: h1 3; }
 #l16> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18 {padding-left: 0pt; }
 #l18> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19 {padding-left: 0pt; }
 #l19> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20 {padding-left: 0pt;counter-reset: h1 4; }
 #l20> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l21 {padding-left: 0pt; }
 #l21> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22 {padding-left: 0pt; }
 #l22> li>*:first-child:before {content: "* "; color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23 {padding-left: 0pt;counter-reset: j1 1; }
 #l23> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l24 {padding-left: 0pt;counter-reset: j2 1; }
 #l24> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l25 {padding-left: 0pt; }
 #l25> li>*:first-child:before {content: " "; color: #5B9BD4; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: " "; color: #5B9BD4; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: " "; color: #5B9BD4; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 #l28 {padding-left: 0pt; }
 #l28> li>*:first-child:before {content: " "; color: #5B9BD4; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 #l29 {padding-left: 0pt;counter-reset: l1 3; }
 #l29> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l29> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l30 {padding-left: 0pt;counter-reset: l2 3; }
 #l30> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l30> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l31 {padding-left: 0pt;counter-reset: l3 1; }
 #l31> li>*:first-child:before {counter-increment: l3; content: counter(l1, decimal)"."counter(l2, decimal)"."counter(l3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: l3 0;  }
 li {display: block; }
 #l32 {padding-left: 0pt; }
 #l32> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="127" height="62" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 11pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN1133: Dynamic Multiprotocol Development with <i>Bluetooth® </i>and Zigbee</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="728" height="1" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="208" height="1" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="209" height="1" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s3" style="padding-left: 20pt;text-indent: -7pt;text-align: left;">Generating and loading dynamic multi- protocol example applications.</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Adding dynamic multiprotocol functional- ity to an existing project.</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">Details on the application User Interface.</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">How the Zigbee example applications function.</p></li><li><p class="s3" style="padding-top: 3pt;padding-left: 20pt;text-indent: -7pt;text-align: left;">How the Bluetooth application functions.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="padding-top: 17pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">This application note provides details on developing Dynamic Multiprotocol applications using Bluetooth and Zigbee. It describes how to configure applications in Simplicity Studio using the EmberZNet PRO SDK. It then provides a detailed walkthrough on how the underlying code functions. For details on Dynamic Multiprotocol Application development that apply to all protocol combinations see <i>UG305: Dynamic Multiprotocol User’s Guide</i>.</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The example applications referenced here can be controlled either from a protocol-specific switch application or from a Bluetooth-enabled smartphone app. This application note provides details on how these examples are designed and implemented. It also describes how to generate, compile, and load example application code, and how to add dynamic multiprotocol functionality to an existing Zigbee project. The application note is intended to be used when developing your own Zigbee/Bluetooth dynamic multiprotocol implementations.</p><p class="s7" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Note: <span class="p">The Zigbee dynamic multiprotocol solution is currently only supported for SoC architectures. Support for NCP architectures is not yet available. Please contact Silicon Labs Sales for more information on our multiprotocol software roadmap.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark1">Resources</a></p><ul id="l4"><li><p class="s8" style="padding-top: 6pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">UG305: Dynamic Multiprotocol User&#39;s Guide <span class="p">provides details on:</span></p><ul id="l5"><li><p style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">Dynamic Multiprotocol Architecture</p></li><li><p style="padding-left: 52pt;text-indent: -14pt;text-align: left;">Radio Scheduler operation (with examples)</p></li><li><p style="padding-left: 52pt;text-indent: -14pt;text-align: left;">Task Priority management</p></li></ul></li><li><p class="s8" style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage <span class="p">explains how NVM3 can be used as non-volatile data storage in Dynamic Multiprotocol applications with Zigbee and Bluetooth.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 59pt;text-indent: -36pt;text-align: justify;">Note: <span class="p">EmberZNet SDK 6.8.0.0 was released as part of Gecko SDK Suite 3.0.0.0 (GSDK v3.x) and is used with Bluetooth SDK v3.x and Simplicity Studio 5. EmberZNet SDK 6.7.x continues to be used with Bluetooth 2.13.x and Simplicity Studio 4. Because of changes to the Bluetooth SDK v3.x, a few instructions and examples in this document vary based on version. Both variants are included and are clearly noted in the text.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s7" style="padding-left: 23pt;text-indent: 0pt;line-height: 18pt;text-align: left;"><a name="bookmark2">Development Environment Requirements EmberZNet 6.7.x</a></p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Simplicity Studio 4</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">EmberZNet SDK version 6.4.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Bluetooth SDK version 2.10.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Micrium OS-5 kernel version 5.3. or higher (installed automatically with EmberZNet SDK in Simplicity Studio 4)</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">An EFR32 chip with at least 512 kB of flash (required to run all the necessary software components)</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">IAR Embedded Workbench for ARM (IAR-EWARM) version compatible with your SDK (see the release notes for version details).</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">EmberZNet 6.8.x and higher</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Simplicity Studio 5</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">EmberZNet SDK version 6.8.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Bluetooth SDK version 3.0.0 or higher</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Micrium OS kernel version 6.0.0 or higher (installed automatically with EmberZNet SDK in Simplicity Studio)</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">An EFR32 chip with at least 512 kB of flash (required to run all the necessary software components)</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">IAR Embedded Workbench for ARM (IAR-EWARM) version compatible with your SDK (see the release notes for version details).</p></li></ul></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark3">Working with the Zigbee/Bluetooth Examples</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">This section describes</p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">How to build and flash the dynamic multiprotocol applications supplied with the EmberZNet SDK.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark4">How to configure a Zigbee project into a dynamic multiprotocol project.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;">Application Generation</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To work with Zigbee/Bluetooth dynamic multiprotocol applications you must install both the EmberZNet SDK and the Bluetooth SDK. The Micrium kernel is installed along with the EmberZNet SDK. IAR Embedded Workbench for ARM (IAR-EWARM) 8.30 must be installed and used as your compiler. See <i>QSG106: Getting Started with EmberZNet PRO </i>for information on installing the SDKs and IAR-EWARM.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Dynamic multiprotocol applications are generated, built, and uploaded in the same way as other applications. If you are not familiar with these procedures, see <i>QSG106: Getting Started with EmberZNet PRO </i>for details. The dynamic multiprotocol applications included with the EmberZNet SDK are:</p><ul id="l9"><li><p class="s7" style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">DynamicMultiprotocolLight <span class="p">is an application designed to demonstrate a DMP device with Zigbee 3.0 coordinator capabilities.</span></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -14pt;text-align: left;">DynamicMultiprotocolLightSed <span class="p">is an application designed to demonstrate a DMP device with SED capabilities.</span></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -14pt;text-align: left;">DynamicMultiprotocolSwitch <span class="p">is a Zigbee-only application designed to work with the two Zigbee/Bluetooth applications.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following summary procedure uses the <b>DynamicMultiprotocolLight </b>example application.</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">In Simplicity Studio, start a new project selecting the <b>DynamicMultiprotocolLight </b>example.</p></li><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">If your project General tab shows GNU-ARM as a compiler, change to IAR EWARM.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;"><span><img width="647" height="297" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 51pt;text-indent: -18pt;text-align: left;">Click <b>Generate </b>to generate project files.</p></li><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">Click <b>Build </b>(hammer icon) to build the application image.</p></li><li><p style="padding-top: 7pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">Note the board and part number for your device and the directory for generated files.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="661" height="438" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_007.jpg"/></span></p></li><li><p style="padding-top: 5pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">Right-click the target J-Link under Devices, and select <b>Upload Application</b>.</p></li><li><p class="s9" style="padding-top: 3pt;padding-left: 51pt;text-indent: -18pt;text-align: left;"><span class="p">Browse to </span>&lt;folder on General tab&gt;\IAR ARM - &lt;qualifier<span class="s10">&gt;</span>\&lt;project name&gt; <span class="p">and select the .gbl file.</span></p></li><li><p style="padding-top: 3pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">Silicon Labs strongly recommends that, if you have not already loaded a bootloader onto your device, you do so now. Check <b>Erase chip before uploading image</b>. Check <b>Bootloader image</b>, then browse to the following folder:</p><p class="s9" style="padding-top: 8pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">C:\SiliconLabs\SimplicityStudio_v5\developer\sdks\gecko_sdk_suite\&lt;version&gt;\platform\boot- loader\sample-apps\bootloader-storage-spiflash-single\</p><p style="padding-top: 7pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">Open the folder that corresponds to your board and part number and select the .s37 file, for example:</p><p class="s9" style="padding-top: 8pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">\efr32mg12p432f1024gl125-brd4161a\bootloader-storage-spiflash-single-combined.s37</p></li><li><p style="padding-top: 7pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">When both images are selected, the dialog should resemble the following figure. Click <b>OK</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="644" height="385" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_008.jpg"/></span></p></li><li><p style="padding-top: 4pt;padding-left: 51pt;text-indent: -18pt;text-align: left;">Application load success indicators are code-dependent. With the <b>DynamicMultiprotocolLight </b>example, the LCD should display the following before changing over to the light bulb display:</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 240pt;text-indent: 0pt;text-align: left;"><span><img width="141" height="138" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_009.jpg"/></span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Whether the application is a full function or a sleepy end device is determined by the Device Type on the ZNet tab.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark5">Converting a Zigbee Application to a Zigbee/Bluetooth LE Dynamic Multiprotocol Application</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section describes the configuration changes required to convert a working Zigbee application into a Zigbee/Bluetooth LE Dynamic Multiprotocol application. The instructions assume you have started with a non-DMP Zigbee sample application or your own Zigbee project, and that the application is working correctly.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Requirements:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">Zigbee application set up to build with IAR ARM v8.30.1 (for these instructions we use Z3 Light)</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">EFR32MG12 or other EFR32 with sufficient memory (for these instructions we assume BRD4161 (EFR32MG12P432F1024GL125))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 60pt;text-indent: -36pt;text-align: justify;">Note: <span class="p">The Dynamic Multiprotocol sample applications supplied with Simplicity Studio are already correctly defined and do not require modification before project generation unless performing an OTA update. There is a potential conflict with the DMP sample app LCD screen and the external flash. If you need to perform OTA updates, check the </span>Dynamic Multiprotocol UI Demo Code Stub <span class="p">plugin as described in the following section.</span></p><ol id="l11"><ol id="l12"><ol id="l13"><li><p class="s7" style="padding-top: 7pt;padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark6">Generate and Build the Zigbee Application</a></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The purpose of this procedure is to verify that the base application had loaded and is working correctly, and that output is printing to the console. This example uses the Z3Light sample application in the EmberZNet SDK It begins with the default settings, so that the config- uration changes are clear. Remember to select IAR as the toolchain.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Generate and build the project, load it to the board and check the Serial 1 output to make sure it’s up and running.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="214" height="292" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark7">Reconfigure the Project</a></p></li></ol></ol></ol><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The search bar at the top of the Plugins and other tabs is helpful when modifying the configuration. For plugins, the description explains its utility for DMP. The following figure illustrates finding the RTOS plugin and its description.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="620" height="331" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: Beginning with SDK 6.9.0, the RTOS configurations options moved from the Micrium plugin to the RTOS common plugin and the Zigbee Task call stack size is treated as words instead of bytes.</p><ol id="l14"><li><p style="padding-top: 7pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">On the Plugins tab, check the following:</p></li></ol></li><li><p class="s7" style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">RTOS</p><p style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">In SDKs 6.8.x or lower, check Micrium RTOS.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="697" height="138" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_012.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">In SDKs 6.9.0 and higher, you have the option of using Micrium RTOS or Free RTOS. For Micrium RTOS, check Micrium RTOS and RTOS Common.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="690" height="120" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_013.jpg"/></span></p><p style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">From SDK 6.9.x you can use FreeRTOS by selecting the FreeRTOS plugin and unchecking the Micrium RTOS plugin FreeRTOS is not supported yet. Theoriticially it should work, but we do not plan on testing it before Q4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="690" height="119" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_014.jpg"/></span></p></li><li><p class="s7" style="padding-top: 6pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">BLE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="684" height="133" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_015.jpg"/></span></p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Idle/Sleep</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="688" height="136" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_016.jpg"/></span></p></li><li><p class="s7" style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">mbed TLS Multiprotocol Configuration</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="678" height="135" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_017.jpg"/></span></p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">(optional) <b>Dynamic Multiprotocol UI Demo Code Stub</b></p><p style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The USART used to communicate with the external flash on Silicon Labs radio boards is the same USART that communicates with the LCD display on the WSTK. In order to perform an OTA update on a sample app that uses the LCD display, check <b>Dynamic Multiprotocol UI Demo Code Stub</b>. This disables the LCD display but allows the OTA to take place.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="691" height="124" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><li><p style="padding-left: 38pt;text-indent: -14pt;text-align: left;">On the Plugins tab, uncheck (disable) the following:</p></li></ol></li><li><p class="s7" style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Simple Main</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="709" height="146" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l16"><li><p style="padding-left: 38pt;text-indent: -14pt;text-align: left;">On the Plugins tab, change settings for the following:</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">HAL</p><ul id="l17"><li><p style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">Uncheck <b>Simulated EEPROM version 1 Library</b>.</p></li><li><p style="padding-left: 52pt;text-indent: -14pt;text-align: left;">Check <b>Simulated EEPROM Version 2 to NVM3 Upgrade Library </b>(this will also enable the NVM plugin).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="692" height="147" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_020.jpg"/></span></p></li></ul></li><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">RAIL</p><ul id="l18"><li><p style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">Uncheck <b>RAIL Library</b>.</p></li><li><p style="padding-left: 52pt;text-indent: -14pt;text-align: left;">Check <b>RAIL Library Multiprotocol</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="712" height="186" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_021.jpg"/></span></p></li></ul></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">UTILITY</p><ul id="l19"><li><p style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">In the CCM* Encryption plugin, uncheck <b>AES-CCM Software Implementation </b>and check <b>mbedTLS Implementation</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="674" height="221" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_022.jpg"/></span></p><ol id="l20"><li><p style="padding-top: 7pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Add Bluetooth GATT elements:</p><p style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">On the <b>Bluetooth GATT </b>tab, <b>Services </b>tab, drag and drop the following into the Custom BLE GATT window:</p><ul id="l21"><li><p style="padding-top: 3pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">Device Information</p></li><li><p style="padding-left: 52pt;text-indent: -14pt;text-align: left;">Generic Access</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;"><span><img width="582" height="357" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_023.jpg"/></span></p></li></ul></li><li><p style="padding-top: 4pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Add an identifiable name for your device to advertise by modifying the <b>Generic Access </b>&gt; <b>Device Name Value</b>. Be sure to increase the <b>Length </b>1 byte per character.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 171pt;text-indent: 0pt;text-align: left;"><span><img width="325" height="299" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_024.jpg"/></span></p></li><li><p style="padding-top: 7pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Add BLE callback code:</p><p style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">In the Callbacks tab, enable Plugin-specific callbacks: <b>Event.</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="431" height="155" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_025.jpg"/></span></p></li><li><p style="padding-top: 6pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Generate the project.</p></li><li><p style="padding-top: 3pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Add <span class="s9">emberAfPluginBleEventCallback </span>code to the <b>[project_name]_callbacks.c </b>file, based on the SDK version you are using..</p><p class="s7" style="padding-top: 8pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">For SDK 6.7.x:</p><p class="s9" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">/** @brief</p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p><ul id="l22"><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">This function is called from the BLE stack to notify the application of a</p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">stack event.</p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">In this case it will provide simple advertising for the BLE component of the Z3Light DMP app</p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*/</p><p class="s11" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">void <span style=" color: #000;">emberAfPluginBleEventCallback</span><span class="s13">(</span>struct <span class="s14">gecko_cmd_packet</span><span class="s13">* evt){</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span class="s11">switch </span>(BGLIB_MSG_ID(evt-&gt;<span style=" color: #0000C0;">header</span>)) {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">case <span class="s13">gecko_evt_system_boot_id:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">ble<span class="s13">);</span></p><p class="s13" style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">gecko_cmd_le_gap_start_advertising(0,<span class="s16">le_gap_general_discoverable</span>,<span class="s16">le_gap_connectable_scanna-</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE Advertising started&quot;</span>);</p><p class="s11" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">break<span class="s13">;</span></p><p class="s11" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">case <span class="s13">gecko_evt_le_connection_opened_id:</span></p><p class="s13" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE connection opened&quot;</span>); <span style=" color: #3E7E5F;">//Will cause advertising to stop</span></p><p class="s11" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">break<span class="s13">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 3pt;padding-left: 101pt;text-indent: -36pt;text-align: left;"><span class="s11">case </span>gecko_evt_le_connection_closed_id: emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE connection closed&quot;</span>);</p><p class="s13" style="padding-left: 24pt;text-indent: 77pt;text-align: left;">gecko_cmd_le_gap_start_advertising(0,<span class="s16">le_gap_general_discoverable</span>,<span class="s16">le_gap_connectable_scanna- ble</span>); <span style=" color: #3E7E5F;">// restarting advertising</span></p><p class="s11" style="padding-left: 65pt;text-indent: 35pt;text-align: left;">break<span class="s13">; </span>default <span class="s13">:</span></p><p class="s17" style="padding-left: 101pt;text-indent: 0pt;text-align: left;"><span style=" color: #000;">emberAfCorePrintln(</span>&quot;<u>unhandled</u> BLE event\r\n&quot;<span style=" color: #000;">);</span></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">break<span class="s13">; </span><span class="s9">}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">}</p><p class="s7" style="padding-top: 7pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">For SDK 6.8.x:</p><p class="s9" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">#include &quot;sl_bt_rtos_adaptation.h&quot;</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">static uint8_t advertising_set_handle = 0xff;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/** @brief</p><p class="s9" style="padding-left: 29pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*</p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">This function is called from the BLE stack to notify the application of a</p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">stack event.</p></li><li><p class="s9" style="padding-left: 40pt;text-indent: -10pt;line-height: 10pt;text-align: left;">In this case it will provide simple advertising for the BLE component of the Z3Light DMP app</p></li></ul><p class="s9" style="padding-left: 29pt;text-indent: 0pt;line-height: 10pt;text-align: left;">*/</p><p class="s11" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">void <span style=" color: #000;">emberAfPluginBleEventCallback</span><span class="s13">(sl_bt_msg_t* evt){</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span class="s11">switch </span>(SL_BT_MSG_ID(evt-&gt;<span style=" color: #0000C0;">header</span>)) {</p><p class="s11" style="padding-left: 101pt;text-indent: -36pt;line-height: 21pt;text-align: left;">case <span class="s13">sl_bt_evt_system_boot_id: sl_bt_advertiser_create_set(&amp;advertising_set_handle);</span></p><p class="s13" style="padding-left: 214pt;text-indent: -113pt;text-align: left;">sl_bt_advertiser_start(advertising_set_handle, // advertising set handle advertiser_general_discoverable, // discoverable mode advertiser_connectable_scannable); // connectable mode</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE Advertising started&quot;</span>);</p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">break<span class="s13">;</span></p><p class="s11" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">case <span class="s13">sl_bt_evt_connection_opened_id:</span></p><p class="s13" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE connection opened&quot;</span>); <span style=" color: #3E7E5F;">//Will cause advertising to stop</span></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">break<span class="s13">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 101pt;text-indent: -36pt;text-align: left;"><span class="s11">case </span>sl_bt_evt_connection_closed_id: emberAfCorePrintln(<span style=" color: #2A00FF;">&quot;BLE connection closed&quot;</span>);</p><p class="s13" style="padding-left: 214pt;text-indent: -113pt;text-align: left;">sl_bt_advertiser_start(advertising_set_handle, // advertising set handle advertiser_general_discoverable, // discoverable mode advertiser_connectable_scannable); // connectable mode</p><p class="s11" style="padding-left: 65pt;text-indent: 35pt;text-align: left;">break<span class="s13">; </span>default<span class="s13">:</span></p><p class="s17" style="padding-left: 101pt;text-indent: 0pt;text-align: left;"><span style=" color: #000;">emberAfCorePrintln(</span>&quot;<u>unhandled</u> BLE event\r\n&quot;<span style=" color: #000;">);</span></p><p class="s11" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">break<span class="s13">;</span></p><p class="s9" style="padding-left: 60pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">For <b>SDK 6.8.x and up</b>, the following defines need to be added to the file <b>mbedtls-config-generated.h</b>:</p><p class="s11" style="padding-top: 8pt;padding-left: 94pt;text-indent: 0pt;text-align: left;">#define <span class="s9">MBEDTLS_CTR_DRBG_C </span>#define <span class="s9">MBEDTLS_SHA256_C </span>#define <span class="s9">MBEDTLS_ENTROPY_C</span></p></li><li><p style="padding-top: 7pt;padding-left: 38pt;text-indent: -14pt;text-align: left;">Build and flash your project and look for your device in the Bluetooth Browser screen of the EFR Connect cell phone app.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 213pt;text-indent: 0pt;text-align: left;"><span><img width="217" height="454" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_026.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">You can also see comments for the BLE activity in the Serial 1 window among the Zigbee prints</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 161pt;text-indent: 0pt;text-align: left;"><span><img width="351" height="165" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_027.jpg"/></span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;line-height: 107%;text-align: left;">This is very basic Bluetooth functionality. To learn more about programming BLE functionality, see <i>QSG139: Bluetooth® SDK v2.x Quick Start Guide/QSG169: Bluetooth® SDK v3.x Quick Start Guide</i>, included with the corresponding Bluetooth SDK.</p></li></ul></li></ul></li><li><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark8">About the Zigbee/Bluetooth LE Examples</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Zigbee/Bluetooth LE Dynamic Multiprotocol examples demonstrate a light that can be controlled from both Bluetooth and a Zigbee network. Software is included both as compiled demonstrations and as example code in the EmberZNet SDK. The purpose of the exam- ples is to show the way of implementing a dynamic multiprotocol application using the Silicon Labs EmberZNet stack.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Dynamic Multiprotocol Demo application has three main components.</p><ol id="l23"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">User Interface (LCD and Buttons)</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">Zigbee application (FFD and/ or SED)</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">Bluetooth application</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark9">User Interface</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The user interface is developed specifically for the dynamic multiprotocol demonstration, and APIs to update the text and graphic on the LCD are called directly from Zigbee and Bluetooth event handlers. The implementation to manipulate the LCD is contained in the following files,</p><p class="s9" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">bitmaps.h //Contains the arrays containing the bitmap of the graphics drawn on the LCD</p><p class="s9" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">dmp_ui.c //Contains the functions to change the state of the display based on the state of the application</p><p class="s9" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">dmp_ui.h //Header file exporting functions implemented in the dmp_ui.c</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The above uses the display driver library supplied by Silicon Labs to update the content on the LCD display mounted on the WSTK.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark10">Zigbee Application</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The example <b>DynamicMultiprotocolLight </b>is set up to be a light and a coordinator on the Zigbee network.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following cluster set is supported by both the <b>DynamicMultiprotocolLight </b>and <b>DynamicMultiprotocolLightSed </b>applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><span><img width="234" height="199" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_028.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <b>DynamicMultiprotocolLight </b>example also supports Green Power Proxy Basic behavior. Please note that the examples were de- veloped with a focus on demonstrating dynamic multiprotocol features and may not be Zigbee-certifiable.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The On/Off cluster controls the LEDs and the bulb icon on the WSTK board to represent the state of the light.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The dynamic multiprotocol applications make use of Micrium OS and the Zigbee applications are run as a task of Micrium OS.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The hardware and peripherals of the chip are initialized before any tasks are created. A Zigbee task is created after initialization, which then creates the application tasks and Bluetooth task.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Micrium plugin also includes the source file micrium-rtos-sleep.c, which enables the sleepy DMP application to manage the sleep functionality.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note that in Bluetooth SDK v3.x commands were renamed and restructured. The code example in the last box illustrates both.</p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">From: micrium-rtos-main.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;text-align: left;"><span><img width="603" height="390" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_029.gif"/></span></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">From: af-main-soc.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="592" height="466" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_030.gif"/></span></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">On either DMP light application, once the Zigbee stack is set up to run, subsequent interactions with the stack occurs via event handlers, as shown in the following figures. The following figure shows the event handlers in the full function light application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">EVT::EMBER_NETWORK_UP</p><p class="s21" style="padding-top: 3pt;padding-left: 78pt;text-indent: 0pt;text-align: left;">emberAfStackStatusCallback</p><p style="text-indent: 0pt;text-align: left;"><span><img width="664" height="737" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_031.png"/></span></p><ul id="l25"><li><p class="s22" style="padding-top: 7pt;padding-left: 56pt;text-indent: -16pt;text-align: left;">Start permit Join and identify for 180 s</p></li><li><p class="s22" style="padding-left: 56pt;text-indent: -16pt;text-align: left;">Restart the reporting for On/Off attribute</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">State : Idle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">EVT::AttributeChangedCb</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 81pt;text-indent: -52pt;line-height: 106%;text-align: left;">emberAfOnOffClusterServerAttributeC hangedCallback</h4><ul id="l26"><li><p class="s22" style="padding-top: 6pt;padding-left: 44pt;text-indent: -16pt;text-align: left;">Update the LED state.</p></li><li><p class="s22" style="padding-left: 44pt;text-indent: -16pt;text-align: left;">Send a indication to mobile device for light state and trigger source.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">EVT::Device Joined/Left Zigbee Nwk</p><h4 style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">emberAfTrustCenterJoinCallback</h4><p class="s22" style="padding-top: 7pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">if (status = DEVICE_LEFT)\</p><ul id="l27"><li><p class="s22" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">Clear Binding table entry if (status = DEVICE_JOIN)\</p></li><li><p class="s22" style="padding-left: 50pt;text-indent: -16pt;text-align: left;">Disable permit join</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="text-indent: 0pt;text-align: right;">EVT::halButtonIsr</p><h4 style="padding-top: 3pt;padding-left: 143pt;text-indent: 0pt;text-align: left;">buttonEventHandler</h4><p class="s22" style="padding-top: 7pt;padding-left: 102pt;text-indent: 0pt;text-align: left;">if (button = BUTTON0)\</p><ul id="l28"><li><p class="s22" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">Toggle the ON_OFF_ATTRIBUTE if ((button = BUTTON 1)</p></li><li><p class="s22" style="padding-left: 118pt;text-indent: -16pt;line-height: 13pt;text-align: left;">if(noNwk) -&gt; formNwk</p></li><li><p class="s22" style="padding-left: 118pt;text-indent: -16pt;line-height: 13pt;text-align: left;">else if(longPress) -&gt; LeaveNwk</p></li><li><p class="s22" style="padding-left: 118pt;text-indent: -16pt;text-align: left;">else -&gt; start pjojn and identify for 180s.</p></li></ul></li></ul></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 4pt;padding-left: 163pt;text-indent: 0pt;text-align: center;">Figure 3-1. DMP Full Function Light Event Handler Definition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: -36pt;text-align: left;"><b>Note: </b>Whenever the light starts <span class="s10">pjoin</span>, it starts identifying <b>and </b>also puts all the connected lights in identify mode. This helps the joining switch to identify all the lights present in the network.</p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The following figure shows the application interaction with the stack with the event handlers used for the sleepy light application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="713" height="541" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_032.jpg"/></span></p><p class="s7" style="padding-top: 7pt;padding-left: 163pt;text-indent: 0pt;text-align: center;">Figure 3-2 DMP Sleepy Light Event Handler Definition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 59pt;text-indent: -36pt;text-align: justify;">Note: <span class="p">To avoid the risk of shared resources, if you want to send Zigbee messages from a task other than the Zigbee Stack Task, we advise you to schedule a custom event from within the non-Zigbee Stack task. In the corresponding event handler function for the custom event the Zigbee stack APIs can be used, as the event handler will be called from the Zigbee Stack Task context.</span></p></li></ul></li><li><p class="s7" style="padding-top: 7pt;padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark11">Bluetooth Application</a></p></li></ol></li></ol><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Bluetooth application supports following services and characteristics. These are pre-selected in the GATT editor during project gen- eration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 128pt;text-indent: 0pt;text-align: left;"><span><img width="444" height="192" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_033.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l29"><ol id="l30"><ol id="l31"><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark12">Silabs DMP Light Service</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In the above table the Silabs DMP Light is a custom service with a UUID of <span class="s10">bae55b96-7d19-458d-970c-50613d801bc9</span>. This custom UUID is used to uniquely identify the Light by the Wireless Gecko application.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The Service has two characteristics,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 123pt;text-indent: 0pt;text-align: left;"><span><img width="451" height="158" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_034.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark13">Beacons</a></p><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The application implements both an iBeacon as well as an Eddystone beacon. The default behavior is to transmit each beacon at 100 mS intervals.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 123pt;text-indent: 0pt;text-align: left;"><span><img width="453" height="126" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_035.gif"/></span></p></li><li><p class="s7" style="padding-top: 7pt;padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark14">Bluetooth Event Handling</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack is initialized as part of the Zigbee Task, as shown in the Zigbee implementation section. The Bluetooth task handles the Bluetooth LE link layer messaging and management. The Bluetooth stack’s interaction with the user application is through a framework plugin. A number of events that are called in the context of the Zigbee task allow the user application to interact with the Bluetooth stack. The following diagram describes the Bluetooth-related events. In Bluetooth v3.x commands and events were renamed, substituting <b>sl_bt_ </b>for <b>gecko_cmd_ </b>and <b>gecko_</b>, respectively. Both variants are shown.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Bluetooth event handling is same for both DMP demos.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="635" height="504" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_036.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 163pt;text-indent: 0pt;text-align: center;">Figure 3-3 DMP Bluetooth Event Handler Definition</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 52pt;text-indent: -28pt;text-align: left;"><a name="bookmark15">Bluetooth and Zigbee Interaction</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The primary purpose of the example applications is to show Zigbee and Bluetooth working together on a device. For this purpose, when the Light receives a command to change its state through one protocol, it executes the command and sends out a notification to the other devices using the other protocol to keep everything in sync. Their interaction is the same in both examples.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Two basic operations are described below, first a write to Light characteristics from a Bluetooth connected device (shown in the following figure) and then a change in the Light state from a Zigbee device.</p><p class="s7" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Write from the Bluetooth Connected Device</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="563" height="150" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_037.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The application’s services and characteristics are pre-selected in the GATT editor in Simplicity Studio. Upon generation the characteris- tics are #define in the gatt_db.h. Using the #define reference, the characteristics can then be coupled to read and write Bluetooth re- quests. For example the Light characteristic is reference from GATT as <span class="s10">gatt_light_state </span>which is then tied to an application specific write API of <span class="s10">writeLightState </span>in the <span class="s10">AppCfgGattServerUserWriteRequest </span>as shown below.</p><p class="s9" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static const AppCfgGattServerUserWriteRequest_t appCfgGattServerUserWriteRequest[] =</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s9" style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{ gattdb_light_state, writeLightState },</p><p class="s9" style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{ 0, NULL }</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The application implements the Zigbee attribute write and a Bluetooth write response in the <span class="s10">writeLightState </span>function as follows:</p><p class="s9" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static void writeLightState(uint8_t connection, uint8array *writeValue)</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s9" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">lightDirection = DMP_UI_DIRECTION_BLUETOOTH; emberAfWriteAttribute(emberAfPrimaryEndpoint(),</p><p class="s9" style="padding-left: 153pt;text-indent: 0pt;text-align: left;">ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, CLUSTER_MASK_SERVER,</p><p class="s9" style="padding-left: 153pt;text-indent: 0pt;text-align: left;">(int8u *)&amp;writeValue-&gt;data[0], ZCL_BOOLEAN_ATTRIBUTE_TYPE);</p><p class="s9" style="padding-left: 45pt;text-indent: -10pt;text-align: left;">&lt;sl_bt_/gecko_cmd&gt;gatt_server_send_user_write_response( connection,</p><p class="s9" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">gattdb_light_state, ES_WRITE_OK</p><p class="s9" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">);</p><p class="s9" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s10">emberAfWriteAttribute() </span>is used to write the attribute table of the Zigbee application with the value supplied by the Blue- tooth connected device above. Since the on-off attribute of the on-off server cluster is a reportable attribute it is reported to all devices setup in the binding table of the Light.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s10">emberAfOnOffClusterServerAttributeChangedCallback() </span>is then used to change the state of the LEDs and the LCD to indicate the state of the light on the WSTK main board.</p><p class="s7" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Write from the Zigbee Connected Device</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The flow in the other direction, that is a change in the Light state from Zigbee connected device, is shown in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: left;"><span><img width="554" height="147" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_038.gif"/></span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Any on-off client on the same network as the Light can send an on-off cluster’s On, Off or Toggle command to the Light to change its state. Once such a command is received over the Zigbee interface the Silicon Labs Zigbee framework interprets it and calls an appro- priate handler to change the value of on-off attribute of the on-off server cluster. In the example <b>DynamicMultiprotocolSwitch </b>applica- tion the on-off client sends a Toggle command to the Light, which toggles the value of the on-off attribute and triggers the <span class="s10">emberA- fOnOffClusterServerAttributeChangedCallback(</span><i>)</i>. The callback is then used to change the state of the light as well as send notifications for both Trigger Source and Light characteristics to the connected Bluetooth devices and to update the LEDs and the LCD to indicate the change in the Light state.</p><p class="s24" style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">void emberAfOnOffClusterServerAttributeChangedCallback(int8u endpoint,</p><p class="s24" style="padding-left: 287pt;text-indent: 0pt;line-height: 9pt;text-align: left;">EmberAfAttributeId attributeId)</p><p class="s24" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{</p><p class="s24" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">EmberStatus status; int8u data;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 43pt;text-indent: -9pt;text-align: left;">if (attributeId == ZCL_ON_OFF_ATTRIBUTE_ID) { status = emberAfReadAttribute(endpoint,</p><p class="s24" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, CLUSTER_MASK_SERVER,</p><p class="s24" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">(int8u*)&amp;data, sizeof(data), NULL);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 43pt;text-indent: 0pt;text-align: left;">if (status == EMBER_ZCL_STATUS_SUCCESS) {</p><p class="s24" style="padding-left: 62pt;text-indent: -9pt;text-align: left;">if (data == 0x00) { halClearLed(BOARDLED0); halClearLed(BOARDLED1); dmpUiLightOff(); notifyLight(currentConnection, 0);</p><p class="s24" style="padding-left: 62pt;text-indent: -9pt;text-align: left;">} else { halSetLed(BOARDLED0); halSetLed(BOARDLED1);</p><p class="s24" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">notifyLight(currentConnection, 1); dmpUiLightOn();</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;line-height: 9pt;text-align: left;">if ( (lightDirection == DMP_UI_DIRECTION_BLUETOOTH)</p><p class="s24" style="padding-left: 62pt;text-indent: 14pt;text-align: left;">|| (lightDirection == DMP_UI_DIRECTION_SWITCH) ) { dmpUiUpdateDirection(lightDirection);</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;line-height: 9pt;text-align: left;">} else {</p><p class="s24" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">lightDirection = DMP_UI_DIRECTION_ZIGBEE; dmpUiUpdateDirection(lightDirection);</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">}</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">ble_lastEvent = lightDirection; lightDirection = DMP_UI_DIRECTION_INVALID;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">if (ble_lastEvent != DMP_UI_DIRECTION_INVALID) {</p><p class="s24" style="padding-left: 24pt;text-indent: 38pt;text-align: left;">if ( (ble_lightState_config != GAT_RECEIVE_INDICATION) &amp;&amp; (ble_lastEvent_config == GAT_RECEIVE_INDICATION)) {</p><p class="s24" style="padding-left: 71pt;text-indent: 0pt;line-height: 9pt;text-align: left;">notifyTriggerSource(currentConnection, ble_lastEvent);</p><p class="s24" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s24" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">}</p><p class="s24" style="padding-left: 43pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p class="s24" style="padding-left: 33pt;text-indent: 0pt;line-height: 9pt;text-align: left;">} else {</p><p class="s24" style="text-indent: 0pt;text-align: right;">}</p><p class="s24" style="text-indent: 0pt;text-align: right;">}}</p><p class="s6" style="padding-bottom: 2pt;text-indent: 0pt;text-align: right;">Document Revision History</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_039.png"/></span></p></li><li><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><a name="bookmark16">Document Revision History</a></h3></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Revision 0.9</p><ul id="l32"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -18pt;text-align: left;">Documents the new freeRTOS support</p><p class="s7" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Revision 0.8</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Removed the “Define the mbedTLS path” step in the procedure in section 2.2.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Modified the 6.8.x code that illustrates adding <span class="s9">emberAfPluginBleEventCallback </span>code to the <b>[project_name]_callbacks.c </b>file,</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.7</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Update to reflect changes for EmberZNet 6.8.0/Bluetooth SDK 3.0.0.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.6</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Section 2.2 re-inserted with functional instructions.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Fixed duplicated bookmarks in PDF.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.5</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Updated section 2.1. Temporarily removed section 2.2 on project configuration.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.4</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Added note about conflict between LCD and external flash for OTA.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.3</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Added note about threat-safe implementation to section 3.2.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.2</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Modifications for supporting sleepy light device.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Revision 0.1</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;">Initial release</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 21pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">Simplicity Studio</h2><p class="s25" style="padding-top: 15pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">One-click access to MCU and wireless tools, documentation, software, source code libraries &amp; more. Available for Windows, Mac and Linux!</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="768" height="435" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_040.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="79" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_041.png"/></span></p><p class="s26" style="padding-left: 163pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 163pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/IoT">www.silabs.com/IoT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="79" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_042.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;">SW/HW</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/simplicity" class="s27">www.silabs.com/simplicity</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="79" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Quality</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/quality">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="text-indent: 0pt;text-align: left;"><span><img width="79" height="79" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_044.png"/></span></p><p style="padding-top: 1pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s29" style="padding-top: 1pt;padding-bottom: 1pt;padding-left: 6pt;text-indent: 0pt;line-height: 114%;text-align: left;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="771" height="49" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_045.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-bottom: 1pt;padding-left: 6pt;text-indent: 0pt;line-height: 114%;text-align: left;">of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="745" height="23" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_046.png"/></span></p><p class="s29" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;line-height: 114%;text-align: left;">products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s29" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;line-height: 114%;text-align: left;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress®, Zentri, the Zentri logo and Zentri DMS, Z-Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="134" height="66" alt="image" src="an1133-dynamic-multiprotocol-bluetooth-zigbee/Image_047.png"/></span></p><p class="s29" style="padding-top: 6pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s29" style="padding-left: 134pt;text-indent: 0pt;line-height: 9pt;text-align: left;">USA</p><p style="padding-top: 4pt;padding-left: 134pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/" class="s30">http://www.silabs.com</a></p></body></html>
