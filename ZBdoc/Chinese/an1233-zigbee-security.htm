<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN1233: Zigbee Security</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s8 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s10 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s12 { color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s13 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s14 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s15 { color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s16 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s17 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13pt; }
 .s18 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s19 { color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s20 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s21 { color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s22 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s23 { color: #00F; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s24 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s26 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s27 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 7.5pt; vertical-align: 4pt; }
 .s28 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 7.5pt; }
 .s29 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s30 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s31 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s32 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s33 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s34 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s35 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s36 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d3 1; }
 #l5> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt;counter-reset: d3 1; }
 #l7> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt;counter-reset: d3 1; }
 #l9> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l10 {padding-left: 0pt;counter-reset: d4 1; }
 #l10> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l11 {padding-left: 0pt;counter-reset: d4 1; }
 #l11> li>*:first-child:before {counter-increment: d4; content: counter(d4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l12 {padding-left: 0pt;counter-reset: d3 1; }
 #l12> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l13 {padding-left: 0pt;counter-reset: d3 1; }
 #l13> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l14 {padding-left: 0pt;counter-reset: g1 1; }
 #l14> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l15 {padding-left: 0pt;counter-reset: d3 1; }
 #l15> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l16 {padding-left: 0pt; }
 #l16> li>*:first-child:before {content: "• "; color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 #l17 {padding-left: 0pt;counter-reset: d3 1; }
 #l17> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l18 {padding-left: 0pt;counter-reset: i1 1; }
 #l18> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l18> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l19 {padding-left: 0pt;counter-reset: d3 1; }
 #l19> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 li {display: block; }
 #l20 {padding-left: 0pt;counter-reset: i1 4; }
 #l20> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l20> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l21 {padding-left: 0pt;counter-reset: i2 1; }
 #l21> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l22 {padding-left: 0pt;counter-reset: i3 1; }
 #l22> li>*:first-child:before {counter-increment: i3; content: counter(i1, decimal)"."counter(i2, decimal)"."counter(i3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: i3 0;  }
 #l23 {padding-left: 0pt; }
 #l23> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24 {padding-left: 0pt; }
 #l24> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25 {padding-left: 0pt; }
 #l25> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an1233-zigbee-security/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">AN1233: Zigbee Security</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="724" height="1" alt="image" src="an1233-zigbee-security/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="200" height="1" alt="image" src="an1233-zigbee-security/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="201" height="1" alt="image" src="an1233-zigbee-security/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Presents the Zigbee stack architecture.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Introduces basic security concepts such as network layer security, trust center networks, and APS layer security.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Defines the different keys used for securing data in different ways.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Describes Zigbee Smart Energy (ZSE) Security.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document introduces some basic security concepts, includ- ing network layer security, trust centers, and application support layer security features. It then discusses the types of standard security protocols available in EmberZNet PRO. Coding require- ments for implementing security are reviewed in summary. Final- ly, information on implementing Zigbee Smart Energy security is provided.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an1233-zigbee-security/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Security is a major concern in the Zigbee architecture. Although Zigbee uses the basic security elements in IEEE 802.15.4 (for exam- ple, Advanced Encryption Standard (AES) encryption and Counter with CBC-MAC (CCM) security modes), it expands upon this with:</p><ul id="l3"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">128-bit AES encryption algorithms</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Strong, U.S. National Institute of Standards and Technology (NIST)-approved security</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Defined key types (link, network)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Defined key setup and maintenance</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Keys can be hardwired into an application</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">CCM* (Unified/simpler mode of operation)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Trust centers</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Security that can be customized for the application</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">As the following figure (from Zigbee document 05-3474-21: Zigbee Specification) illustrates, the security services provider block interac- tions with both the application and network layers.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Zigbee now supports a single defined security mode called <b>Standard Security</b>. Various policies exist within that mode to control how devices behave or interact on the network. Earlier versions of the Zigbee standard utilized modes known as <b>Residential Security </b>and <b>High Security</b>. These have been deprecated.</p><p class="s5" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">IEEE 802.15.4 MAC-level security is </span>not <span class="p">used by Zigbee and is therefore not supported by EmberZNet PRO and not described here. Zigbee implements message security at the network and application layers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="614" height="389" alt="image" src="an1233-zigbee-security/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 1.1.  Zigbee Stack Architecture</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document first describes some basic security concepts, including network layer security, trust centers, and application support lay- er security features. It then discusses the types of standard security protocols available in EmberZNet PRO. Coding requirements for implementing security are reviewed in summary. Finally, information on implementing Zigbee Smart Energy security is provided. Details may be found in document <i>AN714: Smart Energy ECC-Enabled Device Setup</i>.</p><p class="s16" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark51" class="s29">Those already familiar with Zigbee security concepts can jump to section </a>4. Zigbee Smart Energy (ZSE) Security<span style=" color: #000;">.</span></p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Concepts</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Network Layer Security</a></p><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark16" class="s29">This section describes how Zigbee implements security at the network layer, which applies to standard security. Network security pro- vides security independent of the applications that may be running on a Zigbee node. All Zigbee-certified devices must use network layer security. It provides the basic access control for controlling what nodes are allowed to participate in a particular Zigbee network. For application-controlled security, see section </a>2.4 APS Layer Security<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark3">The Network Key</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Network security uses a network-wide key for encryption and decryption. All devices that are authorized to join the network have a copy of the key and use it to encrypt and decrypt all network messages. The network key also has a sequence number associated with it to identify a particular instance of the key. When the network key is updated, the sequence number is incremented to allow devices to identify which instance of the network key has been used to secure the packet data. The sequence number ranges from 0 to 255. When the sequence number reaches 255, it wraps back to 0.</p><p class="s5" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">All Zigbee keys are 128-bits in length.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">All devices that are part of a secured Zigbee network have a copy of the network key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 6pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark4">Hop-by-Hop Security</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It is important to note that network security in Zigbee is done on a hop-by-hop basis. Each router that relays an encrypted packet first verifies that it is a valid encrypted packet before any more processing is done. A router authenticates the packet by executing the Zig- bee decryption mechanism and verifying the packet integrity. It then re-encrypts the packet with its own network parameters (such as source address and frame counter) before sending the message to the next hop. Without this protection, an attacker could replay a message into the network that would be routed through several devices, thereby consuming network resources. Using hop-by-hop se- curity allows a router to block attempts to inject bad traffic into the network.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark5">Packet Security</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A packet secured at the network layer is composed of the elements shown in the following figure.</p><p class="s7" style="padding-top: 8pt;padding-bottom: 3pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Authenticated</p><p style="padding-left: 145pt;text-indent: 0pt;text-align: left;"><span><img width="494" height="26" alt="image" src="an1233-zigbee-security/Image_007.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:72.2382pt" cellspacing="0"><tr style="height:36pt"><td style="width:74pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s8" style="padding-top: 7pt;padding-left: 21pt;padding-right: 10pt;text-indent: -8pt;text-align: left;">MAC Header 25 bytes</p></td><td style="width:74pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s8" style="padding-top: 7pt;padding-left: 21pt;padding-right: 8pt;text-indent: -9pt;text-align: left;">NWK Header 25 bytes</p></td><td style="width:74pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s8" style="padding-top: 7pt;padding-left: 21pt;padding-right: 10pt;text-indent: -8pt;text-align: left;">AUX Header 25 bytes</p></td><td style="width:148pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s8" style="padding-top: 7pt;padding-left: 58pt;padding-right: 25pt;text-indent: -11pt;text-align: left;">NWK Payload Variable</p></td><td style="width:74pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s8" style="padding-top: 7pt;padding-left: 22pt;padding-right: 22pt;text-indent: 0pt;text-align: center;">MIC</p><p class="s8" style="padding-left: 22pt;padding-right: 22pt;text-indent: 0pt;text-align: center;">4 bytes</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="190" height="40" alt="image" src="an1233-zigbee-security/Image_008.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">Encrypted</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="padding-top: 5pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">NWK = Network</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 112pt;text-indent: 0pt;text-align: center;">Figure 2.1.  Anatomy of a Packet Secured at the Network Layer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark6">Auxiliary Header</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The auxiliary header contains data about the security of the packet that a receiving node uses to correctly authenticate and decrypt the packet. This data includes the type of key used, the sequence number (if it is the network key), the IEEE address of the device that secured the data, and the frame counter.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark7">Authentication and Encryption</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Zigbee uses a 128-bit symmetric key to encrypt all transmissions at the network layer using AES-128. The network and auxiliary head- ers are sent in the clear but authenticated, while the network payload is authenticated and encrypted. AES-128 is used to create a hash of the entire network portion of the message (header and payload), which is appended to the end of the message. This hash is known as the Message Integrity Code (MIC) and is used to authenticate the message by insuring it has not been modified. A receiving device hashes the message and verifies the calculated MIC against the value appended to the message. Alterations to the message invalidate the MIC and the receiving node will discard the message entirely.</p><p class="s5" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Zigbee uses a 4-byte MIC.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark8">The Network Security Frame Counter</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">A frame counter is included in the auxiliary headers as a means of protecting against replay attacks. All devices have their own outgo- ing frame counter and they maintain a list of their neighbor&#39;s and children&#39;s frame counters. Every time a device sends a packet, it incre- ments its outgoing frame counter. A receiving device verifies that the frame counter of the sending device has increased from the last value that it saw. If it has not increased, the packet is silently discarded. If the receiving device is not the final destination, the packet is decrypted and modified to include the routing device&#39;s frame counter. The packet is then re-encrypted and sent along to the next hop.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The frame counter is 32 bits and may not wrap to zero. The network key can be updated before the frame counter reaches its maximum value. When that occurs, the frame counter may be reset to zero if the local device’s value is above 0x80000000.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark9">Unencrypted Network Data</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">All normal network datagrams are required to have network security and a valid frame counter. The only exception is during joining, when devices do not yet have the network key. In that case a joining device&#39;s messages are relayed through its parent until it is fully joined and authenticated. Any other messages that are received without network layer security are silently discarded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Trust Center Networks</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Authentication in a secure network may be controlled by means of a central authority known as a trust center. All devices entering the network are temporarily joined to the network until the trust center is contacted and decides whether or not to allow the new device into the network. The parent of the newly joined device acts as a relay between the trust center and the joining device. Only authentication messages can be sent to or from the device until it is fully joined and authenticated.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The trust center has the option of doing one of three things when a device joins:</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Send a copy of the current network key, which the parent relays to the joining device.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Send the parent a command to remove the device from the network, thereby disallowing it from joining.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Ignore the request. Parents will silently remove the device from the network if it does not receive a network key within 2 seconds.</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Once the node has the network key, it is considered fully joined and authenticated, and may communicate with any device on the net- work.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A network operating with a trust center always needs a trust center to authenticate any new devices. Normal messages between two devices do not require the trust center to get involved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Distributed Trust Center Networks</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Networks may be formed without a centralized authentication. These networks are called <b>Distributed Trust Center Networks</b>. In this case, any router may authorize and authenticate new devices that wish to join.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">These networks offer a simpler mechanism for adding devices to the network at the slight expense of a less secure network.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The decision to use a Distributed Trust Center Network or a Trust Center Network is done at the time the network is formed. There is no way to change this decision after the network has been started.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">APS Layer Security</a><a name="bookmark16">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This section describes how Zigbee implements security at the Application Support (APS) layer.</p><ol id="l7"><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark13">End-to-End Security</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">APS security is intended to provide a way to send messages securely within a Zigbee network such that no other device can decrypt the data except the source and destination. This is different than network security, which provides only hop-by-hop security. In that case every device that is part of the network and hears the packet being relayed to its destination and decrypts it.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">APS security uses a shared key that only the source and destination know about, thus providing end-to-end security.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Both APS layer and network layer encryption can be used simultaneously to encrypt the contents of a message. In that case APS layer security is applied first, and then network layer security.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">A packet secured at the APS Layer is composed of the elements shown in the following figure.</p><p class="s10" style="padding-top: 8pt;padding-bottom: 2pt;padding-left: 137pt;text-indent: 0pt;text-align: center;">Authenticated</p><p style="padding-left: 164pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="22" alt="image" src="an1233-zigbee-security/Image_009.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:36.6014pt" cellspacing="0"><tr style="height:31pt"><td style="width:64pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 20pt;padding-right: 15pt;text-indent: -9pt;text-align: left;">MAC Header 9 bytes</p></td><td style="width:65pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 20pt;padding-right: 14pt;text-indent: -10pt;text-align: left;">NWK Header 8 bytes</p></td><td style="width:64pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 17pt;padding-right: 16pt;text-indent: -6pt;text-align: left;">AUX Header 2-8 bytes</p></td><td style="width:64pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">AUX  Header 5 or 13 bytes</p></td><td style="width:129pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 50pt;padding-right: 49pt;text-indent: -8pt;text-align: left;">APS Payload Variable</p></td><td style="width:64pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">APS MIC</p><p class="s11" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">4 bytes</p></td><td style="width:65pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt"><p class="s11" style="padding-top: 6pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">MAC CRC</p><p class="s11" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">2 bytes</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="165" height="35" alt="image" src="an1233-zigbee-security/Image_010.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Encrypted</p><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 7pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 2.2.  APS Packet Security</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark14">Link Keys</a><a name="bookmark17">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">APS security uses a peer-to-peer key known as the link key. Both devices must have already established this key with one another before sending APS-secured data. There are two types of link keys: trust center link keys and application link keys.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Trust Center Link Keys</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The <b>trust center link key </b>is a special link key in which one of the partner devices is the trust center. The stack uses this key to send and receive APS command messages to and from the trust center. The application may also use this key to send APS-encrypted data messages.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">All devices in a Zigbee network must have link keys. In a Trust Center Network, the devices must have a Trust Center Link Key. In a Distributed Trust Center Network, this key is called a <b>Distributed Trust Center link key</b>.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Application Link Keys</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Application link keys are shared keys that may be established between any two nodes in the network, where neither device is a trust center. They may be used to add additional security to messages being sent to or from the application running on a node. Devices can have a different application link key for each device with which they communicate.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="441" height="186" alt="image" src="an1233-zigbee-security/Image_011.png"/></span></p><p class="s12" style="text-indent: 0pt;text-align: left;">Request Key with Responder</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Encrypted with TC Link Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;text-align: left;">Application Link Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;text-align: left;">Application Link</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;text-align: left;">Encrypted with Initiator TC Link Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;text-align: left;">Encrypted with Responder T</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: left;">Application Data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 5pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Trust Center</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 5pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">Initiator</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark44" class="s29">A device may preconfigure an application link key or request a link key between itself and another device. In the latter case it issues a request to the trust center encrypted with its trust center link key. The trust center acts as a trusted third party to both devices, so they can securely establish communications with one another. This is discussed further in section </a>3.2.4 Application Link Keys<span style=" color: #000;">. The process for establishing an application link key is illustrated in the following figure.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:361.099pt" cellspacing="0"><tr style="height:26pt"><td style="width:109pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p class="s14" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a name="bookmark18">Responder</a></p></td></tr><tr style="height:135pt"><td style="width:54pt;border-top-style:solid;border-top-width:2pt;border-right-style:solid;border-right-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 8pt;text-indent: 0pt;text-align: left;">Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;text-align: left;">C Link Key</p></td><td style="width:55pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">Time</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="10" height="97" alt="image" src="an1233-zigbee-security/Image_012.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s9" style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: center;">Encrypted with new Link Key</p><p class="s5" style="padding-top: 7pt;padding-left: 112pt;text-indent: 0pt;text-align: center;">Figure 2.3.  Establishing an Application Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark15">Unencrypted APS Data</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">APS layer security operates independently of network layer security. It is required for certain security messages (APS commands) sent to and from the trust center by the Zigbee stack.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Unlike network security, APS security for application messages is optional. Application messages are not automatically encrypted at the APS layer and are not ignored on the receiving side if they do not have APS encryption. Individual applications may choose whether to accept or reject messages that do not have APS layer security. For example, the Smart Energy profile describes what Zigbee Cluster messages are required to have security.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark19">Standard Security</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Overview</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Standard security, introduced in the Zigbee 2007 specification along with Zigbee PRO, is the security model being used in all Zigbee application profiles and in Zigbee 3.0. It is the only security model supported by the EmberZNet PRO stack libraries.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Standard security uses network keys and link keys to encrypt data at the network and application layers, respectively. The application support (APS) layer security allows the trust center to securely transport the network key to joining or rejoining nodes, and it optionally allows applications to add additional security to their messages. Network (NWK) layer security is used to secure all traffic sent on a Zigbee network, with the exception of basic MAC layer communication such as association, data requests (polling), and MAC ACKs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Use of Keys in Standard Security</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Standard security defines different keys used for securing data in different ways. All keys are 128-bit symmetric and may or may not be used for encrypting/decrypting packets.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l9"><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark22">Network Key</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This is the network-wide key used to secure transmissions at the network layer. Standard security requires the use of a shared network key among all devices in the network. The trust center may periodically update and switch to a new network key. The trust center may use either a broadcast update or a unicast update. In the broadcast case, the trust center first broadcasts a new network key encrypted with the old network key. In the unicast case, the trust center sends a new network key to each device encrypted with that device’s corresponding Trust Center Link Key.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In both cases, the trust center later tells all devices to switch to using the new network key. The new network key has a sequence number that is one higher than the last sequence number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark23">Trust Center Link Key</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This key (known simply as the link key) is used for secure end-to-end communications between two nodes, one of which is the trust center. The trust center link key is used in these cases:</p><ol id="l10"><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Encrypting the initial transfer of the network key to a joining node.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Encrypting an updated copy of the network key to a rejoining node that does not have the current network key.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Routers sending or receiving APS security messages to or from the trust center. These may be updates informing the trust center of a joining or rejoining node, or a command sent by the trust center to a router to perform some security function.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Application unicast messages that enable APS encryption, where either the sending or receiving device is the trust center.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The trust center has the option of deciding how to manage the trust center link keys. It may choose unique keys for each device in the network, keys derived from a common piece of shared data (the IEEE address of the device), or a global key that is the same for all devices in the network. Trust center link keys may also be negotiated at the application layer using a key establishment protocol like Certificate-Based Key Establishment (CBKE).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark24">Installation Code Keys</a><a name="bookmark43">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Zigbee 3.0 now has installation code keys, which were previously only available to Smart Energy networks. All Zigbee 3.0 certified devi- ces are required to have them, but use in the network is decided by the trust center. Smart Energy networks are required to always use them.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">An installation code key is just a preconfigured trust center link key used to enter the Zigbee network and obtain the current network key. Because this unique key must be known to both the joining device and the trust center at the time of network entry, a piece of shareable data known as the “installation code” (sometimes also referred to as the “install code”) is used to derive the key at both sides. The code can be any arbitrary value of 6, 8, 12, or 16 bytes, followed by a 16-bit CRC (least significant byte first) over those bytes.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This code is then used as the input to a Matyas-Meyer-Oseas (MMO) hash function (as specified in Zigbee Document 053474, the Zigbee Specification), with a digest size (hash length) equal to 128 bits. The 128-bit (16-byte) result of this AES-MMO hash function is used as the value for the preconfigured trust center link key for that device, and the trust center can then install a key table entry with that key and the EUI64 of the joining device, which then allows the authentication to take place successfully during joining, and the joining device can successfully receive and decrypt the network key delivery.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">As part of this process, the installation code and the joining device’s EUI64 must be conveyed out-of-band (outside of the target Zigbee network, since the new node is not yet joined) to the network’s trust center to allow the proper link key table entry to be created. This communication may involve the device installer contacting the network administrator (the party responsible for the trust center, such as a utility company) by telephone or Internet to provide the necessary information.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark25">Application Link Keys</a><a name="bookmark44">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Standard security supports devices establishing application link keys with other devices. These keys are separate from the trust center link key and not required for normal operation. They are used for APS-level encryption between two devices in the network, neither of which is the trust center.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Application link keys must be established separately from the trust center link key. Devices may not establish an application link key with the trust center. However the trust center link key can be used to APS-encrypt application messages to the trust center, or from the trust center to a device on the network.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Application link keys can be established in one of two ways:</p><ol id="l11"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Manual configuration by the application specifying the key associated with a destination device.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Through a request that the trust center generate a key and send it to both devices.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The application can manually configure a key by calling into the stack and setting one up. The partner device must also configure the application link key and negotiate with the other device when they can start using that key.</p><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark17" class="s29">Application link keys can also be established using the trust center. The EmberZNet PRO stack supports two methods for this. The first is the Zigbee standard method, discussed in section </a>2.4.2 Link Keys <a href="#bookmark18" class="s29">and illustrated in </a><a href="#bookmark18" class="a">Figure 2.3 Establishing an Application Key on </a>page 6<span style=" color: #000;">, where one device requests an application link key with another device by contacting the trust center. The trust center then immediately responds and sends a randomly generated application link key back to the requesting device and to the partner device. The drawback with having only one device request a key is that the other device may be asleep, offline, or have insufficient capacity to hold another key.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The second method, shown in the following figure, is <b>not standardized in Zigbee </b>and will be non-interoperable with other vendors’ devices. It also requires that all devices in the exchange are configured to use this method, including the trust center. It is more reliable in that it helps ensure that the partner device is online and able to receive an application link key. In this case, both devices must re- quest an application link key from the trust center. The trust center stores the first request for an application link key for a period of time defined by the trust center application. During that time, the partner must send in its own application link key request with the first de- vice as its partner. If that occurs, then the trust center generates a random application link key and sends it back to both devices. Re- quiring both devices to request an application link key greatly reduces the chance that a device or its partner will not receive the key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Device A</p><p class="s17" style="padding-top: 5pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Trust Center</p><p class="s17" style="padding-top: 5pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Device B</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="519" height="225" alt="image" src="an1233-zigbee-security/Image_013.png"/></span></p><p class="s18" style="padding-top: 5pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Request Link Key with B</p><p class="s19" style="padding-top: 8pt;padding-left: 106pt;text-indent: 0pt;line-height: 10pt;text-align: left;">APS Encrypted with Device A Trust Center</p><p class="s19" style="padding-left: 139pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Link Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Application Link Key</p><p class="s19" style="padding-top: 8pt;padding-left: 139pt;text-indent: 0pt;line-height: 10pt;text-align: center;">APS Encrypted with Device A Trust Center</p><p class="s19" style="padding-left: 181pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Link Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 7pt;padding-left: 71pt;text-indent: 0pt;text-align: left;">Request Link Key with A</p><p class="s19" style="padding-top: 8pt;padding-left: 37pt;text-indent: 0pt;line-height: 10pt;text-align: left;">APS Encrypted with Device B Trust Center</p><p class="s19" style="padding-left: 84pt;text-indent: 17pt;line-height: 184%;text-align: left;">Link Key <span style=" color: #000;">Application Link Key</span></p><p class="s19" style="padding-left: 39pt;text-indent: 0pt;line-height: 10pt;text-align: left;">APS Encrypted with Device B Trust Center</p><p class="s19" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Link Key</p><p class="s18" style="padding-top: 8pt;padding-left: 80pt;text-indent: 0pt;text-align: center;">Application Data</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 79pt;text-indent: 0pt;text-align: center;">APS Encrypted with Application Link Key</p><p class="s5" style="padding-top: 8pt;padding-left: 112pt;text-indent: 0pt;text-align: center;">Figure 3.1.  Requesting an Application Link Key with Another Device on the Network</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">EmberZNet PRO supports a configurable table for storing application link keys.</p></li></ol></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark26">Joining a Network</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A device initiates the process of joining a Zigbee standard security network by first using MAC association to join to a suitable parent device. If the association is successful, the device is joined but unauthenticated, as it does not possess the network key.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="462" height="148" alt="image" src="an1233-zigbee-security/Image_014.png"/></span></p><p class="s20" style="text-indent: 0pt;text-align: left;">MAC Association Request</p><p style="text-indent: 0pt;text-align: left;"/><p class="s21" style="text-indent: 0pt;text-align: left;">Update Device</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="text-indent: 0pt;text-align: left;">MAC Association Response</p><p style="text-indent: 0pt;text-align: left;"/><p class="s21" style="text-indent: 0pt;text-align: left;">Encrypted at Network Layer</p><p class="s21" style="padding-top: 4pt;padding-left: 8pt;text-indent: 11pt;line-height: 21pt;text-align: left;">Remove Device Encrypted at Network Layer</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="text-indent: 0pt;text-align: left;">Network Leave</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="padding-top: 7pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">Not Joined</p><p style="text-indent: 0pt;text-align: left;"/><p class="s20" style="padding-top: 3pt;padding-left: 6pt;text-indent: 8pt;text-align: left;">Joined and Unauthenticated</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Joining Device</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="padding-top: 4pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">Parent</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="padding-top: 4pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Trust Center</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">After sending the success response to the MAC association request, the router sends the trust center an Update Device message indi- cating that a new node wishes to join a Zigbee network. The trust center can then decide whether or not to allow the device to join. If the device is not allowed to join, a Remove Device request is sent to the parent, as shown in the following figure. If the device is al- lowed to join, the trust center&#39;s behavior depends upon whether the device has a preconfigured link key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Deny Join</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 159pt;text-indent: 0pt;text-align: left;">Figure 3.2. A Device that is Denied Access to Join the Network</p><p class="s20" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Time</p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="9" height="88" alt="image" src="an1233-zigbee-security/Image_015.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l12"><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark27">Preconfigured Link Keys</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The trust center dictates the policy of how to handle new devices and determines whether a device should have a preconfigured link key. If a new device does not have a preconfigured link key, it will be unable to join the network.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The trust center has the option of choosing whether that key is the well-known default link key (ZigBeeAlliance09) or a pre-shared in- stallation code key. The following figure illustrates the joining process with a preconfigured key.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">To allow a device onto the network, the trust center transmits the network key encrypted with the device&#39;s preconfigured link key. Zigbee 3.0 and all Zigbee application profiles require a preconfigured link key for joining.</p><p class="s22" style="padding-top: 4pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Trust Center</p><p class="s22" style="padding-top: 4pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">Parent</p><p class="s22" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Joining Device</p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="text-indent: 0pt;text-align: right;">Update Device</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 120pt;text-indent: 0pt;text-align: left;">Encrypted with Network Key and Link Key</p><p class="s24" style="padding-top: 4pt;padding-left: 58pt;text-indent: 2pt;line-height: 274%;text-align: left;">MAC Association Request MAC Association Response</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="468" height="161" alt="image" src="an1233-zigbee-security/Image_016.png"/></span></p><p class="s24" style="padding-top: 3pt;padding-left: 10pt;text-indent: 4pt;text-align: left;">Joined and Authenticated</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-top: 3pt;padding-left: 6pt;text-indent: 8pt;text-align: left;">Joined and Unauthenticated</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Network Key</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: center;">Send key in the</p><p class="s24" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">clear ? No</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">Allow Join</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 78pt;text-indent: 0pt;text-align: left;">Network Device</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-bottom: 4pt;padding-left: 120pt;text-indent: 0pt;text-align: left;">Time</p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span><img width="9" height="89" alt="image" src="an1233-zigbee-security/Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 5pt;padding-left: 149pt;text-indent: -7pt;text-align: left;">Tunneled Data : Encrypted with Network Key and Link Key</p><p class="s23" style="padding-top: 5pt;padding-left: 71pt;text-indent: -13pt;text-align: left;">Encrypted with Key -Transport Key , <span style=" color: #F00;">Unencrypted at NWK layer</span></p><p class="s5" style="padding-top: 7pt;padding-left: 112pt;text-indent: 0pt;text-align: center;">Figure 3.3.  Joining Using a Preconfigured Trust Center Link Key</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark28">Decision for Using Well-Known Key or Installation Code</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The choice of whether the trust center shall use a well-known key or an installation code is based on a balance between ease of use and security.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Using a well-known key enables devices to join more easily without much user interaction. However, encrypting the network key with a well-known key provides a moment of vulnerability until that well-known key is replaced with a new key.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Using an installation code provides security for the initial exchange of the network key to the device, at the cost of added interaction between the user and the trust center. A user must somehow transfer the key from the device to the trust center. This is accomplished by a mechanism outside of the Zigbee network, such as typing in the code into the trust center GUI from a label listing the code on the joining device.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The main application running on the network will help dictate whether ease of use versus better security is more important. The Zigbee standard allows either.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark29">Requesting a New Link Key after Joining</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Zigbee 3.0, devices are required to request an updated trust center link key after successfully joining. This will replace their existing preconfigured key and be used as long as they are joined to that network. Even if the device joined used an installation code key, that key will be replaced. The following figure illustrates how Zigbee 3.0 devices update the Trust Center Link Key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="606" height="353" alt="image" src="an1233-zigbee-security/Image_018.jpg"/></span></p><p class="s5" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 3.4.  Zigbee 3.0 Devices updating the Trust Center Link Key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This replacement of the key is only possible if both the Trust Center and Joining Device support Zigbee 3.0. If one of them does not, then the original joining key will be kept.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark30">Network Key Updates</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The network key encrypts all transmissions at the network layer. As a result, a local device constantly increases its local network key frame counter. Before any device in the network reaches a frame counter of all F&#39;s, the trust center should update the network key. Since it is not possible for the trust center to know the frame counter value of every device in the network at any given time, or even to inspect the frame counters of incoming messages, an approach that relies on specific frame counter thresholds is not practical. Thus, a preventative maintenance approach relying on periodic updates at long intervals, similar to what is described below, is recommended.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The recommended model is for the trust center to periodically update the network key to help minimize the risk associated with a partic- ular instance of the network key being compromised. This helps to ensure that a device that has left a secured Zigbee Network is not able to rejoin later.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Key updates may either be broadcast or unicast. The trust center decides which mechanism it wants to use. Both mechanisms are described in the sections that follow.</p><ol id="l13"><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark31">Broadcast Network Key Update</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the key update is broadcast the message is encrypted using the current network key. Devices that hear the broadcast do not immediately use the key, but simply store it. Later, a Key Switch is broadcast by the trust center to tell all nodes to start using the new key. At a minimum, the trust center should allow adequate time (approximately 9 seconds) for the broadcast of the new key to propa- gate throughout the network before switching. In addition, a trust center must keep in mind that sleeping end devices may miss the initial broadcast unless they poll frequently.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The broadcast mechanism is very simple because it does not require knowing the identity of all devices on the network. It also only involves sending two messages, an updated key message and a switch message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark32">Unicast Network Key Update</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For a unicast update the trust center will send an individual key update to each device on the network. The trust center must have been previously maintaining a list of all authorized devices on the network in order to do this.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The update message is unicast to each device with APS encryption using each device’s specific trust center link key. Later a key switch is broadcast by the trust center to tell all nodes to start using the new key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark33">Missing a Network Key Update</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">It is possible that any device may miss a key update. This may happen because it was sleeping, was powered off, or dropped off the network for an extended period of time. If this occurs, a device may try to perform a trust center rejoin. The trust center can then decide whether to allow the node back on the network.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The EmberZNet PRO stack can detect the condition where an encrypted packet arrives secured with a newer network security key. It will automatically perform a trust center rejoin to its current network to attempt to acquire the latest network key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark34">Network Rejoin</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Rejoining is a way for a node to reconnect to a network of which it was previously part. Rejoining is necessary in two different circum- stances:</p><ol id="l14"><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Mobile or sleepy devices that may no longer be able to communicate with their parent.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Devices that have missed the network key update and need an updated copy of the network key.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">Devices that have missed a PAN ID update and need to discover the network’s new PAN ID.</p></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">When a device tries to rejoin, it may or may not have the current network key. Without the correct network key, the device&#39;s request to rejoin is silently ignored by nearby routers.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Therefore, a device has two choices when rejoining: a secured rejoin or a trust center rejoin. Note that neither of these rejoin cases requires the MAC Permit Association (also known as “permit joining”) flag to be set on any devices in the target network. A router/coor- dinator device will always provisionally accept a NWK layer Rejoin command that is either a trust center rejoin or a secured rejoin with the active network key. For the trust center rejoin case it is then the trust center’s responsibility to grant or deny access once it is noti- fied of the rejoining device.</p><ol id="l15"><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark35">Secured Rejoining</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A secured rejoin is the simpler case and a device seeking to rejoin the network should try this method first. If it has the current network key, the device will be able to communicate on the network again very quickly. A secured rejoin is only necessary when a sleepy or mobile end device has lost its parent.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">As illustrated in the following figure, the device sends its rejoin request encrypted with its copy of the network key. If a router is nearby and is using the same network key, the rejoin response is sent back to the device encrypted. The device is now joined and authentica- ted on the network again. The parent that answered the rejoin request informs the trust center that the device rejoined, but no further action must be taken by the trust center.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><span><img width="635" height="149" alt="image" src="an1233-zigbee-security/Image_019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 8pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 3.5.  Secured Rejoin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">If the secured rejoin fails and the device is using standard security, the application can try an unsecured rejoin.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark36">Trust Center Rejoin</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A trust center rejoin is necessary when neighboring devices have switched to a new network key and no longer use the same network key as the rejoining device. To succeed in the trust center rejoin, the device must have a trust center link key. The device sends the rejoin request unencrypted. A nearby router accepts the unencrypted rejoin request and responds to the device, allowing it to transition to the joined and unauthenticated state.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">As illustrated in the following figure, the parent of the rejoining device sends an Update Device message to the trust center, informing it of the unsecured rejoin. The trust center has two choices: deny or accept the rejoin. If it accepts the rejoin, it must send an updated network key to the device. However, it secures this message using that device&#39;s trust center link key. The message is sent to the parent of the rejoining device encrypted at both the network and APS layers. The parent then relays this message without network encryption to the rejoining device. Once it has the network key, it will be in the joined and authenticated state and can communicate on the network again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="678" height="195" alt="image" src="an1233-zigbee-security/Image_020.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 3.6.  Trust Center Rejoin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">Important Note on allowing Trust Center Rejoins</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The decision by a Trust Center to allow a Trust Center Rejoin <b>must </b>consider whether or not a well-known link key is in use by the requesting device. If a Trust Center has only a well-known link key for the device (such as the ZigBeeAlliance09 key), it should silently ignore the rejoin request. The well-known link key is insecure and thus should not be used for transporting an important piece of data, namely the network key, during a rejoin. A well-known link key should only be used for initial joining and even then it should allowed only for a brief period of time.</p><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark51" class="s29">Pre-Zigbee 3.0 networks did not update the Link Key after joining and thus it is highly recommended to reject any attempt to rejoin with the well-known link key. Smart Energy networks are not subject to this particular issue because they update their link key after joining. (See section </a>4. Zigbee Smart Energy (ZSE) Security<span style=" color: #000;">, for more details.) Therefore, Smart Energy networks may accept Trust Center Rejoins.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The recommendation to <i>silently </i>reject the Trust Center Rejoin as opposed to <i>explicitly </i>reject the Trust Center rejoin is necessary to maintain compatibility with pre-Zigbee 3.0 devices. Pre-Zigbee 3.0 devices may try Trust Center Rejoins without considering whether an updated link key has been obtained previously. If an explicit rejection is done, the device may drop off the network entirely while a silent rejection would allow the device to try a Secure Rejoin later and succeed.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Trust Center’s behavior will ultimately determine the security of the Trust Center Rejoin attempt. This can be controlled via the <span class="s26">emberTrustCenterJoinHandler() </span>callback on the SOC or via the <span class="s26">ezspSetPolicy() </span>API configuring the EZSP_TRUST_CEN- TER_POLICY for an NCP. To silently ignore the Trust Center Rejoin on an SOC device, the <span class="s26">emberTrustCenterJoinHandler() </span>must return EMBER_NO_ACTION. To silently ignore the Trust Center Rejoin on an NCP, the host must set the EZSP_TRUST_CEN- TER_POLICY to EZSP_IGNORE_TRUST_CENTER_REJOINS.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">An End Device is advised to restrict itself to only performing Secure Rejoins if it has only a well-known link key. This is the default in the End Device Support Plugin of the latest release of EmberZNet PRO. However, as noted above, it is the Trust Center’s behavior that ultimately guarantees the safety of the network.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark37">Trust Center Decision Process Summary</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The following figure illustrates the decision tree for the trust center when a device joins the network. The parent of a joining or rejoining device sends an Update Device APS command to the trust center, indicating the event has taken place. The trust center application decides what to do based on that information. This figure describes the behavior for a Zigbee PRO device joining a Zigbee PRO network using standard security.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 11pt;text-indent: 0pt;text-align: center;">Update Device Status Codes</p><ul id="l16"><li><p class="s24" style="padding-top: 5pt;padding-left: 216pt;text-indent: -17pt;text-align: left;">Device has Left</p></li><li><p class="s24" style="padding-left: 216pt;text-indent: -17pt;text-align: left;">Secure Rejoin</p></li><li><p class="s24" style="padding-left: 216pt;text-indent: -17pt;text-align: left;">Unsecure Join /Rejoin</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="368" height="368" alt="image" src="an1233-zigbee-security/Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="145" height="107" alt="image" src="an1233-zigbee-security/Image_022.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="116" height="84" alt="image" src="an1233-zigbee-security/Image_023.png"/></span></p><p class="s24" style="text-indent: 0pt;text-align: left;">Status ?</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Device Left</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Do nothing</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 1pt;text-align: left;">Join / Rejoin</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Deny ?</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Yes</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Remove Device</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Yes</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">No</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Rejoin ?</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Yes</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">Secure ?</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">No</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">No</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 2pt;text-indent: -2pt;text-align: left;">Allow New Devices ?</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="118" height="137" alt="image" src="an1233-zigbee-security/Image_024.png"/></span></p><p class="s24" style="text-indent: 0pt;text-align: left;">Must be a Rejoin</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="text-indent: 0pt;text-align: left;">No</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 9pt;text-indent: -9pt;text-align: left;">Send NWK Key Encrypted</p><p style="text-indent: 0pt;text-align: left;"/><p class="s27" style="padding-top: 4pt;text-indent: 0pt;text-align: left;"> <span class="s28">      </span><span class="s24">Yes</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 19pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Yes</p><p style="text-indent: 0pt;text-align: left;"><span><img width="117" height="90" alt="image" src="an1233-zigbee-security/Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 27pt;text-indent: 4pt;text-align: center;">Use Pre - configured Link Key ?</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="92" height="46" alt="image" src="an1233-zigbee-security/Image_026.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 19pt;text-indent: -14pt;text-align: left;">Send NWK Key in the Clear</p><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 21pt;text-indent: 0pt;line-height: 9pt;text-align: center;">No</p><p class="s5" style="padding-top: 7pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">Figure 3.7.  Decision Process for the Trust Center</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The trust center can decide whether or not to allow devices into a Zigbee network and whether or not to send the key in-the-clear. The trust center&#39;s decision can be made based on any number of additional factors, such as a user event (button press), a time-based con- dition, IEEE address of the joining device, or some other condition (such as, the network is being commissioned).</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">When new devices join, the trust center decides whether the device should have a preconfigured key. The joining devices have no ability to inform the trust center through the Zigbee protocol about whether or not they have a preconfigured key.</p><ol id="l17"><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark38">Distributed Trust Center Mode</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Normally a joining device is authenticated by the trust center through its parent. This is advantageous, as it allows one device to act as a gatekeeper and authenticate all devices that want to join the network. Security messages are relayed to the joining device through its parent until it becomes joined and authenticated.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">However, this means that all routers must have a route to the trust center and vice versa. When applications are being developed or when commissioning a network, the trust center may not be reachable, and thus devices cannot join or perform a trust center rejoin.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The EmberZNet PRO stack allows a network to use standard security features without a trust center. This is known as distributed trust center mode. This mode is Zigbee-compliant as of Zigbee 3.0. This mode has the advantage of permitting devices to join without requir- ing the parent node to send information to the trust center and await the response. In this mode, all routers mimic the behavior of a trust center by sending the security data directly to the joining node. Each router individually decides whether or not to let the device onto the network. This mode is useful to allow commissioning of a complete network and then establishment of a trust center for security.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">In this mode, all devices use a single trust center link key is preconfigured. All devices inherit the distributed trust center setting from their parent when they join and also operate in that mode. Thus, only the device that forms the network (the coordinator) needs to be set up to run in distributed trust center mode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark39">Additional Requirements for a Trust Center</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To function correctly in a Zigbee PRO network, a trust center also requires that:</p><ol id="l18"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">The trust center application must act as a concentrator (either high or low RAM).</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">The trust center application must have support for source routing. It must record the source routes and properly handle requests by the stack for a particular source route.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -9pt;text-align: left;">The trust center application must use an address cache for security, in order to maintain a mapping of IEEE address to short ID.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Failure to satisfy all of the above requirements may result in failures when joining/rejoining devices to the network across multiple hops (through a target node that is neither the trust center nor one of its neighboring routers.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l19"><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark40">Trust Center as a Concentrator</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The trust center must act as a concentrator because Zigbee PRO Security requires two-way routes to and from the trust center in order to transmit all the security messages necessary to transition a device to the joined and authenticated state.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Routers running the EmberZNet PRO stack automatically add a route to the trust center through their parent (the device they joined to) immediately after they become joined and authenticated. This route assumes that the trust center is acting as a low RAM concentrator.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The trust center should periodically broadcast the many-to-one route message, so that all routers update their routing tables and repair broken routes to the trust center. This also allows it to notify routers if it is acting as a high RAM concentrator, thereby updating the default route.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark41">Trust Center and Source Routing</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The trust center must have support for source routing in the application. It should record the routes of incoming messages and store them in its own table. If the trust center is acting as a high RAM concentrator, it must keep track of all source routes. If the trust center is acting as a low RAM concentrator, then only the last couple of source routes must be recorded. The minimum number of entries in the source route table should be sized to support the maximum number of simultaneous security events that may occur at one time. These security events include rejoins, joins, and leaves.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In addition to storing the source routes, the trust center must also implement the proper hooks to respond to requests by the stack for a particular source route. Silicon Labs provides a source route library, which manages a source route table, and works with a trust center.</p><p class="s5" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">For EZSP host-based designs, the source route table on the host cannot be used for routing security messages sent to devices joining or rejoining the network. This is because the APS security transactions must be handled by the stack (in the network coproces- sor) without relying on application level interaction (at the host.)</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: justify;"><a name="bookmark42">Trust Center Address Cache</a></p></li></ol></li></ol></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;line-height: 182%;text-align: justify;">In order to properly decrypt APS-encrypted messages, the trust center must maintain a mapping of IEEE address to short ID. For a high RAM concentrator, the trust center must keep track of all devices in the network.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">For a low RAM concentrator, the trust center need only keep track of a couple of entries at a time and may overwrite old entries as needed. The size of the cache should be equal to the maximum number of simultaneous security events that can occur at one time. These security events include rejoins, joins, and leaves.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs provides sample code for implementing the trust center address cache mechanism on SoC platforms (See app/util/securi- ty/security-address-cache.c). The EZSP network coprocessor binaries contain the security address cache feature as part of the firm- ware, but the host application must enable this feature by setting the Trust Center Address Cache Size to a value greater than 0. (Refer to document <i>UG100: EZSP Reference Guide</i>, for details on how to do this in your EZSP host implementation.)</p><ol id="l20"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark45">Zigbee Smart Energy (ZSE) Security</a><a name="bookmark51">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;"><a href="http://www.zigbee.org/" class="s29" target="_blank">Due to the complexity of the security used in ZSE application development, this topic has been given its own section detailing the imple- mentation and design requirements and considerations. Note that more detailed information about ZSE can be found in the Zigbee Smart Energy Profile Specification, available at the </a>http://www.zigbee.org website.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l21"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark46">Overview</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The following sections explain the concepts used in ZSE to provide additional security beyond the Zigbee standard security.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><li><p class="s5" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark47">Installation Codes</a></p><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark43" class="s29">ZSE devices are required to have and use installation code keys to join the network. Trust centers are required to use them as part of the initial joining. For more information, see section </a>3.2.3 Installation Code Keys<span style=" color: #000;">. You can find more information about this process in the “Out of Band PreConfigured Link Key Process” section of the Zigbee Smart Energy Profile Specification.</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark48">Certificates and Key Establishment</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Once a device has joined to the ZSE network and obtained the network key from the trust center, the new device must then re-negoti- ate its trust center link key through certificate-based key establishment (CBKE). This takes the place of the Zigbee 3.0 link key request mechanism that a standard Zigbee 3.0 device uses.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The CBKE protocol ensures that the new link key is unrelated to the preconfigured key, ensures that the key that is random and unre- producible, and provides proof of identity by validating the authenticity of the certificates at both devices. The new link key derived from this CBKE process replaces the original, preconfigured trust center link key, such that the preconfigured key is not used again unless this new ZSE device is purged from the network and later needs to re-enter. ZSE networks require that a CBKE-based link key shall be used for unicast data communications on most ZSE clusters. (Refer to the “Cluster Usage of Security Keys” section of the Zigbee Smart Energy Profile Specification for details about which clusters require only Network layer security and which require both Network and APS layer security.)</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">CBKE is variation of Public Key-Key Establishment (PKKE, as opposed to SKKE, Symmetric Key-Key Establishment) between a pair of devices. PKKE is a process whereby a link key is established based on each party’s shared, static, public key and ephemeral, public key. Since these keys are public, they do not require secrecy in their storage and transmission. These keys by themselves (without the non-public certificate data) aren’t enough to recreate the key, so knowledge of these public keys doesn’t compromise the established link key. In CBKE, specifically, each device’s static, public key is transported as part of a device-implicit certificate signed by the send- er’s certificate authority (CA), allowing the receiver to validate the device’s identity during key establishment; this differs from traditional PKKE, where certificates are manually created.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The digital certificates used in the CBKE process are programmed into each device at manufacturing time and are issued by the CA. For the process to complete successfully, both devices must contain certificates signed by the same CA. For ZSE networks using Smart Energy 1.x protocol versions, Certicom (www.certicom.com) is the only Zigbee-approved certificate issuer. Certicom offers certifi- cates signed by either of the following CAs:</p><ul id="l23"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Test SE CA – A special certificate authority used exclusively for non-commercial testing purposes. Certificates signed by this CA are free to generate through Certicom’s website.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Production CA – The normal certificate authority used by Certicom to sign certificates for production-grade devices used in commer- cial deployments. These certificates require paid licensing terms with Certicom to generate and will not interoperate with test certifi- cates signed by the Test SE CA.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">There are actually two different certificate formats and two different elliptic curves used by the CBKE protocol. The original Smart Ener- gy 1.0 specification used the sect163k1 elliptic curve, which has a symmetric key equivalent length of 80 bits. The NIST standard rec- ommends a key strength of 128 bits for all devices deployed after 2010 (see NIST sp800-57-part1, Table 4: Recommended algorithms and minimum key sizes). Therefore, the Smart Energy 1.2 standard introduced a second elliptic curve, sect283k1, which has an equiva- lent strength of128 bits. Smart Energy labelled the certificate format and curve for the SE 1.0 release Crypto Suite 1, and labelled the certificate format for the SE 1.2 release Crypto Suite 2. Smart Energy 1.2 supports both Crypto Suite 1 and Crypto Suite 2.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Crypto Suite 1 certificate data stored on each device consist of the fields described in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 112pt;text-indent: 0pt;text-align: center;">Table 4.1.  ZSE Crypto Suite 1 Stored Certificate Fields</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">Size (bytes)</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:30pt"><td style="width:65pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">22</p></td><td style="width:68pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">CA Public Key</p></td><td style="width:407pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Public key specific to the CA who signed the certificate. During CBKE, this is used to verify the au- thenticity of the CA.</p></td></tr><tr style="height:127pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">48</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Device-Implicit Certificate</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Unique data signed by the CA (using the CA’s private key) and representing the digital certificate for this specific device. This is the portion of the certificate that is shared over the air during CBKE and contains the following subfields:</p></td></tr><tr style="height:40pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">21</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Device Private Key</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">A unique, device-specific value chosen by the CA during certificate generation. During CBKE, this is used as an input (along with the Device Public Key) to an Elliptic-Curve Cryptography (ECC) algo- rithm.</p></td></tr></table><ul id="l24"><li><p class="s31" style="padding-top: 2pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">Reconstruction data for the device’s public key (22 bytes)</p></li><li><p class="s31" style="padding-top: 3pt;padding-left: 15pt;padding-right: 3pt;text-indent: -9pt;text-align: left;">This device’s IEEE MAC address (EUI64), also known as the Subject for the certificate (8 bytes in MSB order)</p></li><li><p class="s31" style="padding-top: 2pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">Issuer ID for the CA who created this device-implicit certificate (8 bytes in MSB order)</p></li><li><p class="s31" style="padding-top: 3pt;padding-left: 15pt;padding-right: 5pt;text-indent: -9pt;text-align: left;">Profile-specific data as defined by the Zigbee application profile using the certificate. The first 2 bytes represent the 16-bit Zigbee application profile ID (in most significant byte notation), such as 0x0109 for ZSE. (10 bytes)</p></li></ul><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The Crypto Suite 2 certificate data stored on each device consist of the fields described in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 112pt;text-indent: 0pt;text-align: center;">Table 4.2.  ZSE Crypto Suite 2 Stored Certificate Fields</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">Size (bytes)</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s30" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Type</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Type of certificate. 0 = implicit, no extensions.</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">8</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SerialNo</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Serial Number of the Certificate</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Curve</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Curve identifier (sect283k1 is 0x0D)</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Hash</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Hash identifier (AES-MMO is 0x08)</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">8</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Issuer</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">8 byte identifier, 64-bit IEEE 802.15.4 address.</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">5</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ValidFrom</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">40-bit Unix time from which the certificate is valid.</p></td></tr><tr style="height:30pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ValidTo</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;padding-right: 59pt;text-indent: 0pt;text-align: left;">32-bit # seconds from the ValidFrom time for which the certificate is considered valued (0xFFFFFFFF = infinite)</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">8</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SubjectID</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">8 byte identifie, 64-bit IEEE 802.15.4 address</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">KeyUsage</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bit flag indicating key usage (0x88 = digital signature or key agreement allowed)</p></td></tr><tr style="height:19pt"><td style="width:65pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;">37</p></td><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PublicKey</p></td><td style="width:407pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">37-byte compressed public key value from which the public key of the Subject is reconstructed.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This certificate data is used at runtime to establish a shared secret (the new link key) through ECC computations along an elliptic-curve. While the computational details of the CBKE process are beyond the scope of this document, the Zigbee Cluster Library (ZCL) messag- es exchanged as part of this process are illustrated in the following figure. Additional details about this process can be found in Appen- dix C of the Zigbee Smart Energy Profile Specification. All of these messages are encrypted at the Network layer without any APS layer encryption. The Initiator in this process is typically the new device that entered the network, while the Responder is typically the trust center or Energy Services Interface (ESI) for the Home Area Network (HAN).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;"><span><img width="584" height="461" alt="image" src="an1233-zigbee-security/Image_027.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 112pt;text-indent: 0pt;text-align: center;">Figure 4.1.  Message Exchange for Certificate-Based Key Establishment</p><p class="s16" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark44" class="s29">Once the key has been established, it can be used for future ZSE-related transactions among this pair of devices. If ZSE-related com- munications is desired between another pair of devices in the HAN, the two devices can request a mutual link key by requesting one from the trust center (who is a trusted party by virtue of CBKE having succeeded). For information about third-party application link key requests, refer to section </a>3.2.4 Application Link Keys<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark49">Application Layer Requirements</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To ensure ZSE end-product compliance, ZSE devices have a number of special design requirements including the following, which make them unique from other Zigbee devices:</p><ul id="l25"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Support for CBKE, including the underlying ECC algorithm used for key generation.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Support for Elliptic-Curve Digital Signature Authentication (ECDSA), which is needed for validating firmware image data transferred in the ZSE Over-the-Air (OTA) Bootload cluster.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Pre-installed certificates issued by the proper certificate authority.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Pre-installed installation codes chosen by the manufacturer.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Access to the installation code and EUI64 during network setup (to facilitate out-of-band communication of this data to the trust cen- ter).</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">(Trust center only) Key table space sufficient to track the maximum number of ZSE devices that the HAN will support.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">(Trust center only) Support for inputting installation codes (for deriving link key values through an AES-MMO hash function) or link key values and EUI64 addresses (for creating key table entries for new devices).</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">APS data messages for certain clusters (most ZSE clusters) require APS security with an application (or trust center) link key.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Zigbee application framework ensures that the above requirements are satisfied (where applicable) when the Simplicity Studio AppBuilder tool is used to configure a ZSE device. For more information about Zigbee application framework-based development, refer to document <i>UG391: Zigbee Application Framework Developer&#39;s Guide</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark50">Additional Sources of Information</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For more information regarding ZSE security concepts, refer to the following resources:</p><ul id="l26"><li><p class="s6" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">ZSE AMI Profile Specification <a href="http://www.zigbee.org/" class="s29" target="_blank">– Zigbee document #07-5356. This is the top-level application profile specification for ZSE and is available for public (non-member) download through the www.zigbee.org</a><span class="p"> website.</span></p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">AN708: Setting Smart Energy Certificates for Zigbee Devices<span class="p">. This is an application note explains how to program the necessary manufacturing data (certificates and installation codes) into Silicon Labs chips using Silicon Labs programming tools and how to ver- ify these data once they have been programmed into the device.</span></p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">AN714: Smart Energy ECC-Enabled Device Setup Process<span class="p">. This application note describes how to set up a device with the security resources required to support Smart Energy (SE) security. While these security resources are not necessary for testing SE net- works, any devices designed to participate in or host a Zigbee-compliant, production-grade (non-test) SE network must implement these features.</span></p></li><li><p class="s6" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">UG391: Zigbee Application Framework Developer&#39;s Guide<span class="p">. This document describes the command line interface (CLI) commands available for inspecting and altering the security configuration of a Silicon Labs Zigbee application framework-based application at runtime. It also explains any callbacks or plugins used by the Zigbee application framework to implement security behavior in the application.</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s32" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s33">www.silabs.com/products</a></p><p class="s32" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s33">www.silabs.com/quality</a></p><p class="s32" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s34" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an1233-zigbee-security/Image_028.png"/></span></p><p class="s35" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s36" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s36" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.® , Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z-Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an1233-zigbee-security/Image_029.png"/></span></p><p class="s35" style="padding-top: 6pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s35" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
