<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>AN711: SPI Host Interfacing Guide for Zigbee</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s6 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s14 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s15 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s16 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt;counter-reset: d3 1; }
 #l6> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l7 {padding-left: 0pt; }
 #l7> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8 {padding-left: 0pt;counter-reset: d4 1; }
 #l8> li>*:first-child:before {counter-increment: d4; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)"."counter(d4, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l9 {padding-left: 0pt;counter-reset: g1 3; }
 #l9> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l9> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l10 {padding-left: 0pt;counter-reset: g2 2; }
 #l10> li>*:first-child:before {counter-increment: g2; content: counter(g1, decimal)"."counter(g2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 #l11 {padding-left: 0pt;counter-reset: d2 1; }
 #l11> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13 {padding-left: 0pt;counter-reset: d2 1; }
 #l13> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l14 {padding-left: 0pt;counter-reset: i1 1; }
 #l14> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 li {display: block; }
 #l15 {padding-left: 0pt;counter-reset: j1 7; }
 #l15> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l16 {padding-left: 0pt;counter-reset: j2 1; }
 #l16> li>*:first-child:before {counter-increment: j2; content: counter(j2, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l18 {padding-left: 0pt; }
 #l18> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19 {padding-left: 0pt;counter-reset: l1 9; }
 #l19> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l19> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l20 {padding-left: 0pt;counter-reset: l2 1; }
 #l20> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 li {display: block; }
 #l21 {padding-left: 0pt; }
 #l21> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 li {display: block; }
 #l22 {padding-left: 0pt;counter-reset: n1 10; }
 #l22> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l22> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l23 {padding-left: 0pt;counter-reset: n2 1; }
 #l23> li>*:first-child:before {counter-increment: n2; content: counter(n1, decimal)"."counter(n2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l24 {padding-left: 0pt;counter-reset: n3 1; }
 #l24> li>*:first-child:before {counter-increment: n3; content: counter(n3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l25 {padding-left: 0pt; }
 #l25> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26 {padding-left: 0pt;counter-reset: n3 1; }
 #l26> li>*:first-child:before {counter-increment: n3; content: counter(n3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l27 {padding-left: 0pt;counter-reset: n3 1; }
 #l27> li>*:first-child:before {counter-increment: n3; content: counter(n3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l28 {padding-left: 0pt;counter-reset: n3 1; }
 #l28> li>*:first-child:before {counter-increment: n3; content: counter(n3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt; }
 #l30> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31 {padding-left: 0pt;counter-reset: n3 1; }
 #l31> li>*:first-child:before {counter-increment: n3; content: counter(n3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l32 {padding-left: 0pt; }
 #l32> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33 {padding-left: 0pt; }
 #l33> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN711: SPI Host Interfacing Guide for Zigbee</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="1" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="213" height="1" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Physical interface</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">SPI Protocol transaction format and timing</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">SPI transaction format and timing</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Waking the NCP from sleep</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Powering on, power cycling, and rebooting</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Bootloading the NCP</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Error conditions</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Transaction examples</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document describes the EZSP-SPI Protocol that is used by a host microcontroller to communicate with a Silicon Labs Net- work Co-Processor, or NCP, running the EmberZNet PRO stack. It includes recommended procedures for developing and testing a driver for the EZSP-SPI Protocol on a new host microcontroller.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">EZSP-SPI Protocol</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">EZSP-SPI Protocol</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">The SPI protocol refers to the unique framing behavior of the SPI implementation of EZSP as opposed to UART. The EZSP protocol refers to the framing of EZSP-related commands and responses, which are encapsulated by certain SPI frames in the SPI protocol. The EZSP-SPI Protocol uses a 4-wire SPI interface to communicate between the host processor and NCP, plus an additional pair of GPIOs for handshake signaling in each direction.</p><ul id="l3"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">To the Host the NCP looks like a hardware peripheral.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The NCP is the slave device and all transactions are initiated by the Host (the master).</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The SPI interface supports a reasonably high data rate.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This document describes the current protocol versions:</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">SPI Protocol version 2 (defined by SPIP_VERSION in spi-protocol.h; unchanged for many years)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EZSP protocol version 8 (defined by EZSP_PROTOCOL_VERSION in ezsp-protocol.h; as of EmberZNet 6.7)</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h3 style="padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Physical Interface</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section describes the EZSP-SPI Protocol pin connections and how to verify them. It also provides details on the NCP’s physical interface configuration, and on low power operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">EZSP-SPI Protocol Pin Connections</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The physical pin connections are straightforward, and there is only a special recommendation for the nHOST_INT pin. nHOST_INT can be connected to any input. For interrupt-based operation, nHOST_INT must be connected to an external interrupt that can generate an interrupt on a falling edge. Furthermore, if the host intends to sleep and to be woken up by the NCP, nHOST_INT should be connected to a pin that is capable of waking the host. nHOST_INT should have a pull-up applied to it so that nHOST_INT does not bounce in an unknown state if the NCP is reset. An internal pull-up on the pin that nHOST_INT is connected to is acceptable.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Connect the three SPI signals (MOSI, MISO, and SCLK) to the host’s SPI. Connect nSSEL to any output from the host that can operate Slave Select. For many microcontrollers, nSSEL will simply be connected to a general-purpose output. Connect nWAKE and nRESET to any general-purpose output from the host (remember, the NCP supplies an internal pull-up on both the nWAKE and nRESET pins).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Verifying EZSP-SPI Protocol Pin Connections</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Once all of the signals are connected and a logic analyzer is attached, begin by pulling the nRESET signal low for a short period to reset the NCP. The required duration of the low nRESET for the EFR32 is at least 35 ns. nHOST_INT will return to idle (go high) almost immediately after reset (if it is not already). Note that nHOST_INT will not be driven high by a reset, but instead will default to an input. Therefore, if an external pull-up is not applied to nHOST_INT, it is possible for nHOST_INT to not go high immediately after reset but a short while later. During the startup sequence, the NCP will switch nHOST_INT to an output and actively drive it high. After approxi- mately 250 ms, the nHOST_INT signal will assert (go low) and stay asserted until the host initiates a transaction. The startup time of the NCP can vary widely, but 300 ms is a good rule of thumb for when nHOST_INT will assert after reset. nHOST_INT asserting after pull- ing on the nRESET pin indicates that both the nRESET pin and nHOST_INT are connected and operating correctly. If nHOST_INT is tied to an external interrupt on the host, this is also a good time to test the interrupt generation by pulling on the nRESET pin to trigger nHOST_INT assertion.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark41" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Testing the three SPI signals (MOSI, MISO, and SCLK) is best done by formulating a complete transaction. Unfortunately, the nWAKE signal cannot be used or tested until a first, complete transaction has occurred (refer to the section </a>10.3 SPI Protocol Version<span style=" color: #000;">. This is because the nHOST_INT signal must deassert after reset for a proper Wake Handshake to be performed. Once a complete transaction has finished and nHOST_INT has deasserted, nWAKE may be asserted. Approximately 140 µs after nWAKE asserts, nHOST_INT will assert in response, indicating that the nWAKE signal is connected properly.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Physical Interface Configuration</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The NCP supports both SPI Slave Mode 0 (clock is idle low, sample on rising edge) and SPI Slave Mode 3 (clock is idle high, sample on rising edge) at a maximum SPI clock rate of 5MHz, as illustrated in the following figure. The convention for the waveforms in this document is to show Mode 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: 0pt;text-align: left;"><span><img width="398" height="83" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_006.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 2.1.  SPI Transfer Format, Mode 0 and Mode 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The nHOST_INT signal and the nWAKE signal are both active low. The Host must supply a pull-up resistor on the nHOST_INT signal to prevent errant interruptions during undefined events such as the NCP resetting. The NCP supplies an internal pull-up on the nWAKE signal to prevent errant interruptions during undefined events such as the Host resetting.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Physical Interface</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_007.png"/></span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Low-Power Operation and Signal Configurations</a></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark26" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">To minimize current consumption, the host should use matching pin configurations. While the NCP supports both Mode 0 and Mode 3, the NCP uses Mode 0. This means that when the NCP is awake, the idle state of the clock is low. When the NCP is sleeping, the host needs to use a configuration that does not conflict with the NCP’s configuration to achieve the lowest power. (See also section </a><a href="#bookmark26" class="a">6. Wak- </a>ing the NCP from Sleep<span style=" color: #000;">.) The following table describes the NCP’s signal configuration in sleep.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Table 2.1.  NCP Signal Configuration in Sleep</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:207.6pt" cellspacing="0"><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">Signal</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">Configuration</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">MOSI</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">input, pullup</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">MISO</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">input, pullup</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">SCLK</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">input, pullup</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">nSSEL</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">input, pullup</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">nHOST_INT</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">Input, pullup</p></td></tr><tr style="height:19pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">nWAKE</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">Input, pullup</p></td></tr></table></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark6">SPI Protocol Transaction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Transaction Initiated by the Host</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The basic EZSP-SPI transaction is half-duplex to ensure proper framing and to give the NCP adequate response time. The basic trans- action, as shown in the following figure, is composed of three sections: Command, Wait, and Response. The transaction can be consid- ered analogous to a function call. The Command section is the function call, and the Response section is the return value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 167pt;text-indent: 0pt;text-align: left;"><span><img width="344" height="105" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 3.1.  General Timing Diagram for a SPI Transaction</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Silicon Labs recommends controlling nSSEL from the host to ensure that nSSEL is asserted at the beginning of the transaction, and stays asserted until the end of the transaction, instead of using the auto chip select function.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l6"><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark8">Command Section</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Host begins the transaction by asserting the Slave Select and then sending a command to the NCP. This command can be of any length from 2 to 136 bytes and must not begin with 0xFF. During the Command section, the NCP will respond with only 0xFF. The Host should ignore data on MISO during the Command section. Once the Host has completed transmission of the entire message, the trans- action moves to the Wait section.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Transmitting a command is a basic operation that simply requires asserting Slave Select and “dumping” the command bytes on the SPI in the most convenient method available (such as using a <span class="s9">for() </span>loop over a manual write, an interrupt-driven write, or a DMA). Once the first byte of the Response is received and the transaction has moved into the Response Section, receiving a Response is a basic, three-step operation: decode the first two bytes to determine the length of the Response, receive that precise number of bytes, and then deassert Slave Select.</p><p class="s6" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark15" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Wait section that occurs between the Command and Response sections is discussed further in section </a>3.1.2 Wait Section <span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark9">Wait Section</a><a name="bookmark15">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Wait section is a period of time during which the NCP may be processing the command or performing other operations. This sec- tion can be any length of time up to 300 ms. Because of the variable size of the Wait section, an interrupt-driven or polling-driven meth- od is suggested for clocking the SPI as opposed to a DMA method. Since the NCP can require up to 300 ms to respond, as long as the Host keeps Slave Select active, the Host can perform other tasks while waiting for a Response.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">How the Wait Section is implemented and handled requires some careful consideration of the two techniques available:</p><ul id="l7"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Clock the SPI until the NCP transmits a byte other than 0xFF (also known as polling on the SPI or polling for data) .</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Interrupt on the falling edge of nHOST_INT.</p></li></ul><ol id="l8"><li><p class="s5" style="padding-top: 8pt;padding-left: 56pt;text-indent: -32pt;text-align: left;"><a name="bookmark10">Clock the SPI (Polling for Data)</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The simplest and most straightforward method for determining when a Response is ready is to continually clock the SPI until the NCP transmits a byte other than 0xFF. When the host “clocks the SPI,” the host should simply transmit 0xFF, because transmitting 0xFF is considered an idle line. The NCP will also indicate that a Response is ready by asserting the nHOST_INT signal. The falling edge of nHOST_INT is the indication that a Response is ready. Once the nHOST_INT signal asserts, nHOST_INT will return to idle after the Host begins to clock data.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The major advantage of polling for data is that the simplicity of polling requires very little code space, and in most cases this can be implemented using either a <span class="s9">while() </span>or a <span class="s9">do{}while </span>loop. The disadvantage of polling for data is the blocking nature of polling. Be- cause transactions must occur serially (meaning a transaction must complete before another transaction can begin), the blocking na- ture of polling for data is usually only an issue if the host needs to perform tasks not related to EmberZNet PRO.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For example, if the host captures a button press and must send a message over the network in response to the button press, blocking in a polling loop is not a critical issue because of the serial nature of the transaction. Conversely, if the host must periodically take an ADC measurement and perform calculations based on the measurement, then blocking in a polling loop might not be desirable.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Because the host is the SPI Master, there are essentially no timing requirements dictating when or how often the host should clock the SPI (the most important requirement is to keep transactions moving quickly so that messages do not back up in the NCP’s buffers). Therefore, the host can clock the SPI at its convenience, which means that a developer can choose to implement the simplest solution possible and sit in a <span class="s9">while() </span>loop waiting for a response. The developer can also choose a more advanced solution: for the host to poll periodically for a response while allowing other tasks to execute on the host. Knowing that the Wait Sections of many transactions can be milliseconds long, the developer may decide to clock the SPI and check for a response only once every millisecond.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends choosing the simplest solution possible in the context of the host’s resources and other requirements. During development, starting with the simplest blocking <span class="s9">while() </span>loop is an easy solution that can be expanded and customized as develop- ment progresses.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 5pt;padding-left: 56pt;text-indent: -32pt;text-align: left;"><a name="bookmark11">Interrupt on the Falling Edge of nHOST_INT</a></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark16" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">As detailed in section </a>3.1.3 Response Section<span style=" color: #000;">, the falling edge of the signal nHOST_INT indicates that a Response is ready when the falling edge occurs while Slave Select is asserted. Instead of clocking the SPI (either by completely blocking or periodically polling) and waiting for a response, the host can be configured to interrupt on the falling edge of nHOST_INT. Once the host sees a falling edge on nHOST_INT, it must still clock the SPI until data other than 0xFF is received. The major advantage to interrupting on nHOST_INT is the ability of the host to perform other tasks while waiting for a response. The major disadvantage to interrupting on nHOST_INT is the potential for accidentally starting a new transaction before the previous transaction has completed. Remember, because a new transac- tion cannot begin until the previous transaction has completed, be careful not to accidentally overlap transactions.</span></p><p class="s5" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The host should not poll on the level of the nHOST_INT signal. Despite nHOST_INT remaining low until the host performs an action, only the falling edge of nHOST_INT can be trusted to properly indicate data. The NCP will carefully schedule the falling edge of nHOST_INT, but due to latency it cannot guarantee exactly when the nHOST_INT signal will return to idle after the host performs an action.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark12">Response Section</a><a name="bookmark16">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the NCP transmits a byte other than <span class="s9">0xFF</span>, the transaction has officially moved into the Response section. The NCP signals its readiness to enter the Response section by asserting nHOST_INT after a command from the host has been fully processed. The data format is the same format used in the Command section. The response can be of any length from 2 to 136 bytes and must not begin with <span class="s9">0xFF</span>. Depending on the actual response, the length of the response is known from the first or second byte. This length should be used by the Host to clock out exactly the correct number of bytes.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Once all bytes have been clocked, the Host is allowed to deassert chip select. Since the Host is in control of clocking the SPI, no ACKs or similar signals are needed back from the Host because the NCP assumes the Host could accept the bytes being clocked on the SPI. After every transaction, the Host must hold the Slave Select high for a minimum of 1 ms. This timing requirement is called the inter- command spacing and is necessary to allow the NCP to process a command and become ready to accept a new command.</p><ol id="l9"><ol id="l10"><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Transaction Initiated by the NCP</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the NCP has data to send to the Host outside of a command/response transaction (Slave Select is idle), it will assert the nHOST_INT signal to indicate asynchronous data waiting in the NCP for the host. The nHOST_INT signal is designed to be an edge- triggered signal as opposed to a level-triggered signal; therefore, the falling edge of nHOST_INT is the true indicator of data availability. The Host then has the responsibility to initiate a transaction to ask the NCP for its output. The Host should initiate this transaction as soon as possible to prevent possible backup of data in the NCP. The NCP will deassert the nHOST_INT signal after receiving a byte on the SPI. Due to inherent latency in the NCP, the timing of when the nHOST_INT signal returns to idle can vary between transactions. nHOST_INT will always return to idle for a minimum of 25 µs before asserting again. If the NCP has more output available after the transaction has completed, the nHOST_INT signal will assert again after Slave Select is deasserted and the Host must make another request.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Remember, the host should <i>not </i>poll on the level of the nHOST_INT signal. Instead, the host should assign an interrupt to nHOST_INT and use the falling edge (the interrupt) to set a flag or some similar marker. This way, the EZSP implementation on the host can regu- larly poll on the flag outside of the interrupt context and trigger the EZSP Callback command.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For more advanced functionality, you can connect nHOST_INT to a pin that is capable of waking the host from sleep, and therefore enter a low power mode, while waiting for any incoming data, like a normal asynchronous callback.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Care must be taken when enabling an interrupt on nHOST_INT so that the proper piece of code is executed. nHOST_INT is capable of indicating three different situations (wake, callback, and response), and these situations are best indicated by the current state of the nSSEL and nWAKE pins.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Unexpected Resets</a></p></li></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The NCP is designed to protect itself against undefined behavior due to unexpected resets. The protection is based on the state of Slave Select since the inter-command spacing mandates that Slave Select must return to idle. The NCP’s internal SPI Protocol uses Slave Select returning to idle as a trigger to reinitialize its SPI Protocol. By always reinitializing, the NCP is protected against the Host unexpectedly resetting or terminating a transaction. Additionally, if Slave Select is active when the NCP powers on, the NCP will ignore SPI data until Slave Select returns to idle. By ignoring SPI traffic until idle, the NCP will not begin receiving in the middle of a transac- tion.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If the Host resets, in most cases it should also reset the NCP so that both devices are once again in the same state: freshly booted.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If the NCP resets during a transaction, the Host can expect either a Wait Section timeout or a missing Frame Terminator indicating an invalid Response.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">If the NCP resets outside of a transaction, the Host should proceed normally.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark17">SPI Protocol Data Format</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Data Format</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The data format, also referred to as a <i>command</i>, is the same for both the Command section and the Response section. The data format of the SPI Protocol is straightforward, as illustrated in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="539" height="29" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_009.jpg"/></span></p><p class="s5" style="padding-top: 8pt;padding-left: 130pt;text-indent: 0pt;text-align: center;"><a name="bookmark20">Figure 4.1.  EZSP-SPI Protocol Data Format</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">The total length of a command must not exceed 136 bytes.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">All commands must begin with the <b>SPI Byte</b>. Some commands are only two bytes—that is, they contain the SPI Byte and Frame Termi- nator only.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <b>Length Byte </b>is only included if there is information in the Payload Frame and the Length Byte defines the length of just the Pay- load Frame. Therefore, if a command includes a Payload Frame, the Length Byte can have a value from 3 through 133 and the overall command size will be from 6 through 136 bytes. The SPI Byte can be a specific value indicating if there is a Payload Frame or not. If there is a Payload Frame, then the Length Byte can be expected.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The <b>Error Byte </b>is used by the error responses to provide additional information about the error and appears in place of the length byte. This additional information is described in the following sections.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The <b>Payload Frame </b>contains the data needed for operating EmberZNet PRO. The EZSP Frame and its format are explained in <i>UG100: EZSP Reference Guide</i>. The Payload Frame may also contain the data needed for operating the bootloader, which is called a Bootloader Frame. Refer to <i>UG103.6: Bootloading Fundamentals</i>, for more information on the bootloader.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <b>Frame Terminator </b>is a special control byte used to mark the end of a command. The Frame Terminator byte is defined as 0xA7 and is appended to all Commands and Responses immediately after the final data byte. The purpose of the Frame Terminator is to provide a known byte the SPI Protocol can use to detect a corrupt command. For example, if the NCP resets during the Response Section, the Host will still clock out the correct number of bytes. But when the host attempts to verify the value 0xA7 at the end of the Response, it will see either the value 0x00 or 0xFF and know that the NCP just reset and the corrupt Response should be discarded.</p><p class="s5" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The Length Byte only specifies the length of the Payload Frame. It does not include the Frame Terminator.</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: justify;"><a name="bookmark19">SPI Bytes</a><a name="bookmark21">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">There are four primary SPI Bytes: SPI Protocol Version, SPI Status, Bootloader Frame, and EZSP Frame.</p><ul id="l12"><li><p class="s5" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">SPI Protocol Version [0x0A]: <span class="p">Sending this command requests the SPI Protocol Version number from the SPI Interface. The re- sponse will always have bit 7 set and bit 6 cleared. In this current version, the response will be 0x82, because the version number corresponding to this set of Command-Response values is version number 2. The version number can be a value from 1 to 63 (0x81–0xBF).</span></p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">SPI Status [0x0B]: <span class="p">Sending this command asks for the NCP status. The response status byte will always have the upper 2 bits set. In this current version, the status byte only has one status bit [0], which is set if the NCP is alive and ready for commands.</span></p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;"><b>Bootloader Frame [0xFD]: </b><a href="#bookmark20" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This byte indicates that the current transaction is a Bootloader transaction and there is more data to follow. This SPI Byte will cause the transaction to look like the full data format illustrated in </a><a href="#bookmark20" class="a">Figure 4.1 EZSP-SPI Protocol Data For- mat on page </a><span style=" color: #049;">8</span>. The byte immediately after this SPI Byte will be a Length Byte, and it is used to identify the length of the Bootloader Frame. Refer to <i>UG103.6: Bootloading Fundamentals</i>, for more information on the bootloader. If the SPI Byte is 0xFD, the minimum transaction size is 4 bytes.</p></li><li><p class="s5" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">EZSP Frame [0xFE]: <a href="#bookmark20" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This byte indicates that the current transaction is an EZSP transaction and there is more data to follow. This SPI Byte will cause the transaction to look like the full data format illustrated in </a><a href="#bookmark20" class="a">Figure 4.1 EZSP-SPI Protocol Data Format on </a><a href="#bookmark20">page</a></p></li></ul><p style="padding-left: 36pt;text-indent: 0pt;text-align: justify;"><span style=" color: #049;">8</span>. The byte immediately after this SPI Byte will be a Length Byte, and it is used to identify the length of the EZSP Frame. The EZSP Frame is defined in document <i>UG100: EZSP Reference Guide</i>. If the SPI Byte is 0xFE, the minimum transaction size is six bytes.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Only five SPI Byte values, 0x00–0x04, are ever used as error codes (see the following table). When the error condition occurs, any command sent to the NCP will be ignored and responded to with one of these codes. These special SPI Bytes must be trapped and dealt with. In addition, for each error condition, the Error Byte (instead of the Length Byte) is also sent with the SPI Byte. See section</p><p class="s6" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">9.1 Error Bytes <span style=" color: #000;">for more information.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following table summarizes the possible commands and their responses in the SPI Byte.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Table 4.1.  SPI Commands and Responses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:30pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Command Value</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Command</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">Response Value</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Response</p></td></tr><tr style="height:51pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x00</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark28" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">NCP reset occurred. See section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">7. Powering On, Power Cycling, and Rebooting</span>. This is never used in another Response; it always indicates an NCP Reset. Error byte: The reset type. For an enumeration of these reset causes, refer to base/hal/ micro/generic/em2xx-reset-defs.h .</p></td></tr><tr style="height:51pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x01</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Oversized Payload Frame received. The command contained an EZSP frame with a Length Byte greater than 133. The NCP was forced to drop the entire command. This is never used in another Response; it always indicates an overflow occurred. Error byte: reserved.</p></td></tr><tr style="height:40pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x02</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Aborted Transaction occurred. The transaction was not completed properly and the NCP was forced to abort the transaction. This is never used in another Response; it always indicates an aborted transaction occurred. Error byte: reserved</p></td></tr><tr style="height:51pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x03</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Missing Frame Terminator. The command was missing the Frame Terminator. The NCP was forced to drop the entire command. This is never used in another Re- sponse; it always indicates a Missing Frame Terminator in the Command. Error byte: reserved</p></td></tr><tr style="height:51pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Any</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x04</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Unsupported SPI Command. The command contained an unsupported SPI Byte. The NCP was forced to drop the entire command. This is never used in another Response; it always indicates an unsupported SPI Byte in the Command. Error byte: reserved.</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x00 – 0x09</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">[none]</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">[none]</p></td></tr><tr style="height:30pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0A</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">SPI Protocol Version</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x81 – 0xBF</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bit[7] is always set. bit[6] is always cleared. bit[5:0] is a number from 1 to 63.</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0B</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SPI Status</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xC0 – 0xC1</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bit[7] is always set. bit[6] is always set. bit[0]—Set if alive and ready for commands.</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x0C – 0xFC</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">[none]</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">[none]</p></td></tr><tr style="height:30pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFD</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;padding-right: 26pt;text-indent: 0pt;text-align: left;">Bootloader Frame</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFD</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bootloader Frame</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:30pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Command Value</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Command</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">Response Value</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Response</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFE</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EZSP Frame</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFE</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EZSP Frame</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFF</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Invalid</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0xFF</p></td><td style="width:338pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Invalid</p></td></tr></table><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">SPI Protocol Timing</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_010.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark22">SPI Protocol Timing</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following figure illustrates all critical timing parameters in the SPI Protocol. These timing parameters are a result of the NCP’s inter- nal operation and both constrain Host behavior and characterize NCP operation. The parameters shown are discussed elsewhere in this document. Note that this figure is not drawn to scale, but is instead drawn only to illustrate where the parameters are measured.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;"><span><img width="580" height="166" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 5.1.  SPI Protocol Timing Waveform</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l13"><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark23">Inter-Command Spacing</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The inter-command spacing is a simple time requirement needed to guarantee that the NCP has finished processing a transaction and is ready to accept a new transaction. To ensure that the NCP is always able to deal with incoming commands, a minimum inter-com- mand spacing is defined at 1 ms between the rising edge of Slave Select (ending transaction) and the falling edge of Slave Select (starting transaction). After every transaction, the Host must hold the Slave Select high for a minimum of 1 ms. The Host must respect the inter-command spacing requirement, or the NCP will not have time to operate on the command; additional commands could result in error conditions or undesired behavior. If the nHOST_INT signal is not already asserted, the Host is allowed to use the Wake hand- shake instead of the inter-command spacing to determine if the NCP is ready to accept a command.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If the host is capable of blocking for 1 ms, the simplest solution is to simply burn CPU cycles for 1 ms after deasserting Slave Select. Since burning CPU cycles for 1 ms is often undesirable, Silicon Labs recommends using a simple timer. By setting or starting a timer when Slave Select is deasserted, the host can perform other tasks during the inter-command spacing. If a timer is used, the host must guarantee that any and all attempts at starting a new transaction are either blocked or stalled until the timer has expired. Once the timer has expired, the host may assert Slave Select and begin a new transaction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark24">Interfacing EZSP to the EZSP-SPI Protocol</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Due to the serial nature of the EZSP (that is, transactions must occur in sequence instead of overlapping), Silicon Labs recommends that the EZSP interface into the SPI Protocol through a polling driven mechanism. For example, after calling a function <span class="s9">sendCommand()</span>, the EZSP could continually call a function <span class="s9">pollForResponse()</span>. Otherwise, the EZSP implementation should be carefully coded to pre- vent the host from accidentally overlapping transactions.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If the host’s EZSP-SPI Protocol is implemented using interrupts, the host should be careful to never perform a transaction inside of an interrupt context. This is especially important because a transaction or a wake handshake could require up to 300 ms each.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Waking the NCP from Sleep</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_012.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark25">Waking the NCP from Sleep</a><a name="bookmark26">&zwnj;</a></h3></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="208" height="42" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_013.jpg"/></span></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Waking up the NCP involves a simple handshaking routine as illustrated in the following figure. This handshaking ensures that the Host will wait until the NCP is fully awake and ready to accept commands from the Host. If the NCP is already awake when the handshake is performed (such as when the Host resets and the NCP is already operating), the handshake will proceed as described below with no ill effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 24pt;text-indent: 199pt;line-height: 23pt;text-align: left;">Figure 6.1. NCP Wake Sequence Note: <span class="p">A wake handshake cannot be performed if nHOST_INT is already asserted.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark30" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">nWAKE should not be asserted after the NCP has been reset until the NCP has fully booted, as indicated by the NCP asserting nHOST_INT. If nWAKE is asserted during this boot time, the NCP may enter bootloader mode. Refer to section </a><a href="#bookmark30" class="a">8. Bootloading the </a>NCP <span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Waking the NCP should be a straightforward implementation that only requires you to choose between a polling or an interrupt mecha- nism for knowing when the NCP is ready (much like the rest of the EZSP-SPI Protocol). After asserting the nWAKE signal, the host should either poll for a falling edge of nHOST_INT or set up for an interrupt on the falling edge. As soon as the edge is seen, the host should deassert nWAKE and continue operating the EZSP as desired.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The only major caveat, is to make sure the proper piece of code gets triggered in response and to not perform further EZSP operations inside of interrupt context.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Waking the NCP involves the following steps:</p><ol id="l14"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Host asserts nWAKE.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">NCP interrupts on nWAKE and exits sleep.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">NCP performs all operations it needs to and will not respond until it is ready to accept commands.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">NCP asserts nHOST_INT within 300 ms of nWAKE asserting.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">If the NCP does not assert nHOST_INT within 300 ms of nWAKE, it is valid for the Host to consider the NCP unresponsive and to reset the NCP.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Host detects nHOST_INT assertion. Because the assertion of nHOST_INT indicates the NCP can accept SPI transactions, the Host does not need to hold Slave Select high for the normally required minimum 1 ms of inter-command spacing.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Host deasserts nWAKE after detecting nHOST_INT assertion.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">NCP will deassert nHOST_INT within 25 μs of nWAKE deasserting.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">After 25 μs, any change on nHOST_INT will be an indication of a normal asynchronous (callback) event.</p></li></ol><p class="s4" style="padding-bottom: 3pt;padding-left: 366pt;text-indent: 0pt;text-align: left;">Powering On, Power Cycling, and Rebooting</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_014.png"/></span></p><ol id="l15"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark27">Powering On, Power Cycling, and Rebooting</a><a name="bookmark28">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">When the Host powers on (or reboots), it cannot guarantee that the NCP is awake and ready to receive commands. Therefore, the Host should always perform the Wake NCP handshake to guarantee that the NCP is awake. If the NCP resets, it needs to inform the Host so that the Host can reconfigure the stack if needed.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the NCP resets, it will assert the nHOST_INT signal, telling the Host that it has data. The Host should request data from the NCP as usual. The NCP will ignore whatever command is sent to it and respond only with two bytes. The first byte will always be <span class="s9">0x00 </span>and the second byte will be the reset type as defined by <span class="s9">platform/base/hal/micro/generic/em2xx-reset-defs.h</span>. This specialty SPI Byte is never used in another Response SPI Byte. If the Host sees <span class="s9">0x00 </span>from the NCP, it knows that the NCP has been reset. The NCP will deassert the nHOST_INT signal shortly after receiving a byte on the SPI and process all further commands in the usual man- ner. In addition to the Host having control of the reset line of the NCP, the EmberZNet Serial Protocol also provides a mechanism for a software reboot.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When the host resets, it is far simpler to reset the NCP and begin from a known state than to try to recover and resync with the previous (unknown) state of the NCP. The recommended procedure when the host resets is to perform a Hard Reset of the NCP during bootup. A Hard Reset is defined as the following sequence:</p><ol id="l16"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Toggle nRESET (active low) to reset the NCP.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for nHOST_INT to assert, which indicates that the NCP is active.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Perform an EZSP-SPI Protocol Version transaction and verify that the Response from the NCP is the NCP Reset error condition.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Perform an EZSP-SPI Protocol Version transaction and verify that the EZSP-SPI Protocol Version number is as expected.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Perform an EZSP-SPI Status transaction and verify that the NCP is “Alive” and ready to accept commands.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of performing this Hard Reset on bootup is threefold.</p><ul id="l17"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">By guaranteeing that the NCP is freshly booted, just like the host, the host can proceed with standard node and network initialization instead of consuming extra code space just trying to determine what state the NCP was left in.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Because the NCP generates the NCP Reset error, which will override any legitimate transaction Response, the Hard Reset can ac- knowledge this planned and expected error condition so that the EZSP or full application does not have to implement special han- dling. Therefore, whenever an NCP Reset error is experienced outside of a Hard Reset, it can be treated as a true unexpected error condition.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">The EZSP-SPI Protocol Version and EZSP-SPI Status transactions are specialized transactions not implemented or used by the normal EZSP. These transactions are intended to be utility devices that allow the host to perform a simple “handshake” with the NCP. This handshake not only verifies that the NCP is alive and available to the EZSP, but also that the EZSP-SPI Protocol imple- mented in the NCP is compatible with the EZSP-SPI Protocol implemented on the host.</p><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Bootloading the NCP</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_015.png"/></span></p></li></ul></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark29">Bootloading the NCP</a><a name="bookmark30">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The SPI Protocol supports a Payload Frame called the Bootloader Frame for communicating with the NCP when the NCP is in boot- loader mode. The NCP can enter bootload mode through either an EZSP command or a recovery pin low while the NCP exits reset. In the Gecko Bootloader, a recovery pin can be defined in the board configuration to initiate bootloader mode. While nWAKE is the default for that function, it can be defined to be any valid GPIO pin. The pin definition method for the Gecko Bootloader is through BTL_GPIO_ACTIVATION_PORT/PIN/POLARITY set through the Gecko Bootloader’s “EZSP GPIO Activation” plugin.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Assert nRESET to hold the NCP in reset. While nRESET is asserted, assert (active low) nWAKE and then deassert nRESET to boot the NCP. Do not deassert nWAKE until the NCP asserts nHOST_INT, indicating that the NCP has fully booted and is ready to accept data over the SPI Protocol. Once nHOST_INT is asserted, nWAKE may be deasserted. Refer to <i>UG100: EZSP Reference Manual </i>for more information on the bootloader and the format of the Bootloader Frame.</p></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark31">Error Conditions</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">The error conditions encountered by the host are exactly that: errors. These errors are not meant to be encountered in a mature prod- uct and are primarily used as development and debugging aids. If the host experiences an error condition, chances are the host and the NCP are out of sync, and the code needed to recover would be exceptionally error prone. Therefore, it is reasonable for the host to treat all error conditions or timeouts in the same way as asserts, and simply reset both the host and the NCP.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">There is one common exception to this rule: When the host <i>intentionally </i><a href="#bookmark28" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">resets the NCP (for example, as described in section </a><a href="#bookmark28" class="a">7. Power- </a><span style=" color: #049;">ing On, Power Cycling, and Rebooting</span>), the host must expect the NCP Reset error condition to occur on the next transaction. This error condition should be observed and discarded as expected and normal.</p><p class="s5" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The application must be careful not to interfere with any operation that loads firmware onto the NCP (for example, bootloading). The recommended practice is for the host to have access to and control of the NCP’s nRESET signal, and to toggle nRESET if an error condition occurs. When the NCP is being loaded with new firmware, it will not be capable of responding to the host; the host may think the NCP is unresponsive and attempt to reset it, which will disrupt the loading of new firmware. You should consider the best method to avoid resetting the NCP in this situation. Some options include:</span></p><ul id="l18"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Putting the application in some mode where it leaves the NCP alone.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Holding the host in reset, bootloader, or some other innocuous mode.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Disabling the host’s access to the nRESET line on the NCP.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Physically disconnecting nRESET.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If two or more different error conditions occur back to back, only the first error condition will be reported to the Host (if it is possible to report the error). The following are error conditions that might occur with the NCP.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Unsupported SPI Command: <span class="p">If the SPI Byte of the command is unsupported, the NCP will drop the incoming command and respond with the Unsupported SPI Command Error Response. This error means the SPI Byte is unsupported by the NCP’s current Mode. Boot- loader Frames can only be used with the bootloader, and EZSP Frames can only be used with the EZSP.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Oversized Payload Frame: <span class="p">If the transaction includes a Payload Frame, the Length Byte cannot be a value greater than 133. If the NCP detects a length byte greater than 133, it will drop the incoming Command and abort the entire transaction. The NCP will then assert nHOST_INT after Slave Select returns to Idle to inform the Host through an error code in the Response section what has hap- pened. The NCP not only drops the Command in the problematic transaction, but the next Command is also dropped because it is responded to with the Oversized Payload Frame Error Response.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Aborted Transaction: <span class="p">An aborted transaction is any transaction where Slave Select returns to Idle prematurely and the SPI Protocol dropped the transaction. The most common reason for Slave Select returning to Idle prematurely is the Host unexpectedly resetting. If a transaction is aborted, the NCP will assert nHOST_INT to inform the Host through an error code in the Response section what has happened. When a transaction is aborted, the NCP not only drops the Command in the problematic transaction, but the next Command also gets dropped because it is responded to with the Aborted Transaction Error Response.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Missing Frame Terminator: <span class="p">Every Command and Response must be terminated with the Frame Terminator byte. The NCP will drop any Command that is missing the Frame Terminator. The NCP will then immediately provide the Missing Frame Terminator Error Re- sponse.</span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><b>Long Transaction: </b>A Long Transaction error occurs when the Host clocks too many bytes. As long as the inter-command spacing requirement is met, this error condition should not cause a problem because the NCP will send only <span class="s9">0xFF </span>outside of the Response section and ignore incoming bytes outside of the Command section.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Unresponsive: <span class="p">Unresponsive can mean the NCP is not powered, not fully booted yet, incorrectly connected to the Host, or busy per- forming other tasks. The Host must wait the maximum length of the Wait section before it can consider the NCP unresponsive to the Command section. This maximum length is 300 ms, measured from the end of the last byte sent in the Command section. If the NCP ever fails to respond during the Wait section, it is valid for the Host to consider the NCP unresponsive and to reset the NCP. Additional- ly, if nHOST_INT does not assert within 300 ms of nWAKE asserting during the wake handshake, the Host can consider the NCP unre- sponsive and reset the NCP.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l19"><ol id="l20"><li><p class="s5" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark32">Error Bytes</a><a name="bookmark34">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark21" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">As described in section </a><span style=" color: #049;">4.2 SPI Bytes</span>, five SPI Bytes indicate error conditions. When implementing the code to receive a Response from the NCP, the host must be capable of parsing the SPI Byte as soon as possible for any of these error conditions. The host must continue to receive the entire error before deasserting Slave Select and processing the error. With the exception of an <i>intentional </i>NCP Reset error condition, the host should report, through a <span class="s9">printf </span>or other simple method, these four errors to the developer for debug- ging purposes, but should ultimately result in an assert or similar reset mechanism.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark33">Timeouts</a></p></li></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The host can experience only two timeouts: Wait Section and Wake Handshake. Just like the Error Bytes, if either of these timeouts occurs, the application should report them to the developer for debugging purposes, but should ultimately result in an assert or similar reset mechanism.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The timeouts are best measured using a timer, but if necessary the host can simply burn a known amount of CPU cycles while waiting for either normal operation to resume or the limit of allowable CPU cycles. For the Wait Section Timeout, the time is measured from the end of the last byte transmitted in the Command to the start of the first byte received that is not 0xFF. For the Wake Handshake Time- out, the time is measured from the falling edge of nWAKE to the falling edge of nHOST_INT.</p></li><li><h3 style="padding-top: 7pt;padding-left: 45pt;text-indent: -21pt;text-align: left;"><a name="bookmark35">Transaction Examples</a></h3></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">This section contains the following transaction examples:</p><ul id="l21"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">SPI Protocol Version</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EmberZNet Serial Protocol Frame—Version Command</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">NCP Reset</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">EZSP-SPI status</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Three-Part Transaction: Wake, Get Version, Stack Status Callback</p></li></ul><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>The specific bytes of the EZSP portion of the frame examples below may vary among stack releases and especially among EZSP protocol versions. To confirm the EZSP frame format expected by your NCP firmware, please refer to the “Protocol Format” sec- tion of <i>UG100: EZSP Reference Guide </i>from the specific EmberZNet release corresponding to your NCP’s firmware build.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l22"><ol id="l23"><li><p class="s5" style="padding-left: 46pt;text-indent: -22pt;text-align: left;"><a name="bookmark36">NCP Reset</a></p><p class="s5" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note: <a href="#bookmark41" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The following steps begin by resetting the NCP to guarantee that it is in a known state. The NCP resetting is an error and results in the first transaction performed after a reset returning the reset error. These steps describe receiving this reset error instead of the EZSP-SPI Protocol Version. The EZSP-SPI protocol version transaction is described in section </a><span class="s6">10.3 SPI Protocol Version</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 152pt;text-indent: 0pt;text-align: left;"><span><img width="385" height="115" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 10.1.  NCP Reset Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Assert nRESET and release, which toggles active low to reset the NCP and guarantee it is in a known status..</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">nWAKE stays idle high between nRESET and nHOST_INT indicating the NCP should continue with normal booting (do not enter the bootloader).</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">nHOST_INT asserts, indicating that the NCP is active.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Assert nSSEL to begin a transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the command:</p><ul id="l25"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xFE: SPI Byte indicating an EZSP Frame</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x05: Length Byte showing the EZSP Frame is 5 bytes long</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Sequence Byte (Note that this value should vary based upon previous sequence bytes)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Frame Control Low Byte indicating a command with no sleeping</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x01: EZSP Frame Control High Byte indicating the frame version is 1 and not using an encrypted EZSP connection</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x0600: EZSP Frame ID (2 bytes) indicating the callback command (sending the low byte first, so the EZSP Frame ID is 0x0006)</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xA7: Frame Terminator</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for nHOST_INT to assert.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit and receive 0xFF until a byte other than 0xFF is received.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Receive response 0x00 (a byte other than 0xFF).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Receive the Error Byte and decode (0x02 is enumerated as RESET_POWERON).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Receive the Frame Terminator (0xA7).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Response 0x00 indicates the NCP has reset and the Host should respond appropriately.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Deassert nSSEL to finish the transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Since nHOST_INT does not assert again, there is no more data for the Host.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 46pt;text-indent: -22pt;text-align: left;"><a name="bookmark37">EZSP-SPI Status</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The EZSP-SPI Status transaction is very similar to the EZSP-SPI Protocol Version transaction. Like the EZSP-SPI Protocol Version transaction, this transaction provides a simple example of interaction with the NCP. Silicon Labs recommends this as a test transaction to verify the connection with the NCP during the host’s boot sequence.</p><ol id="l26"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Assert nSSEL to begin a transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit 0x0B.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Continually transmit 0xFF until the byte received is not 0xFF. The first byte received that is not 0xFF will be 0xC1.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit 0xFF while receiving 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Deassert nSSEL to finish the transaction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-top: 5pt;padding-left: 46pt;text-indent: -22pt;text-align: left;"><a name="bookmark38">SPI Protocol Version</a><a name="bookmark41">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Obtaining the EZSP-SPI Protocol Version is a compact, simplified, and special transaction that illustrates a full transaction. Being able to properly obtain the EZSP-SPI Protocol Version not only verifies five of the seven interface pins (MOSI, MISO, SCLK, nSSEL, and nHOST_INT), but it is also useful as a test for verifying that the NCP is active and that the EZSP-SPI Protocol code being implemented on the host is compatible with the firmware on the NCP. Use this transaction to verify the connection with the NCP during the host’s boot sequence.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 188pt;text-indent: 0pt;text-align: left;"><span><img width="288" height="118" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_017.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 4pt;padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 10.2.  SPI Protocol Version Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l27"><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Activate Slave Select (nSSEL).</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the command 0x0A - SPI Protocol Version Request.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the Frame Terminator, 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for nHOST_INT to assert.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit and receive 0xFF until a byte other than 0xFF is received.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Receive response 0x82 (a byte other than 0xFF), then receive the Frame Terminator, 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Bit 7 is always set and bit 6 is always cleared in the Version Response, so this is Version 2.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Deactivate Slave Select.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 46pt;text-indent: -22pt;text-align: left;"><a name="bookmark39">EmberZNet Serial Protocol Frame—Version Command</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Before implementing a generic EZSP-SPI Protocol on the host, Silicon Labs recommends explicitly coding a transaction for providing exposure to an EZSP Frame and the format of the data involved with an EZSP Frame. The EZSP Frame used in this transaction is the VERSION command. The VERSION command must be the first EZSP command issued to the NCP. It exercises the code path all the way through the NCP firmware. Therefore, this command is useful not only for verifying that the EZSP is active, but also for illustrating the implementation of an EZSP transaction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="729" height="113" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 10.3.  EmberZNet Serial Protocol Frame - Version Command Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l28"><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Assert nSSEL to begin a transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the appropriate command:</p><ul id="l29"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xFE: SPI Byte indicating an EZSP Frame</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x06: Length Byte showing the EZSP Frame is 6 bytes long</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Sequence Byte (Note that this value should vary based upon previous sequence bytes)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Frame Control Low Byte indicating a command with no sleeping</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x01: EZSP Frame Control High Byte indicating the frame version is 1 and not using an encrypted EZSP connection</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x0000: EZSP Frame ID (2 bytes) indicating the Version command</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x08: EZSP Parameter for this command (desiredProtocolVersion, note that this value may vary; your software may be newer than the version 8 shown here).</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xA7: Frame Terminator</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for nHOST_INT to assert.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit and receive 0xFF until a byte other than 0xFF is received.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Receive response 0xFE (a byte other than 0xFF) and read the next byte for a length.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Stop transmitting after the number of bytes (length) is received plus the Frame Terminator.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Decode the response:</p><ul id="l30"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xFE: SPI Byte indicating an EZSP Frame</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x09: Length Byte showing the EZSP Frame is 9 bytes long</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Sequence Byte (Note that this value should vary based upon previous sequence bytes)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x80: EZSP Frame Control Low Byte indicating a response with no errors and with no pending callbacks</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x01: EZSP Frame Control High Byte indicating the frame version is 1 and not using an encrypted EZSP connection</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x0000: EZSP Frame ID (2 bytes) indicating the Version response</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x08: EZSP Parameter for this response (protocolVersion, note that this value may vary; your software may be newer than the version 8 shown here)</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x02: EZSP Parameter for this response (stackType)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Parameter for this response (stackVersion, note that this value may vary)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x67: EZSP Parameter for this response (stackVersion: denotes the major version and minor version, such as 0x67 for Em- berZNet 6.7).)</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xA7: Frame Terminator</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Deassert nSSEL to finish the transaction.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 46pt;text-indent: -22pt;text-align: left;"><a name="bookmark40">Three-Part Transaction: Wake, Get Version, Stack Status Callback</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 16pt;text-indent: 0pt;text-align: left;"><span><img width="752" height="110" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 10.4.  Timing Diagram of the Three-Part Transaction</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">Activate nWAKE and activate timeout timer.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">NCP wakes up (if not already) and enables communication.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">nHOST_INT asserts, indicating the NCP can accept commands.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Host sees nHOST_INT activation within 300 ms and deactivates nWAKE and timeout timer.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">nHOST_INT deasserts immediately after nWAKE.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Assert nSSEL to begin a transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the Command 0x0A - SPI Protocol Version Request.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Transmit the Frame Terminator, 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for nHOST_INT to assert.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Transmit and receive 0xFF until a byte other than 0xFF is received.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Receive response 0x82 (a byte other than 0xFF), then receive the Frame Terminator, 0xA7.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Bit 7 is always set and bit 6 is always cleared in the Version Response, so this is Version 2.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Deassert nSSEL to finish the transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Host begins timing the inter-command spacing of 1 ms in preparation for sending the next command.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">nHOST_INT asserts shortly after deactivating Slave Select, indicating a callback.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Host sees nHOST_INT, but waits for the 1 ms before responding.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Assert nSSEL to begin a transaction.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Transmit the command:</p><ul id="l32"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xFE: SPI Byte indicating an EZSP Frame</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x05: Length Byte showing the EZSP Frame is 5 bytes long</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Sequence Byte (Note that this value should vary based upon previous sequence bytes)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Frame Control Low Byte indicating a command with no sleeping</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x01: EZSP Frame Control High Byte indicating the frame version is 1 and not using an encrypted EZSP connection</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x0600: EZSP Frame ID (2 bytes) indicating the callback command (sending the low byte first, so the EZSP Frame ID is 0x0006)</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xA7: Frame Terminator</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Wait for nHOST_INT to assert.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Transmit and receive 0xFF until a byte other than 0xFF is received.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Receive response 0xFE (a byte other than 0xFF), read the next byte for a length.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Stop transmitting after the number of bytes (length) is received plus the Frame Terminator.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Decode the response:</p><ul id="l33"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xFE: SPI Byte indicating an EZSP Frame</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x06: Length Byte showing the EZSP Frame is 6 bytes long</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x00: EZSP Sequence Byte (Note that this value should vary based upon previous sequence bytes)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x80: EZSP Frame Control Low Byte indicating a response with no errors</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x01: EZSP Frame Control High Byte indicating the frame version is 1 and not using an encrypted EZSP connection</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x1900: EZSP Frame ID (2 bytes) indicating the stackStatusHandler command (sending the low byte first, so the EZSP Frame ID is 0x0019)</p></li><li><p style="padding-top: 2pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0x91: EZSP Parameter for this response (EmberStatus EMBER_NETWORK_DOWN)</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">0xA7: Frame Terminator</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -13pt;text-align: left;">Deassert nSSEL to finish the transaction</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -13pt;text-align: left;">Since nHOST_INT does not assert again, there is no more data for the Host.</p></li></ol></li></ol></ol><p class="s4" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Configuring a Linux Host</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_020.png"/></span></p><h3 style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">11. Configuring a Linux Host</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Configuring a Linux Host with an EFR32-based NCP is relatively straightforward with application framework support in the EmberZNet SDK. In this case, the application framework support takes care of the necessary configuration of a typical Linux-based host to work with an EFR32-based NCP, and developers do not have to go through every detail in the preceding sections in this document in order to start implementing a host application. We still recommend that you become familiar with the information here, especially the SPI pro- tocol transaction concepts and examples and timing requirements.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">By default, the EmberZNet SDK selects an EZSP UART interface to communicate with the NCP. To enable SPI, you must remove the EZSP UART plugin from your project and replace it with the EZSP SPI plugin. You may do this from the Plugins tab in Simplicity Stu- dio’s Simplicity IDE. For more help on using Simplicity Studio and EmberZNet SDK, refer to <i>QSG106: Getting Started with EmberZNet PRO</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><span><img width="383" height="181" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_021.jpg"/></span></p><p class="s5" style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;text-align: center;">Figure 11.1.  Plugins Tab Detail</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">Save the project and generate its files. After generating the project, you must edit the generated board header file to configure the hard- ware settings for the project. These edits cannot be done through Simplicity Studio.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The board header file is located in the generated project folder and is named &lt;projectname&gt;_board.h. The following macros can option- ally be defined in this board header to specify the hardware configuration for the SPI driver. To preserve these changes, do not over- write this file if you need to generate project files again.</p><p class="s5" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Any macro not defined in the board header file will revert to the defaults values as shown here.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 130pt;text-indent: 0pt;text-align: center;">Table 11.1.  SPI Driver Macros and their Default Values</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Macro</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s7" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Default Value</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_SPI_DEVICE</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;/dev/spidev0.0&quot;</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_SPI_MODE</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_SPI_SPEED_HZ</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">(1024 * 1024) // 1 MHz</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_CHIP_SELECT_GPIO</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;8&quot;</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_HOST_INT_GPIO</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;22&quot;</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_RESET_GPIO</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;23&quot;</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_WAKE_GPIO</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&quot;24&quot;</p></td></tr><tr style="height:19pt"><td style="width:302pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#define NCP_RESET_DELAY_US</p></td><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">26</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s13">www.silabs.com/products</a></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s13">www.silabs.com/quality</a></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s14" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_022.png"/></span></p><p class="s15" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an711-ezsp-spi-host-interfacing-guide/Image_023.png"/></span></p><p class="s15" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s15" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
