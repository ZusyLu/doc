<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>an728-ota-client-server-setup</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .a { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s7 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s9 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s10 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s11 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s13 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s14 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s15 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s16 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt; }
 #l3> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt;counter-reset: d3 1; }
 #l7> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l8 {padding-left: 0pt;counter-reset: g1 1; }
 #l8> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l9 {padding-left: 0pt;counter-reset: d2 1; }
 #l9> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l10 {padding-left: 0pt;counter-reset: d3 1; }
 #l10> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l11 {padding-left: 0pt;counter-reset: d4 1; }
 #l11> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l12 {padding-left: 0pt;counter-reset: d4 1; }
 #l12> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l13 {padding-left: 0pt;counter-reset: d4 1; }
 #l13> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l14 {padding-left: 0pt; }
 #l14> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15 {padding-left: 0pt;counter-reset: d4 1; }
 #l15> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l16 {padding-left: 0pt;counter-reset: i1 1; }
 #l16> li>*:first-child:before {counter-increment: i1; content: counter(i1, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l17 {padding-left: 0pt;counter-reset: j1 4; }
 #l17> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l17> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l18 {padding-left: 0pt;counter-reset: j2 2; }
 #l18> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l18> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l19 {padding-left: 0pt;counter-reset: j3 1; }
 #l19> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l20 {padding-left: 0pt;counter-reset: j4 1; }
 #l20> li>*:first-child:before {counter-increment: j4; content: counter(j4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: j4 0;  }
 #l21 {padding-left: 0pt;counter-reset: j5 1; }
 #l21> li>*:first-child:before {counter-increment: j5; content: counter(j5, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: j5 0;  }
 #l22 {padding-left: 0pt;counter-reset: j5 1; }
 #l22> li>*:first-child:before {counter-increment: j5; content: counter(j5, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: j5 0;  }
 #l23 {padding-left: 0pt;counter-reset: d3 1; }
 #l23> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l24 {padding-left: 0pt;counter-reset: k1 4; }
 #l24> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l24> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l25 {padding-left: 0pt;counter-reset: k2 4; }
 #l25> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l25> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l26 {padding-left: 0pt;counter-reset: k3 1; }
 #l26> li>*:first-child:before {counter-increment: k3; content: counter(k1, decimal)"."counter(k2, decimal)"."counter(k3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l26> li:first-child>*:first-child:before {counter-increment: k3 0;  }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt;counter-reset: k4 1; }
 #l28> li>*:first-child:before {counter-increment: k4; content: counter(k4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: k4 0;  }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt;counter-reset: k4 1; }
 #l30> li>*:first-child:before {counter-increment: k4; content: counter(k4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: k4 0;  }
 #l31 {padding-left: 0pt;counter-reset: d3 1; }
 #l31> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l32 {padding-left: 0pt;counter-reset: d4 1; }
 #l32> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l33 {padding-left: 0pt;counter-reset: d3 1; }
 #l33> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l34 {padding-left: 0pt;counter-reset: d3 1; }
 #l34> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l34> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l35 {padding-left: 0pt;counter-reset: d4 1; }
 #l35> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l36 {padding-left: 0pt;counter-reset: n1 1; }
 #l36> li>*:first-child:before {counter-increment: n1; content: counter(n1, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l36> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l37 {padding-left: 0pt;counter-reset: d4 1; }
 #l37> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l37> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l38 {padding-left: 0pt;counter-reset: d4 1; }
 #l38> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l38> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l39 {padding-left: 0pt;counter-reset: d4 1; }
 #l39> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l39> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l40 {padding-left: 0pt;counter-reset: d3 1; }
 #l40> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l40> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l41 {padding-left: 0pt;counter-reset: o1 1; }
 #l41> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l41> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 #l42 {padding-left: 0pt;counter-reset: d2 1; }
 #l42> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l43 {padding-left: 0pt;counter-reset: d3 1; }
 #l43> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l43> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l44 {padding-left: 0pt;counter-reset: d4 1; }
 #l44> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l44> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l45 {padding-left: 0pt;counter-reset: d4 1; }
 #l45> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l46 {padding-left: 0pt;counter-reset: d3 1; }
 #l46> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l46> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l47 {padding-left: 0pt;counter-reset: d4 1; }
 #l47> li>*:first-child:before {counter-increment: d4; content: counter(d4, lower-latin)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l47> li:first-child>*:first-child:before {counter-increment: d4 0;  }
 #l48 {padding-left: 0pt;counter-reset: d3 1; }
 #l48> li>*:first-child:before {counter-increment: d3; content: counter(d3, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l48> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="an728-ota-client-server-setup/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">AN728: Over-the-Air Bootload Server and Client Setup</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="an728-ota-client-server-setup/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="1" alt="image" src="an728-ota-client-server-setup/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="213" height="1" alt="image" src="an728-ota-client-server-setup/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Configure and build two Zigbee OTA client images.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Configure and build the OTA server.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Load the original client image.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Load the NCP server software.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Load the updated OTA client image on the server.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Run the client / server setup.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note describes the process users should follow to perform a Zigbee® OTA (over-the-air) bootloading session be- tween a ZCL OTA Upgrade cluster client device and server de- vice. The hardware used is an EFR32MG12-based development kit. (See the WSTK6001 User Manual for details about how to configure the WSTK development board for use with the EFR32MG12.) You can also refer to procedures in this document when setting up or testing OTA bootload downloads in your own development environments with your own hardware.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Before you begin implementing the procedures in this document, you should be familiar with the basics of building and loading application images on Silicon Labs platforms. See <i>QSG106: Getting Started with EmberZNet PRO </i>for details.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an728-ota-client-server-setup/Image_005.png"/></span></p><ol id="l2"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This application note describes the steps necessary to demonstrate a Zigbee OTA bootloading session between a ZCL OTA Upgrade cluster client device and server device. The procedures use EFR32MG12-based development boards. (See the WSTK6001 User Man- ual for details about how to configure the WSTK development board for use with the EFR32MG12.)</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Please refer to the document <i>UG103.6: Bootloading Fundamentals </i>for more details about this bootloader. For details about the ZCL OTA Upgrade cluster, consult the latest published revision of the Zigbee cluster library specification.</p><p class="s6" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">In the Silicon Labs AppBuilder ZCL tab, the ZCL OTA Upgrade cluster is referred to as OTA Bootloading. For consistency that terminology is used in this document as well. If you are searching Zigbee documents, be sure to search for ‘OTA Upgrade.’</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Refer to this application note when setting up and or testing the Zigbee OTA bootload cluster on your own. The Advanced section de- scribes how this example can be expanded to use your own hardware configuration, and how to change the software configuration to support your own manufacturer-specific information.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For further reference please see:</p><ul id="l3"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Zigbee Document #07-5123, <i>Zigbee Cluster Library Specification </i><a href="http://www.zigbee.org/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">- “Over-the-air Upgrading” chapter; available from </a><a href="http://www.zigbee.org/" class="a" target="_blank">http:// </a><span style=" color: #049;">www.zigbee.org</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Silicon Labs document <i>QSG106: Getting Started with EmberZNet PRO</i></p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Silicon Labs document <i>UG391: Zigbee Application Framework Developer&#39;s Guide</i></p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Silicon Labs document <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i></p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Silicon Labs document <i>AN1084: Using the Gecko Bootloader with EmberZNet</i></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h3 style="padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Hardware and Software Requirements</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Many of the steps in this document are performed using Application Builder (AppBuilder), a component of the Simplicity Studio IDE. For more information on configuring an application, refer to <i>QSG106: Getting Started with EmberZNet PRO</i>, provided with your release.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A number of the procedures use IAR-EWARM as the compiler. The IAR-EWARM version must be compatible with the EmberZNet SDK version. See the release notes for the SDK to determine the compatible compiler version number.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">These procedures use two EFR32MG12-based WSTKs (Wireless Starter Kits), one for the client device running in System-on-Chip (SoC) mode, and one as the Network Co-Processor (NCP) component of the OTA Server. A PC Host running Linux or Windows with Cygwin is also required as part of the OTA Server setup.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l4"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Client Hardware</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The client device used in these procedures is an EFR32MG12-based WSTK running in SoC mode. You have two choices for the down- load space. The first is to use an external storage device, such as a serial dataflash or serial EEPROM, connected to the device. The second option, only available with devices with more than 512 kB flash space, is to use a portion of the main flash as the download space. Bootloaders using the second option are often referred to as either internal or local storage bootloaders. EFR32MG12 parts can use local storage; EFR32MG1 parts cannot. For a full list of supported external memory parts for EFR32MGx parts, see <i>UG266: Silicon Labs Gecko Bootloader User Guide</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For devices using the EFR32MG1, only the serial dataflash option is available; no local storage application bootloader is presently of- fered. However, parts whose numbers begin with EFR32MG1x6 or EFR32MG1x7 contain an integrated serial flash that can be utilized just like off-chip serial dataflash but without any additional components.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">EFR32MG12- or MG13-based devices with at least 512 kB of internal flash also support internal storage for use with a local storage application bootloader design, as well as external storage for use with an SPI flash-based application bootloader design. In the proce- dures described in this document, internal storage is used on an EFR32MG12 with 1024 kB of flash. Contact Silicon Labs technical support for assistance with other memory layouts for other devices.</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Zigbee OTA client cluster can be used with an EmberZNet PRO-based device running in either SoC or EZSP NCP mode. This document does not show how to configure an EZSP host application for an NCP-based client, but the server hardware and setup de- scribed in section </a>2.2 Server Hardware <span style=" color: #000;">is the same when the client is using EZSP. This application note shows one example of how the OTA client cluster can be used with a specific hardware configuration.</span></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The client software is based upon the ZCL Application Framework V2 contained within the latest version of the EmberZNet PRO stack.</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Hardware and Software Requirements</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an728-ota-client-server-setup/Image_006.png"/></span></p></li><li><p class="s6" style="padding-top: 7pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Server Hardware</a><a name="bookmark4">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The NCP device used in these procedures is an EFR32MG-based WSTK with a UART-connected host application communicating via EmberZNet Serial Protocol (EZSP). In this application note, either a Linux system or Windows PC with Cygwin is required to run the host software that connects to the NCP. The storage for the OTA software images is the host’s local file system. To avoid linking is- sues, do not use a virtual machine to run the host.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">It is possible for an OTA server to run on an EFR32MG-based SoC, or to use an NCP with a different (non-POSIX-based) host system. A different configuration than the one presented here requires an alternative mechanism for pushing images into the OTA server so they can be then served up to clients through the Zigbee OTA bootload cluster protocol. For example, software images could be push- ed through a utility backhaul, an Ethernet connection to a local network, or some other proprietary mechanism.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">A Linux system connected to a development board acting as a UART NCP is only one possible option to serve up OTA files. It was the friendliest option for an OTA server because there are many mechanisms to push OTA files into the server’s file system.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The following figure shows a diagram of the hardware configuration used for the Zigbee OTA application bootload procedures. Note that only one client is required.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="296" alt="image" src="an728-ota-client-server-setup/Image_007.jpg"/></span></p><p class="s6" style="padding-top: 6pt;padding-left: 155pt;text-indent: 0pt;text-align: center;">Figure 2.1.  Zigbee OTA Application Bootload Hardware Diagram</p><p class="s5" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">OTA File Storage</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="an728-ota-client-server-setup/Image_008.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">OTA File Storage</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">About the Zigbee OTA File Format</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The file format is defined in Zigbee document 07-5123, <i>Zigbee Cluster Specification</i>, in the “OTA File Format” section of the “Over-the- air Upgrade” chapter. Images are composed of a Zigbee OTA header, followed by one or more blobs of proprietary bootloader data, and then an <i>optional </i>set of cryptographic signature data appended to the end. The OTA server only needs to read the OTA header to serve up the file, and thus can serve up files for different manufacturers and or different products. The following figure shows an exam- ple of the layout of the file format.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 248pt;text-indent: 0pt;text-align: left;"><span><img width="121" height="310" alt="image" src="an728-ota-client-server-setup/Image_009.jpg"/></span></p><p class="s6" style="padding-top: 6pt;padding-left: 155pt;text-indent: 0pt;text-align: center;">Figure 3.1.  File Format Sent Over-the-Air</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs has created a tool for generating OTA images called <b>Image-builder</b>. The non-ECC version of <b>Image-builder </b>is included with the EmberZNet PRO release in the <b>tool\image-builder </b>sub-directory. The post-build scripts in AppBuilder run Image-builder as part of a batch file to make the OTA file, provided that the OTA Bootload Cluster Client Policy plugin has been enabled. For more infor- mation on Image-builder, see <i>AN716: Instructions for Using Image Builder</i>.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">OTA signing refers to signing the OTA image file, and is independent of any signature or encryption that may be present on the update image file inside the OTA wrapper file. Currently only the Smart Energy Profile has support for signatures on images. This application note assumes that OTA images do not need to be signed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">About OTA File Storage</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The new image is saved in external flash or internal flash, depending on which bootloader is used.</p><ul id="l6"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">If using a “SPI Storage Bootloader”, the new image will be saved into SPI flash.</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">If using an “Internal Storage Bootloader”, the new image will be saved into internal flash.</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">The offset of the new image is set in the properties of plugin “OTA Simple Storage EEPROM Driver”. There are two typical settings.</p><ol id="l7"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: justify;">Using slot-manager: The slot offset is defined in the bootloader. In the application, set “Gecko Bootloader Storage Support” to any selection except “Do not use slot”. In this case, the “OTA Storage Start Offset” and “OTA Storage End Offset” will not be used.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Using absolute offset: In the application, you must set “Gecko Bootloader Storage Support” to “Do not use slot”. In this case the “Storage Slot To Save Images To” will not be used. The “OTA Storage Start Offset” and “OTA Storage End Offset” must be set correctly. The “OTA Storage Start Offset” must equal the start offset of a slot defined in the bootloader. The “OTA Storage End Offset” must equal the start offset plus the slot size of that slot.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark8">General Procedure</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The following outlines the steps to configure the OTA bootload cluster client and server. Details are presented in subsequent sections.</p><ol id="l8"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Configure and build the original OTA client image.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Configure and build the updated OTA client image.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Create the Zigbee OTA server files.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Build the PC host.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Load the original client image.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Load the EZSP NCP server software.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Load the updated OTA client image on the server.</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Run the Zigbee OT client / server.</p></li></ol><ol id="l9"><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark9">Configure and Build the Original Zigbee OTA Client Image</a><a name="bookmark22">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This procedure configures a Zigbee LO On/Off Light as an example, but it can be adapted for any sample application. Other Zigbee device types can be configured similarly. The example setup includes support for the Zigbee OTA bootload cluster client.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The procedures in this application note build two client images, the original version and the updated version. This client will be the origi- nal version. The image generated will run before the Zigbee OTA process upgrades the client device.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Here are the basic steps to configure the OTA client:</p><ol id="l10"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">In Application Builder, create and name a new project. This can be blank or based on one of the provided examples. For the purpo- ses of this exercise, you may want to name the file <b>ZNet_OTA_Client_631 </b>(for the 6.3.1.0 stack).</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">In the <b>ZCL Clusters </b>tab:</p><ol id="l11"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">In the <b>Cluster List </b>pane on the bottom left, expand the <b>General </b>group.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Check the <b>Over-the-Air Bootloading Cluster </b>client checkbox.</p><p class="s6" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Some Zigbee device types do not allow you to enable this cluster by default. In that case, you can select </span>Zigbee Cus- tom <span class="p">from the ZCL Device Type picklist and then choose your same desired device type from that list. You can then add any other clusters to your endpoint configuration.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">In the <b>Printing and CLI </b>tab:</p><ol id="l12"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">In the <b>Debug Printing </b>section, check the “Enable Debug Printing” checkbox.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Expand the <b>Application specific debug printing </b>group.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Check the <b>Compiled-in </b>and <b>Enabled at startup </b>checkboxes for the <b>Ota Bootload </b>cluster.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In the <b>HAL </b>tab, click [<b>Open Hardware Configurator</b>] to launch the Hardware Configurator:</p><ol id="l13"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">In the resulting Configurator window, click the <b>DefaultMode Peripherals </b>tab.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Scroll down to the <b>Serial </b>section of peripherals and enable <b>Serial </b>and <b>Virtual COM Port </b>peripherals, if they are not already enabled. Normally, the &#39;Port for application serial&#39; property of the Serial port should be defined to USART0.</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click the AppBuilder tab for your ISC file to resume editing your application configuration.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Select <b>File &gt; Save all</b>.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In the <b>HAL </b>tab, click the <b>Bootloader </b>drop-down menu and specify <b>Application</b>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>A Local Storage bootloader can also be used with the OTA Client setup, but this is a more advanced use case and is not discussed here. See <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide </i>and <i>AN1084: Using the Gecko Bootloader with EmberZ- Net </i>for more information about bootloader configuration options.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -8pt;text-align: left;">In the <b>Plugins </b>Tab, make sure the following plugins are checked (other plugins may be checked by default as well):</p><ul id="l14"><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Bootload Cluster Client</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Bootload Cluster Client Policy</p><ol id="l15"><li><p style="padding-top: 3pt;padding-left: 72pt;text-indent: -8pt;text-align: left;">In the <b>Firmware Version </b>text entry box, set the value to 1 as your original version number.</p><p class="s6" style="padding-top: 6pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">Note: <span class="p">This is a critical value, as later steps assume you have the version set to 1.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p style="padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Bootload Cluster Common Code</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Bootload Cluster Storage Common Code</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Simple Storage Module</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Simple Storage EEPROM Driver</p><ol id="l16"><li><p style="padding-top: 3pt;padding-left: 72pt;text-indent: -8pt;text-align: left;">Check the <b>SOC Bootloading Support </b>checkbox.</p></li><li><p style="padding-top: 3pt;padding-left: 72pt;text-indent: -8pt;text-align: left;">Set EEPROM Device Read-modify-write support to False.</p></li></ol><p class="s6" style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The OTA storage start offset and end offset values in this plugin may need to be changed for other storage layouts, in- cluding layouts involving Storage Slots. Contact Silicon Labs technical support for guidance on choosing other values based on your use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 54pt;text-indent: -9pt;text-align: left;">EEPROM</p></li><li><p style="padding-top: 3pt;padding-left: 54pt;text-indent: -9pt;text-align: left;">OTA Cluster Platform Bootloader</p></li></ul></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>].</p></li><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Build the application according to your preferred method. Make sure that the .GBL (Gecko Bootloader) file is generated.</p><p class="s6" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">An EEPROM/dataflash driver is not specifically included in the application’s project file. The application will call into the boot- loader’s storage driver code to perform the low-level calls to the serial dataflash. This is why it is important to enable a bootloader in the client configuration and later to load a bootloader into the device.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">For a Zigbee OTA Bootload Cluster Client, AppBuilder automatically creates a Windows .BAT file that executes Image-builder and wraps the GBL file in the Zigbee OTA file format. The parameters passed to Image-builder are based upon those specified in the application configuration, specifically the values declared in the “OTA Bootload Cluster Client Policy” plugin. The OTA image will be located in the compiler Debug folder rather than in the main project folder.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Configure and Build the Updated Zigbee OTA Client Image</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">This step builds the updated version image. The images are identical except for the version number embedded in them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l17"><ol id="l18"><ol id="l19"><li><p class="s6" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark11">Copy the Original OTA Client Image</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Copy the original ZNet_OTA_Client.gbl file (the one built with the OTA Bootload Cluster Client Policy: Firmware Version set to <b>1</b>) to another folder to avoid it being overwritten when the &quot;updated&quot; version is built next to enable an OTA update. Rename this file appropri- ately, for example: ZNet_OTA_Client_631_v1.gbl.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark12">Modify, Generate, and Build the Updated OTA Client Configuration</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">To generate a new OTA Client configuration, perform the following steps.</p><ol id="l20"><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Open the previously saved OTA Client ISC file.</p><ol id="l21"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Open the <b>File </b>menu and select <b>Open</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">In the dialog box, navigate to the location of the saved ISC file and select <b>Open</b>.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Select the <b>Plugins </b>tab.</p><ol id="l22"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Select the <b>OTA Bootload Cluster Client Policy </b>plugin.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Change the value in the <b>Firmware version number </b>entry box to 22. This value is an arbitrary choice but it must be greater in value than the previous version (1).</p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Build the project. Locate the .ota file created in the compiler output directory; for example, \IAR ARM - Default\ZNet_OTA_Cli- ent_631.ota.</p></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Copy this file to the directory where you saved your ZNet_OTA_Client_631_v1.gbl and rename the .ota file to track the version number, for example ZNet_OTA_Client_631_v22.ota</p></li></ol></li></ol></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Create the Zigbee OTA Server Files</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This procedure creates the source for a Zigbee 3.0 gateway host device. The device includes support for the Zigbee OTA bootload cluster server. The host server software can support both signed and unsigned OTA images since it will not do any verification on these files. To configure the OTA server:</p><ol id="l23"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In Application Builder, start a new AppBuilder project.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select <b>Silicon Labs Zigbee </b>and click [<b>Next</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select <b>EmberZNet &lt;version&gt; GA Host </b>(not SoC) and click [<b>Next</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select the <b>Z3Gateway </b>host sample application and click [<b>Next</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Rename your project and click [<b>Next</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Do not select a Board. Under Part, select <b>None (Compatible)</b>, and leave <b>No Toolchain </b>selected. Click [<b>Finish</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>].</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Build the PC Host</a><a name="bookmark23">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Building the OTA Server can be done either on a Linux box using GCC, or a Windows box running Cygwin and GCC. Both processes are described below.</p><ol id="l24"><ol id="l25"><ol id="l26"><li><p class="s6" style="padding-top: 8pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark15">Building on a Linux Box</a></p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark31" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Building the OTA server can be done on a Linux system. This application note assumes that you are NOT using a cross-compiler and that the target system is the same system as the one where the development tools exist. It is possible to cross-compile for a different Linux system (for example, on an x86 PC targeting an embedded ARM Linux system). See section </a><a href="#bookmark31" class="a">5.4 Using a Cross-compiler for the </a>OTA Server <span style=" color: #000;">for details on how to cross-compile for other systems.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Building the OTA Server for Linux requires a number of development tools. We assume you have access to these tools. They are as follows:</p><ul id="l27"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Make</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">GCC</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">sed</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">awk</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">xargs</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The standard C Library and its development headers</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The Readline Library and its development headers</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The Ncurses Library and its development headers</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The steps to build the OTA server under Linux follow. It is assumed that these steps are run after configuring the server in Simplicity Studio.</p><ol id="l28"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Copy the EmberZNet PRO stack files from their installed location on Windows to a directory on the Linux PC. This should include the files that were generated in a previous step.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Launch a Bash Shell.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Change to the EmberZNet project directory on your Linux PC or Raspberry Pi.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Run <b>Make </b>on the generated Makefile from that directory, for example <span class="s8">make –f OtaServer.mak </span>or simply <span class="s8">make </span>if the generated Makefile is in the current working directory and is specifically named “Makefile”.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The compilation should complete successfully.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 5pt;padding-left: 49pt;text-indent: -25pt;text-align: left;"><a name="bookmark16">Building on a Windows Box Under Cygwin</a></p><p class="s7" style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="http://www.cygwin.com/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Building the OTA Server under Windows requires Cygwin. Cygwin is a set of native Windows tools that emulate a Linux environment. Cygwin can be downloaded from the Internet from </a>http://www.cygwin.com<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Cygwin is actually a collection of hundreds of small programs that make up a Linux distribution. Cygwin can be configured in a myriad of different ways for a particular Windows PC and so by default may not include the required tools for building an EmberZNet PRO host application. Therefore proper installation of the required tools is necessary before actually building the EmberZNet PRO code.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following is a general list of the packages necessary to build an EmberZNet PRO host application under Cygwin.</p><ul id="l29"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Bash shell</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Make</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">GCC4</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">sed</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">awk</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">xargs</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">The standard C Library and its development headers</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">libreadline-devel - The Readline Library and its development headers</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">libncurses-devel - The Ncurses Library and its development headers</p></li></ul><p class="s6" style="padding-top: 6pt;padding-left: 36pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Although it is possible to use the Cygwin tools to build an application that does NOT require the Cygwin DLL, it is not possible to do this with an EmberZNet PRO host application. The host application requires access to the Cygwin DLL to correctly run certain parts of the Ember application framework code.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The steps to build the OTA server under Windows using Cygwin are as follows.</p><ol id="l30"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Launch a Cygwin Shell.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Change to the project directory, for example /cygdrive/c/SiliconLabs/SimplicityStudio/v4/developer/sdks/gecko_sdk_suite/v2.2/app/ builder/Z3GatewayHost_631</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Enter <span class="s8">make</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 23pt;text-indent: 9pt;line-height: 182%;text-align: left;">A \build\exe\ folder will be created with your app Z3GatewayHost_631.exe inside it. This is your Host app. The compilation should complete successfully.</p></li></ol></li></ol></ol></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark17">Load the Original Client Image</a><a name="bookmark24">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Flash an appropriate Application bootloader for your board, such as \developer\sdks\gecko_sdk_suite\v2.3\platform\bootloader\sample- apps\bootloader-storage-spiflash-single\efr32mg12p432f1024gl125-brd4161a\bootloader-storage-spiflash-single-combined.s37 for a BRD4161A. For simplicity, in this case, you can use the same bootloader for both the OTA Client and Server if you are using the same board (for example, BRD4161A).</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">You can use Simplicity Studio to do this (see <i>QSG106: Getting Started with EmberZNet PRO </i>for instructions on loading application and bootloader firmware) or use Simplicity Commander commands (see <i>UG162: Simplicity Commander Reference Guide </i>for additional de- tail):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">commander flash -d EFR32 [path to bootloader-storage-spiflash-single-combined.s37] commander flash -d EFR32 [path to ZNet_OTA_Client_632.gbl]</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Tip: You can drag the file image into the CMD window to include the file reference easily.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Load the EZSP NCP Server Software</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">In order to use an EFR32MG device connected to a PC host through USB, it is necessary to load the EZSP NCP software onto the target chip. The following describes the process using an EFR32MG12 as an example for the NCP target chip, and precompiled im- ages. You can also build your own images as described in <i>AN1010: Building a Customized NCP Application</i>.</p><ol id="l31"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Right-click the NCP target device in the Devices pane.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select <b>Upload Application</b>.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In the resulting dialog box:</p><ol id="l32"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click the folder icon to the right of the <b>Application image path </b>text box.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Navigate to the location of your EmberZNet PRO release, browse to the “ncp-images” subdirectory, and select the pre-built NCP image. Use the ncp-uart-hw.s37 file, for example: <span class="s8">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks</span></p><p class="s8" style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">\gecko_sdk_suite\v2.3\protocol\zigbee\ncp-images\efr32mg12p432f1024gl125-brd4161a\ncp-uart-hw.s37<span class="p">.</span></p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Check Bootloader image, then browse to the bootloader image folder, for example :</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 60pt;text-indent: 0pt;line-height: 119%;text-align: left;">\SiliconLabs\SimplicityStudio\v4\developer\sdks\gecko_sdk_suite\&lt;version&gt;\platform\bootloader\sample- apps\bootloader-storage-spiflash-single\</p><p style="padding-top: 6pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Note that some SDKs have variations on this path.</p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Open the folder that corresponds to your board and part number and select the .s37 file, for example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">\efr32mg12p432f1024gl125-brd4161a\bootloader-storage-spiflash-single-combined.s37</p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click [<b>OK</b>].</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Wait for the device to successfully finish a flash load of the NCP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark19">Load the Updated OTA Client Image on the Server</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">The OTA Server application looks for OTA files in a directory called <b>ota-files </b>that is a sub-directory in the current working directory from which the server application is launched.</p><ol id="l33"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Launch a Cygwin or Linux shell on the OTA Server PC.</p></li><li><p style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 42pt;text-indent: -8pt;line-height: 182%;text-align: left;">Navigate to the directory where the OTA Server application will be run, make a subdirectory, and copy the OTA file to it. For example, in Linux:</p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">cd /home/rob/ mkdir ota-files</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">cp -i OtaClient-v22.ota ota-files/</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">For example, on Cygwin:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">cd /cygdrive/c/SiliconLabs/SimplicityStudio/v4/developer/sdks/gecko_sdk_suite/&lt;v ersion&gt;/app/builder/Z3GatewayHost_OTA/build/exe</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">mkdir ota-files</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">cp –i OtaClient-v22.ota ota-files/</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">You can also copy the file using the Windows Explorer or Linux/RasPi GUI.</p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Run the Zigbee OTA Client / Server</a></p><ol id="l34"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Make sure the WSTK for the NCP device is connected to the PC with a USB cable.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">Launch the OTA Server by executing the OTA server application from the command line, and pass it the location of the communi- cations port. The communications port will either be a USB or serial port device. The method for determining which port the EFR32MG12 is connected to depends on the operating system of the host PC.</p><p class="s6" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Under Linux</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">The USB port is registered as /dev/ttyUSBX, where X is a number as assigned by the operating system. For example the following would use <span class="s8">ttyUSB0</span>.</p><ol id="l35"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Launch a Shell.</p></li><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Change to the directory where the OTA Server application is located. This should be the same directory where a sub-directory called “ota-files” exists, for example: <span class="s8">cd /home/rob.</span></p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Enter .<span class="s8">/OtaServer –p /dev/ttyUSB0</span></p><p class="s6" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Under Windows</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The USB port is either COM1, COM2, COM3, and so on. The COM port can be determined by watching the Ports (COM &amp; LPT) section of Windows Device Manager while unplugging and replugging the WSTK&#39;s USB connector. The following example uses COM1.</p><ol id="l36"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Launch a Cygwin Shell.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Navigate to the host app you built, for example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">cd /cygdrive/c/SiliconLabs/SimplicityStudio/v4/developer/sdks/gecko_sdk_suite/v2.2/app</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">/builder/Z3GatewayHost_631</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">To run your host app with the COM port as a parameter, type the command: <span class="s8">./Z3GatewayHost_631.exe -p com1</span></p></li></ol></li></ol></li><li><p style="padding-top: 2pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Connect to the OTA Client device in your Simplicity Studio Serial 1 window or by launching a Windows command prompt and con- necting via telnet to its IP address on port 4901.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -42pt;text-align: right;">Make sure both the client and server devices have Over-the-Air Bootloading Cluster printing enabled.</p><ol id="l37"><li><p style="padding-top: 3pt;padding-left: 60pt;text-indent: -60pt;text-align: right;">Execute the following command on the OTA Client: <span class="s8">plugin ota-storage-common printImages</span></p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">Execute the following command on the OTA Server: <span class="s8">plugin ota-storage printImages</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In both cases output should print to the CLI. If no output is visible, go back and verify the configuration of the application and its Debug Printing configuration.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="704" height="176" alt="image" src="an728-ota-client-server-setup/Image_010.png"/></span></p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Make sure that the client is running the older version of the client software. From the OTA client’s CLI type the following command. You should see the corresponding output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:39.1654pt" cellspacing="0"><tr style="height:81pt"><td style="width:166pt" colspan="2" bgcolor="#D8D8D8"><p class="s9" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">OtaClient&gt;plugin ota-client info Client image query info</p><p class="s9" style="padding-left: 2pt;padding-right: 28pt;text-indent: 0pt;line-height: 107%;text-align: left;">Manuf ID:        0x1002 Image Type ID: 0x0000 Current Version: 0x00000001 Hardware Version: NA</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Query Delay ms: 300000</p><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Server Discovery Delay ms: 600000</p></td></tr><tr style="height:10pt"><td style="width:129pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Download Delay ms:</p></td><td style="width:37pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p></td></tr><tr style="height:10pt"><td style="width:129pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Run Upgrade Delay ms:</p></td><td style="width:37pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: left;">600000</p></td></tr><tr style="height:10pt"><td style="width:129pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Verify Delay ms:</p></td><td style="width:37pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: left;">10</p></td></tr><tr style="height:10pt"><td style="width:129pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Download Error Threshold:</p></td><td style="width:37pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: left;">10</p></td></tr><tr style="height:13pt"><td style="width:129pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Upgrade Wait Threshold:</p></td><td style="width:37pt" bgcolor="#D8D8D8"><p class="s9" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">10</p></td></tr></table><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Note that the current version field says 0x00000001.</p></li><li><p style="padding-top: 8pt;padding-left: 42pt;text-indent: -8pt;text-align: left;">Verify that the OTA Server has a newer image loaded in it. From the OTA server’s CLI type the following command. You should see the corresponding output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">OtaServer&gt;plugin ota-storage printImages Image 0</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">Header Version: 0x0100 Header Length: 56 bytes Field Control: 0x0000 Manuf ID: 0x1002</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">Image Type: 0x0000</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">Version:  0x00000022 Zigbee Version: 0x0002</p><p class="s8" style="padding-left: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">Header String: Our Test Image Image Size:  146954 bytes Total Tags: 1</p><p class="s8" style="padding-left: 31pt;text-indent: -9pt;line-height: 107%;text-align: left;">Tag: 0x0000 Length: 146880</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">1 images in OTA storage.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Note that the version number is 0x00000022. The exact size of the image may vary.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Erase any previous version file that has been saved in the client. This is not normally necessary in a production system, but in this example a previous version may cause problems. Enter the following command on the client:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;"><span class="s10" style=" background-color: #D8D8D8;"> plugin ota-storage delete 0</span><span class="s11" style=" background-color: #D8D8D8;">.                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 42pt;text-indent: -8pt;text-align: left;">Turn off receive message printing to limit console output during the download. Skipping this step will not negatively impact the func- tionality.</p><ol id="l38"><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">On the server: <span class="s8">option print-rx-msgs disable</span></p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">On the client: <span class="s8">option print-rx-msgs disable</span></p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Join the devices into the same network.</p><ol id="l39"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">On the server: <span class="s8">net leave</span></p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">On the server: <span class="s8">plugin network-creator start 1</span></p></li><li><p style="padding-top: 2pt;padding-left: 60pt;text-indent: -8pt;text-align: left;">On the server: <span class="s8">plugin network-creator-security open-network</span></p></li><li><p style="padding-top: 2pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">On the client: <span class="s8">plugin network-steering start 0</span></p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">If the client joins successful, then you should see a dialog about trust center interactions in the output.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">To verify that the client is connected to the server, type <span class="s8">info </span>on both the client and the server. The PAN IDs should be the same.</p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -13pt;text-align: left;">Start the OTA Client’s state machine on the client: <span class="s8">plugin ota-client start</span></p><p class="s6" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Note: <span class="p">The download may take up to 10 minutes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 41pt;text-indent: -13pt;text-align: left;">If all goes well you should see the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Download: 100% complete Bootload state: Verifying Image</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Last offset downloaded: 0x00023E6C Starting EBL verification</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">EBL passed verification.</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Custom verification passed: 0x00</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Bootload state: Waiting for Upgrade message Sending Upgrade End request.</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">OTA Cluster: wait for 0 s</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">RXed timeOut 0x00000000 s, MAX timeOut 0x00000DBB s Adding 2000 ms. delay for immediate upgrade.</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Countdown to upgrade: 2000 ms Bootload state: Countdown to Upgrade Applying upgrade</p><p class="s8" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Executing bootload callback. Reset info: 0x02 (BTL)</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Repeating the Procedure</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Once a Zigbee OTA client is upgraded through the Zigbee over-the-air bootload cluster, it can only be upgraded again if the server has a different version of software.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In order to perform a Zigbee OTA firmware download again it is necessary to do one of the following:</p><ol id="l40"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Downgrade the running image of the client to the original version</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">or</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Create another client image with a newer software version.</p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Downgrade the Running Image to the Original Version</p><p class="s7" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark24" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Re-run the steps in the section </a>4.5 Load the Original Client Image<span style=" color: #000;">. Load version 1 of the software, the original image.</span></p><p class="s6" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Create Another Image with a Newer Software Version</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Run the following steps:</p><ol id="l41"><li><p class="s7" style="padding-top: 3pt;padding-left: 42pt;text-indent: -8pt;text-align: left;"><a href="#bookmark22" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Re-run the steps in section </a>4.1 Configure and Build the Original Zigbee OTA Client Image <span style=" color: #000;">but specify a different Firmware Version that is greater than 22.</span></p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Make sure that you click [<b>Generate</b>] to generate the build files.</p></li><li><p class="s7" style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;"><a href="#bookmark23" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Re-run the steps in sections and </a><a href="#bookmark23" class="a">4.4 Build the PC </a>Host<span style=" color: #000;">.</span></p></li></ol><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Make sure that the <b>--version </b>argument passed to Image-builder reflects the newest version number.</p></li></ol></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark25">Advanced Topics</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This section presents a number of advanced topics that allow the developer to customize the bootload to their specific hardware and software.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l42"><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark26">Specifying Your Own Manufacturer ID</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Follow these steps in order to specify a manufacturer ID other than 0x1002, which is the Silicon Labs-specific manufacturing ID.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Each member of the Zigbee Alliance has its own manufacturer ID. The list of manufacturer IDs is maintained in Zigbee Document 05-3874 Manufacturer Code Database. If your company does not have a manufacturer ID then it must request one from the Zigbee help desk (help@zigbee.org).</p><ol id="l43"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: justify;">When configuring the OTA Client in AppBuilder, do the following:</p><ol id="l44"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Select the <b>ZCL Clusters </b>Tab.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">In the <b>Manufacturer Code </b>text entry box on the right, enter your own manufacturer code.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Re-compile the application using IAR workbench.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">When generating the Zigbee OTA image file, do the following.</p><ol id="l45"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Specify your own manufacturer ID by passing that value to the <b>--manuf-id </b>argument when executing the <b>image-builder </b>com- mand.</p><p class="s6" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">You do NOT need to modify the manufacturer ID of the OTA server in this example. The server may have a different manu- facturer ID than the OTA Client. You may choose to modify the manufacturer ID to match the OTA server device that your compa- ny is building.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark27">Specifying Your Own Image Type ID</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Follow these steps in order to specify an image type ID other than 0x0000.</p><ol id="l46"><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">When configuring the OTA Client in AppBuilder, do the following:</p><ol id="l47"><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Select the <b>Plugins </b>tab.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Select the <b>OTA Bootload Cluster Client Policy </b>plugin.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">In the <b>Image Type ID </b>text entry box, enter your own image type ID code.</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>].</p></li><li><p style="padding-top: 3pt;padding-left: 59pt;text-indent: -8pt;text-align: left;">Re-compile the application using IAR workbench.</p></li></ol></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">AppBuilder will automatically update the Windows Batch file command being executed by IAR Workbench to generate a Zigbee OTA file. The new Image Type argument will be passed to Image-builder with <b>--image-type</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark28">Modifying the OTA Client to Use a Different EEPROM</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Many different external storage parts are available, and the choice of which one is used is based on many different factors. <i>AN772: Using the Ember Application Bootloader </i>and <i>UG266: Silicon Labs Gecko Bootloader User Guide </i>detail several different parts supported by Silicon Labs and their various device parameters.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">If the external storage part does not support read-modify-write, then the AppBuilder application configuration must be updated. The fol- lowing describes the process:</p><ol id="l48"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">In AppBuilder, open the OTA client configuration (ISC) file.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select the <b>Plugins </b>tab.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Select the <b>OTA Simple Storage EEPROM Driver </b>plugin and uncheck the option labeled <b>EEPROM Read-modify-write device Support.</b></p></li><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Click [<b>Generate</b>] to re-generate the appropriate AppBuilder files.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">Re-compile the application.</p><p class="s6" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Note: <a href="#bookmark24" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">A new Bootloader will be required to support the change in EEPROM. You must load a new bootloader by following the steps in section </a><span class="s7">4.5 Load the Original Client Image</span><span class="p">, and selecting one appropriate to the bootloader you are using. For the example presented in this section the appropriate bootloader would be: </span><span class="s8">C:\SiliconLabs\SimplicityStudio\v4\developer\sdks</span></p><p class="s8" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">\gecko_sdk_suite\&lt;version&gt;\protocol\zigbee\platform\bootloader\sample-apps\bootloader-storage-spiflash- single\{chipName}\bootloader-storage-spiflash-single-combined.s37<span class="p">.</span></p></li></ol></li><li><p class="s6" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark29">Using a Cross-compiler for the OTA Server</a><a name="bookmark31">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">It is possible to use a cross-compiler for building the OTA server for another target system. For example, building on an x86 Windows PC for an ARM Linux system. This process is relatively straight forward once the cross-compiler is properly installed and configured. To do this you must run make and pass it the name/location of the compiler and linker on the command-line.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">make CC=/opt/crosstool/gcc-4.0.1-glibc-2.3.5/arm-unknown-linux-gnu/bin/arm-unknown-linux-gnu-gcc LD=/opt/crosstool/gcc-4.0.1-glibc-2.3.5/arm-unknown-linux-gnu/bin/arm-unknown-linux-gnu-gcc</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Makefile expects a GCC style command-line compiler and it uses the compiler command (rather than the linker command directly) for linking.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s6" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark30">Using Encrypted GBL Images</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Encrypted images protect the new application image from inspection or tampering by using a symmetric encryption key. For more infor- mation about the Gecko Bootloader and encrypted GBL images, including changing the bootloader type and loading an encryption key onto the device, see <i>UG266: Silicon Labs Gecko Bootloader User Guide</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s13">www.silabs.com/products</a></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s13">www.silabs.com/quality</a></p><p class="s12" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s14" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="an728-ota-client-server-setup/Image_011.png"/></span></p><p class="s15" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s16" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="an728-ota-client-server-setup/Image_012.png"/></span></p><p class="s15" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s15" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
