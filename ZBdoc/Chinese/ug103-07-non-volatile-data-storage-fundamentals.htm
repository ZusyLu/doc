<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>ug103-07-non-volatile-data-storage-fundamentals</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; vertical-align: 3pt; }
 .s6 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s8 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s9 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s10 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s12 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 h4 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s15 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 a { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s16 { color: #FFF; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s17 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s18 { color: #231F20; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 h2 { color: #D91F2A; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt; }
 #l2> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l3 {padding-left: 0pt;counter-reset: e1 1; }
 #l3> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt;counter-reset: e1 2; }
 #l4> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l5 {padding-left: 0pt;counter-reset: e2 1; }
 #l5> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt;counter-reset: e2 1; }
 #l7> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l9 {padding-left: 0pt;counter-reset: e2 1; }
 #l9> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 li {display: block; }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">UG103.7: Non-Volatile Data Storage Fundamentals</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="209" height="1" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="210" height="1" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Review of the challenges and design options for implementing non-volatile data storage.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Review of the three dynamic data storage implementations.</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Comparison of the three dynamic data storage implementations.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document provides a general introduction to non-volatile da- ta storage using flash, with a focus on the three different dynamic data storage implementations offered for Silicon Labs microcon- trollers and radio SoCs (Systems on Chip). It offers a comparison of the three implementations and provides recommendations on when to use each. Additional detail on using the various data storage implementations may be found in the following docu- ments:</p><ul id="l2"><li><p class="s4" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">AN1154: Using Tokens for Non-Volatile Data Storage</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">AN703: Using Simulated EEPROM Version 1 and Version 2 for the EFR32 SoC Series 1 Platform</p></li><li><p class="s4" style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs’ <i>Fundamentals </i>series covers topics that project managers, application de- signers, and developers should understand before beginning to work on an embedded networking solution using Silicon Labs chips, networking stacks such as EmberZNet PRO or Silicon Labs <i>Bluetooth</i><span class="s5">®</span>, and associated development tools. The documents can be used as a starting place for anyone needing an introduction to developing wire- less networking applications, or who is new to the Silicon Labs development environ- ment.</p><p class="s6" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_005.png"/></span></p><ol id="l3"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Non-volatile memory (NVM) is memory that persists even when the device is power-cycled. On Silicon Labs microcontrollers and radio SoCs, the NVM is implemented as flash memory. In many applications the flash is not only used to store the application code but also to store data objects that are written and read frequently by the application. As flash memory can only be erased a limited number of times, several methods exist to efficiently read and write non-volatile data without wearing out the flash.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Some data is considered manufacturing data that is written only once at manufacturing time. This document is concerned with dynamic data that changes frequently over the life of the product.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document provides an introduction to the main design options for dynamic data storage in microcontrollers and radio SoCs, along with guidelines on what factors affect flash lifetime. In addition it introduces the main flash data storage implementations offered by Silicon Labs:</p></li></ol></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">NVM3</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Simulated EEPROM version 1 (SimEEv1) and version 2 (SimEEv2)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Persistent Store (PS Store)</p></li></ul><ol id="l4"><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Implementations of Non-Volatile Data Storage</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter introduces some of the challenges and design options when implementing non-volatile data storage in flash memory. It describes at a high level how non-volatile data storage is implemented in flash memory in PS Store, SimEEv1/v2, and NVM3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s7" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Basic Implementations</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="146" height="324" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_006.png"/></span></p><p class="s8" style="padding-top: 2pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">Object A</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="146" height="324" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_007.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s8" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Object B</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">One of the characteristics of flash memory is that it is writable in smaller pieces, usually 32-bit words, while it can only be erased in larger chunks, usually pages of several kilobytes. When using flash as data storage, the most straightforward implementation option would be to store each data object in its own flash page, as shown in the following figure. This way each object can be erased and re- written without influencing the other data objects. Usually the data objects are much smaller than the page size, and this solution is not an effective way of using the available flash space.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-style: normal; font-weight: normal; text-decoration: none;">	</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-top: 4pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.1.  One Object Per Page</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To avoid wasting flash space we can store several data objects in one flash page, as shown in the following figure. This solution then introduces a challenge when we want to write a new value to one of the data objects. In that case the page must be erased before all objects are written back to the page again, including the object we changed. As flash memory can only endure a limited amount of flash erases before the flash cells are worn out, this solution results in a very limited device lifetime.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:195pt"><td style="width:114pt;border-top-style:solid;border-top-width:4pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#A5A5A5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;padding-right: 17pt;text-indent: 0pt;text-align: center;">Flash Page</p></td></tr><tr style="height:43pt"><td style="width:114pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">Object B</p></td></tr><tr style="height:17pt"><td style="width:114pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 24pt;padding-right: 16pt;text-indent: 0pt;line-height: 13pt;text-align: center;">Object A</p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:195pt"><td style="width:114pt;border-top-style:solid;border-top-width:4pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#A5A5A5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;padding-right: 17pt;text-indent: 0pt;text-align: center;">Flash Page</p></td></tr><tr style="height:43pt"><td style="width:114pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 24pt;padding-right: 17pt;text-indent: 0pt;text-align: center;">Object B</p></td></tr><tr style="height:17pt"><td style="width:114pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 24pt;padding-right: 17pt;text-indent: 0pt;line-height: 13pt;text-align: center;">Object A (ver 2)</p></td></tr></table><p style="padding-left: 163pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;"> </span><span><img width="25" height="15" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_008.png"/></span><span style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;"> </span></p><p class="s7" style="padding-top: 8pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.2.  Multiple Objects in One Flash Page</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">To avoid erasing the flash page for every object write, we can instead write new versions of each object to new empty locations in the flash page. This is a simple form of wear-levelling that reduces the number of page erases. However, this requires that we store some identification information along with the object data that tells us what object the data belongs to, so we know how to find the latest ver- sion of the data object. This is illustrated in the following figure, where a key is added to each version of the object data to identify what object the data belongs to. When accessing an object we then need to search through the flash page for the most recent version of the object. In this case the newest version is the one with the highest address, as we start writing from the lowest address of the page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:237.188pt" cellspacing="0"><tr style="height:71pt"><td style="width:114pt;border-top-style:solid;border-top-width:4pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" colspan="2" bgcolor="#A5A5A5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:18pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object A (ver 3)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B (ver 3)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B (ver 2)</p></td></tr><tr style="height:18pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object A (ver 2)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B</p></td></tr><tr style="height:17pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;line-height: 13pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;line-height: 13pt;text-align: center;">Object A</p></td></tr></table><p class="s7" style="padding-top: 8pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.3.  Object Versions With Keys</p></li><li><p class="s7" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Handling Resets and Power Failures</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="59" height="310" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_009.png"/></span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">As we fill up the flash page with new versions of the data objects, eventually no room is left to write new object data. At this point we need to erase the page and start over by writing only the latest versions of each object to the flash page. In many applications, howev- er, power failures or resets can happen at any time, and we should not risk losing data if this occurs. If a reset occurs after the flash page is being erased, but before the data objects are written back, then we will lose this data. To handle this case we introduce a sec- ond page, to which we copy the latest version of the data objects, before erasing the original page, as shown in the following figure Then we can start filling the second page with data. When the second page is full we move the latest data back to the first page and so on. This mechanism, where the storage is alternated between two flash pages, is how PS Store operates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:10pt"><td style="width:114pt;border-top-style:solid;border-top-width:4pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" colspan="2" bgcolor="#A5A5A5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:18pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object A (ver 4)</p></td></tr><tr style="height:18pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object A (ver 3)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B (ver 4)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 22pt;text-indent: -7pt;line-height: 16pt;text-align: left;">Object B (ver 3) ERASE</p></td></tr><tr style="height:42pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B (ver 2)</p></td></tr><tr style="height:18pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object A (ver 2)</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Object B</p></td></tr><tr style="height:17pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;line-height: 13pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-left: 13pt;padding-right: 4pt;text-indent: 0pt;line-height: 13pt;text-align: center;">Object A</p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:195pt"><td style="width:114pt;border-top-style:solid;border-top-width:4pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" colspan="2" bgcolor="#A5A5A5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Flash Page</p></td></tr><tr style="height:43pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="text-indent: 0pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#C55911"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-right: 6pt;text-indent: 0pt;text-align: right;">Object B (ver 4)</p></td></tr><tr style="height:17pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:4pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:1pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;text-indent: 0pt;line-height: 13pt;text-align: right;">Key</p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#2E528E;border-left-style:solid;border-left-width:1pt;border-left-color:#2E528E;border-bottom-style:solid;border-bottom-width:4pt;border-bottom-color:#2E528E;border-right-style:solid;border-right-width:4pt;border-right-color:#2E528E" bgcolor="#70AC46"><p class="s9" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;line-height: 13pt;text-align: right;">Object A (ver 4)</p></td></tr></table><p style="padding-left: 155pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">	</span></p><p class="s7" style="padding-top: 8pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.4.  Latest Data Copied to New Page Before Erase</p></li><li><p class="s7" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Introducing Virtual Pages</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In some applications we write to data objects frequently, and the flash pages therefore also need to be erased frequently. As the data objects in the implementation so far are only spread across two flash pages, each page will frequently get erased and the flash lifetime will be limited. To increase the lifetime we can use more flash pages to store the data objects. In this example, instead of two physical pages, we operate with two virtual pages (A and B) that each consist of several physical flash pages. The virtual pages are erased and written to as if they were one larger flash page. The difference is simply that each virtual page is bigger and we can write more data before we need to erase the virtual page, hence the lifetime is extended. In addition to increasing flash lifetime, using several flash pages per virtual page allows you to store more or larger objects. SimEEv1 uses this design, with each virtual page consisting of two flash pages, A and B, as shown in the following figure.</p><p class="s10" style="padding-top: 7pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Virtual Page A                              Virtual Page B</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-style: normal; font-weight: normal; text-decoration: none;">	</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Flash Page</p><p style="text-indent: 0pt;text-align: left;"/><p class="s7" style="padding-top: 4pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.5.  Virtual Pages</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In some applications the time it takes to write a non-volatile data object must be minimized so as to not interfere with the timing of other critical operations. If an object write is triggered when a virtual page is full, the latest version of all objects must first be copied to the new virtual page before writing the new object version in question to the new page. All objects must be copied over immediately to allow the first page to be quickly erased so we can move data there in case of a failure. Copying all objects at once increases the worst-case object write time.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To reduce the write times, a third virtual page can be introduced that is always kept erased. Instead of copying over the latest version of every object when the first page is full, we can instead copy over only some of the objects. The rest of the objects are copied over as a part of subsequent write operations. This way we spread the copy process to the new page over more write operations, hence each write operation takes less time to complete. With this approach we have live object data spread out across two virtual pages and the third page is always kept erased, so we have somewhere to move the data to in case of a failure. SimEEv2 uses this implementation with 3 virtual pages where each virtual page consists of 6 flash pages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-top: 5pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Basic Storage</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Basic storage is defined as the size of all the latest version of all objects, including any overhead stored with them. Except for NVM3, every time a flash page or virtual page is erased we must first move the basic storage over to a new page. The basic storage size is important, as it determines how much flash space is left over in a page to store any new versions of the object data. If the basic storage takes up almost the entire page, we can only write a few new object versions before we need to move to a new page and erase the old one. This leads to frequent page erases and a short flash lifetime.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">NVM3 only copies unique objects that are stored in the page that will be erased. If newer versions of the object exist in other pages, the object will not be copied.</p></li><li><p class="s7" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">FIFO Model</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The flash data storage implementations can be modelled as a First-In First-Out (FIFO) buffer (see the following figure), where we write new versions to the input of the FIFO. As the FIFO fills up, we need to free up space by erasing one or more pages at the end of the FIFO. Before we erase a page, we need to copy any object versions for which no newer version of the same object exists in the rest of the flash pages. Other object data can be discarded, because newer versions exist. To maximize flash lifetime we want to copy as few object versions as possible, so that most of the writes to the flash memory are new versions of the objects. If the FIFO is implemented over a large flash space, it is more likely that the new version of the object has been written and that object versions at the end of the FIFO can be discarded. In this case the flash page can be erased with few or no object versions copied.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 160pt;text-indent: 0pt;text-align: left;"><span><img width="355" height="104" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.6.  FIFO Buffer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: justify;">A drawback of using a few virtual pages is that the available memory for the FIFO is limited to only the virtual pages that can hold live data. For implementations using two virtual pages, like SimEEv1, this means only half the storage space is used for the FIFO, while for SimEEv2 two thirds of the storage space is used for the FIFO.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To allow a higher portion of the storage space to be used for the FIFO, we can instead implement the FIFO as a circular buffer over the entire flash storage space allocated, as shown in the following figure. In this implementation we always need to keep enough erased pages in front of the leading edge of the buffer to write the largest-sized object in case of a failure. When the FIFO fills up to reach the critical number of erased flash pages, we copy over any object versions that have not been superseded and erase the page at the back of the FIFO. This means that, instead of keeping a full virtual page erased, we only need to keep enough space erased to fit the largest- sized object. We can use the rest of the space for the FIFO. NVM3 is implemented as a circular buffer implemented over the entire storage space, thus increasing flash lifetime compared to implementations using smaller virtual pages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 212pt;text-indent: 0pt;text-align: left;"><span><img width="210" height="326" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_011.jpg"/></span></p><p class="s7" style="padding-top: 6pt;padding-left: 170pt;text-indent: 0pt;text-align: center;">Figure 2.7.  Circular Buffer</p></li><li><p class="s7" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark7">Counter Objects</a></p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">For some types of data, the storage format can be optimized for the flash medium. EFR32 Series 0 and 1 can write each word two times, allowing for half word updates. Series 2 devices allow just one write per word.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For example, counter values are usually incremented by 1 or some other low value every time they are written. Normally this means that we would have to write the entire counter value in addition to identification bytes every time the counter is incremented. We can optimize this by only storing a start value in addition to the identification value the first time a counter is written. Then we reserve a number of the words following the initial value for writing increments. The flash words in Silicon Labs devices EFR32 Series 0 and 1 can write words twice between each erase by keeping a 1 in the bits that are not to be changed.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">As an example, assume we are writing two 16 bit values, 0xAAAA and 0x5555. To safely write them in the same flash word this method can be used:</p><ul id="l6"><li><p style="padding-top: 8pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Write 0xFFFFAAAA (word in flash becomes 0xFFFFAAAA)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Write 0x5555FFFF (word in flash becomes 0x5555AAAA)</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Note that there is a maximum of two writes to the same word between each erase due to a physical limitation of the flash.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">To find the current counter value, we start with the initial value and add the increment values in the halfwords following the initial value. This means that we only need to write one halfword for each increment, instead of the whole counter value and identification value. NVM3 and SimEEv1/v2 support counter objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark8">Indexed Objects</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When storing data such as arrays in flash, we often only update one index at a time. If we store the whole array as one regular object, we must write the whole array to flash even if just one index is updated. Instead of storing the entire array in one object, we can divide each data array over multiple objects and only update the objects holding the changed array indexes. While it is possible to split arrays into multiple objects manually for all the Silicon Labs storage implementations, SimEEv1/v2 allow all of the indexes to share one object key. The index entry into the array to be looked up is then provided as a separate parameter.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">NVM3 does not support reading and writing parts of an object. If the application wants to access indexes individually, each index must be accessed using a unique key.</p><p class="s6" style="padding-bottom: 3pt;padding-left: 387pt;text-indent: 0pt;text-align: left;">Dynamic Data Storage Implementations</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_012.png"/></span></p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark9">Dynamic Data Storage Implementations</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter introduces some of the dynamic data storage implementations offered by Silicon Labs, including SimEEv1 and SimEEv2, PS Store, and NVM3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li><p class="s7" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">SimEEv1/v2</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">SimEEv1/v2 can be used with EmberZNet PRO and Silicon Labs Connect (installed with the Flex SDK). SimEEv1 uses two virtual pa- ges with a fixed total size of 8 kB, while SimEEv2 uses three virtual pages with a fixed total size of 36 kB.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">One characteristic of SimEEv1/v2 is that all objects are defined with size and type at compile time, hence a new object cannot be cre- ated or deleted at runtime.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Silicon Labs provides a plugin for upgrading SimEEv1 data to SimEEv2.</p><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">Information about the SimEEv1/v2 implementations is found in <i>AN703: Using Simulated EEPROM Version 1 and Version 2 for the EFR32 Series 1 SoC Platform</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">PS Store</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">PS Store can be used with Bluetooth devices on all platforms except for EFR32 Series 2. PS Store API commands are used to manage user data in PS keys in the flash memory of the Bluetooth device. User data stored within the flash memory is persistent across reset and power cycling of the device. The persistent store size is 2048 bytes and uses two flash pages for storage. As Bluetooth bondings are also stored in this area, the space available for user data also depends on the number of bondings the device has at the time. The size of a Bluetooth bonding is around 150 bytes. With its simple implementation and few storage flash pages, PS Store is the smallest of Silicon Labs&#39; non-volatile storage options. PS Store allows objects to be created and deleted at runtime.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Information about the PS Store APIs may be found in the <i>Bluetooth API Software Reference Manual</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s7" style="padding-top: 6pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">NVM3</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The third generation Non-Volatile Memory (NVM3) data storage driver is an alternative to SimEEv1/v2 and PS Store. The NVM3 driver provides a means to write and read data objects (key/value pairs) stored in flash. Wear-leveling is applied to reduce erase and write cycles and maximize flash lifetime. The driver is resilient to power loss and reset events, ensuring that objects retrieved from the driver are always in a valid state. Because NVM3 can be used with several protocols, such as Bluetooth and EmberZNet PRO, it allows a single data storage instance to be shared in Dynamic Multiprotocol (DMP) applications.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Some of the main features of NVM3 are as follows:</p><ul id="l8"><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Key/value pair data storage in flash</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Runtime creation and deletion of objects</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Persistence across power loss and reset events</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Wear-leveling to maximize flash lifetime</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Object sizes from 0 to 4096 bytes</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Configurable flash storage size (minimum 3 flash pages)</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Cache with configurable size for fast object access</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Data and counter object types</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Compatibility layers with token and PS Store APIs provided</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Single shared storage instance in multiprotocol applications</p></li><li><p style="padding-top: 3pt;padding-left: 36pt;text-indent: -9pt;text-align: left;">Repack API to allow application to run clean-up page erases during periods with low CPU load</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="http://devtools.silabs.com/dl/documentation/doxygen/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Detailed information on NVM3 is documented in the EMDRV-&gt;NVM3 section of the </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Gecko HAL &amp; Driver API Reference Guide</span>. Users who are accessing NVM3 through its native API should refer to this API reference guide for information. Users who are developing dynamic multiprotocol applications should refer to <i>AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage</i>.</p></li></ol></li><li><h3 style="padding-top: 7pt;padding-left: 39pt;text-indent: -15pt;text-align: left;"><a name="bookmark13">Comparing Non-Volatile Data Storage Implementations</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;">The following table presents an overview of the main features of the various Silicon Labs Non-Volatile Data Storage implementations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 170pt;text-indent: 0pt;text-align: center;">Table 4.1.  NV Data Storage Implementation Comparison</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:24pt" cellspacing="0"><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Feature</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s12" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SimEEv1</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s12" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">SimEEv2</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s12" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">PS Store</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Compatible devices</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFM32, EFR32</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EFR32 Series 1</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">EFR32 Series 1</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">EFR32 Series 1</p></td></tr><tr style="height:40pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Compatible radio proto- cols</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">EmberZNet, Connect, Z- Wave, OpenThread, Bluetooth</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">EmberZNet, Connect</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">EmberZNet, Connect</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Bluetooth</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flash used for storage</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3 or more flash pages</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">8 KB</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">36 KB</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">4 KB</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Virtual pages</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NA</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">NA</p></td></tr><tr style="height:40pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">Max basic storage (Sum of all object data with overhead)</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">Variable (see <i>AN1135 </i>for details)</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2 KB</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">8 KB</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">2 KB</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Max number of objects</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Limited by basic storage</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">254</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">254</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Limited by basic storage</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Max object size (bytes)</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Configurable 208-4096</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">254</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">254</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">56</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Object creation/deletion</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Runtime</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Compile time</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Compile time</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Runtime</p></td></tr><tr style="height:30pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Compiled flash size ex- cluding data storage</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">9.1 KB</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3.5 KB</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">5.4 KB</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">1.6 KB</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Counter object support</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">No</p></td></tr><tr style="height:19pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Indexed object support</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Partial (note 1)</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Yes</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">No</p></td></tr><tr style="height:30pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Overhead per object (bytes)</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">4 (size &lt;= 128 bytes); 8 (size &gt; 128 bytes)</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">6</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">10</p></td></tr><tr style="height:30pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Counter object size in- cluding overhead (bytes)</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">212</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">60</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">56</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">NA</p></td></tr><tr style="height:30pt"><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Counter increments be- fore rewrite</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">100 (EFR32 Series 1); 50</p><p class="s13" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(EFR32 Series 2)</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">25</p></td><td style="width:109pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">25</p></td><td style="width:110pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s13" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">NA</p></td></tr></table><p style="padding-top: 7pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Note 1: When using NVM3, indexed objects are implemented by storing each index in a separate NVM3 object.</p><ol id="l9"><li><p class="s7" style="padding-top: 8pt;padding-left: 41pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Flash Lifetime</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">All Silicon Labs Flash Data Storage implementations use some form of wear-levelling to prolong flash lifetime. The effectiveness of the wear-levelling depends on the implementation, the type of data stored, and how often it is updated. The main factors that affect wear- levelling and thereby flash lifetime are:</p><ul id="l10"><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Size of flash used for data storage: More flash area gives longer flash lifetime. For NVM3, the number of flash pages used for data storage can be configured, while the rest of the implementations use fixed storage sizes.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Stored overhead per object: When writing data to the object storage, some overhead bytes are added to identify the data. Implemen- tation with less overhead means the data objects take up less space in flash, and gives longer flash lifetime.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Alignment to minimum object size: Objects are stored in multiples of the smallest object size. If the data size does not align with this size, padding bytes are added, which adds to the stored data and reduces flash lifetime. For instance, when storing 16-bit objects, NVM3 and PS Store add two extra bytes of padding in addition to the overhead bytes. SimEEv1/v2 are able to store 16-bit data objects without padding.</p></li><li><p style="padding-top: 2pt;padding-left: 36pt;text-indent: -9pt;text-align: justify;">Remaining storage after basic storage: For implementations using virtual pages, when switching to a new virtual page one instance of each object is written to the page. The rest of the virtual page can then be used to store new writes of the objects. If a lot of space is used to store one instance of each object, little space is left in the virtual page to use for wear-levelling the subsequent object writes. The flash lifetime will therefore be reduced when the total amount of object data is large relative to the virtual page size. Even for NVM3, where virtual pages are not used, the flash lifetime is limited by the available space of the total NVM3 storage.</p></li></ul><p style="padding-top: 8pt;padding-left: 24pt;text-indent: 0pt;text-align: justify;">To help monitor the actual flash wear, NVM3 and SimEEv1/v2 include function calls for reporting the number of page erases of the data storage flash pages. These erase counters can be read during accelerated lifetime testing of a product to verify if the flash wears at an acceptable rate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Smart. Connected. Energy-Friendly.</h4><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Products</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products">www.silabs.com/products</a></p><p class="s15" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Quality</p><p style="text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality">www.silabs.com/quality</a></p><p class="s15" style="text-indent: 0pt;line-height: 9pt;text-align: center;">Support and Community</p><p class="s16" style="text-indent: 0pt;text-align: center;">community.silabs.com</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">		</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="767" height="695" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_013.png"/></span></p><p class="s17" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s18" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software implementers using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each specific device, and &quot;Typical&quot; parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the information supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required, or Life Support Systems without the specific written consent of Silicon Labs. A &quot;Life Support System&quot; is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trademark Information</p><p class="s18" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Silicon Laboratories Inc.®, Silicon Laboratories®, Silicon Labs®, SiLabs® and the Silicon Labs logo®, Bluegiga®, Bluegiga Logo®, ClockBuilder®, CMEMS®, DSPLL®, EFM®, EFM32®, EFR, Ember®, Energy Micro, Energy Micro logo and combinations thereof, &quot;the world’s most energy friendly microcontrollers&quot;, Ember®, EZLink®, EZRadio®, EZRadioPRO®, Gecko®, Gecko OS, Gecko OS Studio, ISOmodem®, Precision32®, ProSLIC®, Simplicity Studio®, SiPHY®, Telegesis, the Telegesis Logo®, USBXpress® , Zentri, the Zentri logo and Zentri DMS, Z- Wave®, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Holdings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="75" alt="image" src="ug103-07-non-volatile-data-storage-fundamentals/Image_014.png"/></span></p><p class="s17" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s17" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">USA</p><p style="padding-top: 5pt;padding-left: 168pt;text-indent: 0pt;text-align: left;"><h2 href="http://www.silabs.com/">http://www.silabs.com</h2></p></body></html>
