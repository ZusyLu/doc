<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>UG162: Simplicity Commander Reference Guide</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s2 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 18pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .a, a { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s10 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s13 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .s14 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 .s15 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s16 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s18 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s19 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s20 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s21 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s22 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s23 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s24 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s25 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s26 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s27 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s29 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s30 { color: #555455; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s31 { color: #A0B82D; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s32 { color: #E17F26; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s33 { color: #049; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s34 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s35 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s36 { color: #049; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s37 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s38 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s39 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s40 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s41 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s42 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s44 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s45 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s46 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h4 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l5 {padding-left: 0pt;counter-reset: d3 1; }
 #l5> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l6 {padding-left: 0pt;counter-reset: d2 1; }
 #l6> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l7 {padding-left: 0pt;counter-reset: d2 1; }
 #l7> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l8 {padding-left: 0pt;counter-reset: d2 1; }
 #l8> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l9 {padding-left: 0pt;counter-reset: d3 1; }
 #l9> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l10 {padding-left: 0pt;counter-reset: d3 1; }
 #l10> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l11 {padding-left: 0pt;counter-reset: d3 1; }
 #l11> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l12 {padding-left: 0pt;counter-reset: d3 1; }
 #l12> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l13 {padding-left: 0pt;counter-reset: d3 1; }
 #l13> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l14 {padding-left: 0pt;counter-reset: d3 1; }
 #l14> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l15 {padding-left: 0pt;counter-reset: d3 1; }
 #l15> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l16 {padding-left: 0pt;counter-reset: d3 1; }
 #l16> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l17 {padding-left: 0pt;counter-reset: d3 1; }
 #l17> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l18 {padding-left: 0pt;counter-reset: d3 1; }
 #l18> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l19 {padding-left: 0pt;counter-reset: d3 1; }
 #l19> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l20 {padding-left: 0pt;counter-reset: d3 1; }
 #l20> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l21 {padding-left: 0pt;counter-reset: d3 1; }
 #l21> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l22 {padding-left: 0pt;counter-reset: d3 1; }
 #l22> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 li {display: block; }
 #l23 {padding-left: 0pt;counter-reset: e1 1; }
 #l23> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l24 {padding-left: 0pt; }
 #l24> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l25 {padding-left: 0pt;counter-reset: e2 1; }
 #l25> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l25> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l26 {padding-left: 0pt;counter-reset: e2 1; }
 #l26> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l26> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l27 {padding-left: 0pt; }
 #l27> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l28 {padding-left: 0pt;counter-reset: e3 1; }
 #l28> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt;counter-reset: e2 1; }
 #l30> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l30> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l31 {padding-left: 0pt;counter-reset: i1 4; }
 #l31> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l31> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l32 {padding-left: 0pt;counter-reset: i2 2; }
 #l32> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l33 {padding-left: 0pt; }
 #l33> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l35 {padding-left: 0pt;counter-reset: e2 1; }
 #l35> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l35> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l36 {padding-left: 0pt; }
 #l36> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l37 {padding-left: 0pt; }
 #l37> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l38 {padding-left: 0pt; }
 #l38> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l39 {padding-left: 0pt;counter-reset: e2 1; }
 #l39> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l39> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l40 {padding-left: 0pt;counter-reset: e3 1; }
 #l40> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l40> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l41 {padding-left: 0pt; }
 #l41> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l42 {padding-left: 0pt;counter-reset: e3 1; }
 #l42> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l43 {padding-left: 0pt;counter-reset: e3 1; }
 #l43> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l43> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l44 {padding-left: 0pt; }
 #l44> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l45 {padding-left: 0pt;counter-reset: e3 1; }
 #l45> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l45> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l46 {padding-left: 0pt; }
 #l46> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l47 {padding-left: 0pt;counter-reset: e3 1; }
 #l47> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l47> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l48 {padding-left: 0pt;counter-reset: e3 1; }
 #l48> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l48> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l49 {padding-left: 0pt;counter-reset: e4 1; }
 #l49> li>*:first-child:before {counter-increment: e4; content: counter(e4, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l49> li:first-child>*:first-child:before {counter-increment: e4 0;  }
 #l50 {padding-left: 0pt;counter-reset: e3 1; }
 #l50> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l50> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l51 {padding-left: 0pt;counter-reset: e3 1; }
 #l51> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l51> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l52 {padding-left: 0pt;counter-reset: e3 1; }
 #l52> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l52> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l53 {padding-left: 0pt;counter-reset: e3 1; }
 #l53> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l53> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l54 {padding-left: 0pt; }
 #l54> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l55 {padding-left: 0pt;counter-reset: e3 1; }
 #l55> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l55> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l56 {padding-left: 0pt;counter-reset: e3 1; }
 #l56> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l56> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l57 {padding-left: 0pt;counter-reset: e3 1; }
 #l57> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l57> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l58 {padding-left: 0pt; }
 #l58> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l59 {padding-left: 0pt;counter-reset: e3 1; }
 #l59> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l59> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l60 {padding-left: 0pt;counter-reset: e3 1; }
 #l60> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l60> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l61 {padding-left: 0pt; }
 #l61> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l62 {padding-left: 0pt;counter-reset: t1 6; }
 #l62> li>*:first-child:before {counter-increment: t1; content: counter(t1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l62> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 #l63 {padding-left: 0pt;counter-reset: t2 17; }
 #l63> li>*:first-child:before {counter-increment: t2; content: counter(t1, decimal)"."counter(t2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l63> li:first-child>*:first-child:before {counter-increment: t2 0;  }
 #l64 {padding-left: 0pt;counter-reset: t3 3; }
 #l64> li>*:first-child:before {counter-increment: t3; content: counter(t1, decimal)"."counter(t2, decimal)"."counter(t3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l64> li:first-child>*:first-child:before {counter-increment: t3 0;  }
 #l65 {padding-left: 0pt; }
 #l65> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l66 {padding-left: 0pt; }
 #l66> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l67 {padding-left: 0pt;counter-reset: w1 6; }
 #l67> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l67> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 #l68 {padding-left: 0pt;counter-reset: w2 17; }
 #l68> li>*:first-child:before {counter-increment: w2; content: counter(w1, decimal)"."counter(w2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l68> li:first-child>*:first-child:before {counter-increment: w2 0;  }
 #l69 {padding-left: 0pt;counter-reset: w3 9; }
 #l69> li>*:first-child:before {counter-increment: w3; content: counter(w1, decimal)"."counter(w2, decimal)"."counter(w3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l69> li:first-child>*:first-child:before {counter-increment: w3 0;  }
 #l70 {padding-left: 0pt; }
 #l70> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l71 {padding-left: 0pt;counter-reset: y1 6; }
 #l71> li>*:first-child:before {counter-increment: y1; content: counter(y1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l71> li:first-child>*:first-child:before {counter-increment: y1 0;  }
 #l72 {padding-left: 0pt;counter-reset: y2 17; }
 #l72> li>*:first-child:before {counter-increment: y2; content: counter(y1, decimal)"."counter(y2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l72> li:first-child>*:first-child:before {counter-increment: y2 0;  }
 #l73 {padding-left: 0pt;counter-reset: y3 18; }
 #l73> li>*:first-child:before {counter-increment: y3; content: counter(y1, decimal)"."counter(y2, decimal)"."counter(y3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l73> li:first-child>*:first-child:before {counter-increment: y3 0;  }
 #l74 {padding-left: 0pt; }
 #l74> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l75 {padding-left: 0pt;counter-reset: e3 1; }
 #l75> li>*:first-child:before {counter-increment: e3; content: counter(e1, decimal)"."counter(e2, decimal)"."counter(e3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l75> li:first-child>*:first-child:before {counter-increment: e3 0;  }
 #l76 {padding-left: 0pt;counter-reset: e2 1; }
 #l76> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l76> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 #l77 {padding-left: 0pt; }
 #l77> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l78 {padding-left: 0pt; }
 #l78> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l79 {padding-left: 0pt; }
 #l79> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l80 {padding-left: 0pt; }
 #l80> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l81 {padding-left: 0pt; }
 #l81> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l82 {padding-left: 0pt; }
 #l82> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l83 {padding-left: 0pt; }
 #l83> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l84 {padding-left: 0pt; }
 #l84> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l85 {padding-left: 0pt; }
 #l85> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l86 {padding-left: 0pt; }
 #l86> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l87 {padding-left: 0pt; }
 #l87> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l88 {padding-left: 0pt; }
 #l88> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l89 {padding-left: 0pt; }
 #l89> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l90 {padding-left: 0pt; }
 #l90> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l91 {padding-left: 0pt; }
 #l91> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l92 {padding-left: 0pt; }
 #l92> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l93 {padding-left: 0pt; }
 #l93> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l94 {padding-left: 0pt; }
 #l94> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l95 {padding-left: 0pt; }
 #l95> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l96 {padding-left: 0pt; }
 #l96> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l97 {padding-left: 0pt; }
 #l97> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p class="s2" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Rev. 2.1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s1" style="text-indent: 0pt;line-height: 9pt;text-align: left;">silabs.com <span class="s2">| Building a more connected world.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="816" height="55" alt="image" src="ug162-simplicity-commander-reference-guide/Image_001.png"/></span></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="ug162-simplicity-commander-reference-guide/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">UG162: Simplicity Commander Reference Guide</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="ug162-simplicity-commander-reference-guide/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="199" height="1" alt="image" src="ug162-simplicity-commander-reference-guide/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s3" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="200" height="1" alt="image" src="ug162-simplicity-commander-reference-guide/Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s4" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Introduces Simplicity Commander.</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Adds new features and commands.</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Describes the file formats supported by Simplicity Commander.</p></li><li><p class="s4" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Includes detailed syntax of all Simplicity Commander commands and example command line inputs and outputs.</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document describes how and when to use the Command- Line Interface (CLI) of Simplicity Commander. Simplicity Commander supports all EFR32 Wireless SoCs, EFR32 Wireless SoC modules (such as the MGM111 or MGM12P), EFM32 MCU families, and EM3xx Wireless SOCs. EFM8 MCU families are not supported at this time.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This document is intended for software engineers, hardware engineers, and release engineers. Silicon Labs recommends that you review this document to familiarize your- self with the CLI commands and their intended uses. You can refer to specific sections of this document to access operational information as needed. This document also in- cludes examples so you can gain an understanding of Simplicity Commander in action.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document is up-to-date with Simplicity Commander version 1.10.3. See section</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span style=" color: #00449A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">7. Software Revision History </span>for a list of new features and commands for previous ver- sions of the application.</p><p class="s2" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Rev. 2.1 | 2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s1" style="text-indent: 0pt;line-height: 9pt;text-align: left;">silabs.com <span class="s2">| Building a more connected world.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="816" height="55" alt="image" src="ug162-simplicity-commander-reference-guide/Image_006.png"/></span></p><h3 style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">Table of Contents</a></h3><ol id="l2"><li><p style="padding-top: 12pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark2" class="s7">Introduction 6</a></p></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark7" class="s7">File Format Overview 7</a></p><ol id="l3"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark8" class="a">Motorola S-record (s37) File Format </a><a href="#bookmark8">7</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark9" class="a">Update Image File Formats </a><a href="#bookmark9">7</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark10" class="a">Intel HEX-32 File Format </a><a href="#bookmark10">8</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark22" class="s7">General Information 9</a></p><ol id="l4"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark23" class="a">Installing Simplicity Commander </a><a href="#bookmark23">9</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark24" class="a">Command Line Syntax </a><a href="#bookmark24">9</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark25" class="a">General Options </a><a href="#bookmark25">10</a></p><ol id="l5"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark26" class="a">Help (</a><a href="#bookmark26" class="s10">--help</a><a href="#bookmark26" class="a">) </a><a href="#bookmark26">10</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark27" class="a">Version (</a><a href="#bookmark27" class="s10">--version</a><a href="#bookmark27" class="a">) </a><a href="#bookmark27">12</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark28" class="a">Device (</a><a href="#bookmark28" class="s10">--device &lt;device name&gt;</a><a href="#bookmark28" class="a">) </a><a href="#bookmark28">12</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark29" class="a">J-Link Connection Options </a><a href="#bookmark29">13</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark30" class="a">Debug Interface Configuration </a><a href="#bookmark30">13</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark31" class="a">Graphical User Interface </a><a href="#bookmark31">14</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark32" class="a">Output and Exit Status </a><a href="#bookmark32">14</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark42" class="s7">EFR32 Custom Tokens 15</a></p><ol id="l6"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark43" class="a">Introduction </a><a href="#bookmark43">15</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark44" class="a">Custom Token Groups </a><a href="#bookmark44">15</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark45" class="a">Creating Custom Token Groups </a><a href="#bookmark45">15</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark46" class="a">Defining Tokens </a><a href="#bookmark46">16</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark47" class="a">Memory Regions </a><a href="#bookmark47">16</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark48" class="a">Token File Format Description </a><a href="#bookmark48">17</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark49" class="a">Using Custom Token Files </a><a href="#bookmark49">17</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark50" class="a">Using Custom Token Files in Any Location </a><a href="#bookmark50">17</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark55" class="s7">Security Overview 18</a></p><ol id="l7"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark56" class="a">Security Store </a><a href="#bookmark56">18</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark57" class="a">Access Certificate </a><a href="#bookmark57">18</a></p></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark58" class="a">Challenge and Command Signing </a><a href="#bookmark58">19</a></p></li></ol></li><li><p style="padding-top: 9pt;padding-left: 38pt;text-indent: -16pt;text-align: left;"><a href="#bookmark178" class="s7">Simplicity Commander Commands 20</a></p><ol id="l8"><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark179" class="a">Device Flashing Commands </a><a href="#bookmark179">20</a></p><ol id="l9"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark180" class="a">Flash Image File </a><a href="#bookmark180">21</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark181" class="a">Flash Using IP Address without Verification and Reset </a><a href="#bookmark181">21</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark182" class="a">Flash Several Files </a><a href="#bookmark182">22</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark183" class="a">Patch Flash </a><a href="#bookmark183">23</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark184" class="a">Patch Using Input File </a><a href="#bookmark184">24</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark185" class="a">Flash Tokens </a><a href="#bookmark185">25</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark186" class="a">Flash Verification Command </a><a href="#bookmark186">26</a></p></li><li><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark187" class="a">Memory Read Commands </a><a href="#bookmark187">26</a></p><ol id="l10"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark188" class="a">Print Flash Contents </a><a href="#bookmark188">27</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark189" class="a">Dump Flash Contents to File </a><a href="#bookmark189">27</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark190" class="a">Token Commands </a><a href="#bookmark190">28</a></p><ol id="l11"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark191" class="a">Print Tokens </a><a href="#bookmark191">28</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark192" class="a">Dump Tokens to File </a><a href="#bookmark192">28</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark193" class="a">Dump Tokens from Image File </a><a href="#bookmark193">29</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark194" class="a">Generate C Header Files from Token Groups </a><a href="#bookmark194">29</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark195" class="a">Convert and Modify File Commands </a><a href="#bookmark195">29</a></p><ol id="l12"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark196" class="a">Combine Two Files </a><a href="#bookmark196">30</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark197" class="a">Define Specific Bytes </a><a href="#bookmark197">30</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark198" class="a">Define Tokens </a><a href="#bookmark198">31</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark199" class="a">Dump File Contents </a><a href="#bookmark199">31</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark200" class="a">Signing an Application for Secure Boot </a><a href="#bookmark200">32</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark201" class="a">Signing an Application for Secure Boot using a Hardware Security Module </a><a href="#bookmark201">32</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark202" class="a">Signing an Application for Secure Boot Signing using a Signature Created by a </a><a href="#bookmark202">Hardware</a></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;"><a href="#bookmark202" class="a">Security Module </a><a href="#bookmark202">33</a></p></li><li><p style="padding-top: 2pt;padding-left: 82pt;text-indent: -33pt;text-align: left;"><a href="#bookmark203" class="a">Adding a CRC32 for Gecko Bootloader </a><a href="#bookmark203">33</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark204" class="a">Signing an Application for Secure Boot using an Intermediary Certificate </a><a href="#bookmark204">34</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark205" class="a">EBL Commands </a><a href="#bookmark205">35</a></p><ol id="l13"><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark206" class="a">Print EBL Information </a><a href="#bookmark206">35</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark207" class="a">EBL Key Generation </a><a href="#bookmark207">35</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark208" class="a">EBL File Creation </a><a href="#bookmark208">36</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark209" class="a">EBL File Parsing </a><a href="#bookmark209">36</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark210" class="a">Memory Usage Information from AAT </a><a href="#bookmark210">37</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark211" class="a">GBL Commands </a><a href="#bookmark211">37</a></p><ol id="l14"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark212" class="a">GBL File Creation </a><a href="#bookmark212">37</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark213" class="a">GBL File Creation with Compression </a><a href="#bookmark213">38</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark214" class="a">Creating a GBL File for Bootloader Upgrade </a><a href="#bookmark214">38</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark215" class="a">Creating a GBL File for Secure Element Upgrade </a><a href="#bookmark215">39</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark216" class="a">Creating a Signed and Encrypted GBL Upgrade Image File from an Application </a><a href="#bookmark216">39</a></p></li><li><p style="padding-top: 1pt;padding-left: 78pt;text-indent: -30pt;text-align: left;"><a href="#bookmark217" class="a">Creating a Partial Signed and Encrypted GBL Upgrade File for Use with a Hardware Security Module </a><a href="#bookmark217">40</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark218" class="a">Creating a Signed GBL File Using a Hardware Security Module </a><a href="#bookmark218">40</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark219" class="a">GBL File Parsing </a><a href="#bookmark219">41</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark220" class="a">GBL Key Generation </a><a href="#bookmark220">41</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark221" class="a">Generating a Signing Key </a><a href="#bookmark221">41</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark222" class="a">Generate a Signing Key Using a Hardware Security Module </a><a href="#bookmark222">41</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark223" class="a">Kit Utility Commands </a><a href="#bookmark223">41</a></p><ol id="l15"><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark224" class="a">Firmware Upgrade </a><a href="#bookmark224">41</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark225" class="a">Kit Information Probe </a><a href="#bookmark225">42</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark226" class="a">Adapter Reset Command </a><a href="#bookmark226">42</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark227" class="a">Adapter Debug Mode Command </a><a href="#bookmark227">43</a></p></li><li><p style="padding-top: 2pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark228" class="a">List Adapter IP Configuration Command </a><a href="#bookmark228">43</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark229" class="a">Adapter DHCP Command </a><a href="#bookmark229">43</a></p></li><li><p style="padding-top: 2pt;padding-left: 82pt;text-indent: -33pt;text-align: left;"><a href="#bookmark230" class="a">Set Static IP Configuration Command </a><a href="#bookmark230">44</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -21pt;text-align: left;"><a href="#bookmark231" class="a">Device Erase Commands </a><a href="#bookmark231">44</a></p><ol id="l16"><li><p style="padding-top: 3pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark232" class="a">Erase Chip </a><a href="#bookmark232">44</a></p></li><li><p style="padding-top: 1pt;padding-left: 79pt;text-indent: -30pt;text-align: left;"><a href="#bookmark233" class="a">Erase Region </a><a href="#bookmark233">44</a></p></li><li><p style="padding-top: 1pt;padding-left: 82pt;text-indent: -33pt;text-align: left;"><a href="#bookmark234" class="a">Erase Pages in Address Range </a><a href="#bookmark234">45</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark235" class="a">Device Lock and Protection Commands </a><a href="#bookmark235">45</a></p><ol id="l17"><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark236" class="a">Debug Lock </a><a href="#bookmark236">45</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark237" class="a">Debug Unlock </a><a href="#bookmark237">45</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark238" class="a">Write Protect Flash Ranges </a><a href="#bookmark238">46</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark239" class="a">Write Protect Flash Region </a><a href="#bookmark239">46</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark240" class="a">Disable Write Protection </a><a href="#bookmark240">46</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark241" class="a">Device Utility Commands </a><a href="#bookmark241">46</a></p><ol id="l18"><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark242" class="a">Device Information Command </a><a href="#bookmark242">47</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark243" class="a">Device Reset Command </a><a href="#bookmark243">47</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark244" class="a">Device Recovery Command </a><a href="#bookmark244">47</a></p></li><li><p style="padding-top: 2pt;padding-left: 88pt;text-indent: -39pt;text-align: left;"><a href="#bookmark245" class="a">Device Z-Wave QR Code Command </a><a href="#bookmark245">48</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-bottom: 2pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark246" class="a">External SPI Flash Commands </a><a href="#bookmark246">48</a></p><table style="border-collapse:collapse;margin-left:46.0075pt" cellspacing="0"><tr style="height:14pt"><td style="width:226pt"><p style="padding-left: 2pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark247" class="s11">6.12.1 Erase External SPI Flash Command</a></p></td><td style="width:270pt"><p class="s12" style="padding-left: 78pt;padding-right: 77pt;text-indent: 0pt;line-height: 12pt;text-align: center;">. . . . . . . . . . . . . . . . . . .</p></td><td style="width:24pt"><p style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><a href="#bookmark247" class="s11">.48</a></p></td></tr><tr style="height:15pt"><td style="width:226pt"><p style="padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark248" class="s11">6.12.2 Read External SPI Flash Command</a></p></td><td style="width:270pt"><p class="s12" style="padding-left: 78pt;padding-right: 77pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . .</p></td><td style="width:24pt"><p style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark248" class="s11">.49</a></p></td></tr><tr style="height:14pt"><td style="width:226pt"><p style="padding-left: 2pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark249" class="s11">6.12.3 Write External SPI Flash Command</a></p></td><td style="width:270pt"><p class="s12" style="padding-left: 78pt;padding-right: 77pt;text-indent: 0pt;line-height: 12pt;text-align: center;">. . . . . . . . . . . . . . . . . . .</p></td><td style="width:24pt"><p style="padding-left: 4pt;padding-right: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><a href="#bookmark249" class="s11">.49</a></p></td></tr></table></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark250" class="a">Advanced Energy Monitor Measure Command </a><a href="#bookmark250">50</a></p></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark251" class="a">Serial Wire Output Read Commands </a><a href="#bookmark251">50</a></p><ol id="l19"><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark252" class="a">Configure SWO Speed </a><a href="#bookmark252">50</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark253" class="a">Read SWO Until Timeout </a><a href="#bookmark253">50</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark254" class="a">Read SWO Until a Marker Is Found </a><a href="#bookmark254">51</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark255" class="a">Dump Hex Encoded SWO Output </a><a href="#bookmark255">51</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark256" class="a">NVM3 Commands </a><a href="#bookmark256">51</a></p><ol id="l20"><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark257" class="a">Read NVM3 Data From a Device </a><a href="#bookmark257">52</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark258" class="a">Parse NVM3 Data </a><a href="#bookmark258">52</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark259" class="a">Initialize NVM3 Area in a File </a><a href="#bookmark259">53</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark260" class="a">Write NVM3 Data Using a Text File </a><a href="#bookmark260">54</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark261" class="a">Write NVM3 Data Using CLI Options </a><a href="#bookmark261">55</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark262" class="a">CTUNE Commands </a><a href="#bookmark262">55</a></p><ol id="l21"><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark263" class="a">CTUNE Get Command </a><a href="#bookmark263">56</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark264" class="a">CTUNE Set Command </a><a href="#bookmark264">56</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark265" class="a">CTUNE Autoset Command </a><a href="#bookmark265">56</a></p></li></ol></li><li><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -27pt;text-align: left;"><a href="#bookmark266" class="a">Security Commands </a><a href="#bookmark266">56</a></p><ol id="l22"><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark267" class="a">Get Device Status </a><a href="#bookmark267">57</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark268" class="a">Generate Key Pair </a><a href="#bookmark268">57</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark269" class="a">Write Public Key to Device </a><a href="#bookmark269">58</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark270" class="a">Read Public Key from Device </a><a href="#bookmark270">58</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark271" class="a">Configure Lock Options </a><a href="#bookmark271">59</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark272" class="a">Lock Debug Access </a><a href="#bookmark272">59</a></p></li><li><p style="padding-top: 2pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark273" class="a">Secure Debug Unlock </a><a href="#bookmark273">60</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark274" class="a">Disable Tamper </a><a href="#bookmark274">64</a></p></li><li><p style="padding-top: 1pt;padding-left: 85pt;text-indent: -36pt;text-align: left;"><a href="#bookmark275" class="a">Device Erase using Secure Element </a><a href="#bookmark275">65</a></p></li><li><p style="padding-top: 2pt;padding-left: 91pt;text-indent: -42pt;text-align: left;"><a href="#bookmark276" class="a">Disable Device Erase </a><a href="#bookmark276">65</a></p></li><li><p style="padding-top: 1pt;padding-left: 91pt;text-indent: -42pt;text-align: left;"><a href="#bookmark277" class="a">Roll Challenge </a><a href="#bookmark277">66</a></p></li></ol></li></ol></li></ol><table style="border-collapse:collapse;margin-left:20.4997pt" cellspacing="0"><tr style="height:14pt"><td style="width:14pt" rowspan="18"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark278" class="s11">6.17.12 </a>Generate Example Authorization File . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><a href="#bookmark278" class="s11">.67</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark279" class="s11">6.17.13 </a>Generate Access Certificate . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark279" class="s11">.69</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark280" class="s11">6.17.14 </a>Generate Unsigned Command File . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark280" class="s11">.70</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark281" class="s11">6.17.15 </a>Generate Example Configuration File . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark281" class="s11">.71</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark282" class="s11">6.17.16 </a>Write User Configuration . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark282" class="s11">.73</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark283" class="s11">6.17.17 </a>Read User Configuration . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark283" class="s11">.74</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">6.17.18 Get Security Store Path. . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark284" class="s11">.75</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark285" class="s11">6.17.19 </a>Write AES Decryption Key . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark285" class="s11">.75</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark286" class="s11">6.17.20 </a>Read Device Certificates . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark286" class="s11">.76</a></p></td></tr><tr style="height:17pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark287" class="s11">6.17.21 </a>Vault Device Attestation . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark287" class="s11">.77</a></p></td></tr><tr style="height:17pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark288" class="s11">6.18 </a>Util Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark288" class="s11">.78</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark289" class="s11">6.18.1 </a>Key Generation . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark289" class="s11">.78</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark290" class="s11">6.18.2 </a>Generating a Signing Key . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark290" class="s11">.78</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">6.18.3 Key to Token. . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark291" class="s11">.78</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark292" class="s11">6.18.4 </a>Generate Certificate . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark292" class="s11">.79</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark293" class="s11">6.18.5 </a>Sign Certificate . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark293" class="s11">.79</a></p></td></tr><tr style="height:15pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s11">6.18.6 </a>Verify Signature . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark294" class="s11">.80</a></p></td></tr><tr style="height:19pt"><td style="width:506pt" colspan="2"><p class="s12" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark295" class="s11">6.18.7 </a>Application Information . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark295" class="s11">.80</a></p></td></tr><tr style="height:18pt"><td style="width:14pt"><p style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark318" class="s13">7.</a></p></td><td style="width:506pt" colspan="2"><p class="s14" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Software Revision History . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 4pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><a href="#bookmark318" class="s13">. 81</a></p></td></tr><tr style="height:23pt"><td style="width:38pt"><p style="padding-top: 6pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark319" class="s11">7.1</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark319" class="s11">Version 1.10</a> .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 6pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 6pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark319" class="s11">.81</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark320" class="s11">7.2</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark320" class="s11">Version 1.10</a> .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark320" class="s11">.81</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark321" class="s11">7.3</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.9 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark321" class="s11">.81</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark322" class="s11">7.4</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.8 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark322" class="s11">.81</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark323" class="s11">7.5</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.7 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark323" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark324" class="s11">7.6</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.5 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark324" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark325" class="s11">7.7</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.4 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark325" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark326" class="s11">7.8</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.3 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark326" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark327" class="s11">7.9</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.2 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark327" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark328" class="s11">7.10</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.1 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark328" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark329" class="s11">7.11</a></p></td><td style="width:73pt"><p class="s12" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: right;">Version 1.0 .</p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark329" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark330" class="s11">7.12</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark330" class="s11">Version 0.25</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark330" class="s11">.82</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark331" class="s11">7.13</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark331" class="s11">Version 0.24</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark331" class="s11">.83</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark332" class="s11">7.14</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark332" class="s11">Version 0.22</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark332" class="s11">.83</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark333" class="s11">7.15</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark333" class="s11">Version 0.21</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark333" class="s11">.83</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark334" class="s11">7.16</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark334" class="s11">Version 0.16</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark334" class="s11">.83</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark335" class="s11">7.17</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark335" class="s11">Version 0.15</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark335" class="s11">.84</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark336" class="s11">7.18</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark336" class="s11">Version 0.14</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark336" class="s11">.84</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark337" class="s11">7.19</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark337" class="s11">Version 0.13</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark337" class="s11">.84</a></p></td></tr><tr style="height:19pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;text-align: left;"><a href="#bookmark338" class="s11">7.20</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: right;"><a href="#bookmark338" class="s11">Version 0.12</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;text-align: center;"><a href="#bookmark338" class="s11">.84</a></p></td></tr><tr style="height:16pt"><td style="width:38pt"><p style="padding-top: 2pt;padding-left: 16pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark339" class="s11">7.21</a></p></td><td style="width:73pt"><p style="padding-top: 2pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><a href="#bookmark339" class="s11">Version 0.11</a></p></td><td style="width:409pt"><p class="s12" style="padding-top: 2pt;padding-left: 116pt;padding-right: 116pt;text-indent: 0pt;line-height: 12pt;text-align: center;">. . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p></td><td style="width:25pt"><p style="padding-top: 2pt;padding-left: 5pt;padding-right: 1pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><a href="#bookmark339" class="s11">.84</a></p></td></tr></table><p class="s15" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug162-simplicity-commander-reference-guide/Image_007.png"/></span></p><ol id="l23"><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark1">Introduction</a><a name="bookmark2">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Simplicity Commander is a single, all-purpose tool to be used in a production environment. It is invoked using a simple Command Line Interface (CLI) that is also scriptable. Simplicity Commander enables customers to complete these essential tasks:</p><ul id="l24"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Flash their own applications.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Configure their own applications.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Create binaries for production.</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Simplicity Commander is designed to support the Silicon Labs Wireless STK and STK platforms.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The primary intended audience for this document is software engineers, hardware engineers, and release engineers who are familiar with programming the EFR32 and EM3xx. This reference guide describes how to use the Simplicity Commander CLI. It provides gener- al information on file formats supported by Simplicity Commander and the Silicon Labs bootloaders, and includes details on using the Simplicity Commander commands, options, and arguments. It also includes example command line inputs and outputs so you can gain a better understanding of how to use Simplicity Commander effectively.</p></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark3">File Format Overview</a><a name="bookmark7">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Simplicity Commander works with different file formats: .bin, .s37, .ebl, .gbl, and .hex. Each file format serves a slightly different pur- pose. The file formats supported by Simplicity Commander are summarized below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l25"><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Motorola S-record (s37) File Format</a><a name="bookmark8">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="http://en.wikipedia.org/wiki/S_record" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;" target="_blank">Silicon Labs uses the Simplicity Studio as its Integrated Development Environment (IDE) and leverages the IAR Embedded Workbench for ARM platforms. This tool combination produces Motorola S-record files, s37 specifically, as its output. (For more information on Mo- torola S-record file format, see </a><span style=" color: #049;">http://en.wikipedia.org/wiki/S_record</span>.) In Silicon Labs development, an s37 file contains programming data about the built firmware and generally only represents a single piece of firmware—application firmware or bootloader firmware— but not both. An application image in s37 format can be loaded into a supported target device using the Simplicity Commander <span class="s19">flash </span>command. The s37 format can represent any combination of any byte of flash in the device. The Simplicity Commander <span class="s19">convert </span>com- mand can also be used to read multiple s37 files and hex files; output an s37 file for combining multiple files into a single file; and modify individual bytes of a file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark5">Update Image File Formats</a><a name="bookmark9">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">An update image file provides an efficient and fault-tolerant image format for use with Silicon Labs bootloaders to update an application without the need for special programming devices. Two image formats are supported: Gecko Bootloader (GBL) format for use with the Silicon Labs Gecko Bootloader introduced for use with EFR32 devices and Ember Bootloader (EBL) format for use with legacy Ember bootloaders. See <i>UG103.6: Application Development Fundamentals: Bootloading </i>for more details about these image file formats and bootloader use with different platforms.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Update image files are generated by the Simplicity Commander <span class="s19">gbl create </span>or <span class="s19">ebl create </span>command. These formats can only repre- sent firmware images; they cannot be used to capture Simulated EEPROM token data (as described by <i>AN703: Using Simulated EE- PROM Version 1 and Version 2 for the EM35x and EFR32 Series 1 SoC Platforms</i>). GBL upgrade files may contain data that gets flashed outside the main flash.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Bootloaders can receive an update image file either over-the-air (OTA) or via a supported peripheral interface, such as a serial port, and reprogram the flash in place. Update image files are generally used in later stage development and for upgrading manufactured devices in the field.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">During development, bootloaders should be loaded onto the device using the .s37 or .hex file format. If the Gecko Bootloader with sup- port for in-field bootloader upgrades is used, it is possible to perform a bootloader upgrade using a GBL update image. For other boot- loaders or file formats, do not attempt to load a bootloader image onto the device as an update image.</p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Intel HEX-32 File Format</a><a name="bookmark10">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Production programming uses the standard Intel HEX-32 file format. The normal development process for EFR32 chips involves creat- ing and programming images using the s37 and ebl file formats. The s37 and ebl files are intended to hold applications, bootloaders, manufacturing data, and other information to be programmed during development. The s37 and ebl files, though, are not intended to hold a single image for an entire chip. For example, it is often the case that there is an s37 file for the bootloader, an s37 file for the application, and an s37 file for manufacturing data. Because production programming is primarily about installing a single, complete image with all the necessary code and information, the file format used is Intel HEX-32 format. While s37 and hex files are functionally the same—they simply define addresses and the data to be placed at those addresses—Silicon Labs has adopted the conceptual dis- tinction that a single hex file contains a single, complete image often derived from multiple s37 files. You can use the Simplicity Commander <span class="s19">convert </span>command to read multiple hex files and s37 files; output a hex file for combining multiple files into a single file; and modify individual bytes of a file.</p><p style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>Simplicity Commander is capable of working identically with s37 and hex files. All functionality that can be performed with s37 files can be performed with hex files. Ultimately, with respect to production programming, Simplicity Commander <span class="s19">flash </span>command al- lows the developer to load a variety of sources onto a physical chip. The <span class="s19">convert </span>command can be used to merge a variety of sources into a final image file and modify individual bytes in that image if necessary.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following table summarizes the inputs and outputs for the different file formats used by Simplicity Commander.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 171pt;text-indent: 0pt;text-align: center;">Table 2.1.  File Format Summary</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" rowspan="2" bgcolor="#797777"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:219pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="5" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 94pt;padding-right: 94pt;text-indent: 0pt;text-align: center;">Inputs</p></td><td style="width:246pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="5" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 104pt;padding-right: 104pt;text-indent: 0pt;text-align: center;">Outputs</p></td></tr><tr style="height:19pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-right: 11pt;text-indent: 0pt;text-align: right;">ebl</p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">s37</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 14pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">hex</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">bin</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">chip</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 12pt;padding-right: 12pt;text-indent: 0pt;text-align: center;">ebl</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">s37</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 14pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">hex</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 14pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">bin</p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 17pt;padding-right: 17pt;text-indent: 0pt;text-align: center;">chip</p></td></tr><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">flash</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">X</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td></tr><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">readmem</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">convert</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">X</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">ebl create</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">X</p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 16pt;padding-right: 16pt;text-indent: 0pt;text-align: center;">ebl parse</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-right: 14pt;text-indent: 0pt;text-align: right;">X</p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">X</p></td><td style="width:56pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table></li></ol></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark11">General Information</a><a name="bookmark22">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l26"><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">Installing Simplicity Commander</a><a name="bookmark23">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">You can install Simplicity Commander using Simplicity Studio or by downloading one of the following standalone versions and then completing the installation:</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a href="https://www.silabs.com/documents/public/software/SimplicityCommander-Mac.zip" class="s18" target="_blank">https://www.silabs.com/documents/public/software/SimplicityCommander-Linux.zip </a><a href="https://www.silabs.com/documents/public/software/SimplicityCommander-Windows.zip" class="s18" target="_blank">https://www.silabs.com/documents/public/software/SimplicityCommander-Mac.zip https://www.silabs.com/documents/public/software/SimplicityCommander-Windows.zip</a></p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Command Line Syntax</a><a name="bookmark24">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">To execute Simplicity Commander commands, start a Windows command window, and change to the Simplicity Commander directory. The general command line structure in Simplicity Commander looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> commander [command] [options] [arguments]                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">where:</p><ul id="l27"><li><p class="s19" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">commander <span class="p">is the name of the tool.</span></p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">command <span class="p">is one of the commands supported by Simplicity Commander, such as, </span>flash<span class="p">, </span>readmem<span class="p">, </span>convert<span class="p">, etc. The command-spe- cific help provides additional information on each command.</span></p></li><li><p class="s19" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">option <span class="p">is a keyword that modifies the operation of the command. Options are preceded with </span>-- <span class="p">(double dash) as described for each command. Some commands have single-character short versions which are preceded by </span>- <span class="p">(single dash). Refer to the command- specific help for the single-dash shorthands.</span></p></li><li><p class="s19" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">argument <span class="p">is an item of information provided to Simplicity Commander when it is started. An argument is commonly used when the command takes one or more input files.</span></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">square brackets indicate <i>optional </i>parameters as in this example: <span class="s19">commander flash [filename(s)] [options]</span></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">angle brackets indicate <i>required </i>parameters as in this example: <span class="s19">commander readmem --output &lt;filename&gt;</span></p></li></ul></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">General Options</a><a name="bookmark25">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l28"><li><p class="s17" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark15">Help (</a><span class="s25">--help</span>)<a name="bookmark26">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Displays help for all Simplicity Commander commands and command-specific help for each command.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander --help                                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Simplicity Commander help displays a list of all Simplicity Commander commands. The following figure is an example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 108pt;text-indent: 0pt;text-align: left;"><span><img width="495" height="358" alt="image" src="ug162-simplicity-commander-reference-guide/Image_008.jpg"/></span></p><p class="s17" style="padding-top: 4pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 3.1.  Simplicity Commander Help</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">To display help on a specific Simplicity Commander command, enter the name of the command followed by <span class="s19">--help.</span></p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $commander flash --help                                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Simplicity Commander displays help for the flash command in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 108pt;text-indent: 0pt;text-align: left;"><span><img width="490" height="618" alt="image" src="ug162-simplicity-commander-reference-guide/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 3.2.  Simplicity Commander Flash Command Help</p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark16">Version (</a><span class="s25">--version</span>)<a name="bookmark27">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Displays the version information for Simplicity Commander, J-Link DLL, and EMDLL, and a list of detected USB devices. If you use this option in conjunction with another command or command/option, Simplicity Commander displays this extra information before any com- mand is executed.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander --version                                                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Simplicity Commander displays version information. The following figure is an example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;"><span><img width="460" height="165" alt="image" src="ug162-simplicity-commander-reference-guide/Image_010.jpg"/></span></p><p class="s17" style="padding-top: 7pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 3.3.  Simplicity Commander Version Information</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark17">Device (</a><span class="s25">--device &lt;device name&gt;</span>)<a name="bookmark28">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Specifies a target device for the command. If this option is supplied, no auto-detection of the target device is used. In some cases, such as when using <span class="s19">convert </span>with the --<span class="s19">token </span>option, this option is required.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For convenience, Simplicity Commander attempts to parse the <span class="s19">--device </span>option so that a complete part number is normally not re- quired as a command input. For example, Simplicity Commander interprets <span class="s19">commander --device EFR32 </span>to mean that the selected device is an EFR32, which has implications regarding the memory layout and available features of this specific device. As another ex- ample, Simplicity Commander interprets <span class="s19">--device EFR32F256 </span>as an EFR32 with 256 kB flash memory.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Using a complete part number such as <span class="s19">--device EFR32MG1P233F256GM48 </span>is always supported and recommended.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander &lt;command&gt; --device &lt;device name&gt;                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device info --device Cortex M3                                                                       </span></p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark18">J-Link Connection Options</a><a name="bookmark29">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Use the following options to select a J-Link device to connect to and use for any operation that requires a connection to a kit or debug- ger. You can connect over IP (using the <span class="s19">--ip </span>option) or over USB (using the <span class="s19">--serialno </span>option) as shown in the following examples. You can use only one of these options at a time. If no option is provided, Simplicity Commander attempts a connection to the only USB connected J-Link adapter.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander &lt;command&gt; --serialno &lt;J-Link serial number&gt;                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter probe --serialno 440050184                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander &lt;command&gt; --ip &lt;IP address&gt;                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter probe --ip 10.7.1.27                                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark19">Debug Interface Configuration</a><a name="bookmark30">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Use the <span class="s19">--tif </span>and <span class="s19">--speed </span>options to configure the target interface and clock speed when connecting the debugger to the target de- vice.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Simplicity Commander supports using Serial Wire Debug (SWD) or Joint Test Action Group (JTAG) as the target interface. All currently supported Silicon Labs hardware works with SWD, while some can also be used with JTAG. Custom hardware may require JTAG to be used.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The maximum clock speed available typically depends on the debug adapter, the target device, and the physical connection between the two. Silicon Labs kits typically support speeds up to 1000 – 8000 kHz, depending on the kit model. If the selected clock speed is higher than what the adapter supports, the clock speed will fall back to using the highest speed it does support. You may want to select a lower clock speed if the debug connection is unstable or not working at all when working with custom hardware with longer debug cables or when the electrical connections are less than ideal.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If the <span class="s19">--tif </span>and <span class="s19">--speed </span>options are not used, the default configuration is SWD and 4000 kHz.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander &lt;command&gt; [--tif &lt;target interface&gt;] [--speed &lt;speed in kHz&gt;]                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device info --tif SWD --speed 1000                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Setting debug interface speed to 1000 kHz Setting debug interface to SWD</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Part Number : EFR32BG1P332F256GJ43</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Die Revision : A2 Production Ver : 138 Flash Size : 256 kB SRAM Size : 32 kB</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unique ID : 000b57fffe0934e3 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark20">Graphical User Interface</a><a name="bookmark31">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Displays a Graphical User Interface (GUI) for laboratory use of Simplicity Commander. The GUI can be used in the lab for such typical tasks as:</p><ul id="l29"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Flashing device images</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Upgrading Silicon Labs kit firmware and configuration</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Setting device lock features</p></li></ul><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander                                                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Output and Exit Status</a><a name="bookmark32">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The exit status of Simplicity Commander can take on a few different values. Whenever an operation completed successfully, Simplicity Commander&#39;s exit status is 0 (zero). Any error will cause the exit status to be non-zero.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Simplicity Commander defines the following exit status codes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:17pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D8D8D8"><p class="s26" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Exit Status</p></td><td style="width:488pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D8D8D8"><p class="s26" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:17pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0</p></td><td style="width:488pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No error occured</p></td></tr><tr style="height:17pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-1</p></td><td style="width:488pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Input error. For example, this could be a missing command line option, non-existent command, or an invalid filename.</p></td></tr><tr style="height:28pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-2</p></td><td style="width:488pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Run time error. Used whenever anything goes wrong when executing the command. Examples include not being able to connect to a debug adapter or flash verification failed.</p></td></tr></table><p class="s17" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Some operations systems present the exit status as an unsigned integer. On these systems, -1 will be interpreted as 255, -2 as 254, and so on.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The operating system itself may create other exit codes if the application crashes. These will always be non-zero and are out of the control of Simplicity Commander.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">All errors and potential error conditions are indicated in Simplicity Commander&#39;s output in addition to the exit status. All errors are dis- played with the prefix &quot;ERROR:&quot;. All warnings are displayed with the prefix &quot;WARNING:&quot;.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Any output from Simplicity Commander will always end with &quot;DONE&quot;. This does not indicate that the operation was successful, merely that execution has finished.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Example of an error in Windows follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\&gt;commander device info -s 440000000</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">ERROR: Unable to connect with device with given serial number ERROR: Could not open J-Link connection.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">C:\&gt;echo %errorlevel%</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">-2</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark33">EFR32 Custom Tokens</a><a name="bookmark42">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l30"><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark34">Introduction</a><a name="bookmark43">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Simplicity Commander supports defining custom token groups for reading and writing. Custom tokens work just like manufacturing to- kens, but the definition and location of the tokens is configurable to suit different requirements.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">There are two different ways for Simplicity Commander to find and use custom token definition files. For Simplicity Commander to treat the custom token file in the same way as a regular token group, the file must be placed in a specific location as described in section</p></li><li><p class="s23" style="padding-left: 38pt;text-indent: -15pt;text-align: left;"><a href="#bookmark44" class="s18">Custom Token </a>Groups<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The other option is to use the <span class="s19">--tokendefs </span>command line option instead of the <span class="s19">--tokengroup </span>option. With this method, Simplicity Commander uses a token definition file in an arbitrary location, for example, under revision control. For more information, see section</p><p class="s23" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">4.8 Using Custom Token Files in Any Location<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><ol id="l32"><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark35">Custom Token Groups</a><a name="bookmark44">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For Simplicity Commander to treat custom token files like regular token groups, the file must be placed in a specific <span class="s19">tokens </span>folder and the filename must follow a special syntax.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The location and initialization of the tokens folder depends on the operating system used.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">On Windows and Linux, the <span class="s19">tokens </span>folder is included in the zip file and is placed alongside the executable in the installation directory.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">On Mac OS X, the folder named <span class="s19">~/Library/SimplicityCommander/tokens/ </span>is generated automatically in the user&#39;s home directory when running</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">commander <span class="p">on the command line for the first time. Running </span>commander --help<span class="p">, for example, is enough to ensure that the folder with files is created. Inside this </span>tokens <span class="p">folder, there is a file named </span>tokens-example-efr32.json<span class="p">. This file provides an example of the to- ken types and locations currently supported by Simplicity Commander.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The syntax of the filename is <span class="s19">tokens-&lt;group name&gt;-&lt;architecture&gt;.json</span>. <span class="s19">&lt;group name&gt; </span>is the name of the custom token group and can be any string. <span class="s19">&lt;architecture&gt; </span>is a string describing which devices the token definitions apply to. The following table lists the supported architecture strings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D8D8D8"><p class="s26" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Architecture</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D8D8D8"><p class="s26" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Devices</p></td></tr><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s27" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">efr32</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">All Series 1 EFR32 devices</p></td></tr><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s27" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">efr32xg2</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">All Series 2 EFR32 devices</p></td></tr><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s27" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">em3xx</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">All EM3xx devices</p></td></tr><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s27" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">efm32</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">All EFM32 devices (Series 0 and 1)</p></td></tr><tr style="height:17pt"><td style="width:59pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s27" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ezr32</p></td><td style="width:147pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">All EZR32 devices</p></td></tr></table><p style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For example, to define the token group myapp for EFR32 Series 1 devices, the filename would be <span class="s19">tokens-myapp-efr32.json</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark36">Creating Custom Token Groups</a><a name="bookmark45">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To define a custom token group, copy <span class="s19">tokens-example-efr32.json </span>to a new file in the same directory using the following naming convention: <span class="s19">tokens-&lt;groupname&gt;-efr32.json</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For example: <span class="s19">tokens-myapp-efr32.json</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To verify that Simplicity Commander sees the new file, run</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump --help                                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The name of your token group (for example, &quot;myapp&quot;) should be listed as a supported token group like this:</p><p class="s19" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">--tokengroup &lt;tokengroup&gt; <span class="p">which set of tokens to use. Supported: myapp, znet</span></p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark37">Defining Tokens</a><a name="bookmark46">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Each token in the JSON file has the following properties.</p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Property</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">name</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">The name of the token, which is used as an identifier when dumping or writing tokens.</p></td></tr><tr style="height:19pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">page</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#92D050"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;"><a href="#bookmark47" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The named memory region to use for the token. For more information, see section </a><span style=" color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">4.5 Memory Regions</span>.</p></td></tr><tr style="height:19pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">offset</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#00B0F0"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">The offset in number of bytes from the start of the memory region at which to place the token.</p></td></tr><tr style="height:73pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">sizeB</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">The size of the token in bytes.</p></td></tr><tr style="height:30pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">string</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;text-align: left;">Optional boolean. If this property is <span class="s27">true</span>, the token is interpreted as a zero terminated ASCII string instead of a byte array. The maximum string length is <span class="s27">sizeB - 1 </span>because one byte is reserved for the zero terminator.</p></td></tr><tr style="height:19pt"><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">description</p></td><td style="width:468pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#00B0F0"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">A plain text description of the token. This property is currently only used for documentation of the JSON file.</p></td></tr></table><ul id="l33"><li><p class="s29" style="padding-top: 3pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">A token of size 1 is interpreted as an unsigned 8-bit integer.</p></li><li><p class="s30" style="padding-top: 3pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">A token of size 2 is interpreted as an unsigned 16-bit integer.</p></li><li><p class="s31" style="padding-top: 3pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">A token of size 4 is interpreted as an unsigned 32-bit integer.</p></li><li><p class="s32" style="padding-top: 3pt;padding-left: 15pt;text-indent: -9pt;text-align: left;">Any other size is interpreted as a byte array of the given size.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark38">Memory Regions</a><a name="bookmark47">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following values are valid data in the &quot;page&quot; option:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">USERDATA</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The user data page is a separate flash page intended for persistent data and configuration. The user data page is <b>not </b>erased when disabling debug lock. It can, however, be erased by a specific page erase.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">The user data page is located at address 0x0FE00000. It is 2 kB on Series 1 EFR32 devices and 1 kB on Series 2 EFR32 devices. LOCKBITSDATA</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">On Series 1 EFR32 devices, the lock bits page is used by the chip itself to configure flash write locks, debug lock, AAP lock, and so on. However, the last 1.5 kB of this page is unused by the device itself and has the important property that it is erased when disabling debug lock. A regular mass erase by the MSC—typically by executing the <span class="s19">commander device masserase </span>or <span class="s19">commander flash -- masserase </span>command—does not erase the lock bits page.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The lock bits page is located at address 0x0FE04000 with size 2 kB on Series 1 EFR32 devices. Tokens in this page must use an offset of at least 0x200 on these devices; otherwise, collisions with chip functionality can occur.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">On Series 2 EFR32 devices, there is no physical lock bits page. Instead, the LOCKBITSPAGE region is defined to be the first 2 kB of the last flash page in the main flash block. This maintains backwards compatibility, while still ensuring that any data in this region is erased when the device is erased during debug unlock.</p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark39">Token File Format Description</a><a name="bookmark48">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">A token file declares what values are programmed for manufacturing tokens on the chip. Lines are composed of one of the following forms:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;token-name&gt; : &lt;data&gt;</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;token-name&gt; : !ERASE!</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Follow these guidelines when using a token file:</p><ul id="l34"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Omitted tokens are left untouched and not programmed on the chip.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Token names are case insensitive.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">All integer values are interpreted as hexadecimal numbers in BIG-endian format and must be prefixed with &#39;0x&#39;.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Blank lines and lines beginning with # (hashtag) are ignored.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Byte arrays are given in hexadecimal format without a leading &#39;0x&#39;.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Specifying !ERASE! for the data sets that token to all 0xFF.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The token data can be in one of three main forms: byte-array, integer, or string.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Byte arrays are a series of hexadecimal numbers of the required length.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Integers are BIG-endian hexadecimal numbers that must be prefixed with &#39;0x&#39;.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">String data is a quoted set of ASCII characters.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark40">Using Custom Token Files</a><a name="bookmark49">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark43" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Refer to </a><span style=" color: #049;">4.1 Introduction </span>for a definition of custom token files and where they should be located for Simplicity Commander to find them automatically. To use a custom token file located in the <span class="s19">tokens </span>folder, run Simplicity Commander with a <span class="s19">--tokengroup </span>option corre- sponding to the name of the JSON file. For example, if the file was named <span class="s19">tokens-myapp-efr32.json</span>, use this option:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> --tokengroup myapp                                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">To create a text file useful as input to the <span class="s19">flash </span>or <span class="s19">convert </span>commands, the easiest way is to start by dumping the current data from a device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 23pt;text-indent: -2pt;line-height: 217%;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump -s 440050148 --tokengroup myapp --outfile mytokens.txt</span><span class="s19"> mytokens.txt </span><span class="p">can then modified to have the desired content, and then used when flashing devices or creating images in this way:</span></p><p style="padding-top: 2pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash -s 440050148 --tokengroup myapp --tokenfile mytokens.txt                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">To be able to read the custom token data from an application, Simplicity Commander provides the <span class="s19">tokenheader </span><a href="#bookmark194" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command, which gen- erates a C header file that can be included in an application. See section </a><span style=" color: #049;">6.4.4 Generate C Header Files from Token Groups </span>for details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark41">Using Custom Token Files in Any Location</a><a name="bookmark50">&zwnj;</a></p></li></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In some cases, it is more convenient to have the custom token defintions file somewhere in the file system (for example, if it is placed under revision control). Simplicity Commander supports this functionality with the <span class="s19">--tokendefs </span>option which refers to a JSON file any- where in the file system. Use it instead of the <span class="s19">--tokengroup </span>option.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander tokendump --tokendefs my_tokens.json --outfile mytokens.txt</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander flash --tokendefs my_tokens.json --tokenfile mytokens.txt</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark51">Security Overview</a><a name="bookmark55">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This chapter describes essential security features in Simplicity Commander.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark52">Security Store</a><a name="bookmark56">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Security Store is the location where all files generated and used by the security commands in Simplicity Commander are stored. You can find the path to Security Store with the <span class="s19">commander security getpath </span>command. Unless the <span class="s19">--nostore </span>option is used with securi- ty commands, Simplicity Commander will store all keys, certificates, and configuration files seen in Security Store. Descriptions of the files appear below.</p><ul id="l36"><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">access_certificate.bin <span class="p">– certificate delegating permission to unlock debug access of a device.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">archive folder <span class="p">– folder used to store all outdated files (for example, all files in the challenge folder are moved here when a challenge is rolled).</span></p></li><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">cert_key.pem <span class="p">– private key used to sign unlock token.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">cert_pubkey.pem <span class="p">– public key used in certificate. Public key corresponding to </span><i>cert_key.pem.</i></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">certificate_authorization.json <span class="p">– configuration file used to define authorizations given by access certificate. May be edited.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">challenge_xxx folder <span class="p">– folder used to store files related to a challenge.</span></p><ul id="l37"><li><p class="s17" style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">unlock_payload_xxx.bin <span class="p">– payload used to unlock secure debug access.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">unlock_command_to_be_signed_dd_mm_yyyy.bin <span class="p">– command token that needs to be signed with </span><i>cert_key.pem</i></p></li></ul></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">command_key.pem <span class="p">– private command key used to sign access certificate.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">command_pubkey.pem <span class="p">– public command key stored on device. Public key corresponding to </span><i>command_key.pem.</i></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">user_configuration.json <span class="p">– configuration file used in write config. May be edited.</span></p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When running the <span class="s19">commander security unlock </span>command, Simplicity Commander will use all available files to attempt to unlock the debug access. If anything is missing, you will be asked to provide the file as an option to the command. The file will then be stored in Security Store, unless the <span class="s19">--nostore </span>option is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark53">Access Certificate</a><a name="bookmark57">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">An access certificate is used to delegate access to a single device to another key, which is called a certificate key. This scheme sup- ports security models where the command key is kept in a secure location, while the certificate key can be used with more lenient se- curity practices.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The access certificate contains the serial number of the device it applies to, a description of what actions it gives access to, and the public certificate key. An outline of the access certificate is illustrated in the following figure.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The device serial number uniquely identifies each device. It can be displayed by executing the <span class="s19">commander security status </span>com- mand. The <b>certificate_authorizations.json </b><a href="#bookmark58" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">file sets the authorizations for the certificate. The current version of Simplicity Commander does not support any modifications to the authorization file, but it will be available in future versions. The private certificate key corre- sponding to the public certificate key in the certificate is used to generate a signature required to unlock debug access. For more infor- mation, see </a><span style=" color: #049;">5.3 Challenge and Command Signing</span>. The certificate is authenticated by signing it with the private command key corre- sponding to the public command key written to the device. The signing of the certificate may be done by passing an unsigned certificate to a Hardware Security Module (HSM) containing the private key or by providing the private key to Simplicity Commander (that is, for development) using the <span class="s19">--command-key </span>option.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;"><span><img width="175" height="179" alt="image" src="ug162-simplicity-commander-reference-guide/Image_011.jpg"/></span></p><p class="s17" style="padding-top: 8pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 5.1.  Access Certificate</p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark54">Challenge and Command Signing</a><a name="bookmark58">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The part of the data that needs to be signed to create a valid unlock command is called the <i>challenge</i><a href="#bookmark277" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">. Secure Element generates this random data. It remains unchanged until it is updated to a new random value by the </a><span style=" color: #049;">security rollchallenge </span>command.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">By updating the challenge, any existing command signatures are effectively invalidated because part of the data the signature encom- passes has changed. This allows the owner of the device to give debug access to someone else for a limited amount of time.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A command signature is created by signing a binary containing the data fields in yellow in the following figure; Simplicity Commander sets the unlock command ID, command parameters, and the security challenge using the private key corresponding to the public key in the access certificate.</p><p class="s36" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark280" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The </a>security gencommand <a href="#bookmark273" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command creates a file containing these elements, but does not include the signature. If the certificate pri- vate key is not available to the user, the signature must be obtained from another party—for example, an HSM. If the user possesses the certificate private key, Security Commander can create the signed unlock command using the </a>security unlock <span class="p">command. By passing the command signature and the access certificate to the Debug Challenge interface, the debug interface is temporarily un- locked until the next power-on or pin reset.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;"><span><img width="175" height="179" alt="image" src="ug162-simplicity-commander-reference-guide/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 171pt;text-indent: 0pt;text-align: center;"><a name="bookmark59">Figure 5.2.  Unlock Command Signature</a></p></li></ol></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark60">Simplicity Commander Commands</a><a name="bookmark178">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">This section includes the following information for using each Simplicity Commander command:</p><ul id="l38"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Command Line Syntax</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Command Line Input Example</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Command Line Output Example</p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 19pt;text-align: left;">In cases where the Command Line Syntax is the same as the Command Line Input Example, only the former is included. The Simplicity Commander commands are organized in the following categories:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark179" class="s18">6.1 Device Flashing Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark186" class="s18">6.2 Flash Verification Command</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark187" class="s18">6.3 Memory Read Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark190" class="s18">6.4 Token Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark195" class="s18">6.5 Convert and Modify File Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark205" class="s18">6.6 EBL Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark211" class="s18">6.7 GBL Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark223" class="s18">6.8 Kit Utility Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark231" class="s18">6.9 Device Erase Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark235" class="s18">6.10 Device Lock and Protection Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark241" class="s18">6.11 Device Utility Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark246" class="s18">6.12 External SPI Flash Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark250" class="s18">6.13 Advanced Energy Monitor Measure Command</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark251" class="s18">6.14 Serial Wire Output Read Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark256" class="s18">6.15 NVM3 Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark262" class="s18">6.16 CTUNE Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark266" class="s18">6.17 Security Commands</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark288" class="s18">6.18 Util Commands</a></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l39"><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark61">Device Flashing Commands</a><a name="bookmark179">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The commands in this section all require a working debug connection for communicating with the device. You would normally always use one of the J-Link connection options when running the <span class="s19">flash </span>command, but it is intentionally left out of most of the examples to keep them short and concise.</p><ol id="l40"><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark62">Flash Image File</a><a name="bookmark180">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Flashes the image in the specified filename to the target device, starting at the specified address. The address value is interpreted as a hexadecimal number. The affected bytes will be erased before writing. If the image contains any partial flash pages, these pages will be read from the device and patched with the image contents before erasing the page and writing back. After writing, the affected flash areas are read back and compared. Finally, the chip is reset using a pin reset, making code execution start. The debugger to connect to is indicated by the J-Link serial number (<span class="s19">--serialno </span>option). The <span class="s19">--binary </span>option can be used to interpret all file types as flat binaries, bypassing any parsing of GBL, S-record, or Intel Hex files. For example, you can use this to test firmware upgrade using an internal storage bootloader.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash &lt;filename&gt; --address &lt;address&gt; --serialno &lt;serial number&gt; [--binary]                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash blink.bin --address 0x0 --serialno 440012345                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Connects to the J-Link debugger with serial number 440012345 and flashes the image in blink.bin to the target device, starting at ad- dress 0.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing blink.s37.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2812 bytes, starting at address 0x00000000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark63">Flash Using IP Address without Verification and Reset</a><a name="bookmark181">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flashes the image in the specified filename to the target device, using the IP address specified. The data in flash is not verified after flashing, and the device is left halted after flashing.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash &lt;filename&gt; --ip &lt;IP&gt; --halt --noverify&gt;                                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash blink.s37 --ip 10.7.1.27 --halt --noverify                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Flashes the image in blink.s37 to the target device, using the IP address 10.7.1.27. The data in flash is not verified after flashing, and the device is left halted after flashing.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing blink.s37.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2812 bytes, starting at address 0x00000000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark64">Flash Several Files</a><a name="bookmark182">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Flashes the images to the target device. Any overlapping data is considered an error.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash &lt;filename&gt; &lt;filename&gt;                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash blink.s37 userpage.hex                                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Flashes the images in blink.s37 and userpage.hex to the target device.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Adding file blink.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Adding file userpage.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2812 bytes, starting at address 0x00000000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2048 bytes, starting at address 0x0fe00000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark65">Patch Flash</a><a name="bookmark183">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Writes the specified byte(s) to the flash. The affected pages will be read from the device and patched with this data before erasing the page and writing back. When you use the <span class="s19">--patch </span>option, the patch memory data is interpreted as an unsigned integer. The optional <span class="s19">length </span>argument can be used to define the number of bytes, up to 8 bytes. If no length is specified, the default is to patch 1 byte.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --patch &lt;address&gt;:&lt;data&gt;[:length]                                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --patch 0x120:0xAB --patch 0x3200:0xA5A5:2                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Writes the specified bytes 0xAB to address 0x120 and 0xA5A5 to address 0x3200. The affected pages will be read from the device and patched with this data before erasing the page and writing back.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Patching 0x00000120 = 0xAB... Patching 0x00003200 = 0xA5A5...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2048 bytes, starting at address 0x00000000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2048 bytes, starting at address 0x00003000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark66">Patch Using Input File</a><a name="bookmark184">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Flashes the specified application while simultaneously patching the image file and the flash of the device. If a filename is inside the file, these bytes are patched before writing the image</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash &lt;filename&gt; --patch &lt;address&gt;:&lt;data&gt;[:length] --patch &lt;address&gt;:&lt;data&gt;[:length]                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash blink.s37 --patch 0x123:0x00FF0001:4 --patch 0x0FE00004:0x00                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Flashes the blink application while simultaneously patching the image file and the flash of the device. Because 0x123 is inside the file, these bytes are patched before writing the image. Additionally, the user page will be read from the device and patched with this data before erasing the page and writing back.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing blink.s37.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Patching 0x00000123 = 00FF0001...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Patching 0x0FE00004 = 00...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 4096 bytes, starting at address 0x00000000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2048 bytes, starting at address 0x0fe00000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark67">Flash Tokens</a><a name="bookmark185">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This section describes how to flash one or more tokens from text file(s) and/or command line options with their new values. Manufactur- ing tokens are the only token type supported by Simplicity Commander; simulated EEPROM tokens are not supported. For more infor- mation on manufacturing tokens, see <i>AN961</i>: <i>Bringing Up Custom Nodes for the EFR32MG and EFR32FG Families</i>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The <span class="s19">--tokengroup </span>option defines which group of tokens is used. Simplicity Commander currently has built-in support for the <span class="s19">znet</span></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">token group.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends generating a token file from a device or image file using the <span class="s19">tokendump </span>command and then making modifica- tions to this file for use with the <span class="s19">--tokenfile </span>option.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup &lt;token group&gt; -–token &lt;TOKEN_NAME:value&gt; –-tokenfile &lt;filename&gt;                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup znet --token TOKEN_MFG_STRING:&quot;IoT Inc&quot;                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Set the token <span class="s19">MFG_STRING </span>to have the value <span class="s19">IoT Inc</span>. The <span class="s19">TOKEN_ </span>prefix is optional, that is, <span class="s19">TOKEN_MFG_STRING </span>and <span class="s19">MFG_STRING </span>are equivalent.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup znet --tokenfile tokens.txt                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Sets the tokens specified in tokens.txt. All tokens in the file are processed, and if a duplicate is found, it will be treated as an error.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup znet --tokenfile tokens.txt --token TOKEN_MFG_STRING:”IoT Inc”                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Sets the tokens specified in tokens.txt. Additionally, sets the <span class="s34">MFG_STRING </span>to the value given. All files and tokens specified on the com- mand line are processed, and if a duplicate is found, it will be treated as an error.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Depending on the operating system and shell being used, some escapes may be needed to correctly specify a string. For example, on the command line in a Windows 7 Professional Command Prompt window, execute the following command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander flash --tokengroup znet --token &quot;TOKEN_MFG_STRING:\&quot;IoT Inc\&quot;&quot;                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 2048 bytes to 0x0fe00000 Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flash loader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Flashing...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark68">Flash Verification Command</a><a name="bookmark186">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s19">verify </span>command verifies the contents of a device against a set of files, tokens, and/or patch options without writing anything to the flash. It works just like the verification step of the <span class="s19">flash </span>command, but without actually flashing first. For example, the <span class="s19">verify </span>command can be used to verify that the application on a microcontroller is what you expect it to be.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">All options and examples for the <span class="s19">flash </span>command also apply to the <span class="s19">verify </span>command. The exceptions are the <span class="s19">--halt</span>, <span class="s19">--masserase</span>, and <span class="s19">--noverify </span>options that do not apply to the verify command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander verify [filename] [filename ...] [patch options] [token options]                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander verify myimage.hex                                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file myimage.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Verifying 52000 bytes at address 0x00000000...OK! Verifying 2048 bytes at address 0x0fe00000...OK! DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark69">Memory Read Commands</a><a name="bookmark187">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <span class="s19">readmem </span>command reads data from a device and can either store it to file or print it in human-readable format. The location and length to be read from the device is defined by the <span class="s19">--range </span>and <span class="s19">--region </span>options. You can combine one or more ranges and regions to read and combine several different areas in flash to one file.</p><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>Note: </b>Like <span class="s19">flash</span>, the commands in this section all require a working debug connection for communicating with the device. You would normally always use one of the J-Link connection options when running <span class="s19">readmem</span>, but this is left out of the examples to keep them short and concise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s19">--range </span>option supports two different range formats:</p><ul id="l41"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The first is <span class="s19">&lt;startaddress&gt;:&lt;endaddress&gt;</span>, for example, <span class="s19">--range 0x4000:0x6000</span>. The range is non-inclusive, meaning that all bytes from 0x4000 up to and including 0x5FFF are read out.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The second is <span class="s19">&lt;startaddress&gt;:+&lt;length&gt;</span>, which takes an address to start reading from, and a number of bytes to read. For ex- ample, the equivalent command line input to the previous example is <span class="s19">--range 0x4000:+0x2000</span>.</p></li></ul><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 173%;text-align: left;">The <span class="s19">--region </span>option takes a named flash region with an @ prefix. Valid regions for use with the <span class="s19">--region </span>option are listed below. Series 0 <b>EFM32, EZR32, EFR32: </b><span class="s19">@mainflash</span>, <span class="s19">@userdata</span>, <span class="s19">@lockbits, @devinfo</span></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Series 1 <b>EFM32, EFR32</b>: <span class="s19">@mainflash</span>, <span class="s19">@userdata</span>, <span class="s19">@lockbits</span>, <span class="s19">@devinfo</span>, <span class="s19">@bootloader</span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Series 2 <b>EFM32, EFR32</b>: <span class="s19">@mainflash</span>, <span class="s19">@userdata</span>, <span class="s19">@devinfo</span></p><p class="s19" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><span class="s17">EM3xx: </span>@mfb<span class="p">, </span>@cib<span class="p">, </span>@fib</p><ol id="l42"><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark70">Print Flash Contents</a><a name="bookmark188">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Specifies the range of memory to read from flash and prints data.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander readmem --range &lt;startaddress&gt;:&lt;endaddress&gt;                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">OR</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander readmem --range &lt;startaddress&gt;:+&lt;length&gt;                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander readmem --range 0x100:+128                                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Reads 128 bytes from flash starting at address 0x100 and prints it to standard out.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reading 128 bytes from 0x00000100...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{address: 0 1 2 3 4 5 6 7 8 9 A B C D E F}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000100: 12 F0 40 72 11 00 DF F8 C0 24 90 42 07 D2 DF F8</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000110: BC 24 90 42 03 D3 5F F0 80 72 11 00 01 E0 00 22</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000120: 11 00 DF F8 84 26 12 68 32 F0 40 72 0A 43 DF F8</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000130: 78 36 1A 60 70 47 80 B5 00 F0 90 FC FF F7 DD FF</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000140: 01 BD DF F8 70 16 09 68 08 00 70 47 38 B5 DF F8</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000150: 4C 06 00 F0 9F F9 05 00 ED B2 28 00 07 28 05 D0</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00000160: 08 28 07 D1 00 F0 7C FC 04 00 0B E0 FF F7 E9 FF</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">00000170: 04 00 07 E0 40 F2 25 11 DF F8 3C 06 00 F0 B0 FC DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark71">Dump Flash Contents to File</a><a name="bookmark189">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Reads the contents of the specified user page and stores it in the specified filename. File format will be auto-detected based on file extension (.bin, .hex, or .s37). (See </a>2. File Format Overview <span style=" color: #000;">for more information on file formats.)</span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander readmem --region &lt;@region&gt; --outfile &lt;filename&gt;                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><a href="mailto:$commanderreadmem--region@userdata--outfileuserpage.hex" class="s35" target="_blank"> $ commander readmem --region @userdata --outfile userpage.hex                                                   </a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Reads the contents of the region named userdata and stores it in an output file named userpage.hex.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reading 2048 bytes from 0x0fe00000... Writing to userpage.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark72">Token Commands</a><a name="bookmark190">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <span class="s19">tokendump </span>command generates a text dump of token data. It can take as input either a (set of) files using the same command line options as the <span class="s19">convert </span>command, or a microcontroller using the same command line options as the <span class="s19">readmem </span>command.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The output of <span class="s19">tokendump </span>can either be printed to standard output or written to an output file using the <span class="s19">--outfile </span>option. The file written when using the <span class="s19">--outfile </span>option is suitable for modification and re-use as input to the <span class="s19">flash</span>, <span class="s19">verify</span>, or <span class="s19">convert </span>commands using the <span class="s19">--tokenfile </span>option.</p><p class="s19" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">tokendump <span class="p">always requires a token group to be selected with the </span>--tokengroup <span class="p">option. A token group is a defined set of tokens for a specific stack or application. Simplicity Commander only supports the </span>znet <span class="p">token group.</span></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Manufacturing tokens are the only token type supported by Simplicity Commander; simulated EEPROM tokens are not supported. For more information on manufacturing tokens, see <i>AN961</i>: <i>Bringing Up Custom Nodes for the EFR32MG and EFR32FG Families</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l43"><li><p class="s17" style="padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark73">Print Tokens Command Line Syntax</a><a name="bookmark191">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup &lt;token group&gt; [--token &lt;token name&gt;]                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup znet --token TOKEN_MFG_STRING --token TOKEN_MFG_EMBER_EUI_64                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Reads the selected tokens from the device and prints it to stdout.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">#</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># The token data can be in one of three main forms: byte-array, integer, or string. # Byte-arrays are a series of hexadecimal numbers of the required length.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;"># Integers are BIG endian hexadecimal numbers.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># String data is a quoted set of ASCII characters. #</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">MFG_STRING : &quot;IoT_Inc&quot;</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;"># MFG_EMBER_EUI_64: F0B2030000570B00 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark74">Dump Tokens to File</a><a name="bookmark192">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark191" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This example works just like section </a>6.4.1 Print Tokens<span style=" color: #000;">, except that the output is written to a file suitable for use with the </span><span class="s19">--tokenfile</span></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">option (<span class="s19">flash</span>, <span class="s19">verify</span>, and <span class="s19">convert </span>commands).</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup &lt;token group&gt; [--token &lt;token name&gt;] --outfile &lt;filename&gt;                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump --tokengroup znet --outfile tokens.txt                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Reads all tokens from the device and outputs it to the file named tokens.txt.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing tokens to tokens.txt... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark75">Dump Tokens from Image File</a><a name="bookmark193">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If an input file is given to the <span class="s19">tokendump </span>command, the input is read from one or more files instead of reading from a device.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In this case, the <span class="s19">--device </span>option must be provided, because token locations can be different from one device family to another.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump &lt;filename&gt; --tokengroup &lt;token group&gt; --device &lt;device&gt; [--outfile &lt;filename&gt;]            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokendump blink.hex --tokengroup znet --device EFR32MG1P --outfile tokens.txt                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark76">Generate C Header Files from Token Groups</a><a name="bookmark194">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s19">tokenheader </span>command generates a simple header file based on a custom token group. The generated header file contains pre- processor defines that specify the location and size of each token.</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark42" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">See section </a>4. EFR32 Custom Tokens <span style=" color: #000;">for details on custom tokens.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokenheader --tokengroup &lt;group name&gt; --device &lt;target device&gt; &lt;filename&gt;                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander tokenheader --tokengroup myapp --device EFR32MG1P233F256 my_tokens.h                                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing token header file: my_tokens.h DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark77">Convert and Modify File Commands</a><a name="bookmark195">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s19">convert </span>command performs image file conversion and manipulation. It supports the following actions:</p><ul id="l44"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Conversion between file formats</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Merging several image files</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Extracting subsets of images</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Patching bytes</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Setting token data</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The <span class="s19">convert </span>command can either write its output to a file or print it to standard out in human-readable format, similar to the <span class="s19">readmem</span></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">command. When writing to a file, the file format is auto-detected based on the file extension used.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s19">convert </span>command works off-line without any J-Link/debug connection. The command is device-agnostic, except when working with tokens or ebl files. In this case, you must use the <span class="s19">--device </span>option.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert [infile1] [infile2 …] [options]                                                             </span></p><ol id="l45"><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark78">Combine Two Files</a><a name="bookmark196">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Converts two files with different file formats into one specified output file.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert &lt;filename&gt; &lt;filename&gt; [--address &lt;address&gt;] --outfile &lt;filename&gt;                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert blink.bin userpage.hex --address 0x0 --outfile blinkapp.s37                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Combines blink.bin and userpage.hex to blinkapp.s37. The address option is used to set the start address of the .bin file, since bin files doesn’t contain any addressing information. The address value is interpreted as a hexadecimal number. If more than one .bin file is supplied, the same start address is used for all. If this is not desirable, consider converting the bin files to s37 or hex in a separate preparation step.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file blink.bin... Parsing file userpage.hex... Writing to blinkapp.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark79">Define Specific Bytes</a><a name="bookmark197">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Like the <span class="s19">flash </span>command, the <span class="s19">convert </span>command supports the <span class="s19">--patch </span>option for setting arbitrary unsigned integers at any address.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert [filename] --patch &lt;address&gt;:&lt;data&gt;[:length] [--outfile &lt;filename&gt;]                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert blink.s37 --patch 0x0FE00000:0x12345:4 --outfile blink.hex                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Converts blink.s37 to hex format, while simultaneously defining the first four bytes of the user page to 0x00012345. This works just like</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">flash blink.s37 --patch 0x0FE00000:0x12345:4<span class="p">, but works against a file instead of writing to a device flash.</span></p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Patching 0x0FE00000 = 0x00012345...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Writing to blink.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark80">Define Tokens</a><a name="bookmark198">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Like the <span class="s19">flash </span>command, the <span class="s19">convert </span>command supports the <span class="s19">--tokengroup</span>, <span class="s19">--token </span>and <span class="s19">--tokenfile </span>options for setting token data while doing file conversion.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander convert [filename] --tokengroup &lt;token group&gt; [--tokenfile &lt;filename&gt;] [--token &lt;token name&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">:&lt;token data&gt;] [--device &lt;device&gt;] [--outfile &lt;filename&gt;]</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert blink.s37 --tokengroup znet --tokenfile tokens.txt --device EFR32MG1P --outfile blink.hex</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Converts blink.s37 to hex format, while simultaneously defining the tokens defined in tokens.txt and on the command line. Works just like the corresponding options with <span class="s19">flash</span>, but writes to file instead of flash.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file blink.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Writing to blink.hex...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark81">Dump File Contents</a><a name="bookmark199">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Like the <span class="s19">readmem </span>command, the <span class="s19">convert </span>command will print its output in human-readable format to standard out if no output file is given. The value of the address option is interpreted as a hexadecimal number.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert &lt;filename&gt; [--address &lt;bin file start address&gt;]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert blink.bin --address 0x0 userpage.hex</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If the <span class="s19">--outfile </span>option is not used, the data is printed to stdout instead of writing to file.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="319" alt="image" src="ug162-simplicity-commander-reference-guide/Image_013.png"/></span></p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:19.0807pt" cellspacing="0"><tr style="height:23pt"><td style="width:65pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-top: 2pt;padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Parsing file Parsing file</p></td><td style="width:116pt" colspan="4" bgcolor="#D8D8D8"><p class="s27" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">blink.bin... userpage.hex...</p></td><td style="width:108pt" colspan="7" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:65pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{address: 0</p></td><td style="width:116pt" colspan="4" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 7pt;text-indent: 0pt;line-height: 9pt;text-align: left;">1 2 3 4 5 6 7 8</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">9</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">B</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">C</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 9pt;text-align: center;">D</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 9pt;text-align: center;">E</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 3pt;text-indent: 0pt;line-height: 9pt;text-align: right;">F}</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000000:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">10</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">04</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">20 B5 0A 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">57</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">08</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">8B</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000010:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 00 00 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000020:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 00 00 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">97</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000030:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 00 00 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">D1</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">13</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">06</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000040:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">D3</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 D5 0A 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">D7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">D9</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000050:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">DB</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 DD 0A 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">DF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E1</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00000060:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E3</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00 E5 0A 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E9</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:50pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000070:</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">EB</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00</p></td><td style="width:75pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00 ED 0A 00 00</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">EF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0A</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">F1</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: left;">00</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">&lt;shortened data</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">for documentation&gt;</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:14pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:14pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:20pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00000ac0: C5 0A</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00 00 C0 46 C0 46</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C0</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">46</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C0</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">46</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">F7</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">CA</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00000ad0: FE E7</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FE E7 FE E7 FE E7</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">E7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E7</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E7</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00000ae0: FE E7</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FE E7 FE E7 FE E7</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">E7</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E7</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FE</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E7</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">00000af0: FE E7</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FE E7 00 36 6E 01</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">80</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">00</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:15pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:14pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:20pt" bgcolor="#D8D8D8"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">{address: 0 1</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">2 3 4 5 6 7</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">8</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">9</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">A</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">B</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: center;">D</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: center;">E</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 3pt;text-indent: 0pt;line-height: 8pt;text-align: right;">F}</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0fe00000: 45 23</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">01 00 FF FF FF FF</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td></tr><tr style="height:10pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0fe00010: FF FF</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF FF FF FF FF FF</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;line-height: 8pt;text-align: center;">FF</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td></tr><tr style="height:30pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">0fe00020: FF FF</p><p class="s27" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;shortened data 0fe007e0: FF FF</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF FF FF FF FF FF</p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for documentation&gt; FF FF FF FF FF FF</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">FF</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">FF</p></td></tr><tr style="height:23pt"><td style="width:79pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 3pt;text-indent: 0pt;line-height: 107%;text-align: left;">0fe007f0: FF FF DONE</p></td><td style="width:90pt" colspan="2" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">FF FF FF FF FF FF</p></td><td style="width:12pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:15pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:14pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 1pt;text-indent: 0pt;text-align: center;">FF</p></td><td style="width:20pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">FF</p></td></tr></table></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark82">Signing an Application for Secure Boot</a><a name="bookmark200">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Signs an application for use with a Secure Boot bootloader. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert &lt;image file&gt; --secureboot --keyfile &lt;signing key&gt; --outfile &lt;signed image file&gt;             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert nodetest.s37 --secureboot --keyfile mykey --outfile nodetest-signed.s37                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">This example signs the image file named nodetest.s37.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file nodetest.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: 4591da45b6c40a424b81753001708061d5319197adec5188f4acc512cfb88e65 R = 8E417EB4CBC584218A8605FCF3E778F2A7810F2CAE190CB2EF4D0DF842829CC1</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 5B095025FFD571699725107C4666C0B8B867370E990B73E74A0502CB9788DCA8</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to nodetest-signed.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark83">Signing an Application for Secure Boot using a Hardware Security Module</a><a name="bookmark201">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Prepares an application for signing for use with a Secure Boot enabled bootloader using a Hardware Security Module (HSM). For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert &lt;image file&gt; --secureboot --extsign --outfile &lt;image file for external signing&gt;             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander convert nodetest.s37 --secureboot --extsign --outfile nodetest.s37.extsign                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark202" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This example creates an output in the form that an HSM can create a signature over of the entire file. This signature can again be written to the file using the command described in </a><a href="#bookmark202" class="s18">6.5.7 Signing an Application for Secure Boot Signing using a Signature Created by a </a>Hardware Security Module<span style=" color: #000;">.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Writing to nodetest.s37.extsign... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark84">Signing an Application for Secure Boot Signing using a Signature Created by a Hardware Security Module</a><a name="bookmark202">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Signs an application for use with a Secure Boot bootloader using a signature created by a Hardware Security Module (HSM). For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert &lt;image file&gt; --secureboot --signature &lt;signature from external signing&gt; --outfile &lt;signed image file&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert nodetest.s37 --secureboot --signature nodetest.s37.extsign.sig --outfile nodetest-signed.s37</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s23" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark201" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This example signs the image file nodetest.s37 using a signature obtained from an HSM using the .extsign file generated in </a><a href="#bookmark201" class="s18">6.5.6 Sign- </a>ing an Application for Secure Boot using a Hardware Security Module<a href="#bookmark201" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">. The input file (nodetest.s37) used with this function must be the same file as was used when generating the .extsign file in </a><a href="#bookmark201" class="s18">6.5.6 Signing an Application for Secure Boot using a Hardware Security </a>Module<span style=" color: #000;">.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file nodetest.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing signature file nodetest.s37.extsign.sig...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">R = 8E417EB4CBC584218A8605FCF3E778F2A7810F2CAE190CB2EF4D0DF842829CC1 S = 5B095025FFD571699725107C4666C0B8B867370E990B73E74A0502CB9788DCA8</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to nodetest-signed.s37... Overwriting file: nodetest-signed.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 50pt;text-indent: -27pt;text-align: left;"><a name="bookmark85">Adding a CRC32 for Gecko Bootloader</a><a name="bookmark203">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This option adds a CRC32 (32-bit cyclic redundancy check) of the image that the Gecko Bootloader can use to ensure image integrity when Secure Boot is not used. This feature requires that an <span class="s19">ApplicationProperties_t </span>struct is present in the image. For more details on the <span class="s19">ApplicationProperties_t </span>struct, see <i>UG266: Silicon Labs Gecko Bootloader User’s Guide</i>.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert &lt;image file&gt; --crc --outfile &lt;image file with CRC&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert nodetest.s37 --crc --outfile nodetest-crc.s37</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example adds a checksum to the image file named nodetest.s37.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Appending CRC32 checksum... Writing to nodetest-crc.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: justify;"><a name="bookmark86">Signing an Application for Secure Boot using an Intermediary Certificate</a><a name="bookmark204">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Signs an application for use with a Secure Boot bootloader using an intermediary certificate. When using an intermediary certificate, the <span class="s19">ApplicationProperties_t </span>struct must bepresent in the image. For more information on the <span class="s19">ApplicationProperties_t </span>struct, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark282" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Secure Boot verification via an intermediary certificate is only supported on Series 2 EFR32 devices. Secure Boot must be enabled before signing a bootloader with an intermediary certificate. For more information about enabling Secure Boot, see </a><a href="#bookmark282" class="s18">6.17.16 Write User </a>Configuration<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">There are two ways of signing the application:</p><ul id="l46"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Providing the private keyfile corresponding to the public key embedded in the certificate directly.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Preparing an application for signing with a Hardware Security Module (HSM) by generating an output in the form that an HSM can create a signature over the entire file. The signature can then be written to the file by passing it to Simplicity Commander as descri- bed below.</p></li></ul><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Simplicity Commander does currently not support the generation of certificates for Secure Boot signing. This will be available in a future version of Simplicity Commander.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 110%;text-align: left;">$ commander convert &lt;image file&gt; --secureboot --certificate &lt;certificate file&gt; --keyfile &lt;keyfile&gt; --outfile &lt;signed image file&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander convert &lt;image file&gt; --secureboot --certificate &lt;certificate file&gt; --extsign --outfile &lt;image file for external signing&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander convert &lt;image file&gt; --secureboot --certificate &lt;certificate file&gt; --signature &lt;signature&gt; -- outfile &lt;signed image file&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander convert nodetest.s37 --secureboot --certificate nodetest_certificate.bin --keyfile public_certificate_key.pem</p><p class="s34" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">--outfile nodetest-signed.s37</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example signs the image file nodetest.s37 using an intermediary certificate. The keyfile used to sign the application corresponds to the public key embedded in the certificate. Simplicity Commander always validates the key before signing the application.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file nodetest.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Private key matches public key in certificate.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">R = 137EA7A19F6100E1EFA5C185CA952B67137D0597F4A89C7543BC5A49A7A6681E S = C537A833018C3A23CF1EBDBAB04559482B0B5333A7C21556E6B42EDA1D1A5102</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to nodetest-signed.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark87">EBL Commands</a><a name="bookmark205">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l47"><li><p class="s17" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark88">Print EBL Information</a><a name="bookmark206">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Parses and prints EBL information from the specified .ebl file.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl print &lt;filename&gt;                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl print nodetest.ebl                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="436" alt="image" src="ug162-simplicity-commander-reference-guide/Image_014.png"/></span></p><p class="s19" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Image Info String:&#39;&#39;</p><p class="s19" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Image CRC: 0x2ACE0C5B</p><p class="s19" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Customer Version: 0x00000000</p><p class="s19" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Image Stamp: 0xF4271F50BA2E2FBA</p><p class="s19" style="padding-left: 9pt;text-indent: -9pt;line-height: 107%;text-align: left;">Found EBL Tag = 0xFD03, length 1924, [Erase then Program Data] Flash Addr: 0x00004080</p><p class="s19" style="text-indent: 0pt;text-align: left;">Found EBL Tag = 0xFD03, length 2052, [Erase then Program Data]</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Flash Addr: 0x00004800</p><p class="s19" style="text-indent: 0pt;text-align: left;">(32 additional tags of the same type and length.)</p><p class="s19" style="padding-left: 9pt;text-indent: -9pt;line-height: 107%;text-align: left;">Found EBL Tag = 0xFD03, length 1772, [Erase then Program Data] Flash Addr: 0x00015000</p><p class="s19" style="padding-left: 9pt;text-indent: -9pt;line-height: 107%;text-align: left;">Found EBL Tag = 0xFC04, length 4, [EBL End Tag] CRC: 0xDBC82DA5</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">The CRC of this EBL file is valid (0xdebb20e3) File has 0 bytes of end padding.</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Calculated image stamp matches value found in AAT. DONE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">172</p><p class="s19" style="text-indent: 0pt;text-align: left;">5.7.0.0</p><p class="s19" style="text-indent: 0pt;text-align: left;">0</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x561E581F (Wed Oct 14, 2015 13:26:55 UTC [+0100])</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">0x0AA7</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x00004100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Type: HalVectorTable:</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Full AAT Size: Ember Version: Ember Build: Timestamp:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-left: 9pt;text-indent: -9pt;line-height: 107%;text-align: left;">Found EBL Tag = 0x0000, length 140, [EBL Header] Version: 0x0201</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Signature: 0xE350 (Correct) Flash Addr: 0x00004000</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">AAT CRC: 0x53BC1F4E</p><p class="s19" style="padding-left: 19pt;text-indent: -9pt;line-height: 107%;text-align: left;">AAT Size: 128 bytes HalAppBaseAddressTableType</p><p class="s19" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">Top of Stack: 0x20006980</p><p class="s19" style="padding-left: 29pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reset Vector:   0x000121F9 Hard Fault Handler: 0x00012125</p><p style="text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark89">EBL Key Generation</a><a name="bookmark207">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Generates a keyfile to be used for encryption or decryption and outputs the keyfile to the specified filename.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl keygen --type aes-ccm --outfile &lt;filename&gt;                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl keygen --type aes-ccm --outfile key.txt                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Using /dev/random for random number generation</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Gathering sufficient entropy... (may take up to a minute)... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark90">EBL File Creation</a><a name="bookmark208">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Creates an EBL file from an application image and writes the output to the specified filename. Can optionally encrypt the EBL file using a keyfile generated by the <span class="s19">ebl keygen </span>command.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl create &lt;eblfile&gt; --app &lt;filename&gt; --device &lt;part number&gt; [--encrypt &lt;keyfile&gt;]                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl create app.ebl.encrypted --app nodetest.s37 --device EFR32F256 --encrypt key.txt                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="306" alt="image" src="ug162-simplicity-commander-reference-guide/Image_015.png"/></span></p><p class="s19" style="text-indent: 0pt;text-align: left;">Usage Summary:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">262144 total bytes Flash, 107692 used, 154452 available</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Setting AAT timestamp to current time: 0x586e1ec9 Create ebl image file</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Wrote image stamp into AAT. Encrypting EBL...</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Unencrypted input file: ebl_plaintext_ux8544.ebl Encrypt output file:   app.ebl.encrypted Randomly generating nonce</p><p class="s19" style="text-indent: 0pt;text-align: left;">Using /dev/random for random number generation</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Gathering sufficient entropy... (may take up to a minute)... Created ENCRYPTED ebl image file</p><p class="s19" style="text-indent: 0pt;text-align: left;">DONE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">0x00000000-0x00003fff (16384 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x00004000-0x00014ddb (69084 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x00014ddc-0x000184ab (14032 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x000184ac-0x0003dfff (154452 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x0003e000-0x0003ffff (8192 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Parse .s37 format for flash Flash Usage:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reserved for Bootloader: CODE and Tables:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">CONST and INITC:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Available for future use: Reserved for SIMEE:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark91">EBL File Parsing</a><a name="bookmark209">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Parses an EBL file and writes the application image to the specified filename. Optionally decrypts an encrypted EBL file. The keyfile must be the same as was used for encrypting the encrypted EBL file.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl parse &lt;ebl filename&gt; --app &lt; filename&gt; --device &lt;part number&gt; [--decrypt &lt;key filename&gt;]        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl parse nodetest.ebl.encrypted --app app.s37 --device EFR32F256 --decrypt ../aeskey               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unencrypted output file: ebl_plaintext_L10567.ebl Encrypt input file:      nodetest.ebl.encrypted MAC matches. Decryption successful.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Created DECRYPTED ebl image file Parse .ebl format for flash Create image file</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing application to app.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark92">Memory Usage Information from AAT</a><a name="bookmark210">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">For applications containing an Application Address Table (AAT), Simplicity Commander can analyze the memory usage of the applica- tion. The AAT is included in Zigbee applications.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">RAM usage is only available for EM3xx applications. Applications built for EFR32 can only be analyzed for flash usage.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl aat-usageinfo &lt;filename&gt; --device &lt;part number&gt;                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ebl aat-usageinfo nodetest.s37 --device EM357                                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="293" alt="image" src="ug162-simplicity-commander-reference-guide/Image_016.png"/></span></p><p class="s19" style="text-indent: 0pt;text-align: left;">Usage Summary:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">12288 total bytes RAM, 9828 used, 2460 available</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">196608 total bytes Flash, 90724 used, 105884 available</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: left;">DONE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">0x08000000-0x08001fff (8192 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x08002000-0x08011cdf (64736 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x08011ce0-0x08014263 (9604 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x08014264-0x0802dfff (105884 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x0802e000-0x0802ffff (8192 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">0x20000fc4-0x2000195f (2460 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x20001960-0x200022bf (2400 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x200022c0-0x20002fe8 (3369 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x20002fe9-0x20002fef (7 bytes)</p><p class="s19" style="text-indent: 0pt;text-align: left;">0x20002ff0-0x20002fff (16 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Available for future use: Call Stack:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Globals and Statics: Alignment Overhead: NO_INIT and Debug Channel:</p><p class="s19" style="text-indent: 0pt;text-align: left;">Flash Usage:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reserved for Bootloader: CODE and Tables:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">CONST and INITC:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;line-height: 107%;text-align: left;">Available for future use: Reserved for SIMEE:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">Parse .s37 format for flash</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: left;">Approximate Usage Information:</p><p class="s19" style="text-indent: 0pt;text-align: left;">RAM Usage:</p><p class="s19" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">APPLICATION_CONFIGURATION_HEADER usage: 0x20000000-0x20000fc3 (4036 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark93">GBL Commands</a><a name="bookmark211">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l48"><li><p class="s17" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark94">GBL File Creation</a><a name="bookmark212">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Creates a Gecko Bootloader (GBL) file from an application image and writes the output to the specified filename. Can optionally encrypt the GBL file using a keyfile generated by the <span class="s19">gbl keygen </span>command.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create &lt;gblfile&gt; --app &lt;filename&gt; [--encrypt &lt;keyfile&gt;]                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create app.gbl.encrypted --app nodetest.s37 --encrypt key.txt                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Initializing GBL file...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Encrypting GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file app.gbl.encrypted... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark95">GBL File Creation with Compression</a><a name="bookmark213">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Creates a compressed Gecko Bootloader (GBL) file from an application image and writes the output to the specified filename. Can op- tionally encrypt the GBL file using a keyfile generated by the <span class="s19">gbl keygen </span>command.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The currently supported compression algorithms are <span class="s19">lz4 </span>and <span class="s19">lzma</span>. The bootloader on the targeted devices must support decompress- ing the selected compression type.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create &lt;gblfile&gt; --app &lt;filename&gt; --compress &lt;compression algorithm&gt; [--encrypt &lt;keyfile&gt;]      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create app.gbl --app nodetest.s37 --compress lz4                                                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Initializing GBL file...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Compressing using lz4...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Writing GBL file app.gbl...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark96">Creating a GBL File for Bootloader Upgrade</a><a name="bookmark214">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Creates a GBL file from a bootloader image and writes the output to the specified bootloader image filename. For more information, see</p><p class="s20" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">UG266: Silicon Labs Gecko Bootloader User&#39;s Guide<span class="p">.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create &lt;gblfile&gt; --bootloader &lt;bootloader image file&gt; [--encrypt &lt;keyfile&gt;]                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create bootloader.gbl --bootloader bootloader.s37                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Initializing GBL file...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Adding bootloader to GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file bootloader.gbl... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark97">Creating a GBL File for Secure Element Upgrade</a><a name="bookmark215">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Secure Element on EFR32xG21 devices can be upgraded using a Secure Element upgrade binary provided by Silicon Labs. This command creates a GBL file containing a Secure Element upgrade file and writes the output to the specified GBL filename. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create &lt;gblfile&gt; --seupgrade &lt;secure element upgrade file&gt; --app &lt;application image&gt;            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create se-upgrade.gbl --seupgrade secure-element-1.0.0.seu --app myapp.s37                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file myapp.s37... Initializing GBL file... Adding application to GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding Secure Element upgrade image to GBL... Writing GBL file se-upgrade.gbl...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark98">Creating a Signed and Encrypted GBL Upgrade Image File from an Application</a><a name="bookmark216">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Creates a GBL file, signs the GBL file, and encrypts the GBL file. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create &lt;gblfile&gt; --app &lt;app image file&gt; --sign &lt;signing key&gt; [--encrypt &lt;encryption key&gt;]       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create nodetest.gbl --app nodetest.s37 --sign ecdsakey --encrypt aeskey                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Initializing GBL file...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Encrypting GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Signing GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: 74b126bdbad680470487e32d7d7b3ec7f12b15d9988e028b26c2dd54f81dcfb7 R = 055A23A44CDEDA34506EE72F4530FE174CFC85F48933C1379C1360F8BC1AA75B</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">S = 1C9EF6C3F5CAA0D5B92ECC2569E4A8251F8561DAF52DE54D3E59591A5001B9EA</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file nodetest.gbl... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark99">Creating a Partial Signed and Encrypted GBL Upgrade File for Use with a Hardware Security Module</a><a name="bookmark217">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">It is often not desirable to keep the private key used for signing locally on the computer that creates the GBL images. A good way to increase security is to use a Hardware Security Module (HSM) to generate the actual signatures. Simplicity Commander supports using a three-step process:</p><ol id="l49"><li><p style="padding-top: 8pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Create a partial GBL file for external signing using Simplicity Commander.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Create an Elliptic Curve Digital Signature Algorithm (ECDSA) signature of the partial GBL file using an HSM.</p></li><li><p style="padding-top: 3pt;padding-left: 41pt;text-indent: -9pt;text-align: left;">Use Simplicity Commander to sign the partial GBL file using the signature from the HSM, and create a complete GBL file.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark218" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Step 1 is described in this section. Step 2 is specific to the HSM you are using. Step 3 is described in </a><a href="#bookmark218" class="s18">6.7.7 Creating a Signed GBL File </a><span style=" color: #049;">Using a Hardware Security Module</span>. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander gbl create &lt;output partial GBL file for external signing&gt; --app &lt;app image file&gt;</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">--extsign [--encrypt &lt;encryption key&gt;]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl create nodetest.gbl.extsign --app nodetest.s37 --extsign --encrypt aeskey                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file nodetest.s37... Initializing GBL file...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Adding application to GBL... Encrypting GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Preparing GBL for external signing... Writing GBL file nodetest.gbl.extsign... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark100">Creating a Signed GBL File Using a Hardware Security Module</a><a name="bookmark218">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark217" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Creates a signed GBL file from a partial GBL file and an ECDSA signature file in Distinguished Encoding Rules (DER) format generated as described in </a><span style=" color: #049;">6.7.6 Creating a Partial Signed and Encrypted GBL Upgrade File for Use with a Hardware Security Module </span>. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Silicon Labs recommends that you use the <span class="s19">--verify </span>option with the public key corresponding to the private key used by the HSM to ensure the integrity of the generated GBL file.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander gbl sign &lt;partial GBL file for external signing&gt; --signature &lt;signature from HSM&gt; [--verify &lt;public key file&gt;] --outfile &lt;signed GBL file&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander gbl sign nodetest.gbl.extsign --signature nodetest.gbl.extsign.sig --verify ecdsakey.pub</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">--outfile nodetest-signed.gbl</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reading GBL data from nodetest.gbl.extsign... Parsing signature file nodetest.gbl.extsign.sig...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">R = 2E73426A1052E12BFFFEFBA9BE2AA50CEA815B630C3CA878494EEF26088A5673 S = C218596DB9958AB30924B516953D2E5107644963B4CA128072AC965BE5C2992D</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Writing signature to GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Image SHA256: 4d7325b09ade0ea272eb9895096c8137b18451f694a4eca9a5782f5c08dea03a Q_X: 60BA97B850291456217C2149061AA344B32BBFB69A91A94BBF2F274744308D39</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Q_Y: 41927DA5DB171E1C723C6B59C2BC88EDFF5A37014B0473775BA5B15921686ECA R = 2E73426A1052E12BFFFEFBA9BE2AA50CEA815B630C3CA878494EEF26088A5673 S = C218596DB9958AB30924B516953D2E5107644963B4CA128072AC965BE5C2992D</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing GBL file nodetest-signed.gbl... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark101">GBL File Parsing</a><a name="bookmark219">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Parses a Gecko Bootloader (GBL) file and writes the application image to the specified filename. Optionally decrypts an encrypted GBL file. The keyfile must be the same as was used for encrypting the encrypted GBL file.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl parse &lt;gbl filename&gt; --app &lt; filename&gt; [--decrypt &lt;key filename&gt;]                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander gbl parse nodetest.gbl.encrypted --app app.s37 --decrypt key.txt                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reading GBL data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Decrypting GBL...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Reading application...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing application to app.s37... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark102">GBL Key Generation</a><a name="bookmark220">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark289" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This command is deprecated. Please see </a>6.18.1 Key Generation <span style=" color: #000;">for more information about key generation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark103">Generating a Signing Key</a><a name="bookmark221">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark290" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This command is deprecated. Please see </a>6.18.2 Generating a Signing Key <span style=" color: #000;">for more information about generating a signing key.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark104">Generate a Signing Key Using a Hardware Security Module</a><a name="bookmark222">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark291" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This command is deprecated. Please see </a>6.18.3 Key to Token <span style=" color: #000;">for more information about generating a signing key using a hardware security module.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark105">Kit Utility Commands</a><a name="bookmark223">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l50"><li><p class="s17" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark106">Firmware Upgrade</a><a name="bookmark224">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Updates the application running on the board controller on the kit to a new version provided in an .emz file by Silicon Labs.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter fwupgrade --serialno &lt;J-Link serial number&gt; &lt;filename&gt;                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter fwupgrade -s 440050184 S1015B_wireless_stk_firmware_package_0v14p0b435.emz                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Checking manifest...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Checking if target is in bootloader... Waiting for kit to restart...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Package is usable</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Deleting previous firmware... Installing files...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting target...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for kit to restart... Finished!</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark107">Kit Information Probe</a><a name="bookmark225">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Retrieves information about a connected kit. Lists information about the kit part number and name, connected boards, and firmware version.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The options <span class="s19">--kit</span>, <span class="s19">--boards</span>, and <span class="s19">--firmware </span>limit the output to just kit information, board list, or firmware information, respectively.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s19">VCOM Port </span>line informs which virtual COM port name the kit has been assigned by the operating system. On Windows this is on the form COM&lt;number&gt;. On Linux and macOS, the name corresponds to a special file in the <span class="s19">/dev/ </span>folder. E.g. <span class="s19">VCOM Port: ttyACM0 </span>indicates that the serial port is available at <span class="s19">/dev/ttyACM0</span>. This line is not always available, and may be omitted from the output.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter probe --serialno &lt;J-Link serial number&gt; [--kit] [--boards] [--firmware]                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter probe --serialno 440050184                                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="293" alt="image" src="ug162-simplicity-commander-reference-guide/Image_017.png"/></span></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Kit Part Number : WSTK6002A Rev. A00 J-Link Serial : 440050184</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Debug Mode   : MCU AEM Supported : 1 VCOM Supported  : 1 IP Supported : 1</p><p class="s19" style="text-indent: 0pt;text-align: left;">VCOM Port : COM3</p><p class="s19" style="text-indent: 0pt;text-align: left;">Firmware Information:</p><p class="s19" style="text-indent: 0pt;text-align: left;">=======================================</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">FW Version : 0v14p0b435 Board List:</p><p class="s19" style="text-indent: 0pt;text-align: left;">=======================================</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Name        : Wireless Starter Kit Mainboard Part Number : BRD4001A Rev. A01</p><p class="s19" style="text-indent: 0pt;text-align: left;">Serial Number : 152607557</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Name        : EFR32MG 2400/915 MHz 19.5 dBm Dual Band Radio Board Part Number : BRD4150B Rev. B00</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Serial Number : 151300035 DONE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">: EFR32 Mighty Gecko 2400/915 MHz Dual Band Wireless Starter Kit</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">Kit Name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">Kit Information:</p><p class="s19" style="text-indent: 0pt;text-align: left;">=======================================</p><p style="text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark108">Adapter Reset Command</a><a name="bookmark226">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This command resets the adapter itself, causing a restart. The <span class="s19">adapter reset </span>command is usually not required during normal opera- tion.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">An error about “Communication timed out” may occur because the adapter sometimes restarts before it has time to reply to the com- mand.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter reset                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter reset                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Communication timed out: Requested 76 bytes, received 0 bytes ! DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark109">Adapter Debug Mode Command</a><a name="bookmark227">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This command sets or reads the current debug mode of the adapter. The supported debug modes are typically IN, OUT, MCU, and OFF. See the quick start guide for your kit for a description of the debug modes it supports.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter dbgmode [mode]                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter dbgmode MCU                                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Setting debug mode to MCU... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark110">List Adapter IP Configuration Command</a><a name="bookmark228">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The <span class="s19">adapter ip </span>command gets or sets the IP configuration of the adapter. With no options, the current configuration is retrieved and displayed.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip                                                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip                                                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">IP Address: 192.168.0.5/24</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Gateway : 192.168.0.1</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">DNS Server: 192.168.0.1 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark111">Adapter DHCP Command</a><a name="bookmark229">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This command sets up the adapter to use DHCP to automatically retrieve IP, gateway and DNS addresses. This is the default con- figuration. After enabling DHCP, the adapter must be restarted for the change to take effect.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip --dhcp                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip --dhcp                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Enabling DHCP. The adapter must be restarted to acquire a new IP address. DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 50pt;text-indent: -27pt;text-align: left;"><a name="bookmark112">Set Static IP Configuration Command</a><a name="bookmark230">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command sets the IP address of the adapter in Classless Inter-Domain (CIDR) notation.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip --addr &lt;IP address/prefix&gt; [--gw &lt;gateway address&gt;] [--dns &lt;dns server address&gt;]         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander adapter ip --addr 192.168.1.5/24 --gw 192.168.1.1 --dns 192.168.1.1                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Setting IP Address: 192.168.1.5/24 Setting gateway: 192.168.1.1 Setting DNS server: 192.168.1.1 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark113">Device Erase Commands</a><a name="bookmark231">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l51"><li><p class="s17" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark114">Erase Chip</a><a name="bookmark232">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Executes a mass erase for devices where it is supported. On EFM32G and EFM32TG, all pages are erased instead, which is signifi- cantly slower.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device masserase                                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Erasing chip...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark115">Erase Region</a><a name="bookmark233">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Erases a named region. For more information on the <span class="s19">--region </span><a href="#bookmark186" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">option, see section </a><span style=" color: #049;">6.2 Flash Verification Command</span>.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device pageerase --region &lt;@region&gt;                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device pageerase --region @userdata                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Erasing range 0x0fe00000 - 0x0fe00800 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 50pt;text-indent: -27pt;text-align: left;"><a name="bookmark116">Erase Pages in Address Range</a><a name="bookmark234">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Erases all flash pages affected by the given memory range. If the given range doesn&#39;t match page boundaries, it will be extended to always erase entire pages.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device pageerase --range &lt;startaddress&gt;:&lt;endaddress&gt;                                                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device pageerase --range 0x200:0x6000                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Erases all flash pages 0 to 11 or 0x0000 to 0x5FFF (assuming a page size of 2 kB).</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Erasing range 0x00000000 - 0x00006000 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark117">Device Lock and Protection Commands</a><a name="bookmark235">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l52"><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark118">Debug Lock</a><a name="bookmark236">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Locks access to the debug interface of the device. This feature is only supported on EFM32 and EFR32 devices. The <span class="s19">--debug enable</span></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;">option is no longer required as of Simplicity Commander version 1.8.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device lock [--debug enable]                                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Locking debug access...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark119">Debug Unlock</a><a name="bookmark237">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;">Unlocks access to the debug interface of the device. This triggers a mass erase if the device was locked before. This feature is only supported on EFM32 and EFR32 devices.</p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device lock --debug disable                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">ERROR: Could not get MCU information Removing all locks/protection...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unlocking debug access (triggers a mass erase)... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In Simplicity Commander version 1.8 an alternative command syntax was introduced.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device unlock                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unlocking debug access (triggers a mass erase)... Chip successfully unlocked.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark120">Write Protect Flash Ranges</a><a name="bookmark238">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Protects all flash pages affected by the given memory range from any writes or erases. The available granularity of flash write protec- tion is device-dependent. Consult the device reference manual for details. For EFM32 and EFR32 devices, for example, the write pro- tect feature operates on flash pages. On EM3xx devices, this works on 8 kB or 16 kB blocks.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">For all devices, if the given range doesn&#39;t match the block size supported by the device, it will be extended to always protect entire regions.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device protect --write --range &lt;startaddress&gt;:&lt;endaddress&gt;                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device protect --write --range 0x0:0x4000                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Protects all flash pages in the first 16 kB from being erased or written to. Useful for protecting a bootloader from being modified by buggy application code, for example.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Write protecting range 0x00000000 - 0x00004000 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark121">Write Protect Flash Region</a><a name="bookmark239">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Protects all flash pages in the named region from being written to or erased.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device protect --write --region @&lt;region&gt;                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device protect --write --region @mainflash                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Protects the entire main flash from being written to or erased.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Write-protecting all pages in main flash. DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a name="bookmark122">Disable Write Protection </a><span class="p">Disables write protection for all pages. </span>Command Line Syntax<a name="bookmark240">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device protect --write --disable                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Disabling all write protection... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark123">Device Utility Commands</a><a name="bookmark241">&zwnj;</a></p><ol id="l53"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark124">Device Information Command</a><a name="bookmark242">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Shows detailed information about the target device.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device info                                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Part Number : EFR32MG1P233F256GM48</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Die Revision : A0 Production Ver : 0 Flash Size : 256 kB</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">SRAM Size : 32 kB</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unique ID  : 000b57000003b2f0 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;line-height: 182%;text-align: justify;"><a name="bookmark125">Device Reset Command </a><span class="p">Resets a device using a pin reset. </span>Command Line Syntax<a name="bookmark243">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device reset                                                                                         </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Resetting chip...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark126">Device Recovery Command</a><a name="bookmark244">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On EFM32 and EFR32 devices, this command tries to recover a device that has lost debug access due to misconfiguration of clocks, GPIO pins, or similar. Recovery is not supported on all devices, and in some cases requires the kit corresponding to the device you want to recover, for example, an EFM32TG STK to recover an EFM32TG device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">On EM3xx devices, this command can be used to recover from option byte failure.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device recover                                                                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Recovering &quot;bricked&quot; device... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark127">Device Z-Wave QR Code Command</a><a name="bookmark245">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Z-Wave QR code command is used to read out the QR code from all Z-Wave devices. The QR code is 90 bytes, displayed as ASCII characters, and stored in the TOKEN_MFG_ZW_QR_CODE manufacturing token.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The QR code is generated in the chip during initialization. When the QR code is correctly initialized, the value of the manufacturing token TOKEN_MFG_ZW_INITIALIZED is changed from 0xFF to 0x00. The optional <span class="s19">--timeout </span>option is used to indicate how long Simplicity Commander should wait for the QR code to be initialized. If no time is given, the default is 5000 ms.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander device zwave-qrcode [--timeout &lt;timeout in ms&gt;]                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> commander device zwave-qrcode --timeout 5000                                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Usage Output</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">QR code: 900132782003515253545541424344453132333435212223242500100435301537022065520001000000300578 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark128">External SPI Flash Commands</a><a name="bookmark246">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Simplicity Commander supports reading, writing, and erasing data on an external SPI flash on a limited selection of boards and devi- ces. The following configurations are currently supported:</p><ul id="l54"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The integrated SPI flash on EFR32MG1x632 and EFR32MG1x732 devices</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The MX25 SPI flash on EFR32 radio boards</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l55"><li><p class="s17" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark129">Erase External SPI Flash Command</a><a name="bookmark247">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Use this command to erase data on an external flash. By default, the erased range is read back to verify that it was actually erased. This blank check can be disabled by including the <span class="s19">--noverify option</span>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s19">extflash erase </span>command always erases complete sectors. Any sector overlapping with the range provided will be erased. All currently supported flash devices have a sector size of 4096 bytes. For example, erasing with option <span class="s19">--range 0xE00:0x1100 </span>will effec- tively erase the first two sectors (equivalent to <span class="s19">--range 0x0:0x2000</span>).</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash erase --range &lt;range expression&gt; [--noverify]                                              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash erase --range 0x1000:0x3000                                                                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Erasing 8192 bytes from 0x00001000 on external flash. Resetting target...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flashloader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Erasing external flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Reading from external flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: justify;"><a name="bookmark130">Read External SPI Flash Command </a><span class="p">Use this command to read from external flash. </span>Command Line Syntax<a name="bookmark248">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash read --range &lt;range expression&gt;                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash read --range 0x0:+0x20                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reading 32 bytes from 0x00002000 on external flash. Resetting target...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flashloader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Reading from external flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">{address: 0 1 2 3 4 5 6 7 8 9 A B C D E F}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">00002000: 48 65 6C 6C 6F 20 57 6F 72 6C 64 21 0A FF FF FF</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">00002010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark131">Write External SPI Flash Command</a><a name="bookmark249">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Use this command to write to external flash.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Any existing content in the affected flash sectors will be erased before writing.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In contrast to the <span class="s19">flash </span>command for internal flash, the <span class="s19">extflash write </span>command always flashes the raw content of the given file. If the address option is given the value is interpreted as a hexadecimal number. If, for example, an S-record file is provided, the ASCII content of the file is written; the S-record format is not parsed and written to the addresses specified in the file.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash write &lt;filename&gt; --address &lt;start address&gt;                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander extflash write myfile.txt --address 0x2000                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Flashing 13 bytes to 0x00002000 on external flash. Resetting target...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Uploading flashloader...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Erasing external flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing to external flash... Verifying written data...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Waiting for flashloader to become ready... Reading from external flash...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li></ol></li><li><p class="s17" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark132">Advanced Energy Monitor Measure Command</a><a name="bookmark250">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Advanced Energy Monitor (AEM) command measures the average current in a time window. The <span class="s19">--windowlength </span>is in millisec- onds (ms) and is defined as the duration where current samples will be measured and averaged. The default is 100 ms if no time is given.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander aem measure [--windowlength &lt;time in ms&gt;]                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander aem measure --windowlength 200                                                                       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Averaged over 200 ms: Current [mA]: 5.359 Power [mW] : 17.763 Voltage [V] : 3.314 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark133">Serial Wire Output Read Commands</a><a name="bookmark251">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Simplicity Commander supports reading and dumping data received over Serial Wire Output (SWO) using the <span class="s19">swo read </span>command. When the command is executed, the target device is reset. The command will then read and dump SWO data until the application is terminated by pressing Ctrl+C, or one of the conditions described below is met.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l56"><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark134">Configure SWO Speed</a><a name="bookmark252">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This command sets the SWO speed frequency in Hz. The default SWO speed is 875000 Hz. The SWO speed must match the frequen- cy used by the target application.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read [--swospeed &lt;frequency in Hz&gt;]                                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read --swospeed 1000000                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">&lt;data written by the target application at 1 MHz&gt; Got signal 2, exiting...</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark135">Read SWO Until Timeout</a><a name="bookmark253">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command sets the number of seconds for the adapter to wait without receiving data before it times out. The default is to never time out.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read [--timeout &lt;timeout in s&gt;]                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read --timeout 1                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">&lt;data written by the target application&gt; Timeout: No SWO output for 1 seconds.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark136">Read SWO Until a Marker Is Found</a><a name="bookmark254">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If the <span class="s19">--endmarker </span>option is used, the command will terminate after finding the specified string in the SWO stream.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read [--endmarker &lt;end marker&gt;]                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read [--endmarker --finished--]                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;data written by the target application&gt;</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">--finished-- DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark137">Dump Hex Encoded SWO Output</a><a name="bookmark255">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">If the <span class="s19">--hex </span>option is used, all input and output is converted to a hexadecimal string. This is useful if the target dumps binary data. If the</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: left;">--hex <span class="p">option is used, </span>--endmarker <span class="p">must also be hex-encoded.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read [--hex] [--endmarker &lt;hex encoded end marker&gt;]                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander swo read --hex --endmarker 50415353                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 110%;text-align: left;">0a5374617274696e6720746573742067726f757020434d550a434d553a333836323a546573745f434d555f4275675f363639393a50415353 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark138">NVM3 Commands</a><a name="bookmark256">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Third Generation Non-Volatile Memory (NVM3) module in the Gecko SDK provides a way to store data in non-volatile memory (flash) on EFM32 and EFR32 devices. Refer to <i>UG103.7: Non-Volatile Memory Fundamentals </i>or <i>AN1135: Using Third Generation Non- Volatile Memory (NVM3) Data Storage in Dynamic Multiprotocol Applications </i>for more details on NVM3.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Simplicity Commander supports reading out the NVM3 data area from a device and parsing the NVM3 data to extract stored values. This can be useful in a debugging scenario where you may need to find out the stored state of an application that has been running for some time.</p><ol id="l57"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark139">Read NVM3 Data From a Device</a><a name="bookmark257">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command searches for an NVM3 area in the device&#39;s flash and dumps the content to a file in .bin, .s37 or .hex format.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The optional <span class="s19">--range </span>parameter can be used to specify the memory range where Simplicity Commander should search for NVM3 data. If no range is given, the entire flash is searched.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 read -o &lt;outfile&gt; [--range &lt;startaddress&gt;:&lt;endaddress&gt;]                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 read -o my_nvm3_data.s37                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Scans through the device flash and searches for a valid NVM3 area. When it is found, the NVM3 area is written to the file named</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">my_nvm3_data.s37<span class="p">.</span></p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Reading 24576 bytes from 0x000fa000... Writing to my_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark140">Parse NVM3 Data</a><a name="bookmark258">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This command takes an image file containing NVM3 data and parses the contents. The parsed NVM3 objects are printed to standard out.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The optional <span class="s19">--range </span>parameter can be used to specify the memory range where Simplicity Commander should search for NVM3 data. If no range is given, the entire file is searched.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The optional <span class="s19">--key </span>parameter can be used to specify specific NVM3 keys to look up. It can be used multiple times to look up more than one key at a time. Objects with more than eight bytes of data will be truncated when listing all objects. Use the <span class="s19">--key </span>parameter to select objects whose data should be displayed.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 parse &lt;file&gt; [--range &lt;startaddress&gt;:&lt;endaddress&gt;] [--key &lt;object key&gt;]                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 parse my_nvm3_data.s37                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Scans through the given file and searches for valid NVM3 data. When it is found, the data is parsed and printed to standard out.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="150" alt="image" src="ug162-simplicity-commander-reference-guide/Image_018.png"/></span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:20.1653pt" cellspacing="0"><tr style="height:33pt"><td style="width:365pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file my_nvm3_data.s37...</p><p class="s27" style="padding-left: 2pt;padding-right: 151pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Found NVM3 range: 0x000FA000 - 0x00100000 All NVM3 objects:</p></td></tr><tr style="height:10pt"><td style="width:56pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 9pt;text-indent: 0pt;line-height: 8pt;text-align: right;">KEY -</p></td><td style="width:66pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 12pt;text-indent: 0pt;line-height: 8pt;text-align: right;">TYPE -</p></td><td style="width:243pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 12pt;text-indent: 0pt;line-height: 8pt;text-align: left;">SIZE - DATA</p></td></tr><tr style="height:10pt"><td style="width:56pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 9pt;text-indent: 0pt;line-height: 8pt;text-align: right;">0x00001 -</p></td><td style="width:66pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 12pt;text-indent: 0pt;line-height: 8pt;text-align: right;">Data -</p></td><td style="width:243pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 17pt;text-indent: 0pt;line-height: 8pt;text-align: left;">4 B - 2A 00 00 00</p></td></tr><tr style="height:10pt"><td style="width:56pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 9pt;text-indent: 0pt;line-height: 8pt;text-align: right;">0x00002 -</p></td><td style="width:66pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 12pt;text-indent: 0pt;line-height: 8pt;text-align: right;">Data -</p></td><td style="width:243pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 12pt;text-indent: 0pt;line-height: 8pt;text-align: left;">16 B - 73 36 57 CA 6B CE CF E2 (+ 8 more bytes)</p></td></tr><tr style="height:15pt"><td style="width:56pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 9pt;text-indent: 0pt;text-align: right;">0x00003 -</p></td><td style="width:66pt" bgcolor="#D8D8D8"><p class="s27" style="padding-right: 12pt;text-indent: 0pt;text-align: right;">Counter -</p></td><td style="width:243pt" bgcolor="#D8D8D8"><p class="s27" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">4 B - 2</p></td></tr><tr style="height:37pt"><td style="width:365pt" colspan="3" bgcolor="#D8D8D8"><p class="s27" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">NVM3 erase count: 1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p></td></tr></table></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark141">Initialize NVM3 Area in a File</a><a name="bookmark259">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The <span class="s19">nvm3 initfile </span>command creates a blank NVM3 area in an image file. For example, this feature is useful to create a file that the</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nvm3 set <span class="p">command can work on to create a default set of NVM3 data that can be written during production.</span></p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The size and location of the NVM3 area must be given and must match the size and location used in the embedded application using the NVM3 area.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander nvm3 initfile --address &lt;location&gt; --size &lt;size in bytes&gt; --device &lt;target device part number&gt; -- outfile &lt;image file&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander nvm3 initfile --address 0xfa000 --size 0x6000 --device EFR32MG12P233F1024 --outfile my_nvm3_data.s37</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This creates a 24 kB NVM3 area spanning the flash address range 0xfa000 - 0x100000.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Placing NVM3 area at address 0x000fa000 Writing to my_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark142">Write NVM3 Data Using a Text File</a><a name="bookmark260">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The <span class="s19">nvm3 set </span>command takes an image file containing an NVM3 data region and sets the value of one or more NVM3 objects. The objects may already exist, in which case the value is updated. If the object does not already exist, it is created. The definition of the data to write can be passed either as a text file (<span class="s19">--nvm3file</span>) or as command line parameters (<span class="s19">--object </span>and <span class="s19">--counter</span>).</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The text file passed by the <span class="s19">--nvm3file </span>option must have the following format:</p><ul id="l58"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Each line defines a single object or counter.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Empty lines are ignored.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Lines starting with # are ignored.</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Each line in the file must have the following syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">&lt;key&gt;:&lt;type&gt;:&lt;data&gt;</p><p class="s19" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">&lt;key&gt; <span class="p">is the NVM3 object key which is the unique identifer used by the embedded application. It has a maximum size of 20 bits (maxi- mum value 0xFFFFF).</span></p><p class="s19" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">&lt;type&gt; <span class="p">is the NVM3 object type. It can be one of two values: </span>OBJ <span class="p">or </span>CNT<span class="p">. </span>OBJ <span class="p">indicates a plain byte array. </span>CNT <span class="p">indicates an NVM3 counter type (32-bit unsigned integer).</span></p><p class="s19" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">&lt;data&gt; <span class="p">is the value the object should be set to. For counter types, the value is interpreted as an unsigned integer which can be prefixed with 0x to indicate a hexadecimal value. Byte arrays are always parsed as hexadecimal and should not be prefixed with 0x.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Example File</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">0x00001 : OBJ : 01020304AABBCCDD</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">0x01000 : CNT : 0x80</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">0x01001 : CNT : 42</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This file sets the object with ID 0x1 to be a byte array of eight bytes in length with the contents above.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The object with ID 0x1000 is a counter with value 0x80 (128). The object with ID 0x1001 is a counter with value 42.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 set &lt;input image file&gt; --nvm3file &lt;filename&gt; --outfile &lt;image file&gt;                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 set my_nvm3_data.s37 --nvm3file nvm3_objects.txt --outfile my_modified_nvm3_data.s37           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">nvm3_objects.txt <span class="p">is parsed for NVM3 objects following the format described above. The given input image file is scanned for a valid NVM3 region. The objects defined in the text file are written into the NVM3 region and the modified output is written to the output image file.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file my_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Found NVM3 range: 0x000FA000 - 0x00100000 Setting NVM3 object: 0x00001 = 01020304AABBCCDD Setting NVM3 counter: 0x01000 = 128 (0x00000080) Setting NVM3 counter: 0x01001 = 42 (0x0000002a) Writing to my_modified_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark143">Write NVM3 Data Using CLI Options</a><a name="bookmark261">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In some cases, it may be more convenient to set the NVM3 object data directly from the command line without using a text file. In this instance, use the command line options <span class="s19">--object </span>and <span class="s19">--counter</span>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The two options both use the same syntax: &lt;<span class="s19">key&gt;:&lt;data&gt;</span>. The definitions of <span class="s19">&lt;key&gt; </span>and <span class="s19">&lt;data&gt; </span><a href="#bookmark260" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">are the same as in </a><a href="#bookmark260" class="s18">6.15.4 Write NVM3 </a><span style=" color: #049;">Data Using a Text File</span>. The only difference between the two formats is that the <span class="s19">&lt;type&gt; </span>field has been removed because it is given by the command line option name instead.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Simplicity Commander automatically finds the correct NVM3_MAX_OBJECT_SIZE based on the given size of NVM3 area.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander nvm3 set &lt;input image file&gt; --object &lt;key&gt;:&lt;data&gt; --counter &lt;key&gt;:&lt;data&gt; --outfile &lt;image file&gt;     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander nvm3 set my_nvm3_data.s37 --object 0x1:01020304AABBCCDD --counter 0x1000:0x80 --counter 0x01001:42</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">--outfile my_modified_nvm3_data.s37</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">All <span class="s19">--object </span>and <span class="s19">--counter </span>parameters are parsed according to the format above. The given input image file is scanned for a valid NVM3 region. The objects defined in the text file are written into the NVM3 region and the modified output is written to the output image file.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file my_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Setting NVM3 object: 0x00001 = 01020304AABBCCDD Setting NVM3 counter: 0x01000 = 128 (0x00000080) Setting NVM3 counter: 0x01001 = 42 (0x0000002a) Writing to my_modified_nvm3_data.s37...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark144">CTUNE Commands</a><a name="bookmark262">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Wireless Gecko (EFR32™) portfolio devices support configuring the crystal oscillator load capacitance in software. The crystal oscillator load capacitor tuning (CTUNE) values are tuned during the production test of both Wireless Gecko-based modules and Silicon Labs Wireless Starter Kit (WSTK) radio boards. For modules, the optimal value for each device is written to the Device Information (DI) page in flash. For radio boards, the optimal value for each board is written to an EEPROM that is inaccessible to the software running on the target device, but readable by Simplicity Commander. The <span class="s19">ctune </span>commands support reading out the stored CTUNE values from these locations, and writing and reading the CTUNE manufacturing token.</p><ol id="l59"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark145">CTUNE Get Command</a><a name="bookmark263">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command retrieves the CTUNE value stored in the Device Info page, the value stored in EEPROM on the board, and the value written to the CTUNE manufacturing token. The values are displayed.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune get                                                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune get                                                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Getting CTUNE values from the Device Info page, stored in EEPROM on the board, and the MFG token. DI: Not set</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Board: 346</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Token: 346 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">Not all devices have the CTUNE value stored in both the Device Info page and in EEPROM on the board. If this is the case, the value is displayed as &quot;Not set&quot;.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark146">CTUNE Set Command</a><a name="bookmark264">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command sets the CTUNE manufacturing token to the value specified by the value option.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune set &lt;value&gt;                                                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune set --value 346                                                                                </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Setting CTUNE token to 346 DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark147">CTUNE Autoset Command</a><a name="bookmark265">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command retrieves the CTUNE value from EEPROM on the board and sets the CTUNE manufacturing token to this value.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune autoset                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander ctune autoset                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Getting CTUNE value stored on the board... Board: 346</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Setting the CTUNE value...</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s17" style="padding-top: 4pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark148">Security Commands</a><a name="bookmark266">&zwnj;</a></p><ol id="l60"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark149">Get Device Status</a><a name="bookmark267">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command prints Secure Element device information status, including:</p><ul id="l61"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Firmware version</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Serial number</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Device erase status</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Secure debug unlock status</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Tamper status</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Secure boot status</p></li></ul><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security status                                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security status                                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="125" alt="image" src="ug162-simplicity-commander-reference-guide/Image_019.png"/></span></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Secure debug unlock : Disabled Tamper status : OK</p><p class="s19" style="text-indent: 0pt;text-align: left;">Secure boot : Disabled</p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Boot status     : 0x20 - OK DONE</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">: 0000000000000000d0cf5efffe68a68b</p><p class="s19" style="text-indent: 0pt;text-align: left;">: Disabled</p><p class="s19" style="text-indent: 0pt;text-align: left;">: Enabled</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Serial number Debug lock Device erase</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="text-indent: 0pt;text-align: left;">SE Firmware version : 1.1.3</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Debug lock enabled means that the debug access is locked. Device erase disabled means that if the device is locked, it is not possible to regain debug access through a device erase. Security debug unlock enabled means that if the device is locked, debug access can be regained using the <span class="s19">security unlock </span><a href="#bookmark269" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command. If both device erase and secure debug unlock are disabled, it is not possible to regain debug access if the device is locked. Secure boot enabled means that all images running on the device must be signed with the private sign key corresponding to the </a><span style=" color: #049;">public sign key written to the device</span>. Boot status shows if, for example, secure boot failed or if the boot is OK.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark150">Generate Key Pair</a><a name="bookmark268">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark290" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This command has been deprecated. For more information on how to generate keys, see </a>6.18.2 Generating a Signing Key <span style=" color: #000;">and</span></p><p class="s23" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">6.18.1 Key Generation<span style=" color: #000;">.</span></p><ol id="l62"><ol id="l63"><ol id="l64"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark151">Write Public Key to Device</a><a name="bookmark269">&zwnj;</a></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">IMPORTANT: This is a one-time command. It cannot be run more than once per device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This one-time command permanently locks the device to this key pair. There are two different public keys that can be written to the device.</p><ul id="l65"><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Command key <span class="p">- the corresponding private key is used to create certificates to perform secure debug unlock.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Sign key <span class="p">- the corresponding private key must sign all code that is to run on the device when Secure Boot is enabled.</span></p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">When Secure Debug Unlock is enabled, a locked device may temporarily unlock debug access by creating a certificate signed by the private command key.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">When Secure Boot is enabled, all code that runs on the device must be signed by the private sign key.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security writekey [--command &lt;public key PEM file&gt;] [--sign &lt;public key PEM file&gt;]                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security writekey --command command_public_key.pem                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device has serial number 000000000000000014b457fffed50c35</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Please look through any warnings before proceeding.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">THIS IS A ONE-TIME command, all code to be run on the device must be signed by this key. Type &#39;continue&#39; and hit enter to proceed or Ctrl-C to abort:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">continue DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark152">Read Public Key from Device</a><a name="bookmark270">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This command reads out a public key from the device. There are two different public keys that can be stored on the device using the</p><p class="s36" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">commander security writekey <span class="p">command.</span></p><ul id="l66"><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Command key <span class="p">– the corresponding private key is used to create certificates to perform secure debug unlock or disable tamper.</span></p></li><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Sign key <span class="p">– the corresponding private key must sign all code that is to run on the device when Secure Boot is enabled.</span></p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">By providing an output file, the key will be written to the file. Otherwise, the key will be printed to the Command Line Interface (CLI) as a byte array.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If the optional <span class="s19">--nostore </span><a href="#bookmark56" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">option is not used, the key will also be stored in the </a><span style=" color: #049;">Security Store</span>.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security readkey [--command] [--sign] [--outfile &lt;filename&gt;] [--nostore]                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander readkey --command --outfile command_public_key.pem                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing public key file in PEM format to key.pem... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark153">Configure Lock Options</a><a name="bookmark271">&zwnj;</a></p><p class="s36" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><span class="p">The </span><span style=" color: #000;">security lockconfig </span><a href="#bookmark273" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command enables or disables secure debug unlock. When secure debug unlock is enabled, a locked de- vice may be temporarily unlocked by running a </a>commander security unlock <a href="#bookmark275" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command. If secure debug unlock is disabled, the only way to unlock a locked device is to run a </a>commander security erasedevice <a href="#bookmark276" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command, given that </a><a href="#bookmark276" class="s18">device erase has not been disa- </a><span class="s23">bled</span><span class="p">. If both device erase and secure debug unlock are disabled, there is no way to unlock debug access to a locked device.</span></p><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Secure debug unlock must be enabled before the device is locked.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security lockconfig --secure-debug-unlock &lt;enable/disable&gt;                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security lockconfig --secure-debug-unlock enable                                                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Secure debug unlock was enabled. DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark154">Lock Debug Access</a><a name="bookmark272">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The <span class="s19">lock </span>command locks the debug interface on the device. If secure debug unlock has been enabled, the device may be unlocked using the <span class="s19">unlock </span><a href="#bookmark275" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command. If device erase has not been disabled, the debug access may also be unlocked using the </a><a href="#bookmark275" class="s33">commander </a><span class="s36">security erasedevice </span>command. However, this also triggers a mass erase on the device.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security lock                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security lock                                                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device is now locked.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark155">Secure Debug Unlock</a><a name="bookmark273">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The security unlock command opens debug access on a locked device temporarily without erasing the flash content. When running the <span class="s19">commander security unlock </span>command, Simplicity Commander will use all available files in the Security Store and from command line options in an attempt to unlock debug access. If anything is missing, you will be asked to provide the file as an option to the command. All files generated or given as command line options are stored in the Security Store, unless the <span class="s19">--nostore </span>option is used.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">For more information about Secure Debug, see <i>AN1190: EFR32xG21 Secure Debug</i>.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">There are several different ways to unlock the debug access, as illustrated in the following figure. The blue fields are actions and the red fields are artifacts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 152pt;text-indent: 0pt;text-align: left;"><span><img width="399" height="747" alt="image" src="ug162-simplicity-commander-reference-guide/Image_020.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 6.1.  Unlock Flow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander security unlock [--cert &lt;signed access certificate&gt; --cert-signature &lt;signature&gt; --command- signature &lt;signature&gt; --cert-privkey &lt;keyfile&gt; --cert-pubkey &lt;keyfile&gt; --command-key &lt;keyfile&gt; --nostore]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security unlock --command-key command_key.pem                                                       </span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This example uses and generates a certificate and command signature on-the-fly using the provided command key to sign the certifi- cate. All the generated files and the command key are stored in the Security Store.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="397" alt="image" src="ug162-simplicity-commander-reference-guide/Image_021.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command public key stored in:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ command_pubkey.pem</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command private key stored in:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ command_key.pem</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Authorization file written to Security Store:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ certificate_authorizations.json</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Generating ECC P256 key pair... Cert public key stored at:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_pubkey.pem</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Cert private key stored at:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_key.pem</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Command key matches public command key found on device. Signing certificate... Certificate was signed with key:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">test-cases/common/security_testfiles/command_key.pem Successfully stored certificate</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Certificate written to Security Store:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ access_certificate.bin</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Created unsigned unlock command Signed unlock command using</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_key.pem</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Secure debug successfully unlocked</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Command unlock payload was stored in Security Store DONE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security unlock --cert access_certificate.bin --cert-privkey cert_key.pem</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example unlocks the device with a signed access certificate and the private certificate key corresponding to the public key in the access certificate. The certificate and key are stored in the Security Store.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ access_certificate.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Cert key written to Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_pubkey.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Created unsigned unlock command Signed unlock command using</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_key.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure debug successfully unlocked</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Command unlock payload was stored in Security Store DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security unlock --cert-signature cert_signature.bin --command-signature command_signature.bin</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This example uses externally generated signatures for both the access certificate and command file. The access certificate signature is appended to the certificate and stored in the Security Store. The command signature is validated against the public key in the certifi- cate.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Using certificate from Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">access_certificate.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Certificate in Security Store is not signed. Moved existing file to:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ archive/access_certificate.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Signed certificate written to Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ access_certificate.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Command signature is valid</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Secure debug successfully unlocked</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Command unlock payload was stored in Security Store</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security unlock                                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">When the device has been unlocked with the current challenge, the unlock payload is stored in the Security Store. The next time the unlock command is run, the device is unlocked directly with the unlock payload.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Unlocking with unlock payload:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ challenge_4329288395adfc4eea436e5d64dd296b/unlock_payload_0000000000111110.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark156">Disable Tamper</a><a name="bookmark274">&zwnj;</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Secure Vault products are capable of detecting certain types of tamper events and responding to mitigate the attack. This provides an extra layer of protection against attacks that rely on physically tampering with the product.</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark282" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Before this command can be executed, the tamper sources must be configured in the One-Time-Programmable (OTP) settings of the devices. See </a>6.17.16 Write User Configuration <span style=" color: #000;">for more information about how this is done.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The process of disabling tamper follows the same flow as the <span class="s19">security unlock </span>command. For more information about the flow, see</p><p class="s23" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">6.17.7 Secure Debug Unlock<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">A certificate and a signed challenge are required to disable tamper. The certificate—including tamper authorizations—is generated and signed with a command key. The certificate contains a public key and the corresponding private key must be used to sign a challenge from the device to disable tamper sources. The <span class="s19">--disable-param </span>option determines which tamper sources to disable. If this option is not provided, Simplicity Commander will extract the tamper authorizations from the certificate and disable everything allowed by the certificate. If the certificate is not available, all sources will be disabled.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The tamper sources are disabled until the next Power On Reset.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">$ commander security disabletamper [--disable-param &lt;disable-mask&gt; --cert &lt;signed access certificate&gt; --cert- signature &lt;signature&gt; --commandsignature &lt;signature&gt; --cert-privkey &lt;keyfile&gt; --cert-pubkey &lt;keyfile&gt; -- command-key &lt;keyfile&gt; --nostore]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security disabletamper --cert access_certificate.bin --cert-privkey cert_key.pem                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using tamper parameters from certificate in Security Store: 0xffffffb6 Certificate written to Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/matundal/Library/Preferences/SiliconLabs/commander/SecurityStore/ device_0000000000000000000d6ffffead3617/access_certificate.bin</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Cert key written to Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/matundal/Library/Preferences/SiliconLabs/commander/SecurityStore/ device_0000000000000000000d6ffffead3617/cert_pubkey.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using tamper parameters from certificate in Security Store: 0xffffffb6 Created unsigned disable tamper command</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Signed disable tamper command using</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/matundal/Library/Preferences/SiliconLabs/commander/SecurityStore/ device_0000000000000000000d6ffffead3617/cert_key.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Tamper successfully disabled.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Command disable tamper payload was stored in Security Store</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><ol id="l67"><ol id="l68"><ol id="l69"><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark157">Device Erase using Secure Element</a><a name="bookmark275">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command performs a device mass erase and resets the debug configuration to its initial unlocked state.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The complete flash and RAM of the system is cleared, excluding the user data page and one-time programmable commissioning infor- mation in the Secure Element.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If device erase has been disabled, this command is not available.</p><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Note: <span class="p">After a device erase, the DCI interface is unavailable until the device has been reset</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security erasedevice                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security erasedevice                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully erased device DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark158">Disable Device Erase</a><a name="bookmark276">&zwnj;</a></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">IMPORTANT: This is a one-time command. It cannot be run more than once.</p><p class="s36" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark275" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This command permanently disables device erase. When device erase is disabled, the </a>commander security erasedevice <span class="p">command is no longer available. This means that if debug access is locked, debug access can only be opened if secure debug unlock has been enabled before the device was locked. If not, there is no way to regain debug access. This command can be run after the device has been locked.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Confirmation is required from the user to execute this command, except if the <span class="s19">--noprompt </span>option is used.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security disabledeviceerase [--noprompt]                                                            </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security disabledeviceerase                                                                          </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">THIS IS A ONE-TIME command which Permanently disables device erase.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">If secure debug lock has not been set, there is no way to regain debug access to this device. Type &#39;continue&#39; and hit enter to proceed or Ctrl-C to abort:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">continue</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Disabled device erase successfully DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark159">Roll Challenge</a><a name="bookmark277">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This command makes the Secure Element <i>roll </i><a href="#bookmark58" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">or update its challenge data. The challenge is random data that must be read from the device before an unlock command can be executed. Rolling the challenge renders existing command signatures invalid. For more infor- mation, see </a><span style=" color: #049;">5.3 Challenge and Command Signing</span>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The challenge cannot be rolled before it has been used at least once—that is, by running the security unlock command or the disable tamper command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security rollchallenge                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security rollchallenge                                                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Challenge was rolled successfully. DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark160">Generate Example Authorization File</a><a name="bookmark278">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command generates a default authorization file to be used in the certificate. The authorization file will be stored in Security Store unless the <span class="s19">--nostore </span>option is used.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Default Authorization File for Devices without Secure Vault</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-left: 41pt;text-indent: -19pt;line-height: 107%;text-align: left;">&quot;debug_authorizations&quot;:{ &quot;ENABLE_DEBUG_PORT&quot;: true</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Default Authorization File for Devices with Secure Vault</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-left: 41pt;text-indent: -19pt;line-height: 107%;text-align: left;">&quot;debug_authorizations&quot;:{ &quot;ENABLE_DEBUG_PORT&quot;: true</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">},</p><p class="s19" style="padding-left: 41pt;text-indent: -19pt;line-height: 107%;text-align: left;">&quot;tamper_authorizations&quot;:{ &quot;FILTER_COUNTER&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;WATCHDOG&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_RAM_CRC&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_HARDFAULT&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SOFTWARE_ASSERTION&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_CODE_AUTH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;USER_CODE_AUTH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;MAILBOX_AUTH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DCI_AUTH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;OTP_READ&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;AUTO_CODE_AUTH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SELF_TEST&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;TRNG_MONITOR&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS0&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS1&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS2&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS3&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS4&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS5&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS6&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS7&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DECOUPLE_BOD&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;TEMP_SENSOR&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;VGLITCH_FALLING&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;VGLITCH_RISING&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SECURE_LOCK&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_DEBUG&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DGLITCH&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_ICACHE&quot;: 1</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Debug Authorization</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Enable Debug Port must be set to <i>true </i><a href="#bookmark273" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">in order to perform a secure debug unlock. For more information about secure debug unlock, see </a><span style=" color: #049;">6.17.7 Secure Debug Unlock</span>.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Tamper Authorizations</p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark274" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Tamper Authorizations indicate which sources may be disabled. By default all sources may be disabled. For more information about disabling tamper sources, see </a>6.17.8 Disable Tamper<span style=" color: #000;">.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security genauth [-o &lt;filename&gt;] [--nostore]                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security genauth -o certificate_authorization.json --nostore                                        </span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Authorization file stored in: certificate_authorization.json DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark161">Generate Access Certificate</a><a name="bookmark279">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark273" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Access certificates are used to unlock debug access or disable tamper on the device. For more information, see </a><a href="#bookmark273" class="s18">6.17.7 Secure Debug </a><span style=" color: #049;">Unlock </span><a href="#bookmark274" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">or </a><span style=" color: #049;">Disable Tamper</span>. The certificate and the keys provided to or generated by Simplicity Commander are stored in Security Store unless the <span class="s19">--nostore </span>option is used. If <span class="s19">--cert-pubkey </span>or <span class="s19">--authorization </span>are not used as options on the command line, Simplicity Commander checks if the files are stored in Security Store. If the files are not in Security Store, Simplicity Commander generates a default authorization file that may be edited. If the file is edited, a new certificate must be generated. Simplicity Commander will also generate a pair of certificate keys if the <span class="s19">--cert-pubkey </span>option is not used. If the certificate keys are generated, the <span class="s19">--nostore </span>option cannot be used. If the <span class="s19">--command-key </span>option is not used on the command line and not located in Security Store, the <span class="s19">--extsign </span>option should be used for Simplicity Commander to generate an unsigned certificate. To use the certificate to unlock debug access, a certifi- cate signature must be generated and provided. If the device for which the certificate is made is connected, Simplicity Commander retrieves the device serial number directly.</p><p class="s17" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">Before Simplicity Commander version 1.11.2 unsigned certificates were created with all zeros in replace of the signature. This was fixed in version 1.11.2 making it compatible with external signing using tools such as OpenSSL.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 227pt;text-indent: 0pt;text-align: left;"><span><img width="175" height="179" alt="image" src="ug162-simplicity-commander-reference-guide/Image_022.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Figure 6.2.  Access Certificate</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security gencert [--cert-pubkey &lt;public key file&gt;] [--authorization &lt;auth-file&gt;] [--command-key</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;private key file&gt;][--extsign][--devserialno &lt;serial number&gt;] [-o &lt;filename&gt;] [--nostore]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security gencert --extsign                                                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This example generates an unsigned certificate, as the command private key is not provided as a command option, nor is it located in Security Store. The public certificate key is not provided either, so Simplicity commander generates a pair of certificate keys and stores them in Security Store. A default authorization file is also generated and stored in Security Store.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Authorization file written to Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ certificate_authorizations.json</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Generating ECC P256 key pair... Cert public key stored at:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_pubkey.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Cert private key stored at:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_key.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Successfully stored certificate</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Created an unsigned certificate in Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ access_certificate.extsign</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander security gencert --cert-pubkey cert_pubkey.pem --authorization certificate_authorizations.json -- command-key command_key.pem -o access_certificate.bin --nostore</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this example, all files needed to generate the certificate are provided as command line options. The device serial number is taken directly from the connected device. The certificate is signed with the private command key, and is ready to be used to unlock debug access.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Command key matches public command key found on device. Signing certificate... Certificate was signed with key:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">command_key.pem DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security gencert</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This example uses files already located in Security Store to generate a signed certificate. The certificate is stored in Security Store.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Using authorizations from Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ certificate_authorizations.json</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Using public key from Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ cert_pubkey.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found command key in Security Store:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ command_key.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Certificate was signed with key:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ command_key.pem</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark162">Generate Unsigned Command File</a><a name="bookmark280">&zwnj;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><span style=" color: #000;">The </span><span class="s19">commander security gencommand </span><a href="#bookmark58" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">command retrieves the </a>security challenge <a href="#bookmark59" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">from the device and stores it in a file with other data as described in </a>Figure 5.2 Unlock Command Signature on page 19<span style=" color: #000;">. The signature of this file using the private certificate key can be used as part of the payload to perform a secure debug unlock.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Unless the <span class="s19">--nostore </span>option is used, the unsigned command file will be stored in the Security Store.</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark273" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">If the user has the private certificate key, Simplicity Commander automatically generates the command file and signature using the </a><span class="s36">commander security unlock </span>command. If the command file is signed by an external process—for example, an HSM—the command signature needs to be passed as a command line option when executing the <span class="s19">commander security unlock </span>command.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security gencommand --action debug_unlock [-o &lt;output file&gt;] [--nostore]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security gencommand --action debug-unlock -o unlock_command_to_be_signed.bin --nostore</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unsigned command file written to: unlock_command_to_be_signed.bin DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark163">Generate Example Configuration File</a><a name="bookmark281">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This command generates a default configuration file to be used with the <span class="s19">security_writeconfig </span>command. The file is stored in Securi- ty Store unless the <span class="s19">--nostore </span>option is used.</p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Default Configuration File for Devices without Secure Vault</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-left: 36pt;text-indent: -19pt;line-height: 107%;text-align: left;">&quot;mcu_flags&quot;: { &quot;SECURE_BOOT_ENABLE&quot;: true,</p><p class="s19" style="padding-left: 36pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;SECURE_BOOT_VERIFY_CERTIFICATE&quot;: false, &quot;SECURE_BOOT_ANTI_ROLLBACK&quot;: true, &quot;SECURE_BOOT_PAGE_LOCK_NARROW&quot;: false, &quot;SECURE_BOOT_PAGE_LOCK_FULL&quot;: true</p><p class="s19" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Default Configuration File for Devices with Secure Vault</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-left: 36pt;text-indent: -19pt;line-height: 107%;text-align: left;">&quot;mcu_flags&quot;: { &quot;SECURE_BOOT_ENABLE&quot;: true,</p><p class="s19" style="padding-left: 36pt;text-indent: 0pt;line-height: 107%;text-align: left;">&quot;SECURE_BOOT_VERIFY_CERTIFICATE&quot;: false, &quot;SECURE_BOOT_ANTI_ROLLBACK&quot;: true, &quot;SECURE_BOOT_PAGE_LOCK_NARROW&quot;: false, &quot;SECURE_BOOT_PAGE_LOCK_FULL&quot;: true</p><p class="s19" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">},</p><p class="s19" style="padding-left: 41pt;text-indent: -24pt;line-height: 107%;text-align: left;">&quot;tamper_levels&quot;: { &quot;FILTER_COUNTER&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;WATCHDOG&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_RAM_CRC&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_HARDFAULT&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SOFTWARE_ASSERTION&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_CODE_AUTH&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;USER_CODE_AUTH&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;MAILBOX_AUTH&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DCI_AUTH&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;OTP_READ&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;AUTO_CODE_AUTH&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SELF_TEST&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;TRNG_MONITOR&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS0&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS1&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS2&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS3&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS4&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS5&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS6&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;PRS7&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DECOUPLE_BOD&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;TEMP_SENSOR&quot;: 1,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;VGLITCH_FALLING&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;VGLITCH_RISING&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SECURE_LOCK&quot;: 4,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_DEBUG&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;DGLITCH&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;SE_ICACHE&quot;: 4</p><p class="s19" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">},</p><p class="s19" style="padding-left: 41pt;text-indent: -24pt;line-height: 107%;text-align: left;">&quot;tamper_filter&quot; : { &quot;FILTER_PERIOD&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;FILTER_THRESHOLD&quot;: 0,</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;RESET_THRESHOLD&quot;: 0</p><p class="s19" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">},</p><p class="s19" style="padding-left: 41pt;text-indent: -24pt;line-height: 107%;text-align: left;">&quot;tamper_flags&quot;: { &quot;DGLITCH_ALWAYS_ON&quot;: false</p><p class="s19" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">MCU settings</p><ul id="l70"><li><p class="s17" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Secure Boot Enable <span class="p">– Enables Secure Boot on the device if set. Requires all applications running on the device to be signed.</span></p></li><li><p class="s17" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Secure Boot Verify Certificate <a href="#bookmark204" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">– Applications running on the device must be signed using an intermediary certificate if this option is set. It is still possible to use certificates for signing even if this option is not set. For more information, see </a><a href="#bookmark204" class="s18">6.5.9 Signing an Applica- tion for Secure Boot using an </a><span class="s23">Intermediary Certificate</span><span class="p">.</span></p></li><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Secure Boot Anti Rollback <span class="p">– If set, application images with a lower version than the image currently stored in flash will not run on the device.</span></p></li><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Secure Boot Page Lock Narrow <span class="p">– Flash pages validated by the Secure Boot process are locked down to prevent re-flashing by means other than through Root Code. Pages from 0 through the page where the Secure Boot signature of the application is located are locked down, </span>not including <span class="p">the last page if the signature is not on a page boundary.</span></p></li><li><p class="s17" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Secure Boot Page Lock Full <span class="p">– Flash pages validated by the Secure Boot process are locked down to prevent re-flashing by means other than through Root Code. Pages from 0 through the page where the Secure Boot signature of the application is located are locked down, </span>including <span class="p">the last page if the signature is not on a page boundary.</span></p></li></ul><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Tamper Levels</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The different tamper sources are listed under tamper levels. The default configuration is an absolute minimum. The Root Code will nev- er set tamper levels to a lower setting than the default configuration. The tamper levels are listed in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 8pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Table 6.1.  Tamper Levels</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s26" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Tamper Level</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s26" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No action taken</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Generate SE interrupt</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Increment filter counter</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">System Reset</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">5</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">6</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Reserved</p></td></tr><tr style="height:19pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">7</p></td><td style="width:282pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Erase OTP (Makes the device unrecoverable; it will neve boot again.)</p></td></tr></table><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security genconfig [-o &lt;filename&gt;] [--nostore]                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security genconfig -o user_configuration.json --nostore                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Configuration file stored in: user_configuration.json</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark164">Write User Configuration</a><a name="bookmark282">&zwnj;</a></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">IMPORTANT: This is a one-time command. It cannot be run more than once.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The <span class="s19">commander security writeconfig </span>command sets the configurations determined in the configuration file in the Root Code.</p><p class="s23" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark269" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Secure Boot is enabled through this command. Before Secure Boot is enabled, you must write the public sign key to the device. For more information on writing keys to the device, see </a>6.17.3 Write Public Key to Device<span style=" color: #000;">. In addition, a configuration file must be gener- ated and the Secure Boot Enabled flag must be set to true. If no configuration file is provided, a default configuration will be generated.</span></p><p class="s23" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark281" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">In Simplicity Commander version 1.9, tamper configuration is supported on devices with Secure Vault. The tamper configuration deter- mines the response from the Secure Element in the occurrence of a tamper event. For more information about the configuration file and tamper configuration, see </a>6.17.15 Generate Example Configuration File<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">For more information about Secure Boot, see <i>AN1218: Series 2 Secure Boot with RTSL.</i></p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark274" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">For more information about tamper events, see </a>6.17.8 Disable Tamper<span style=" color: #000;">.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security writeconfig [--configfile &lt;config file&gt;] [--nostore] [--nopromt]                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security writeconfig --configfile user_configuration.json                                           </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">THIS IS A ONE-TIME configuration: Please inspect file before confirming:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b/ user_configuration.json</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Type &#39;continue&#39; and hit enter to proceed or Ctrl-C to abort:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">continue DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark165">Read User Configuration</a><a name="bookmark283">&zwnj;</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command returns the One-Time Programmable (OTP) setting from the device. If the device has not been configured with the</p><p class="s23" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">6.17.16 Write User Configuration <span style=" color: #000;">command, no OTP settings are available to read.</span></p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security readconfig                                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security readconfig                                                                                  </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="617" alt="image" src="ug162-simplicity-commander-reference-guide/Image_023.png"/></span></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">MCU Flags Secure Boot</p><p class="s19" style="text-indent: 0pt;text-align: left;">: Enabled</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">	</span></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Secure Boot Verify Certificate : Disabled Secure Boot Anti Rollback : Enabled Secure Boot Page Lock Narrow : Disabled Secure Boot Page Lock Full : Enabled</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Tamper Levels FILTER_COUNTER WATCHDOG SE_RAM_CRC SE_HARDFAULT</p><p class="s19" style="text-indent: 0pt;text-align: left;">: 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">: 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">: 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">: 4</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;">	</span></p><p class="s19" style="text-indent: 0pt;text-align: left;">SOFTWARE_ASSERTION : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">SE_CODE_AUTH : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">USER_CODE_AUTH : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">MAILBOX_AUTH : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">DCI_AUTH : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">OTP_READ : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">AUTO_CODE_AUTH : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">SELF_TEST : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">TRNG_MONITOR : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS0 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS1 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS2 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS3 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS4 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS5 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS6 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">PRS7 : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">DECOUPLE_BOD : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">TEMP_SENSOR : 1</p><p class="s19" style="text-indent: 0pt;text-align: left;">VGLITCH_FALLING : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">VGLITCH_RISING : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">SECURE_LOCK : 4</p><p class="s19" style="text-indent: 0pt;text-align: left;">SE_DEBUG : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">DGLITCH : 0</p><p class="s19" style="text-indent: 0pt;text-align: left;">SE_ICACHE : 4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;line-height: 107%;text-align: left;">Tamper Filter Filter Period : 0 Filter Treshold : 0 Reset Treshold : 0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: left;">Tamper Flags</p><p class="s19" style="text-indent: 0pt;text-align: left;">Digital Glitch Detector Always On: Disabled</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: left;">DONE</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"/><ol id="l71"><ol id="l72"><ol id="l73"><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark166">Get Security Store Path</a><a name="bookmark284">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Get the path to the security store. If a device is connected or the --deviceserialno option is provided, the device specific path is re- turned. Otherwise, the path to Security Store is returned.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security getpath [--deviceserialno &lt;deviceserialno&gt;]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security getpath</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">/Users/example/Library/Preferences/SiliconLabs/commander/SecurityStore/device_0000000000000000d0cf5efffe68a68b DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark167">Write AES Decryption Key</a><a name="bookmark285">&zwnj;</a></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Important: This is a one-time command. It cannot be run more than once per device.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The symmetric 128-bit AES key is used to decrypt GBL files. This key is also known as the MFG_BOOTLOAD_AES_KEY. All encryp- ted images on this device must be encrypted with the same AES key.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security writekey --decrypt &lt;filename&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security writekey --decrypt key.txt</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Device has serial number 000000000000000014b457fffed50c35</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Please look through any warnings before proceeding.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">THIS IS A ONE-TIME command, all code to be run on the device must be signed by this key. Type &#39;continue&#39; and hit enter to proceed or Ctrl-C to abort:</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">================================================================================</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">continue DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark168">Read Device Certificates</a><a name="bookmark286">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">This command reads out a X509 certificate from the device. The available certificates are:</p><ul id="l74"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">batch - same for each manufacturing batch</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">SE - unique per device</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">MCU - unique per device</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The certificates form a root-of-trust certificate chain up to the <span class="s19">Silicon Labs Root Certificate </span>issued by Silicon Labs. The <span class="s19">SE </span>and <span class="s19">MCU Certificates </span>are issued by a <span class="s19">Batch Certificate</span>. The <span class="s19">Batch Certificate </span>is issued by a <span class="s19">Factory Certificate</span>, and the <span class="s19">Factory Certificate </span>is issued by the <span class="s19">Silicon Labs Root Certificate</span>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Key information about the certificate is printed to the command line if no outfile is given. The certificate may be read out in entirety by providing the <span class="s19">outfile </span>argument. The available encodings are <span class="s19">pem </span>and <span class="s19">der</span>.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security readcert &lt;cert type&gt; [--outfile &lt;filename&gt;]</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security readcert batch</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="138" alt="image" src="ug162-simplicity-commander-reference-guide/Image_024.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Version : 3</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Subject : CN=Batch 1001317 O=Silicon Labs Inc. C=US Issuer : CN=Factory O=Silicon Labs Inc. C=US</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Valid From : October 17 2019</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Valid To : September 16 2118 Signature algorithm: SHA256</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Public Key Type : ECDSA</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Public key :</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">b0c113190bba3d1ee507d954e878957ad5cc8903ec7785525b8c0b2c2185514cd1421498487c5ea554801924468f8534e027e6496fcbdecef3659cd DONE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander security readcert se --outfile se_cert.pem</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing certificate to se_cert.pem... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 58pt;text-indent: -35pt;text-align: left;"><a name="bookmark169">Vault Device Attestation</a><a name="bookmark287">&zwnj;</a></p></li></ol></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Attestation of a device is used to cryptographically prove to a remote party that they are the system they say they are, and ensure that the device they are talking to is the same device as the one that got produced in the factory.</p><p class="s23" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark286" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The attestation process starts with authenticating the certificate chain up to the Silicon Labs Root certificate. For more information on certificates, see </a>6.17.20 Read Device Certificates<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The attestation token is printed to the command line. The token consists of multiple claims as listed in the following table.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Claim ID</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Claim friendly name</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Present in token</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s21" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Content</p></td></tr><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-75000</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ARM PSA Profile ID</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ASCII &#39;SILABS_1&#39;</p></td></tr><tr style="height:30pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-75008</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ARM PSA nonce</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">Copy of the nonce supplied as input to the token generation command.</p></td></tr><tr style="height:30pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-75009</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ARM PSA/IETF EAT UEID</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">The device&#39;s EUI-64 pre-pended with 0x06 and zeroes.</p></td></tr><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-76000</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SE status</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Current SE status</p></td></tr><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-76001</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">OTP configuration</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always when provisioned</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">User configuration</p></td></tr><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-76002</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">MCU Sign key</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always when provisioned</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Public sign key</p></td></tr><tr style="height:19pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-76003</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">MCU Command key</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always when provisioned</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Public command key</p></td></tr><tr style="height:30pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">-76004</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Current applied tamper settings</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Always</p></td><td style="width:202pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s22" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Currently applied tamper level per tamper signal (one nibble per tamper signal).</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Finally, the signature of the attestation token is verified as shown in the following examples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security attestation                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander security attestation                                                                                 </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="189" alt="image" src="ug162-simplicity-commander-reference-guide/Image_025.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Certificate chain successfully validated up to Silicon Labs device root certificate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">-75008 ARM PSA nonce : 1799c9296ac44a854b74fe50dc6f1546a5c1e17de73584afcc478739161db7d0</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-75000 ARM PSA Profile ID : SILABS_1</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-75009 ARM PSA/IETF EAT UEID : 0614b457fffe0f7789</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-76000 SE status :</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">000000010000000000000000000000000000002000010202ffffffff00000002ffffffff</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-76002 MCU sign key :</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">fb2470314c0710f5a72e89a30d2af607770187568f80cffa7fc6516f61e0dc258a8606fe664a097eb94d3ea29e1b87262babdb969842da31512bdc7</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">-76003 MCU command key :</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">a218c9615321567527e94ac1f01230604e231f1eabe699fb1d751af3e28d00feaa3dd823540a2452baa40dfb3475d3bb786b41e7880881b5a5427e7</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-76004 Current applied tamper settings : 05044440040004040000000014000440</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Successfully validated signature of attestation token.</p></li></ol></li><li><p class="s17" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark170">Util Commands</a><a name="bookmark288">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l75"><li><p class="s17" style="padding-top: 5pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark171">Key Generation</a><a name="bookmark289">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Generates a keyfile to be used for encryption and decryption and outputs the keyfile to the specified filename.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util genkey --type aes-ccm --outfile &lt;filename&gt;                                                     </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util genkey --type aes-ccm --outfile key.txt                                                        </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Using /dev/random for random number generation</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Gathering sufficient entropy... (may take up to a minute)... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark172">Generating a Signing Key</a><a name="bookmark290">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Creates an EDCSA-P256 key pair and outputs the result to the specified private and public key files. For more information, see <i>UG266: Silicon Labs Gecko Bootloader User&#39;s Guide</i>.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util genkey --type ecc-p256 --privkey &lt;filename&gt; --pubkey &lt;filename&gt; [--tokenfile &lt;filename&gt;]       </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util genkey --type ecc-p256 --privkey signing_key.pem --pubkey signing_pubkey.pem                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Generating ECC P256 key pair...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing private key file in PEM format to signing_key.pem Writing public key file in PEM format to signing_pubkey.pem DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark173">Key to Token</a><a name="bookmark291">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Creates a token text file containing an Elliptic Curve Cryptography (ECC) public key suitable for flashing to a device. For more informa- tion, see <i>UG266: Silicon Labs Gecko Bootloader User´s Guide.</i></p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util keytotoken &lt;input file&gt; --outfile &lt;filename&gt;                                                   </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util keytotoken my_pubkey.pem --outfile keytokens.txt                                               </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Writing EC tokens to keytokens.txt... DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark174">Generate Certificate</a><a name="bookmark292">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The process of signing files can be done using an intermediate certificate. These certificates can be generated with the <span class="s19">util gencert </span>command. There are currently two available certificate types: GBL certificates and Secure Boot certificates. If rollback prevention is en- abled, the device will not boot if it has seen a certificate with a higher version number. This is set by the <span class="s19">--cert-version </span>option. The private key corresponding to the <span class="s19">--cert-pubkey </span>is used to sign the image. The certificate may either be signed directly by providing a signing key with the <span class="s19">--sign </span>option or unsigned by providing the <span class="s19">--extsign </span>option.</p><p class="s17" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">$ commander util gencert --cert-type &lt;cert type&gt; --cert-version &lt;version&gt; --cert-pubkey &lt;key file&gt; [--sign</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;key file&gt;|--extsign] --outfile &lt;filename&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander gencert --cert-type secureboot --cert-version 1 --cert-pubkey cert_pubkey.pem --sign signing_key.pem --outfile secureboot_cert.bin</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">In this example the signing key is provided and the certificate is signed directly.</p><p class="s17" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully signed certificate DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander gencert --cert-type gbl --cert-version 1 --cert-pubkey cert_pubkey.pem --extsign --outfile gbl_cert.bin</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s36" style="padding-top: 4pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark293" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">In this example an unsigned certificate is created. The signature for the certificate can be created, for example, by a Hardware Security Module (HSM). The certificate can be signed by passing the unsigned certificate and the HSM generated signature to the </a><a href="#bookmark293" class="s33">util </a>signcert <span class="p">command.</span></p><p class="s17" style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> DONE                                                                                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark175">Sign Certificate</a><a name="bookmark293">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Sign a certificate with an externally created signature. You can use the optional <span class="s19">--verify </span>option to verify the signature by providing the public key corresponding to the private key used to create the signature.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander util signcert &lt;cert filename&gt; --cert-type &lt;type&gt; --signature &lt;signature&gt; [--verify &lt;public key file&gt;] --outfile &lt;filename&gt;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">$ commander util signcert gbl_cert.bin.extsign --cert-type gbl --signature gbl_signature.bin --verify signing_pubkey.pem --outfile signed_cert.bin</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Successfully verified signature Successfully signed certificate DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/></li><li><p class="s17" style="padding-top: 8pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark176">Verify Signature</a><a name="bookmark294">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When secure boot is enabled, all code running on the device must be signed. This command can be used as a check to verify that the file was correctly signed, which may help in debugging in case secure boot fails, or as a verification before flashing the image. If the file is signed using an intermediate certificate, the certificate key is used to check the signature of the file. The key given by the <span class="s19">--verify </span>option is used to verify the signature of the certificate.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util verifysign &lt;input file&gt; --verify &lt;public key file&gt;                                             </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util verifysign my_application.bin --verify signing_pubkey.pem                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parsing file my_application.bin...</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found application properties at 0x00000e78</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found certificate in image at location 0x0000b3a4</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified certificate signature with verification key. Using certificate key to verify application signature.</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Found signature at 0x0000b42c</p><p class="s19" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">Successfully verified application signature. DONE</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 4pt;padding-left: 53pt;text-indent: -30pt;text-align: left;"><a name="bookmark177">Application Information</a><a name="bookmark295">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Get all available information about an application by parsing the <span class="s19">ApplicationProperties_t </span>struct in the image. If the file does not have application properties, no information can be extracted from the file.</p><p class="s17" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Syntax</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util appinfo &lt;filename&gt;                                                                              </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Input Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><span class="s24" style=" background-color: #D8D8D8;"> $ commander util appinfo my_application.bin                                                                      </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Command Line Output Example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="728" height="319" alt="image" src="ug162-simplicity-commander-reference-guide/Image_026.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">Parsing file my_application.bin... Found application properties in image. Application protperties info:</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Signature location : 0x0000b42c</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Signature type : ECDSA-P256</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Long token section address : Not set (0x00000000)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Application data info:</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">If rollback prevention is enabled, the device will not boot if the device has seen an application with a higher version number.</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">App type : The application is an MCU application</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">App version : 0x00000000</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Product ID : 0x53455f555047524144455f4150500000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Application certificate info:</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">If rollback prevention is enabled, the device will not boot if the device has seen a certificate with a higher version number.</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">Certificate located at : 0x0000b3a4 Certificate version : 0x00000001</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Certificate key :</p><p class="s19" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x249919c28b28156f19d2e03379b968c8a931aa9b195258e2741da28b686983dd71d0140e9a7b0d7e39de43f592163b8aa38d4e0871f5d2d88b575 Certificate signature :</p><p class="s19" style="padding-left: 22pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x013f2adc310f10f1426db74b503f3612a46ab85c7ce86c967eb965b10f7d24267101192513d9481c49c0eb0b61c1f73392cc6f6d1cd1209a9d58e DONE</p></li></ol></li></ol></li><li><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark296">Software Revision History</a><a name="bookmark318">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">The following subsections summarize the new features of Simplicity Commander by version number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l76"><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark297">Version 1.10</a><a name="bookmark319">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2020-05-08</p><ul id="l77"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Revised the implementation details for these commands:</p></li></ul><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark180" class="s18">6.1.1 Flash Image File</a></p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark187" class="s18">6.3 Memory Read Commands</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark298">Version 1.10</a><a name="bookmark320">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2020-05-08</p><ul id="l78"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Revised the implementation details for these commands:</p></li></ul><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark180" class="s18">6.1.1 Flash Image File</a></p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark187" class="s18">6.3 Memory Read Commands</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark299">Version 1.9</a><a name="bookmark321">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2020-03-09</p><ul id="l79"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added this Convert and Modify File command:</p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark204" class="s18">Signing an Application for Secure Boot using an Intermediary Certificate</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added these Security commands:</p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark274" class="s18">Disable Tamper</a></p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark283" class="s18">Read User Configuration</a></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added these Util commands:</p><p style="padding-top: 8pt;padding-left: 35pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a href="#bookmark290" class="s18">Key Generation </a><a href="#bookmark291" class="s18">Generating a Signing Key Key to Token</a></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a href="#bookmark293" class="s18">Generate Certificate </a><a href="#bookmark294" class="s18">Sign Certificate Verify Signature</a></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark295" class="s18">Application Information</a></p></li><li><p class="s23" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><a href="#bookmark47" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Added clarifying details in </a><a href="#bookmark47" class="s18">4.5 Memory Regions</a> <span style=" color: #000;">regarding mass erase and differences between EFR32 Series 1 and Series 2 devi- ces.</span></p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark300">Version 1.8</a><a name="bookmark322">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2019-11-21</p><ul id="l80"><li><p class="s23" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;"><span style=" color: #000;">Added the </span><span class="s19">security </span><a href="#bookmark55" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">commands that support Secure Element functionality. See </a>5. Security Overview <a href="#bookmark266" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and </a>6.17 Security Commands<span style=" color: #000;"> for details.</span></p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Improved GUI</p><ul id="l81"><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Support for EFR32xG2x devices</p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Added flash map feature</p></li><li><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -9pt;text-align: left;">Added blank check feature</p></li></ul></li></ul></li><li><p class="s17" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark301">Version 1.7</a><a name="bookmark323">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-11-28</p><ul id="l82"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added CTUNE manufacturing token commands.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for EFR32XG21 devices.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for generating Secure Element upgrade GBL files.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark302">Version 1.5</a><a name="bookmark324">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-10-02</p><ul id="l83"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for analyzing the memory usage of the application using an Application Address Table (AAT).</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark303">Version 1.4</a><a name="bookmark325">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-09-19</p><ul id="l84"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for module part numbers (e.g. BGM111) as --device parameter</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Module part numbers will be read from the device when it exists (new modules only)</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark304">Version 1.3</a><a name="bookmark326">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-08-14</p><ul id="l85"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for manipulating and writing NVM3 data.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for custom token definition files in any location.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 6pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark305">Version 1.2</a><a name="bookmark327">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-03-23</p><ul id="l86"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for creating GBL images using the LZMA compression algorithm.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark306">Version 1.1</a><a name="bookmark328">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2018-01-19</p><ul id="l87"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for writing CRC32 to an image as a means of integrity check when not using Secure Boot.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added the nvm3 command which supports reading NVM3 data from a device and parsing an image file containing NVM3 data.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark307">Version 1.0</a><a name="bookmark329">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">2017-11-28</p><ul id="l88"><li><p style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for EM3xx devices.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark308">Version 0.25</a><a name="bookmark330">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">2017-06-09</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Added support for lz4 compression of GBL files:</p><ul id="l89"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl create --compress lz4</p></li></ul></li><li><p class="s17" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark309">Version 0.24</a><a name="bookmark331">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">2017-04-25</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Added commands that support the Gecko Bootloader Security features:</p><ul id="l90"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">convert --secureboot</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl keygen --type ecc-p256</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl keyconvert</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl create</p><p class="s19" style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">--bootloader <span class="p">option</span></p><p class="s19" style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">--sign <span class="p">option</span></p><p class="s19" style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">--extsign <span class="p">option</span></p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl sign</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark310">Version 0.22</a><a name="bookmark332">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2017-03-03</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Added commands that support the Gecko Bootloader (GBL) file format:</p><ul id="l91"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl create</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl parse</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">gbl keygen</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 5pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark311">Version 0.21</a><a name="bookmark333">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2017-02-02</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Added commands:</p><ul id="l92"><li><p class="s19" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ebl create</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ebl parse</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Deprecated and hid these commands that only support version 2 of the EBL format:</p></li><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ebl encrypt</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">ebl decrypt</p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;line-height: 173%;text-align: left;">These commands have been replaced by <span class="s19">ebl create </span>and <span class="s19">ebl parse </span>which support both version 2 and 3 of the EBL format. Changed command:</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Creating and parsing EBL files using the <span class="s19">convert </span>command has been deprecated, but still supports parsing and creating EBL v2 files for backwards compatibility. New applications should use the <span class="s19">ebl create </span>and <span class="s19">ebl parse </span>commands instead.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark312">Version 0.16</a><a name="bookmark334">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2016-06-16</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Added commands:</p><ul id="l93"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">aem measure</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">adapter ip</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">swo read</p></li></ul></li><li><p class="s17" style="padding-top: 8pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark313">Version 0.15</a><a name="bookmark335">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2016-04-27</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Added commands:</p><ul id="l94"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">extflash</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">adapter reset</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">adapter dbgmode</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark314">Version 0.14</a><a name="bookmark336">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">2016-02-05</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Added commands:</p><ul id="l95"><li><p class="s19" style="padding-top: 8pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">device lock</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">device protect</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">device pageerase</p></li><li><p class="s19" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">device recover</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark315">Version 0.13</a><a name="bookmark337">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Not released</p><ul id="l96"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added <span class="s19">tokenheader </span>command.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark316">Version 0.12</a><a name="bookmark338">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2016-01-20</p><ul id="l97"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Added support for EFR32 custom tokens.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s17" style="padding-top: 6pt;padding-left: 45pt;text-indent: -22pt;text-align: left;"><a name="bookmark317">Version 0.11</a><a name="bookmark339">&zwnj;</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">2016-01-15</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Initial release.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Smart. Connected. <span class="s37">Energy-Friendly.</span></h2><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="769" height="433" alt="image" src="ug162-simplicity-commander-reference-guide/Image_027.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug162-simplicity-commander-reference-guide/Image_028.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s39">www.silabs.com/products</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug162-simplicity-commander-reference-guide/Image_029.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug162-simplicity-commander-reference-guide/Image_030.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s39">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="padding-top: 5pt;padding-left: 171pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 171pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s39">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s41" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s42">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s42">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s42">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s45" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s44" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s46" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s41">Silicon Laboratories Inc.</span>®<span class="s41">, Silicon Laboratories</span>®<span class="s41">, Silicon Labs</span>®<span class="s41">, SiLabs</span>® <span class="s41">and the Silicon Labs logo</span>®<span class="s41">, Bluegiga</span>®<span class="s41">, Bluegiga Logo</span>®<span class="s41">, Clockbuilder</span>®<span class="s41">, CMEMS</span>®<span class="s41">, DSPLL</span>®<span class="s41">, EFM</span>®<span class="s41">, EFM32</span>®<span class="s41">, EFR, Ember</span>®<span class="s42">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s41">, EZLink</span>®<span class="s41">, EZRadio</span>®<span class="s41">, EZRadioPRO</span>®<span class="s41">, Gecko</span>®<span class="s41">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s41">, Precision32</span>®<span class="s41">, ProSLIC</span>®<span class="s41">, Simplicity Studio</span>®<span class="s41">, SiPHY</span>®<span class="s41">, Telegesis, the Telegesis Logo</span>®<span class="s41">, USBXpress</span>® <span class="s41">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s41">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="ug162-simplicity-commander-reference-guide/Image_031.png"/></span></p><p class="s44" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s44" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h4 href="http://www.silabs.com/">www.silabs.com</h4></p></body></html>
