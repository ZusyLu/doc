<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>UG305: Dynamic Multiprotocol User’s Guide</title><meta name="author" content="Silicon Labs"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 6pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .p, p { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; margin:0pt; }
 .a, a { color: #049; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s5 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s6 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s7 { color: #D81E2A; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s8 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s9 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s10 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s12 { color: #049; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s13 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s14 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s15 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; vertical-align: 3pt; }
 h2 { color: #FFF; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s16 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s17 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s18 { color: #424242; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s19 { color: #424242; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s20 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s21 { color: #4C4D4F; font-family:"Arial Black", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s23 { color: #4C4D4F; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s24 { color: #0086DD; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt; }
 .s25 { color: #4C4D4F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4pt; vertical-align: 2pt; }
 h3 { color: #FB1725; font-family:"Lucida Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 li {display: block; }
 #l1 {padding-left: 0pt; }
 #l1> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l3 {padding-left: 0pt;counter-reset: d2 1; }
 #l3> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l5 {padding-left: 0pt;counter-reset: d2 1; }
 #l5> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l7 {padding-left: 0pt;counter-reset: d3 1; }
 #l7> li>*:first-child:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: d3 0;  }
 #l8 {padding-left: 0pt;counter-reset: g1 1; }
 #l8> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l9 {padding-left: 0pt;counter-reset: h1 1; }
 #l9> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l9> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 li {display: block; }
 #l10 {padding-left: 0pt;counter-reset: h1 3; }
 #l10> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l10> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 #l11 {padding-left: 0pt;counter-reset: h2 1; }
 #l11> li>*:first-child:before {counter-increment: h2; content: counter(h1, decimal)"."counter(h2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: h2 0;  }
 #l12 {padding-left: 0pt;counter-reset: h2 1; }
 #l12> li>*:first-child:before {counter-increment: h2; content: counter(h1, decimal)"."counter(h2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: h2 0;  }
 #l13 {padding-left: 0pt; }
 #l13> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l14 {padding-left: 0pt;counter-reset: h3 1; }
 #l14> li>*:first-child:before {counter-increment: h3; content: counter(h1, decimal)"."counter(h2, decimal)"."counter(h3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: h3 0;  }
 #l15 {padding-left: 0pt;counter-reset: h4 1; }
 #l15> li>*:first-child:before {counter-increment: h4; content: counter(h1, decimal)"."counter(h2, decimal)"."counter(h3, decimal)"."counter(h4, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: h4 0;  }
 li {display: block; }
 #l16 {padding-left: 0pt;counter-reset: j1 4; }
 #l16> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l16> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l17 {padding-left: 0pt;counter-reset: j2 2; }
 #l17> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l18 {padding-left: 0pt; }
 #l18> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l19 {padding-left: 0pt;counter-reset: j3 1; }
 #l19> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l20 {padding-left: 0pt;counter-reset: j4 1; }
 #l20> li>*:first-child:before {counter-increment: j4; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)"."counter(j4, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: j4 0;  }
 #l21 {padding-left: 0pt;counter-reset: j3 1; }
 #l21> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 #l22 {padding-left: 0pt;counter-reset: l1 1; }
 #l22> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l23 {padding-left: 0pt;counter-reset: j3 1; }
 #l23> li>*:first-child:before {counter-increment: j3; content: counter(j1, decimal)"."counter(j2, decimal)"."counter(j3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: j3 0;  }
 li {display: block; }
 #l24 {padding-left: 0pt;counter-reset: m1 1; }
 #l24> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 li {display: block; }
 #l25 {padding-left: 0pt;counter-reset: n1 5; }
 #l25> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l27 {padding-left: 0pt;counter-reset: n2 1; }
 #l27> li>*:first-child:before {counter-increment: n2; content: counter(n1, decimal)"."counter(n2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l28 {padding-left: 0pt;counter-reset: n2 1; }
 #l28> li>*:first-child:before {counter-increment: n2; content: counter(n1, decimal)"."counter(n2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l28> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l30 {padding-left: 0pt;counter-reset: n3 1; }
 #l30> li>*:first-child:before {counter-increment: n3; content: counter(n1, decimal)"."counter(n2, decimal)"."counter(n3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l30> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 #l31 {padding-left: 0pt;counter-reset: n2 1; }
 #l31> li>*:first-child:before {counter-increment: n2; content: counter(n1, decimal)"."counter(n2, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l31> li:first-child>*:first-child:before {counter-increment: n2 0;  }
 #l32 {padding-left: 0pt;counter-reset: q1 1; }
 #l32> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 #l33 {padding-left: 0pt;counter-reset: n3 1; }
 #l33> li>*:first-child:before {counter-increment: n3; content: counter(n1, decimal)"."counter(n2, decimal)"."counter(n3, decimal)" "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 #l33> li:first-child>*:first-child:before {counter-increment: n3 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="126" height="62" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">UG305: Dynamic Multiprotocol User’s Guide</h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="1" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="194" height="1" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">KEY POINTS</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="195" height="1" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l1"><li><p class="s2" style="padding-top: 4pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Dynamic Multiprotocol architecture</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">About the Radio Scheduler</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Radio Scheduler examples</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Interaction with Micrium OS</p></li><li><p class="s2" style="padding-top: 3pt;padding-left: 17pt;text-indent: -7pt;text-align: left;">Protocol-specific implementation notes</p></li></ul><p style="text-indent: 0pt;text-align: left;"/><p class="s3" style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This user&#39;s guide provides details about implementing an applica- tion using Silicon Labs&#39; Dynamic Multiprotocol solution. Dynamic multiprotocol time-slices the radio and rapidly changes configura- tions to enable different wireless protocols to operate reliably at the same time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l2"><li><h4 style="padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark0">Introduction</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This document describes how Silicon Labs software is designed to be used by multiple protocols on a single wireless chip. Dynamic multiprotocol time-slices the radio and rapidly changes configurations to enable different wireless protocols to operate reliably at the same time.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Details on specific dynamic multiprotocol implementations are provided in the following application notes:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="https://www.silabs.com/documents/public/application-notes/an1133-dynamic-multiprotocol-bluetooth-zigbee.pdf">AN1133: Dynamic Multiprotocol Development with Bluetooth and Zigbee</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 182%;text-align: left;"><a href="https://www.silabs.com/documents/public/application-notes/an1269-bluetooth-rail-dynamic-multiprotocol-gsdk-v3x.pdf" class="a" target="_blank">AN1134: Dynamic Multiprotocol Development with Bluetooth and Proprietary Protocols on RAIL in GSDK v2.x </a><a href="https://www.silabs.com/documents/public/application-notes/an1209-dynamic-multiprotocol-connect-bluetooth.pdf" class="a" target="_blank">AN1269: Dynamic Multiprotocol Development with Bluetooth® and Proprietary Protocols on RAIL in GSDK v3.x </a><a href="https://www.silabs.com/documents/public/application-notes/an1209-dynamic-multiprotocol-connect-bluetooth.pdf" target="_blank">AN1209: Dynamic Multiprotocol Development with Bluetooth and Connect</a></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="https://www.silabs.com/documents/public/application-notes/an1265-openthread-bluetooth-dynamic-multiprotocol-gsdk-v3x.pdf">AN1265: Dynamic Multiprotocol Development with Bluetooth® and OpenThread in GSDK v3.x</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li><p class="s5" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark1">Terminology</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following lists some of the terminology specific to the dynamic multiprotocol implementation.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Radio Abstraction Interface Layer (RAIL): <span class="p">The common API through which higher level code gains access to the EFR32 radio.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Radio Operation<span class="p">: A specific action to be scheduled. A radio operation has both a radio configuration and a priority. Each stack can request that the radio scheduler perform up to two radio operations (background receive and either Scheduled Receive or Scheduled transmit) at a time:</span></p><ul id="l4"><li><p class="s5" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">Background Receive<span class="p">: Persistent receive, intended to be interrupted by Scheduled operations, and returned to after their comple- tion.</span></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Scheduled Receive: </b>Receive packets or calculate RSSI at a specified time and duration. (Developers working on RAIL, note that in terms of the RAIL API, “Scheduled Receive” as used in this document refers to any receive operation, other than <span class="s6">RAIL_StartRx</span>, and is not just limited in scope to <span class="s6">RAIL_ScheduleRx</span>.)</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;"><b>Scheduled Transmit: </b>Any one of various transmit operations including immediate transmit, scheduled (future) transmit, or CCA- dependent transmit. (Developers working on RAIL, note that in terms of the RAIL API, “Scheduled Transmit” as used in this docu- ment refers to any transmit operation, and is not limited in scope to <span class="s6">RAIL_StartScheduledTx</span>.)</p></li></ul><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Radio Config<span class="p">: Determines the state of the hardware that must be used to perform a radio operation.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Radio Scheduler<span class="p">: RAIL component that arbitrates between different protocols to determine which will have access to the radio.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Priority: <span class="p">Each operation from each stack has a default priority. An application can change default priorities.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Slip Time: <span class="p">The maximum time in the future when the operation can be started if it cannot begin at the requested start time.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Yield: <span class="p">A stack must voluntarily yield at the end of an operation or sequence of operations, unless it is performing a background receive. Until the stack yields, the scheduler will not scheduler lower priority tasks.</span></p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">RTOS (Real Time Operating System) Kernel<span class="p">: The part of the operating system that is responsible for task management, and inter- task communication and synchronization. This implementation uses the Micrium OS-5 kernel.</span></p><p class="s7" style="padding-bottom: 3pt;text-indent: 0pt;text-align: right;">Introduction</p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="713" height="0" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_005.png"/></span></p></li><li><p class="s5" style="padding-top: 7pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark2">Architecture</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Dynamic Multiprotocol makes use of the EFR32 hardware and the RAIL software as its building blocks. Zigbee, Bluetooth, and/or any other standards-based or proprietary protocols can then be built on top of these foundational layers, using Micrium to manage execu- tion of code between different protocols. The following diagram illustrates the general structure of the software modules.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 189pt;text-indent: 0pt;text-align: left;"><span><img width="277" height="351" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_006.jpg"/></span></p><p class="s5" style="padding-top: 5pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 1.1.  General Dynamic Multiprotocol Software Architecture</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Beginning with version 2.0, RAIL requires the passing of a radio configuration handle to the RAIL API calls. This configuration describes various PHY parameters that are used by the stack.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Micrium OS is an RTOS that allows stacks and application logic to share CPU execution time.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Radio scheduler is a software library that intelligently answers requests by the stacks to perform radio operations to maximize relia- bility and minimize latency. API’s provided by RAIL that do not engage the radio bypass the Radio scheduler.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The RAIL core configures the EFR32 hardware in response to instructions from the radio scheduler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark3">Single Firmware Image</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Dynamic Multiprotocol allows a software developer to generate a single monolithic binary that is loaded onto an EFR32. Software up- dates are done by upgrading the entire binary. This is accomplished using the Gecko Bootloader, the details of which can be found in <i>UG266: Silicon Labs Gecko Bootloader User’s Guide</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark4">Independent Stack Operation</a></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark16" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The Silicon Labs stacks still operate independently of one another in a Dynamic Multiprotocol situation. Certain long-lived radio opera- tions will have an impact on another protocol’s latency and compliant operation. It is up to the application to determine any special con- siderations for these events. See section </a>2. The Radio Scheduler <span style=" color: #000;">for more information.</span></p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark5">The Radio Scheduler</a><a name="bookmark16">&zwnj;</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Radio Scheduler is a component of RAIL (Radio Abstraction Interface Layer). RAIL provides an intuitive, easily-customizable radio interface layer and API, which supports proprietary or standards-based wireless protocols. The Radio Scheduler is designed to allow for radio operations that can be scheduled and prioritized. Different radio operations in each protocol may be more or less important, or more or less time sensitive, depending on the situation. The scheduler can take those into account when making decisions about con- flicts and how to adjudicate them.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Unless you are developing applications with a custom protocol on RAIL, most radio scheduler functions are handled automatically by underlying stack and RAIL code. You only need to use the stack through its normal API.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">At a high level, the stack sends a radio operation (for example a Scheduled Receive or Scheduled Transmit). The radio operations are queued and then serviced at a future time based upon their parameters. When it is time to start the radio operation the scheduler exam- ines whether or not a competing event exists and whether or not the operation can be delayed. If the scheduler cannot run the event it returns the result to the higher layer, which may retry with new parameters.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Once the radio operation has started, the corresponding stack can send the scheduler additional operations based on the results of the previous operation (for example waiting for an ACK). At the end of each operation or sequence of operations the stack must yield use of the radio.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark6">Radio Operations</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each event in the scheduler is broken up into elements called Radio Operations, which are associated with a radio config and a priority.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Every operation has a priority and is interrupted if the scheduler receives a higher priority operation that overlaps in time. Lower priority radio operations that cannot be run based on their schedule parameters will fail, and it is up to the respective stack to retry them. Once the scheduler actively runs a radio operation from the stack, the stack can continue to send additional radio operations until it voluntarily yields, or until the scheduler receives a higher priority radio operation and preempts it.</p><ul id="l6"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Background Receive</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Scheduled Receive</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Scheduled Transmit</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each stack can ask the Radio Scheduler to perform up to two radio operations (background receive and either Scheduled Receive or Scheduled transmit) at a time:</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each operation has the following parameters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Parameter</p></td><td style="width:427pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:30pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Start Time</p></td><td style="width:427pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">An indication at what point in the future this radio operation will run. This could be “run right now” or some value in microseconds in the future.</p></td></tr><tr style="height:30pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Priority</p></td><td style="width:427pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">A number that indicates the relative priority of the operation. When using the default settings, Bluetooth LE radio operations are almost always higher priority than Zigbee operations.</p></td></tr><tr style="height:30pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Slip Time</p></td><td style="width:427pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">An amount of time that the event can be delayed beyond its start time and still be acceptable to the stack. This may be 0, in which case the event cannot be slipped.</p></td></tr><tr style="height:40pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Transaction Time</p></td><td style="width:427pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">The approximate amount of time that it takes to complete the transaction. Transmit events usually have a much more well-defined transaction time, while receive events are often unknown. This is used to help the radio scheduler determine whether an event can be run.</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The stack defines these various parameters appropriate to the operation being executed. For example, Bluetooth connection events are often scheduled in the future and have no allowed slip, whereas Zigbee transmit events can often be delayed a small amount and start later.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">From the perspective of the RAIL Radio Scheduler, Scheduled transmit and Scheduled receive are identical. They are both simply op- erations that require use of the radio, and thus cannot be executed simultaneously. The difference is only apparent at RAIL API layer, where either a TX or RX API is called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark7">Background Receive</a></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark58" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">This is a continuous receive mode that is intended to be interrupted by other operations, and returned to after their completion. If Back- ground Receive is higher priority than other operations, those radio operations will not be scheduled and will not run. It is up to the stacks or application to change the priority or voluntarily yield. See section </a><a href="#bookmark58" class="s9">6.1 Examples with Background Receive, Yield Radio and </a>State Transition <span style=" color: #000;">for examples of how Background receive interacts with Scheduled operations.</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark8">Scheduled Receive</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This is a receive at a future time with a specified duration. The radio scheduler will take into consideration the radio switching time in deciding whether or not the operation will be scheduled. If it cannot be scheduled then the scheduler sends a fail event to the calling stack. The radio operation is automatically extended until the stack voluntarily yields, or the scheduler receives a higher priority opera- tion and interrupts it. Extending the receive allows the stack to continue a radio operation based on the requirements of the higher level protocol, for example transmission of a response based on the received data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark9">Scheduled Transmit</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This is a transmit at a future time with a minimum duration. This minimum duration can include expected follow-on events, for example an ACK to an IEEE 802.15.4 transmit. However, the minimum time for this operation does not have to include unexpected events that may extend the time beyond the minimum duration, for example backoffs due to CCA failures in IEEE 802.15.4. The radio scheduler takes into consideration the radio switching time in deciding whether or not the operation will be scheduled. If it cannot be scheduled then the scheduler sends a fail event to the calling stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark10">Radio Config</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each radio operation is associated with a predefined radio config that determines the state of the hardware that must be used to per- form the operation. The Radio Configs keep track of the stack&#39;s current state so that future radio operations will use the same radio parameters. Radio Configs may be active or dormant. If the stack changes an active Radio Config then RAIL makes an immediate change to the hardware configuration as well, for example changing a channel. If the radio config is not currently active then the next scheduled radio operation will use the new radio config.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark11">Priority</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each radio operation has a priority which indicates to the scheduler which operation should be executed if there is a timing overlap between multiple operations. The scheduler treats a priority of 0 as the highest priority and 255 as the lowest priority. The radio schedu- ler will allow the task with the highest priority to access the physical radio hardware. With most tasks control is returned to the radio scheduler only on completion, but tasks like background receive will be interrupted in case a task with higher priority becomes active.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The stacks each have a default set of priorities based on Silicon Labs’ analysis of how best to cooperate to maximize the duty cycle and avoid dropped connections for a generic use case. Specific use cases may have different needs. The priorities are as follows, from highest to lowest:</p><ol id="l8"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Bluetooth LE Scheduled Transmit</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Bluetooth LE Scheduled Receive</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Other protocol Scheduled Transmit</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Other protocol Background Receive</p></li></ol><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark52" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">These priorities may be overridden or changed by the application. It is up to the application to decide under what circumstances to change them. Section </a>5.2 802.15.4 RAIL Priority <a href="#bookmark67" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">and section </a>7.1 Bluetooth Priorities <span style=" color: #000;">contain more details on priorities for their specific instances.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark12">Slip Time</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Every radio operation must have a &quot;slip time&quot;, or maximum start time, meaning the furthest time in the future when the operation can be started if it cannot begin at the requested start time. This allows for the scheduler to work around higher priority events that are occur- ring at the same time, or higher priority events that extend beyond their expected duration. The protocol generally dictates what the slip time can be, but the radio scheduler is capable of handling this on a per-operation basis, allowing a stack to slip some events but not others. In general, IEEE 802.15.4 has longer slip time and Bluetooth LE has a minimal slip time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark13">Yield</a></p><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark58" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">Once a sequence of radio operations is actively being run, the stack may continue to add operations extending the initial operation until the stack has nothing more to do for the particular message exchange. A stack must voluntarily yield unless it is performing a back- ground receive. If a stack does not yield then it will continue to extend its radio operation, and lower priority radio operations will then trigger a failure back to the corresponding stack that requested that radio operation. A higher priority operation cannot interrupt a cur- rently-running, lower priority radio operation that has not yielded. See section </a><a href="#bookmark58" class="s9">6.1 Examples with Background Receive, Yield Radio and </a>State Transition <span style=" color: #000;">for examples of situations where explicitly yielding the radio is necessary.</span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark14">Interrupting a Radio Operation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">A scheduled radio operation may be interrupted if a higher priority operation conflicts with it. This could occur in the following two cir- cumstances:</p><ol id="l9"><li><p style="padding-top: 2pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">A scheduled radio operation takes longer than expected and the corresponding stack does not yield before the higher priority radio operation must start.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">A higher priority radio operation has just been scheduled to occur in the future and conflicts with a lower priority operation already scheduled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark15">Long-Lived Radio Operations</a></p></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Certain long-lived Radio Operations can have an outsized impact on the correct operation of the product. The application may need to coordinate these operations between the protocols. If the application does not then the radio scheduler priorities will take precedence. For example, an IEEE 802.15.4 energy scan can require that the radio stay on to gather sufficient energy readings. If the application does not properly coordinate the operations, the scan could be interrupted prematurely due to a higher priority Bluetooth operation.</p><ol id="l10"><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark17">Radio Scheduler Examples</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;">All examples use Bluetooth LE and Zigbee, but the principles apply to other Bluetooth/802.15.4 combinations.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The scheduler starts out by having a low priority Zigbee background receive operation. This represents an always-on router that may need to receive IEEE 802.15.4 packets at unknown times. A Bluetooth LE connection is also active and requires the stack to be ready to receive every 30 ms. The Bluetooth LE stack may schedule this well in advance due to the connection’s predictable nature.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark18">Priority Scheduling</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">This provides a basic example of adjudicating priorities of the different radio operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="715" height="443" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_007.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Zigbee stack decides that it needs to send a packet. It may do this as an on-demand event, meaning the stack decides that it wants to send a packet <i>now </i>without informing the scheduler well in advance. This is in contrast to how Bluetooth LE operates, where the scheduled operations are known reasonably far in advance. The scheduler evaluates that it is possible to perform the Zigbee TX 1 radio operation and still service the higher priority Bluetooth LE reception event in the future. So the scheduler allows the transmit event to occur. The Zigbee stack performs all the pieces of this transmit operation (waiting for a MAC ack), and then voluntarily yields. The estimated transaction time of the Zigbee transmit radio operation does NOT include retries.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this example, Bluetooth LE is <i>already </i>scheduled to receive in the future and the Zigbee stack wants to transmit. For the first Zigbee TX 1 radio operation there is enough time before the Bluetooth LE RX 1 radio operation so the scheduler allows the stack to perform the operation. Later, when the Zigbee stack tries to schedule Zigbee TX 2 the scheduler determines there is not enough time before the high priority Bluetooth LE RX 2 event. However, the Zigbee stack has indicated that this action may slip its start time. The radio schedu- ler determines that given the expected duration of the Bluetooth LE radio operation the Zigbee operation can start after that event and still be within the slip time indicated by the Zigbee stack.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If all goes as expected, the Zigbee transmit operation will have its first attempt occur without any failures due to scheduling.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark19">Priority Interruption Example</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This example illustrates a higher priority operation interrupting a lower priority one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="714" height="550" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_008.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This example starts in the same way as the previous example. Zigbee and Bluetooth LE both have a radio operation that is scheduled without any collision.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Later, the Zigbee stack decides it wants to send another packet for the Zigbee TX 2 event. The scheduler determines that it should be possible to schedule this event and service the Bluetooth LE RX 2 event later, based on the minimum time that the Zigbee TX 2 event must take. However, the Zigbee TX 2 event takes longer than expected due to a long random backoff and does not yield in time. This causes the event to collide with a higher priority radio operation, and so the Radio Scheduler interrupts the Zigbee event and returns a failure to the higher level stack. The Bluetooth LE event occurs normally and when it is complete it voluntarily yields to any lower priority operations.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Upon receiving the failure from the radio scheduler the Zigbee stack immediately attempts to retry the MAC message. It schedules the operation and includes a slip time. At this point the Bluetooth LE stack has priority over the radio and thus the operation cannot be started yet, but the scheduler accepts the new radio operation. The Bluetooth LE stack completes its scheduled receive and yields the radio. The scheduler then triggers the Zigbee transmit operation to occur because it is still within the slip time of the initial start opera- tion. After the transmit completes the scheduler returns to the background receive operation.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark20">Higher Priority Operation that is Extended</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This example shows what happens when a higher priority operation takes longer than originally anticipated and causes a lower priority operation to miss its opportunity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="714" height="458" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this case, Bluetooth LE has a Scheduled receive that is currently taking place. Zigbee decides to send a packet but it cannot be run right now. The scheduler accepts the operation under the assumption that the Bluetooth LE event will complete before the end of the slip time of the Zigbee event. However, the Bluetooth LE event extends longer due to the fact that additional packets are sent between the devices. The Bluetooth LE operation has priority so the Zigbee operation eventually runs out of slip. An error is returned to the stack. Zigbee decides to re-transmit the packet. Again, the Zigbee stack indicates the operation should start now but may slip into the future. The scheduler is in the middle of changing the radio config so it cannot begin the operation immediately. Instead, it slips the radio operation start time a small amount and then executes the operation.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark21">Higher Priority Operation Without Interruption</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In this example the radio scheduler is running on a node acting as a Bluetooth LE slave and that node has a number of connections to different masters. It also has a periodic advertising beacon that is transmitted. The following figure shows a case where these events are occurring virtually back-to-back and do not allow for enough time to switch back to the Zigbee radio config. Therefore it will create a period where the Zigbee stack is unable to transmit even with the slip time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><span><img width="595" height="435" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Zigbee asks the scheduler to schedule a transmit radio operation. Even though the scheduler knows that the event will fail due to scheduled higher priority operations, it still accepts the scheduled event. This is done for two reasons. First, circumstances may change and the event can be executed. Second, the stack sitting on top of the radio scheduler may try to retry the action. If the result of the failed scheduling was returned immediately then the stack&#39;s attempt to retry would be unlikely to succeed since no time has passed. Instead, by queuing the event and returning the failure <i>after </i>the slip time has expired, a retry (with its own slip time) has a better chance of success as the set of upcoming radio operations will be different.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark22">Receive When a Higher Priority Operation is Running</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This example illustrates what happens when Bluetooth LE is active and a lower priority operation will be receiving data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="714" height="450" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In the first case, when an IEEE 802.15.4 message is sent and the Bluetooth LE stack is utilizing the radio for an active receive the Zigbee stack will not be online to receive the message. However, the Zigbee sender of the message will retry in most cases and with backoffs and other timing alterations is not going to conflict with another higher priority scheduled Bluetooth receive events unlikely to collide. The Zigbee message is received successfully.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The second case shows that, in the case of an active receive, the Zigbee stack may still be interrupted and not receive (or ACK) the message. Successful communication relies on retries at the MAC or higher layer to send this message again and verify the Dynamic Multiprotocol device receives the message.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">While there may be considerations for whether or not active receive should be interrupted, it is difficult for the scheduler to make that determination. In general the robustness of the protocols should allow for messages to be successfully received even with interruptions.</p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark23">Micrium OS</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Each stack runs a separate RTOS task utilizing the Micrium OS-5 kernel to provide the task switching. A task is equivalent to a thread in other operating systems. The tasks coordinate using various IPC (interprocess communication) mechanisms (message queues and semaphores) to pass information back and forth. The tasks differ based on the protocol. Zigbee requires four tasks, while Connect re- quires five. The following sections describe task handling for Zigbee and Connect.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note that in Gecko SDK Suite v3.0, the Bluetooth API structure was completely updated. Among other changes, all function calls were renamed. In the following sections, both the v2.x and the v3.x variants are provided.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l12"><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark24">Zigbee and Bluetooth</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The following figure illustrates Micrium OS task switching for Zigbee and Bluetooth</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 132pt;text-indent: 0pt;text-align: left;"><span><img width="428" height="350" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 4.1.  Micrium OS Task Switching</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">A Zigbee/Bluetooth Dynamic Multiprotocol application requires several tasks in order to operate:</p><ul id="l13"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Application/Zigbee Stack task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth link layer task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth host task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Idle task</p></li></ul><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">These have been implemented for the Micrium RTOS for you.</p><ol id="l14"><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark25">Inter-Task Communication</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Before describing the tasks, it is important to understand how the tasks communicate with each other. The tasks in this application syn- chronize with each other through the use of a number of flags. These flags are summarized in the following tables:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;"><a name="bookmark46">Table 4.1.  Flags in v3.x</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:40pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_STACK</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 19pt;text-indent: 0pt;text-align: left;">Link Layer task</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 64pt;text-indent: 0pt;text-align: justify;">Bluetooth stack needs an update, call sl_bt_pop_event(sl_bt_msg_t* event) (v3.x)gecko_wait_event() (v2.x)</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_LL</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio interrupt</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 7pt;text-indent: 0pt;text-align: left;">Link Layer needs an update, call sl_bt_priority_han- dle() (v3.x)gecko_priority_handle() (v2.x)</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">Command is ready in shared memory, call gecko_ handle_command()</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_RSP_WAITING</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 22pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Response is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 22pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 16pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:218pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">Event is handled and shared memory is free to use for next event</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Table 4.2.  Flags in v2.x</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:40pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_STACK</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Link Layer task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 74pt;text-indent: 0pt;text-align: justify;">Bluetooth stack needs an update, call sl_bt_pop_event(sl_bt_msg_t* event) (v3.x)gecko_wait_event() (v2.x)</p></td></tr><tr style="height:30pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_LL</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio interrupt</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 17pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: left;">Link Layer needs an update, call sl_bt_priority_handle() (v3.x)gecko_priority_handle() (v2.x)</p></td></tr><tr style="height:30pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_CMD_WAIT- ING</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;text-align: left;">Command is ready in shared memory, call gecko_ han- dle_command()</p></td></tr><tr style="height:30pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_RSP_WAIT- ING</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Response is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_EVT_WAIT- ING</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:181pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_EVT_HAN- DLED</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:227pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Event is handled and shared memory is free to use for next event</p></td></tr></table><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark46" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The following diagram illustrates how these flags are used in synchronizing the tasks. The flag naming is for GSDK v2.x. For v3.x the method is the same, only the names are different as reflected in </a>Table 4.1 Flags in v3.x on page 13<span style=" color: #000;">.</span></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In addition to these flags, a mutex is used by the gecko command handler to make it thread-safe. This makes it possible to call BGAPI commands from multiple tasks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="725" height="334" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_013.jpg"/></span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark26">Task Descriptions</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><li><p class="s5" style="padding-top: 5pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark27">Application/Zigbee Stack Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Application/Zigbee Stack task is responsible for setting up all the other tasks upon startup, including the Bluetooth Host task and the Bluetooth Link Layer task. Zigbee has a large and extensive API set and these APIs are not thread-safe. Therefore, all the code that invokes Zigbee stack APIs should be executed from the Application/Zigbee Stack task. If the application requires some of the Zigbee stack APIs to be invoked from a task other than the Application/Zigbee Stack task, we advise you to schedule a custom event from within the non-Zigbee Stack task. In the corresponding event handler function for the custom event the Zigbee stack APIs can be used, as the event handler will be called from the Zigbee Stack Task context. Bluetooth has a relatively small set of APIs that are serialized through the BGAPI RTOS Adaption Layer. Hence, it is safe to invoke any Bluetooth API from a task other than the Application/Zigbee Stack task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="568" height="368" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 4pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark28">Bluetooth Link Layer Task</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of the link layer task is to update the upper link layer. Task flow is the same in v3.x and v2.x.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>In v3x: </b>The link layer task waits for the SL_BT_RTOS_EVENT_FLAG_LL flag to be set before running. The upper link layer is updated by calling <span class="s6">sl_bt_priority_handle()</span>. The SL_BT_RTOS_EVENT_FLAG_LL flag is set by <span class="s6">BluetoothLLCallback()</span>, which is called from a kernel-aware interrupt handler. This task is given the highest priority after the Bluetooth start task.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>In v2x: </b>The link layer task waits for the BLUETOOTH_EVENT_FLAG_LL flag to be set before running. The upper link layer is updated by calling <span class="s6">gecko_priority_handle()</span>. The BLUETOOTH_EVENT_FLAG_LL flag is set by <span class="s6">BluetoothLLCallback()</span>, which is called from a kernel-aware interrupt handler. This task is given the highest priority after the Bluetooth start task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-top: 5pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark29">Bluetooth Host Task</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of this task is to update the Bluetooth stack, issue events, and handle commands. This task has higher priority than any of the application tasks, but lower than the link layer task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark30">Idle Task</a></p></li></ol></li></ol></li></ol></li></ol><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">When no tasks are ready to run, the OS calls the idle task. The idle task puts the MCU into lowest available sleep mode, EM2, by default.</p><ol id="l16"><ol id="l17"><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark31">Connect and Bluetooth</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">The following figure illustrates Micrium OS task switching for Connect and Bluetooth</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 86pt;text-indent: 0pt;text-align: left;"><span><img width="551" height="339" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_015.jpg"/></span></p><p class="s5" style="padding-top: 7pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 4.2.  Micrium OS Task Switching</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">A Connect/Bluetooth Dynamic Multiprotocol application requires several tasks in order to operate:</p><ul id="l18"><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Application Framework/Customer Application task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Connect stack task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth link layer task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Bluetooth host task</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Idle task</p></li></ul><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">These have been implemented for the Micrium RTOS for you.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In Gecko SDK Suite v3.x both Connect and Bluetooth moved to an improved Gecko Platform component-based infrastructure. While in many cases flow remains the same, API commands, flag names, and other functionality has changed. This chapter notes where v3.x diverges from the v2.x implementation.</p><ol id="l19"><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark32">Inter-Task Communication</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Before describing the tasks, it is important to understand how the tasks communicate with each other. The tasks in this application syn- chronize with each other through the use of a number of flags. These flags are summarized in the following tables:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 8pt;padding-left: 139pt;text-indent: 0pt;text-align: center;"><a name="bookmark47">Table 4.3.  Flags in v3.x</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_STACK</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Link Layer task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 69pt;text-indent: 0pt;text-align: left;">Bluetooth stack needs an update, call sl_bt_pop_event(sl_bt_msg_t* event)</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_LL</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">Radio inter- rupt</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">Link Layer needs an update, call sl_bt_priority_han- dle()</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_CMD_WAITING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">A Bluetooth command is ready in shared memory, call sli_bgapi_cmd_handler_delegate()</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_RSP_WAITING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Response is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_WAITING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 18pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">Event is handled and shared memory is free to use for next event</p></td></tr><tr style="height:40pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_COMMAND_PENDING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">A Connect command is ready in shared memory, call emAfPluginMicriumRtosHandleIncomingApiCom- mand()</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_RESPONSE_PENDING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">A response to a Connect command is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:198pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_CALLBACK_PENDING</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">One or more callback commands are available in the callback queue</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Table 4.4.  Flags in v2.x</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_STACK</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Link Layer task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 60pt;text-indent: 0pt;text-align: left;">Bluetooth stack needs an update, call gecko_wait_event()</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_LL</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Radio interrupt</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Link Layer Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 25pt;text-indent: 0pt;text-align: left;">Link Layer needs an update, call gecko_priori- ty_handle()</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_CMD_WAIT- ING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 10pt;text-indent: 0pt;text-align: left;">A Bluetooth command is ready in shared memory, call gecko_ handle_command()</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 8pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_RSP_WAIT- ING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Response is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_EVT_WAIT- ING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Event is ready in shared memory</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 13pt;text-indent: 0pt;text-align: left;">BLUETOOTH_EVENT_FLAG_EVT_HAN- DLED</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Bluetooth Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">Event is handled and shared memory is free to use for next event</p></td></tr><tr style="height:40pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_COMMAND_PENDING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 23pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 15pt;text-indent: 0pt;text-align: justify;">A Connect command is ready in shared memory, call emAfPluginMicriumRtosHandleIncomingApi- Command()</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_RESPONSE_PENDING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 25pt;text-indent: 0pt;text-align: left;">A response to a Connect command is ready in shared memory</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Sender</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Receiver</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Purpose</p></td></tr><tr style="height:30pt"><td style="width:185pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FLAG_IPC_CALLBACK_PENDING</p></td><td style="width:72pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connect Task</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 20pt;text-indent: 0pt;text-align: left;">Application Task</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;padding-right: 14pt;text-indent: 0pt;text-align: left;">One or more callback commands are available in the callback queue</p></td></tr></table><p class="s12" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark47" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The following diagram illustrates how these flags are used in synchronizing the tasks. The flag naming is for GSDK v2.x. For v3.x the method is the same, only the names are different as reflected in </a>Table 4.3 Flags in v3.x on page 17<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="721" height="241" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">In addition to these flags, mutexes are used by the Connect and Bluetooth command handlers to make it thread-safe. This makes it possible to call BGAPI commands and Connect Stack APIs from multiple tasks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark33">Connect Task Descriptions</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l20"><li><p class="s5" style="padding-top: 6pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark34">Task Initialization</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In v2.x the Connect Stack task is responsible for setting up all the other tasks upon startup, including the Application Framework task, the Bluetooth Host task and the Bluetooth Link Layer task.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Task creation and intitialization is handled differently in v3.x, as illustrated in the following flow chart.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;"><span><img width="613" height="450" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_017.jpg"/></span></p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark35">Connect Stack Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">After initialization, the Connect Stack task is the same in both v2.x and v3.x. The Connect Stack task executes the stack main loop and handles IPC API messages coming from the Application Framework task and optional other custom application tasks. This is accom- plished by checking in a non-blocking fashion whether the OS flag FLAG_IPC_COMMAND_PENDING is set. If that is the case, the API message is fetched from shared memory and the corresponding stack API is invoked. A response that includes the return status of the API call (if any) is then packaged in shared RAM and FLAG_IPC_RESPONSE_PENDING is set. Once the Connect Stack task yields, the task from which the API command originated will resume execution and parse the response.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Connect Stack task also dispatches IPC callback messages to the Application Framework task. To this purpose, when a stack callback fires, a corresponding IPC message is placed in an OS queue and the FLAG_IPC_CALLBACK_PENDING flag is set. Once the Connect Stack task yields, the Application Framework task will be able to run and process any callback message available in the queue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 86pt;text-indent: 0pt;text-align: left;"><span><img width="560" height="494" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark36">Application Framework / Customer Application Task</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Application Framework task executes the application framework main loop, which invokes plugins and application tick() callbacks and runs application events. This task also handles incoming IPC callback messages from the Connect Stack task and dispatches them to subscribing plugins and to the application.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark37">Bluetooth Link Layer Task</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The purpose of the link layer task is to update the upper link layer. Task flow is the same in v3.x and v2.x.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>v3.x: </b>The link layer task waits for the SL_BT_RTOS_EVENT_FLAG_LL flag to be set before running. The upper link layer is updated by calling <span class="s6">sl_bt_priority_handle()</span>. The SL_BT_RTOS_EVENT_FLAG_LL flag is set by <span class="s6">sli_bt_rtos_ll_callback()</span>, which is called from a kernel-aware interrupt handler. This task is given the highest priority after the Bluetooth start task.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><b>v2.x: </b>The link layer task waits for the BLUETOOTH_EVENT_FLAG_LL flag to be set before running. The upper link layer is updated by calling <span class="s6">gecko_priority_handle()</span>. The BLUETOOTH_EVENT_FLAG_LL flag is set by <span class="s6">BluetoothLLCallback()</span>, which is called from a kernel-aware interrupt handler. This task is given the highest priority after the Bluetooth start task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark38">Bluetooth Host Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The purpose of this task is to update the Bluetooth stack, issue events, and handle commands. This task has higher priority than any of the application tasks, but lower than the link layer task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 55pt;text-indent: -32pt;text-align: left;"><a name="bookmark39">Idle Task</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">When no tasks are ready to run, the OS calls the idle task. The idle task puts the MCU into lowest available sleep mode, EM2, by default.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li></ol></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark40">Updating the v3.x Bluetooth Stack</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack must be updated periodically. The Bluetooth host task reads the next periodic update event from the stack by call- ing <span class="s6">sl_bt_can_sleep_ticks()</span>; the stack is updated by calling <span class="s6">sl_bt_pop_event(sl_bt_msg_t* event) (v3.x)</span>. This allows the stack to process messages from the link layer as well as its own internal messages for timed actions that it needs to perform.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l21"><li><p class="s5" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark41">Issuing Bluetooth Events in v3.x</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth host task sets the SL_BT_RTOS_EVENT_FLAG_EVT_WAITING flag to indicate to the Bluetooth application task that an event is ready to be retrieved. Only one event can be retrieved at a time. The SL_BT_RTOS_EVENT_FLAG_EVT_WAITING flag is cleared by the application task when it has retrieved the event. The SL_BT_RTOS_EVENT_FLAG_EVT_WAITING flag is set by the application task to indicate that event handling is complete.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark42">Bluetooth Command Handling in v3.x</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth commands can be sent to the stack from multiple tasks. Responses to these commands are forwarded to the calling task. Commands and responses are synchronized with the SL_BT_RTOS_EVENT_FLAG_CMD_WAITING and SL_BT_RTOS_EVENT_FLAG_RSP_WAITING flags and the BluetoothMutex mutex.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Commands are prepared and sent to the stack by a helper function called <span class="s6">sli_bt_cmd_handler_rtos_delegate()</span>. This function is called by any of the BGAPI functions and is made re-entrant through the use of a mutex. The function starts by pending on the mutex. When it gains control of the mutex the command is prepared and placed into shared memory, then the SL_BT_RTOS_EVENT_FLAG_CMD_WAITING flag is set to indicate to the stack that a command is waiting to be handled. This flag is cleared by the Bluetooth host task to indicate that the command has been sent to the stack and that it is now safe to send another command.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Then execution pends on the SL_BT_RTOS_EVENT_FLAG_RSP_WAITING flag, which is set by the Bluetooth host task when the command has been executed. This indicates that a response to the command is waiting. Finally, the mutex is released.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following diagram illustrates how the Bluetooth Host task operates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="607" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_019.jpg"/></span></p><ol id="l22"><li><p style="padding-top: 7pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">On task startup, the SL_BT_RTOS_EVENT_FLAG_STACK is set to indicate that the stack needs updating and the SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED flag is set to indicate that no event is currently being handled.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Next, if the SL_BT_RTOS_EVENT_FLAG_CMD_WAITING flag is set, <span class="s6">sli_bgapi_set_cmd_handler_delegate() </span>is called to han- dle the command.</p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">Then, if the SL_BT_RTOS_EVENT_FLAG_STACK and the SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED flags are set, <span class="s6">sl_bt_pop_event(sl_bt_msg_t* event) </span>is called to get an event from the stack. If an event is found waiting, the SL_BT_RTOS_EVENT_FLAG_EVT_WAITING flag is set and the SL_BT_RTOS_FLAG_EVT_HANDLED flag is cleared to indicate to the application task that an event is ready to be handled and to the Bluetooth host task that an event is currently in the process of being handled. Otherwise, the SL_BT_RTOS_EVENT_FLAG_STACK flag is cleared to indicate that the stack does not require updating.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">At this point, the task checks to see if the stack requires updating and whether any events are waiting to be handled. If no events are waiting to be handled and the stack does not need updating then it is safe to sleep and a call to <span class="s6">sl_bt_can_sleep_ticks() </span>is made to determine how long the system can sleep for. The Bluetooth host task then does a timed pend on the SL_BT_RTOS_EVENT_FLAG_STACK, SL_BT_RTOS_EVENT_FLAG_EVT_HANDLED and SL_BT_RTOS_EVENT_FLAG_CMD_WAITING flags.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">If the timeout occurs and none of the flags are set in the time determined in step 4, then the SL_BT_RTOS_EVENT_FLAG_STACK is set to indicate that the stack requires updating.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Steps 2 – 5 are repeated indefinitely.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li><p class="s5" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark43">Updating the v2.x Bluetooth Stack</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The Bluetooth stack must be updated periodically. The Bluetooth host task reads the next periodic update event from the stack by call- ing <span class="s6">gecko_can_sleep_ticks()</span>; the stack is updated by calling <span class="s6">gecko_wait_event()</span>. This allows the stack to process messages from the link layer as well as its own internal messages for timed actions that it needs to perform.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l23"><li><p class="s5" style="padding-top: 5pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark44">Issuing Bluetooth Events in v2.x</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The Bluetooth host task sets the BLUETOOTH_EVENT_FLAG_EVT_WAITING flag to indicate to the Bluetooth application task that an event is ready to be retrieved. Only one event can be retrieved at a time. The BLUETOOTH_EVENT_FLAG_EVT_WAITING flag is cleared by the application task when it has retrieved the event. The BLUETOOTH_EVENT_FLAG_EVT_HANDLED flag is set by the application task to indicate that event handling is complete.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark45">Bluetooth Command Handling in v2.x</a></p></li></ol></li></ol></ol><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Bluetooth commands can be sent to the stack from multiple tasks. Responses to these commands are forwarded to the calling task. Commands and responses are synchronized with the BLUETOOTH_EVENT_FLAG_CMD_WAITING and BLUE- TOOTH_EVENT_FLAG_RSP_WAITING flags and the BluetoothMutex mutex.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Commands are prepared and sent to the stack by a helper function called <span class="s6">rtos_gecko_handle_command()</span>. This function is called by any of the BGAPI functions and is made re-entrant through the use of a mutex. The function starts by pending on the mutex. When it gains control of the mutex the command is prepared and placed into shared memory, then the BLUE- TOOTH_EVENT_FLAG_CMD_WAITING flag is set to indicate to the stack that a command is waiting to be handled. This flag is cleared by the Bluetooth host task to indicate that the command has been sent to the stack and that it is now safe to send another command.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Then execution pends on the BLUETOOTH_EVENT_FLAG_RSP_WAITING flag, which is set by the Bluetooth host task when the command has been executed. This indicates that a response to the command is waiting. Finally, the mutex is released.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The following diagram illustrates how the Bluetooth Host task operates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="607" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_020.jpg"/></span></p><ol id="l24"><li><p style="padding-top: 7pt;padding-left: 41pt;text-indent: -8pt;text-align: left;">On task startup, the BLUETOOTH_EVENT_FLAG_STACK is set to indicate that the stack needs updating and the BLUE- TOOTH_EVENT_FL AG_EVT_HANDLED flag is set to indicate that no event is currently being handled.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Next, if the BLUETOOTH_EVENT_FLAG_CMD_WAITING flag is set, <span class="s6">gecko_handle_command() </span>is called to handle the command.</p></li><li><p style="padding-top: 8pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">Then, if the BLUETOOTH_EVENT_FLAG_STACK and the BLUETOOTH_EVENT_FLAG_EVT_HANDLED flags are set, <span class="s6">gecko_wait_event() </span>is called to get an event from the stack. If an event is found waiting, the BLUE- TOOTH_EVENT_FLAG_EVT_WAITING flag is set and the BLUETOOTH_EVENT_FLAG_EVT_HANDLED flag is cleared to indi- cate to the application task that an event is ready to be handled and to the Bluetooth host task that an event is currently in the process of being handled. Otherwise, the BLUETOOTH_EVENT_FLAG_STACK flag is cleared to indicate that the stack does not require updating.</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">At this point, the task checks to see if the stack requires updating and whether any events are waiting to be handled. If no events are waiting to be handled and the stack does not need updating then it is safe to sleep and a call to <span class="s6">gecko_can_sleep_ticks() </span>is made to determine how long the system can sleep for. The Bluetooth host task then does a timed pend on the BLUE- TOOTH_EVENT_FLAG_STACK, BLUETOOTH_EVENT_FLAG_EVT_HANDLED and BLUETOOTH_EVENT_FLAG_CMD_WAIT- ING flags.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: justify;">If the timeout occurs and none of the flags are set in the time determined in step 4, then the BLUETOOTH_EVENT_FLAG_STACK is set to indicate that the stack requires updating.</p></li><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Steps 2 – 5 are repeated indefinitely.</p></li></ol><ol id="l25"><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: justify;"><a name="bookmark48">Implementing Multiprotocol with an 802.15.4-Based Stack</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">This chapter offers general information about implementing an 802.15.4-based stack such as Zigbee or Connect as part of a multiproto- col applications. For specifics on how to configure plugins and other details specific to a particular protocol, see one of the following application notes:</p><ul id="l26"><li><p class="s8" style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">AN1133: Dynamic Multiprotocol Development with Bluetooth and Zigbee</p></li><li><p class="s8" style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: justify;">AN1209: Dynamic Multiprotocol Development with Bluetooth and Connect</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l27"><li><p class="s5" style="padding-top: 5pt;padding-left: 40pt;text-indent: -17pt;text-align: justify;"><a name="bookmark49">Wireless Protocol Support</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Different wireless protocols have different characteristics that have been leveraged with the design of Dynamic Multiprotocol. For exam- ple, Bluetooth Low Energy is very strict and predictable in its schedule of radio operations; advertisement and connection intervals oc- cur at set times. In contrast, a 802.15.4 protocol is more flexible in the timing of many message events; CSMA (carrier sense multiple access) in IEEE 802.15.4 adds random backoffs so that event delays are on the order of milliseconds. This allows IEEE 802.15.4 mes- sages to be sent around the Bluetooth Low Energy events and still be reliably received.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: justify;"><a name="bookmark50">802.15.4 RAIL Priority</a><a name="bookmark52">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">802.15.4 protocols currently have three RAIL priorities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:40pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No.</p></td><td style="width:134pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:126pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Default Setting</p></td><td style="width:251pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Exit Criterion</p></td></tr><tr style="height:19pt"><td style="width:40pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:134pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Active TX</p></td><td style="width:126pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">100</p></td><td style="width:251pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">MAC ACK received (or not)</p></td></tr><tr style="height:19pt"><td style="width:40pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:134pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Active RX</p></td><td style="width:126pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">255</p></td><td style="width:251pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Packet filtered or MAC ACK sent</p></td></tr><tr style="height:19pt"><td style="width:40pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:134pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Background RX</p></td><td style="width:126pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">255</p></td><td style="width:251pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Task with higher Priority present</p></td></tr></table><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If an Active TX gets executed the radio will be released at the time the corresponding MAC acknowledgement was received (or a time- out occurred).</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Background RX will leave the radio in receive state ready to receive asynchronous messages. If the active RX priority is different than the background RX priority, the receive priority will be raised whenever a sync word is detected and only lowered once that packet is filtered or completed and its ACK is sent if one was requested.</p><p class="s5" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a name="bookmark51">5.2.1 Balancing Priorities</a></p><p class="s12" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark67" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">As explained in section </a>7.1 Bluetooth Priorities<span style=" color: #000;">, by default the Bluetooth priority range is mapped into the RAIL priority range 16 - 32. In general, Bluetooth starts out using low priority (32) and dynamically increases the priority up to the maximum (16) as needed if messag- es are not succeeding.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">As described in the previous section, an 802.15.4-based stack such as Zigbee or Connect uses default RAIL priority values of 255 for background RX, 255 for active RX, and 100 for active TX.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As a result of these default RAIL priorities, in an 802.15.4 protocol-Bluetooth multiprotocol application, by default Bluetooth traffic will always take priority over 802.15.4 protocol traffic. This is a good choice for many applications, because Bluetooth traffic has stringent timing requirements, unlike 802.15.4 protocols. However, if Bluetooth traffic load is very high (for example, sending lots of data using a very small connection interval), it is possible for 802.15.4 protocol traffic to be completely blocked from access to the radio because of its lower priority and the very small windows of available radio time left by the Bluetooth traffic.</p><p class="s5" style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note: <span class="p">The following information is currently only applicable to the EmberZNet Zigbee stack. Silicon Labs Connect does not yet have the API needed to change the priorities.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you are developing an 802.15.4-based dynamic multiprotocol application, and it is important for that traffic to succeed in the presence of very high load Bluetooth traffic, you can adjust the default priorities as shown in the table below using the following API:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;"><span class="s13" style=" background-color: #D8D8D8;"> EmberStatus emberRadioSetSchedulerPriorities(const EmberMultiprotocolPriorities *priorities)                    </span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No.</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Default Setting</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Active TX</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">23</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Active RX</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">24</p></td></tr><tr style="height:19pt"><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Background RX</p></td><td style="width:180pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">255</p></td></tr></table><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Because the Bluetooth initially sets its RAIL priority to 32, these 802.15.4 priority settings give 802.15.4 traffic higher priority than Blue- tooth initially, which gives the 802.15.4 protocol a chance to transmit or receive traffic successfully even in the presence of a very high load of Bluetooth traffic. On the other hand, Bluetooth will dynamically increase its priority if it is bumped from the scheduler by the</p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">802.15.4 traffic, up to a high priority of 16. Thus after allowing the 802.15.4 protocol access to the radio initially, Bluetooth will take priority on subsequent retries if necessary.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This approach allows both protocols to compromise on their use of the radio without one being able to completely dominate over the other.</p></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark53">Implementing Multiprotocol with RAIL</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">This chapter offers more information about the particularities of RAIL for users who consume the RAIL API directly to develop propriet- ary protocols. In particular it offers details on how to work with the RAIL APIs to handle specific radio scheduler cases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l28"><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark54">Examples with Background Receive, Yield Radio and State Transition</a><a name="bookmark58">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The fundamentals of the RAIL Multiprotocol priority system is fairly straightforward: a radio event with a higher priority (that is, smaller in number) will always usurp any other radio events with lower priority. However, this topic becomes more complicated when considering state transitions and APIs such as <span class="s6">RAIL_StartRx()</span>, which put the radio into a certain state for an indefinite amount of time. This sec- tion provides some illustrations and examples to demonstrate how these time-unbounded states are handled, and how the application layer can use APIs such as <span class="s6">RAIL_YieldRadio() </span>to control them. The examples are as follows:</p><ul id="l29"><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">State Transitions with a Single Protocol</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">State Transitions with Two Protocols</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">State Transitions with Two Protocols and Monotonically Increasing Priorities</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In these examples, <span class="s6">RAIL_StartTx() </span>is the source of the TX event that interrupts the background RX. Note, however, that these exam- ples are applicable to any radio API except for <span class="s6">RAIL_StartRx(). </span>In other words, the examples are applicable to any API that starts a radio event that is not a background RX.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">These examples illustrate expected multiprotocol behaviors with regard to state transitions. To summarize:</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">In a state transition, the new state is treated as an indefinite extension of the originating event at that same priority until</p><p class="s6" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">RAIL_YieldRadio() <span class="p">is called.</span></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Background RX events are not affected by <span class="s6">RAIL_YieldRadio(). </span>Only <span class="s6">RAIL_Idle() </span>can permanently remove a protocol from the background RX state.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">An event with a higher priority will always usurp an event with lower priority, regardless of any other API calls.</p></li><li><p style="padding-top: 3pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">Only <span class="s6">RAIL_StartRx() </span>receives can be ‘returned to’ from a higher priority event through <span class="s6">RAIL_YieldRadio() </span>or <span class="s6">RAIL_Idle()</span>.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">All radio events other than <span class="s6">RAIL_StartRx() </span>require <span class="s6">RAIL_YieldRadio() </span>in order to end and progress to the next event.</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -9pt;text-align: left;">The call to <span class="s6">RAIL_YieldRadio()</span>cannot be replaced with <span class="s6">RAIL_Idle()</span>. <span class="s6">RAIL_Idle() </span>clears out <i>all </i>events for the given protocol.</p></li></ul><ol id="l30"><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark55">State Transitions with a Single Protocol</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This first example examines the behavior of the radio with a single protocol (that is, where the same <span class="s6">RAIL_Handle_t </span>is used for all radio function calls). The radio starts in RX with an initial call to <span class="s6">RAIL_StartRx()</span>, then moves into a TX with a higher priority call to <span class="s6">RAIL_StartTx()</span>. It is important to note that after the transmit is done, the radio transitions to the state specified by <span class="s6">RAIL_SetTxTransitions()</span>, and it stays in the state indefinitely at the same priority and channel as the TX until <span class="s6">RAIL_YieldRadio() </span>is called. After that, the radio returns to RX, with the initially specified priority and channel.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="338" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_021.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Figure 6.1. State Transitions with Calls to <span class="s14">RAIL_StartTx()</span>, <span class="s14">RAIL_StartRx()</span>, <span class="s14">RAIL_YieldRadio() </span>with a Single Protocol</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">The need to actively yield the radio, and thus the <span class="s6">RAIL_YieldRadio() </span>API were necessary largely due to ACK’ing. The design philoso- phy is that, because both a TX and a received ACK are viewed as part of the same transaction, if a node transmits and expects an ACK it should be able to both transition to RX and continue listening for the ACK as part of the same operation (and therefore same priority) as the original TX. In general, however, RAIL on its own cannot know whether or not an ACK is required. This can depend on other factors, such as packet contents, or other application logic, and so cannot be simply determined by checking whether ACK’ing has been configured with <span class="s6">RAIL_ConfigAutoAck()</span>.Therefore, discretion as to when a radio transaction is complete is left to the application/stack.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">In the case that an ACK is not required, Silicon Labs recommends calling <span class="s6">RAIL_YieldRadio() </span>as part of handling the <span class="s6">RAIL_EVENT_TX_PACKET_SENT </span>event. Doing this causes the green line in the above figure to be minimized down to the interrupt latency time. If the application does expect an ACK, <span class="s6">RAIL_YieldRadio() </span>should be called when the ACK is received or has been deemed to time out.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark56">State Transitions with Two Protocols</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">This scenario is similar to the first scenario regarding state transitions after TX, but introduces another protocol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="620" height="349" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_022.jpg"/></span></p><p class="s5" style="padding-top: 7pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">Figure 6.2. State Transitions with Calls to <span class="s14">RAIL_StartTx()</span>, <span class="s14">RAIL_StartRx()</span>, <span class="s14">RAIL_YieldRadio() </span>With Two Protocols</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this situation, it is important to note that <span class="s6">RAIL_StartRx() </span>can be called at any time during the TX transaction. As long as its priority is less than or equal to the priority of the TX, the RX will not come into effect until the application calls <span class="s6">RAIL_YieldRadio() </span>on Protocol A. When <span class="s6">RAIL_StartRx() </span>is called during the TX, the RX is merely added to the queue of events to be handled.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Another key point is that, although <span class="s6">RAIL_YieldRadio() </span>on Protocol A will transition from TX on Protocol A to RX on Protocol B, a <span class="s6">RAIL_Idle() </span>on Protocol B is required to transition from the RX on Protocol B to the RX on Protocol A. The philosophy here is that Background RXs can’t really be yielded, since the event is never really over. The only way to exit is to stop the Background RX with a call to <span class="s6">RAIL_Idle()</span>.</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark57">State Transitions with Two Protocols and Monotonically Increasing Priorities</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The final scenario is nearly identical to the previous one, except the call to <span class="s6">RAIL_StartRx() </span>on Protocol B is at a higher priority than the call to <span class="s6">RAIL_StartTx() </span>on Protocol A.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="639" height="349" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_023.jpg"/></span></p><p class="s5" style="padding-top: 7pt;padding-left: 234pt;text-indent: -206pt;text-align: left;">Figure 6.3. Example of State Transitions with Calls to <span class="s14">RAIL_StartTx()</span>, <span class="s14">RAIL_StartRx()</span>, <span class="s14">RAIL_YieldRadio() </span>with Two Proto- cols and Different Priorities</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">In this case, since the priority of the second <span class="s6">RAIL_StartRx() </span>is higher than the priority of the call to <span class="s6">RAIL_StartTx()</span>, a call to <span class="s6">RAIL_YieldRadio() </span>is no longer necessary. Because the second <span class="s6">RAIL_StartRx() </span>is at a higher priority, it usurps the <span class="s6">RAIL_StartTx() </span>event, taking control of the radio and removing the TX event from the state. At any time during that RX on Protocol B, <span class="s6">RAIL_Idle() </span>can be called to return to the RX on Protocol A, just as in the previous example.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Note here, that when the application calls <span class="s6">RAIL_Idle() </span>on Protocol B’s RX, the application does not return to the TX Transition of Pro- tocol A. Instead, it goes right to the background RX, even though the application never called <span class="s6">RAIL_Idle() </span>on Protocol A’s TX. For Scheduled radio operations (that is, any radio operation started by an API other than <span class="s6">RAIL_StartRx()</span>), once a radio event is usurped by a higher priority event, it is removed entirely and will not be returned to later. Only Background receives, started by <span class="s6">RAIL_StartRx()</span>, can be maintained in the background and ‘returned to’ through a call to <span class="s6">RAIL_YieldRadio() </span>or <span class="s6">RAIL_Idle()</span>.</p><p style="padding-top: 7pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">To emphasize the difference between <span class="s6">RAIL_YieldRadio() </span>and <span class="s6">RAIL_Idle() </span>it is important to note that, for all these examples, the call to <span class="s6">RAIL_YieldRadio() </span>cannot be replaced with <span class="s6">RAIL_Idle()</span>. <span class="s6">RAIL_Idle() </span>clears out <i>all </i>events for the given protocol – both the Background (that is, started by <span class="s6">RAIL_StartRx()</span>) and Scheduled (that is, started by APIs other than <span class="s6">RAIL_StartRx()</span>) operations. <span class="s6">RAIL_Idle() </span>would indeed still cause the application to exit out of the TX transition state, but it would also clear out the Background RX, causing the application to return to idle, not RX.</p></li></ol></li></ol></li><li><h4 style="padding-top: 7pt;padding-left: 38pt;text-indent: -15pt;text-align: left;"><a name="bookmark59">Implementing Multiprotocol with Bluetooth</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">For details on how the RAIL/Bluetooth light/switch multiprotocol example was implemented, and for more information on developing a multiprotocol application with your own protocol on RAIL, see <i>AN1134: Dynamic Multiprotocol Development with Bluetooth and Propri- etary Protocols on RAIL.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><li><p class="s5" style="padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark60">Bluetooth Priorities</a><a name="bookmark67">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As opposed to Zigbee with statically defined priorities for different operation types, Bluetooth uses a range and offset approach to as- sign all tasks to a given area of the priority spectrum.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 117pt;text-indent: 0pt;text-align: left;"><span><img width="466" height="338" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_024.jpg"/></span></p><p class="s5" style="padding-top: 8pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.1.  Mapping of Bluetooth Priority Range to RAIL Priority Range</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">In this example the Bluetooth priority range, which itself spans from 0 to 255, is mapped to a limited portion of the shared RAIL priority space.</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Unlike Zigbee, Bluetooth has much more stringent timing requirements where missing a given slot may result in a connection terminat- ing. Also Bluetooth has a range of different tasks like (potentially multiple) connections, advertisement and scanning.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Table 7.1.  Different priorities in Bluetooth</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:23pt" cellspacing="0"><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">No.</p></td><td style="width:169pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Name</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Default Setting</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#797777"><p class="s10" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Exit Criterion</p></td></tr><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:169pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connection</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">135 to 0</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Connection Event Ends</p></td></tr><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:169pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Connection Initiation</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">55 to 15</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Initiation Window Ends</p></td></tr><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:169pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Advertisement</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">175 to 127</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Advertisement Event Ends</p></td></tr><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:169pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Scanner</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">191 to 143</p></td><td style="width:214pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s11" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Scan Window Ends</p></td></tr></table><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">In order to handle this the Bluetooth scheduler, whose priorities are mapped to the RAIL radio scheduler, takes into account the follow- ing parameters for each task:</p><ol id="l32"><li><p style="padding-top: 2pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Start Time</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Minimum time</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Maximum time</p></li><li><p style="padding-top: 3pt;padding-left: 40pt;text-indent: -8pt;text-align: left;">Priority</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><span><img width="435" height="100" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_025.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.2.  Bluetooth Task</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">If the start time is moved the total running time is reduced respectively, that is the slack is reduced. Also priorities can be dynamically adjusted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l33"><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark61">Connections</a><a name="bookmark68">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Connections have a relatively high priority. The start time of a connection cannot be moved.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">The priority is dynamically increased by the Bluetooth scheduler the closer the connection gets to the supervision timeout, and reaches the maximum priority close to it. A TX packet in the TX queue also increases the priority of a connection.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark62">Connection Initiation</a></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Connection initiation scans advertisements from target device to establish a connection. It has a higher priority compared to a scanner to allow more robust connection establishment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark63">Advertisements</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Advertisements by default have a lower priority and their start point can be moved. Start time and Maximum time are defined by the advertisement interval.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">If an advertisement could not be sent out, the priority of advertisements increases slowly and is reset back once an advertisement was successfully sent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s5" style="padding-left: 48pt;text-indent: -25pt;text-align: left;"><a name="bookmark64">Scanner</a><a name="bookmark69">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">By default, these tasks have the lowest priority. Start, minimum and maximum time are defined by the scanning interval and window size. Scanning can continue even when interrupted by a higher priority task. If this happens the scan time is accumulated to make sure the desired scan window size is reached at each scanning interval.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">As with advertisements the priority is increased in case the desired scan interval or window size could not be previously met. It is reset back to its initial priority once the scan interval or window size has been met.</p></li></ol></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark65">Example of Bluetooth Scheduler Operation</a></p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">This example illustrates how the Bluetooth scheduler will schedule three connection tasks and one advertisement task, each holding different priorities. In the following figures the gray part indicates the minimum runtime a task requires and the blue part indicates the maximum runtime the task can use and, if flexible, the region where the task can be moved. The following figure shows in the initial setup.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="686" height="138" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_026.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.3.  Task Scheduling Example: Setup</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">As shown below Conn1 is the first task to run as it does not overlap with any higher priority task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="696" height="151" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_027.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.4.  Task Scheduling Example: 1<span class="s15">st </span>Step</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: justify;">Adv1 overlaps with the higher priority Conn2. Adv1 is flexible and therefore gets moved in as illustrated in the following figure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="676" height="147" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_028.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.5.  Task Scheduling Example: 2nd Step</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Conn2 overlaps with higher priority task Conn4. As Conn2 is not flexible the scheduling of Conn2 fails.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="696" height="151" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_029.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 8pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.6.  Task Scheduling Example: 3rd Step</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Conn4 does not overlap with other tasks, therefore Conn1 end is adjusted to stop before Conn4 starts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="706" height="159" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_030.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.7.  Task Scheduling Example: 4th Step</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Finally Adv1 is run. Conn4 is adjusted to end before Adv1 starts</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="619" height="165" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_031.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 139pt;text-indent: 0pt;text-align: center;">Figure 7.8.  Task Scheduling Example: 4th Step</p></li><li><p class="s5" style="padding-top: 8pt;padding-left: 40pt;text-indent: -17pt;text-align: left;"><a name="bookmark66">Modifying Priorities</a></p></li></ol></li></ol><p class="s12" style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark67" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">The &quot;sl_bt_configuration_t&quot; (v3.x)/&quot;gecko_configuration_t&quot; (v2.x) struct contains a field &quot;bluetooth.linklayer_priorities&quot; that is a pointer to the priority configuration. If the pointer is NULL then the stack uses its default priorities as listed in section </a>7.1 Bluetooth Priorities <span style=" color: #000;">above as well as this section.</span></p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">In case the pointer is not null it must point to a struct of priority settings as defined below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">typedef struct{ uint8_t scan_min, uint8_t scan_max, uint8_t adv_min, uint8_t adv_max, uint8_t conn_min, uint8_t conn_max, uint8_t init_min, uint8_t init_max,</p><p class="s6" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">uint8_t threshold_coex, uint8_t rail_mapping_offset, uint8_t rail_mapping_range,</p><p class="s6" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">}gecko_bluetooth_ll_priorities;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">The parameters <span class="s6">scan_min</span>, <span class="s6">can_max</span>, <span class="s6">adv_min</span>, <span class="s6">adv_max</span>, <span class="s6">conn_min</span>, <span class="s6">conn_max</span>, <span class="s6">init_min </span>and <span class="s6">init_max </span><a href="#bookmark68" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">define the minimum and maxi- mum priorities for scanning, advertisement, connections, and initiations respectively. The priorities will move between the min and max boundaries as described in sections </a><span style=" color: #049;">7.1.1 Connections </span><a href="#bookmark69" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">to </a><span style=" color: #049;">7.1.4 Scanner </span>above.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">The parameter <span class="s6">threshold_coex </span>(defaulting at 175) is used to define a priority threshold above which the device will trigger respective GPIOs to be asserted (if configured) to indicate the device’s requirement to take over the frequency band. Refer to <i>AN1028: Bluetooth Coexistence with Wi-Fi </i>for more details on managed coexistence for setups typically consisting of combinations of WLAN and BLE/ Mesh radios.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Finally the parameters <span class="s6">rail_mapping_offset </span>and <span class="s6">rail_mapping_range </span><a href="#bookmark67" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt;">define how the Bluetooth link layer priorities are mapped to the global RAIL radio scheduler priorities. The mapping of these values can be seen in </a><span style=" color: #049;">7.1 Bluetooth Priorities</span>.</p><p style="padding-top: 8pt;padding-left: 22pt;text-indent: 0pt;text-align: justify;">Currently (as of Gecko SDK version 2.2) the default for both <span class="s6">rail_mapping_offset </span>and <span class="s6">rail_mapping_range </span>is 16.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 36pt;text-indent: 0pt;text-align: left;">Smart. Connected. <span class="s16">Energy-Friendly.</span></h2><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="769" height="433" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_032.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_033.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 1pt;text-indent: 0pt;text-align: center;">IoT Portfolio</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/products" class="s18">www.silabs.com/products</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="131" height="131" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_035.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="text-indent: 0pt;text-align: left;">Support &amp; Community</p><p style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;"><a href="http://www.silabs.com/community" class="s18">www.silabs.com/community</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s17" style="padding-top: 5pt;padding-left: 139pt;text-indent: 0pt;text-align: center;">Quality</p><p style="padding-top: 1pt;padding-left: 139pt;text-indent: 0pt;text-align: center;"><a href="http://www.silabs.com/quality" class="s18">www.silabs.com/quality</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Disclaimer</p><p class="s20" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Silicon Labs intends to provide customers with the latest, accurate, and in-depth documentation of all peripherals and modules available for system and software imple- menters using or intending to use the Silicon Labs products. Characterization data, available modules and peripherals, memory sizes and memory addresses refer to each <span class="s21">specific device, and “Typical” parameters provided can and do vary in different applications. Application examples described herein are for illustrative purposes only. Silicon Labs reserves the right to make changes without further notice to the product information, specifications, and descriptions herein, and does not give warranties as to the accuracy or completeness of the included information. Without prior notification, Silicon Labs may update product firmware during the manufacturing process for security or reliability reasons. Such changes will not alter the specifications or the performance of the product. Silicon Labs shall have no liability for the consequences of use of the infor</span>- mation supplied in this document. This document does not imply or expressly grant any license to design or fabricate any integrated circuits. The products are not designed or <span class="s21">authorized to be used within any FDA Class III devices, applications for which FDA premarket approval is required or Life Support Systems without the specific written consent of Silicon Labs. A “Life Support System” is any product or system intended to support or sustain life and/or health, which, if it fails, can be reasonably expected to result in significant personal injury or death. Silicon Labs products are not designed or authorized for military applications. Silicon Labs products shall under no circumstances be used </span>in weapons of mass destruction including (but not limited to) nuclear, biological or chemical weapons, or missiles capable of delivering such weapons. Silicon Labs disclaims <span class="s21">all express and implied warranties and shall not be responsible or liable for any injuries or damages related to use of a Silicon Labs product in such unauthorized applications. </span><b>Note: This content may contain offensive terminology that is now obsolete. Silicon Labs is replacing these terms with inclusive language wherever possible. For more </b><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" style=" color: #4C4D4F; font-family:&quot;Lucida Sans&quot;, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7pt;" target="_blank">information, visit </a><a href="http://www.silabs.com/about-us/inclusive-lexicon-project" class="s24" target="_blank">www.silabs.com/about-us/inclusive-lexicon-project</a></p><p class="s23" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Trademark Information</p><p class="s25" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 117%;text-align: justify;"><span class="s20">Silicon Laboratories Inc.</span>®<span class="s20">, Silicon Laboratories</span>®<span class="s20">, Silicon Labs</span>®<span class="s20">, SiLabs</span>® <span class="s20">and the Silicon Labs logo</span>®<span class="s20">, Bluegiga</span>®<span class="s20">, Bluegiga Logo</span>®<span class="s20">, Clockbuilder</span>®<span class="s20">, CMEMS</span>®<span class="s20">, DSPLL</span>®<span class="s20">, EFM</span>®<span class="s20">, EFM32</span>®<span class="s20">, EFR, Ember</span>®<span class="s21">, Energy Micro, Energy Micro logo and combinations thereof, “the world’s most energy friendly microcontrollers”, Ember</span>®<span class="s20">, EZLink</span>®<span class="s20">, EZRadio</span>®<span class="s20">, EZRadioPRO</span>®<span class="s20">, Gecko</span>®<span class="s20">, Gecko OS, Gecko OS Studio, ISOmodem</span>®<span class="s20">, Precision32</span>®<span class="s20">, ProSLIC</span>®<span class="s20">, Simplicity Studio</span>®<span class="s20">, SiPHY</span>®<span class="s20">, Telegesis, the Telegesis Logo</span>®<span class="s20">, USBXpress</span>® <span class="s20">, Zentri, the Zentri logo and Zentri DMS, Z-Wave</span>®<span class="s20">, and others are trademarks or registered trademarks of Silicon Labs. ARM, CORTEX, Cortex-M3 and THUMB are trademarks or registered trademarks of ARM Hold- ings. Keil is a registered trademark of ARM Limited. Wi-Fi is a registered trademark of the Wi-Fi Alliance. All other products or brand names mentioned herein are trademarks of their respective holders.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="73" alt="image" src="ug305-dynamic-multiprotocol-users-guide/Image_036.png"/></span></p><p class="s23" style="padding-top: 5pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Silicon Laboratories Inc. 400 West Cesar Chavez Austin, TX 78701</p><p class="s23" style="padding-left: 149pt;text-indent: 0pt;line-height: 8pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><h3 href="http://www.silabs.com/">www.silabs.com</h3></p></body></html>
